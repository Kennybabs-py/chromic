/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r={"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=a;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function a(e){if(!t.test(e))return e;var r=[],s=e.replace(/\033\[(\d+)m/g,(function(e,t){var s=n[t];if(s)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===s[0]?s:'<span style="'+s+';">');var a=i[t];return a?(r.pop(),a):""})),a=r.length;return a>0&&(s+=Array(a+1).join("</span>")),s}function o(e){for(var t in n[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],n[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],n[90]="color:#"+e.darkgrey,s){var r=e[s[t]]||"000";n[t]="color:#"+r,t=parseInt(t),n[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),a.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var s in r){var n=e.hasOwnProperty(s)?e[s]:null;if(n){if("reset"===s){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[s];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");t[s]=n}else t[s]=r[s]}o(t)},a.reset=function(){o(r)},a.tags={},Object.defineProperty?(Object.defineProperty(a.tags,"open",{get:function(){return n}}),Object.defineProperty(a.tags,"close",{get:function(){return i}})):(a.tags.open=n,a.tags.close=i),a.reset()},"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}onResize(){}}},"./app/animations/Label.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}}},"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{if(e.isIntersecting){if(this.element.src)return void this.element.classList.add("loaded");this.element.src=this.element.getAttribute("data-src"),this.element.onload=()=>{this.element.classList.add("loaded")}}}))})),this.observer.observe(this.element)}animateIn(){}}},"./app/classes/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js");class i extends n.default{constructor({element:e}){super({element:e}),this.path=e.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=s.default.timeline({paused:!0,duration:.5,ease:"expo.inOut"}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorManager:()=>n});var s=r("./node_modules/gsap/index.js");const n=new class{constructor(){}change({backgroundColor:e,color:t}){s.default.to(document.documentElement,{duration:1.5,backgroundColor:e,color:t})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/events/events.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),a=r.n(i);class o extends(n()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>x});var s=r("./node_modules/lodash/each.js"),n=r.n(s),i=r("./node_modules/lodash/map.js"),a=r.n(i),o=r("./node_modules/gsap/index.js"),l=r("./node_modules/prefix/index.js"),c=r.n(l),u=r("./app/animations/Title.js"),d=r("./app/animations/Label.js"),h=r("./app/animations/Paragraph.js"),p=r("./app/animations/Highlight.js"),f=r("./app/classes/AsyncLoad.js"),_=r("./app/classes/Colors.js");class x{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,animationsTitles:'[data-animation="title"]',animationsLabels:'[data-animation="label"]',animationsParagraphs:'[data-animation="paragraph"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=r,this.onMouseWheelEvent=this.onWheel.bind(this),this.transformPrefix=c()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},n()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))})),this.createAnimations(),this.createPreloaders()}createAnimations(){this.animations=[],this.animationsTitles=a()(this.elements.animationsTitles,(e=>new u.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsLabels=a()(this.elements.animationsLabels,(e=>new d.default({element:e}))),this.animations.push(...this.animationsLabels),this.animationsParagraphs=a()(this.elements.animationsParagraphs,(e=>new h.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsHighlights=a()(this.elements.animationsHighlights,(e=>new p.default({element:e}))),this.animations.push(...this.animationsHighlights)}createPreloaders(){this.preloaders=a()(this.elements.preloaders,(e=>new f.default({element:e})))}show(e){return new Promise((t=>{_.ColorManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),e?this.animateIn=e:(this.animateIn=o.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animateIn.call((e=>{this.addEventListeners(),t()})))}))}hide(){return new Promise((e=>{this.destroy(),this.animateOut=o.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onWheel({pixelY:e}){this.scroll.target+=e}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight)}update(){this.scroll.target=o.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/About/Gallery.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/gsap/index.js"),i=r("./node_modules/lodash/map.js"),a=r.n(i),o=r("./app/components/Canvas/About/Media.js");class l{constructor({element:e,index:t,geometry:r,gl:n,scene:i,sizes:a}){this.element=e,this.elementWrapper=this.element.querySelector(".about__gallery__wrapper"),this.gl=n,this.geometry=r,this.scene=i,this.sizes=a,this.index=t,this.group=new s.Transform,this.scroll={start:0,current:0,target:0,lerp:.1,velocity:1},this.extra={x:0,y:0},this.onResize({sizes:this.sizes}),this.createMedias(),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=a()(this.mediasElements,((e,t)=>new o.default({element:e,index:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){a()(this.medias,(e=>{e.show()}))}hide(){a()(this.medias,(e=>{e.hide()}))}onResize(e){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=e.sizes,this.galleryWidth=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,a()(this.medias,(t=>{t.onResize(e,this.scroll.current)}))}onTouchDown({x:e,y:t}){this.scroll.start=this.scroll.current}onTouchMove({x:e,y:t}){const r=e.start-e.end;this.scroll.target=this.scroll.start-r}onTouchUp({x:e,y:t}){}update(e){const t=.1*(e.current-e.target),r=e.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=t,this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),a()(this.medias,((e,t)=>{const r=e.mesh.scale.x/2+.25;if("left"===this.direction){e.mesh.position.x+r<-this.sizes.width/2&&(e.extra+=this.galleryWidth)}else if("right"===this.direction){e.mesh.position.x-r>this.sizes.width/2&&(e.extra-=this.galleryWidth)}e.update(this.scroll.current)})),this.group.position.y=r*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Program.js"),n=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./node_modules/gsap/index.js"),a=r("./app/shaders/about-vertex.vert"),o=r("./app/shaders/about-fragment.frag");class l{constructor({element:e,index:t,geometry:r,gl:s,scene:n,sizes:i}){this.element=e,this.gl=s,this.geometry=r,this.scene=n,this.sizes=i,this.index=t,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0},this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector("img");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{vertex:a.default,fragment:o.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture},uSpeed:{value:0},uTime:{value:0}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateRotation(){this.mesh.rotation.z=i.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=50*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-50}update(e){this.updateRotation(),this.updateX(e),this.updateY(0),this.program.uniforms.uTime.value+=2e-4,this.program.uniforms.uSpeed.value=1e-5*e}}},"./app/components/Canvas/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/lodash/map.js"),n=r.n(s),i=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./app/components/Canvas/About/Gallery.js");class l{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.group=new i.Transform,this.sizes=r,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes}),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new a.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=n()(this.galleriesElements,((e,t)=>new o.default({element:e,index:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n()(this.galleries,(e=>{e.show()}))}hide(){n()(this.galleries,(e=>{e.hide()}))}onResize(e){n()(this.galleries,(t=>{t.onResize(e)}))}onTouchDown(e){n()(this.galleries,(t=>{t.onTouchDown(e)}))}onTouchMove(e){n()(this.galleries,(t=>{t.onTouchMove(e)}))}onTouchUp(e){n()(this.galleries,(t=>{t.onTouchUp(e)}))}onWheel({pixelY:e,pixelX:t}){}update(e){n()(this.galleries,((t,r)=>{t.update(e)}))}destroy(){n()(this.galleries,(e=>{e.destroy()}))}}},"./app/components/Canvas/Collections/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Program.js"),n=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./node_modules/gsap/index.js"),a=r("./app/shaders/collections-vertex.vert"),o=r("./app/shaders/collections-fragment.frag");class l{constructor({element:e,index:t,geometry:r,gl:s,scene:n,sizes:i}){this.element=e,this.gl=s,this.geometry=r,this.scene=n,this.sizes=i,this.index=t,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector(".collections__gallery__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{vertex:a.default,fragment:o.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){i.default.to(this.opacity,{multiplier:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t.x),this.updateY(t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e,t){this.updateX(e),this.updateY(0);this.mesh.rotation.z=-.02*Math.PI*Math.sin(this.index/1),this.mesh.position.y=.1*Math.sin(this.index/1),this.opacity.target=t===this.index?1:.4,this.opacity.current=i.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current}}},"./app/components/Canvas/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>d});var s=r("./node_modules/lodash/map.js"),n=r.n(s),i=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./node_modules/gsap/index.js"),l=r("./node_modules/prefix/index.js"),c=r.n(l),u=r("./app/components/Canvas/Collections/Media.js");class d{constructor({gl:e,scene:t,sizes:r,transition:s}){this.id="collections",this.gl=e,this.scene=t,this.group=new i.Transform,this.sizes=r,this.transition=s,this.transformPrefix=c()("transform"),this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.collectionArticles=document.querySelectorAll(".collections__article"),this.collectionTitles=document.querySelector(".collections__titles"),this.collectionArticlesActive="collections__article--active",this.mediaElements=document.querySelectorAll(".collections__gallery__media"),this.x={current:0,target:0,lerp:.1,direction:null},this.scroll={start:0,current:0,target:0,lerp:.1,limit:0,velocity:1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){this.medias=n()(this.mediaElements,((e,t)=>new u.default({element:e,index:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){if(this.transition){const{src:e}=this.transition.mesh.program.uniforms.tMap.value.image,t=window.TEXTURES[e],r=this.medias.find((e=>e.texture===t)),s=-r.bounds.left-r.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({rotation:r.mesh.rotation,scale:r.mesh.scale,position:{x:0,y:r.mesh.position.y,z:0}},(e=>{r.opacity.multiplier=1,n()(this.medias,(e=>{e!==r&&e.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=s}))}else n()(this.medias,(e=>{e.show()}))}hide(){n()(this.medias,(e=>{e.hide()}))}onResize(e){this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.sizes=e.sizes,this.scroll.last=this.scroll.target=0,this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth,n()(this.medias,(t=>{t.onResize(e,this.scroll)}))}onTouchDown({x:e,y:t}){this.scroll.last=this.scroll.current}onTouchMove({x:e}){const t=e.start-e.end;this.scroll.target=this.scroll.last-t}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.scroll.target+=e}onChangeCurrent(e){this.index=e;const t=parseInt(this.mediaElements[this.index].getAttribute("data-collection-index"));n()(this.collectionArticles,((e,r)=>{r===t?e.classList.add(this.collectionArticlesActive):e.classList.remove(this.collectionArticlesActive)})),this.collectionTitles.style[this.transformPrefix]=`translateY(-${25*t}%)  translate(-50%,-50%) rotate(-90deg)`}update(){this.scroll.target=o.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(-${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const e=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==e&&this.onChangeCurrent(e),n()(this.medias,((e,t)=>{e.update(this.scroll.current,this.index)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var s=r("./node_modules/ogl/src/extras/Plane.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),a=r("./node_modules/gsap/index.js"),o=r("./app/shaders/plane-vertex.vert"),l=r("./app/shaders/plane-fragment.frag");class c{constructor({gl:e,scene:t,sizes:r,transition:n}){this.id="detail",this.element=document.querySelector(".detail__media__image"),this.gl=e,this.scene=t,this.sizes=r,this.transition=n,this.geometry=new s.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.show()}createTexture(){const e=this.element.getAttribute("data-src");this.texture=window.TEXTURES[e]}createProgram(){this.program=new n.Program(this.gl,{vertex:o.default,fragment:l.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.rotation.z=.01*Math.PI,this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(e=>{this.program.uniforms.uAlpha.value=1})):a.default.to(this.program.uniforms.uAlpha,{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e){this.createBounds(e),this.updateX(),this.updateY()}onTouchDown(e){}onTouchMove(e){}onTouchUp(e){}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(){this.updateX(),this.updateY()}destroy(){this.scene.removeChild(this.mesh)}}},"./app/components/Canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Program.js"),n=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./node_modules/gsap/index.js"),a=r("./app/shaders/home-vertex.vert"),o=r("./app/shaders/home-fragment.frag");class l{constructor({element:e,index:t,geometry:r,gl:s,scene:n,sizes:i}){this.element=e,this.gl=s,this.geometry=r,this.scene=n,this.sizes=i,this.index=t,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0},this.createBounds({sizes:this.sizes})}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{vertex:a.default,fragment:o.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t.x),this.updateY(t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e,t){this.updateX(e.x),this.updateY(e.y),this.program.uniforms.uSpeed.value=t}}},"./app/components/Canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var s=r("./node_modules/lodash/map.js"),n=r.n(s),i=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./node_modules/gsap/index.js"),l=(r("./node_modules/normalize-wheel/index.js"),r("./app/components/Canvas/Home/Media.js"));class c{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.scene=t,this.group=new i.Transform,this.sizes=r,this.galleryElement=document.querySelector(".home__gallery"),this.mediaElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1,direction:null},this.y={current:0,target:0,lerp:.1,direction:null},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new a.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=n()(this.mediaElements,((e,t)=>new l.default({element:e,index:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n()(this.medias,(e=>{e.show()}))}hide(){n()(this.medias,(e=>{e.hide()}))}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},n()(this.medias,(t=>{t.onResize(e,this.scroll)}))}onTouchDown({x:e,y:t}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:t}){const r=e.start-e.end,s=t.start-t.end;this.x.target=this.scrollCurrent.x-r,this.y.target=this.scrollCurrent.y-s}onTouchUp({x:e,y:t}){}onWheel({pixelY:e,pixelX:t}){this.x.target+=t,this.y.target+=e}update(){const e=this.x.target-this.x.current,t=this.y.target-this.y.current;this.speed.target=.001*Math.sqrt(e*e+t*t),this.speed.current=o.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=o.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=o.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,n()(this.medias,((e,t)=>{const r=e.mesh.scale.x/2,s=.6*this.sizes.width;if("left"===this.x.direction){e.mesh.position.x+r<-s&&(e.extra.x+=this.gallerySizes.width,e.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){e.mesh.position.x-r>s&&(e.extra.x-=this.gallerySizes.width,e.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}const n=e.mesh.scale.y/2,i=.6*this.sizes.height;if("top"===this.y.direction){e.mesh.position.y+n<-i&&(e.extra.y+=this.gallerySizes.height,e.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){e.mesh.position.y-n>i&&(e.extra.y-=this.gallerySizes.height,e.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}e.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var s=r("./node_modules/ogl/src/extras/Plane.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),a=r("./node_modules/gsap/index.js"),o=r("./app/shaders/plane-vertex.vert"),l=r("./app/shaders/plane-fragment.frag");r("./app/components/Canvas/Detail/index.js"),r("./app/components/Canvas/Collections/index.js");class c{constructor({collections:e,details:t,url:r,gl:n,scene:i,sizes:a}){this.collections=e,this.details=t,this.gl=n,this.scene=i,this.sizes=a,this.url=r,this.geometry=new s.Plane(this.gl)}createProgram(e){this.program=new n.Program(this.gl,{vertex:o.default,fragment:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=e.position.z+.01,this.mesh.rotation.x=e.rotation.x,this.mesh.rotation.y=e.rotation.y,this.mesh.rotation.z=e.rotation.z,this.mesh.setParent(this.scene)}setElement(e){if("collections"===e.id){const{index:t,medias:r}=e,s=r[t];this.createProgram(s.texture),this.createMesh(s.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e.mesh),this.transition="collections"}animate(e,t){const r=a.default.timeline();r.to(this.mesh.scale,{x:e.scale.x,y:e.scale.y,z:e.scale.z,duration:1.5,ease:"expo.inOut"},0),r.to(this.mesh.position,{x:e.position.x,y:e.position.y,z:e.position.z,duration:1.5,ease:"expo.inOut"},0),r.to(this.mesh.rotation,{x:e.rotation.x,y:e.rotation.y,z:e.rotation.z,duration:1.5,ease:"expo.inOut"},0),r.call((()=>{t()})),r.call((()=>{this.scene.removeChild(this.mesh)}),null,"+=0.2")}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>d});var s=r("./node_modules/ogl/src/core/Renderer.js"),n=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),a=r("./app/components/Canvas/Home/index.js"),o=r("./app/components/Canvas/About/index.js"),l=r("./app/components/Canvas/Collections/index.js"),c=r("./app/components/Canvas/Detail/index.js"),u=r("./app/components/Canvas/Transition.js");class d{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new c.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(e,t){this.isFromCollectionstToDetail="collections"===this.template&&t.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&t.indexOf("collections")>-1,this.home&&this.home.hide(),this.about&&this.about.hide(),this.collections&&this.collections.hide(),this.detail&&this.detail.hide(),(this.isFromCollectionstToDetail||this.isFromDetailToCollections)&&(this.transition=new u.default({url:t,gl:this.gl,scene:this.scene,sizes:this.sizes}),this.transition.setElement(this.collections||this.detail))}onChangeEnd(e){"home"===e?this.createHome():this.home&&this.destroyHome(),"about"===e?this.createAbout():this.about&&this.destroyAbout(),"collections"===e?this.createCollections():this.collections&&this.destroyCollections(),"detail"===e?this.createDetail():this.detail&&this.destroyDetail(),this.template=e}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*Math.PI/180,t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r},this.home&&this.home.onResize({sizes:this.sizes}),this.about&&this.about.onResize({sizes:this.sizes}),this.collections&&this.collections.onResize({sizes:this.sizes}),this.detail&&this.detail.onResize({sizes:this.sizes})}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.home&&this.home.onTouchDown({x:this.x.start,y:this.y.start}),this.about&&this.about.onTouchDown({x:this.x.start,y:this.y.start}),this.collections&&this.collections.onTouchDown({x:this.x.start,y:this.y.start}),this.detail&&this.detail.onTouchDown({x:this.x.start,y:this.y.start})}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r,this.home&&this.home.onTouchMove({x:this.x,y:this.y}),this.about&&this.about.onTouchMove({x:this.x,y:this.y}),this.collections&&this.collections.onTouchMove({x:this.x,y:this.y}),this.detail&&this.detail.onTouchMove({x:this.x,y:this.y})}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,r=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=r,this.home&&this.home.onTouchUp({x:this.x,y:this.y}),this.about&&this.about.onTouchUp({x:this.x,y:this.y}),this.collections&&this.collections.onTouchUp({x:this.x,y:this.y}),this.detail&&this.detail.onTouchUp({x:this.x,y:this.y})}onWheel(e){this.home&&this.home.onWheel(e),this.collections&&this.collections.onWheel(e)}update(e){this.home&&this.home.update(),this.about&&this.about.update(e),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.renderer.render({camera:this.camera,scene:this.scene}),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js"),i=r("./app/utils/colors.js");class a extends n.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigaton__list__link"}}),this.onChange(e)}onChange(e){"about"===e?(s.default.to(this.element,{color:i.COLOR_BRIGHT_GRAY,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(s.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Texture.js"),i=r("./app/classes/Component.js"),a=r("./app/utils/text.js");class o extends i.default{constructor({canvas:e}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=e,window.TEXTURES={},(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new n.Texture(this.canvas.gl,{generateMipmaps:!1}),r=new window.Image;r.crossOrigin="anonymous",r.src=e,r.onload=()=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=s.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{autoAlpha:0,y:"100%",duration:1.5,ease:"expo.out",stagger:.1}),this.animateOut.to(this.elements.numberText,{autoAlpha:0,y:"100%",duration:1.5,ease:"expo.out",stagger:.1},"-=1.4"),this.animateOut.to(this.element,{autoAlpha:0,duration:1},"-=1"),this.animateOut.call((()=>this.destroy()))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/lodash/each.js"),n=r.n(s),i=r("./node_modules/normalize-wheel/index.js"),a=r.n(i),o=r("./app/components/Canvas/index.js"),l=r("./app/components/Preloader.js"),c=r("./app/components/Navigation.js"),u=r("./app/pages/Home/index.js"),d=r("./app/pages/About/index.js"),h=r("./app/pages/Collections/index.js"),p=r("./app/pages/Detail/index.js");function f(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x2160de=_0x21a3;function _0x3632(){var _0x56982f=['default','send','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','_HTMLAllCollection','expressionsToEvaluate','host','','versions','perf_hooks','positiveInfinity','127.0.0.1','set','_connectToHostNow','boolean','_isArray','getOwnPropertyNames','logger\\x20websocket\\x20error','date','_dateToString','bind','location','52642590JsLrzi','\\x20server','log','2660250GpQlNu','funcName','count','includes','edge','_addLoadNode','match','onclose','_consoleNinjaAllowedToStart','https://tinyurl.com/37x8b79t','onmessage','rootExpression','node','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_capIfString','_objectToString','concat','_p_name','next.js','onerror','undefined','negativeInfinity','toLowerCase','_setNodeExpressionPath','slice','message','astro','_connected','toUpperCase','catch','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_quotedRegExp','unknown','unshift','autoExpandPropertyCount','_type','2793RMykfg','stringify','current','hasOwnProperty','webpack','_getOwnPropertySymbols','isExpressionToEvaluate','then','_getOwnPropertyDescriptor','unref','_isSet','onopen','_hasMapOnItsPath','hits','_isUndefined','_hasSymbolPropertyOnItsPath','valueOf','pop','2570814XHvPai','autoExpandMaxDepth','null','_propertyName','[object\\x20Date]','process','totalStrLength','cappedElements','setter',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"MacBookPro\",\"192.168.0.196\"],'_allowedToSend','port','forEach','RegExp','ws://','_regExpToString','root_exp_id','remix','_ninjaIgnoreNextError','function','[object\\x20Set]','bigint','_isPrimitiveType','1.0.0','_WebSocketClass','url','[object\\x20Map]','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','prototype','global','getWebSocketClass','_sortProps','[object\\x20Array]','elapsed','_treeNodePropertiesBeforeFullValue','object','String','_inNextEdge','_addProperty','sortProps','eventReceivedCallback','origin','push','stackTraceLimit','symbol','Set','_connectAttemptCount','name','toString','_addFunctionsNode','_isPrimitiveWrapperType','reduceLimits','_treeNodePropertiesAfterFullValue','_socket','warn','_hasSetOnItsPath','_sendErrorMessage','_numberRegExp','props','index','autoExpand','\\x20browser','_setNodeLabel','constructor','path','_setNodePermissions','indexOf','substr','split','args','_cleanNode','NEGATIVE_INFINITY','_addObjectProperty','value','disabledLog','noFunctions','reload','parent','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','_property','getter','_processTreeNodeResult','parse','elements','type','_setNodeQueryPath','depth','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','125320pkibkH','1731964203213','now','join','array','performance','call','dockerizedApp','fromCharCode','data','getOwnPropertyDescriptor','_additionalMetadata','number','_Symbol','Number','get','_reconnectTimeout','pathToFileURL','strLength','10AfgneC','cappedProps','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','string','__es'+'Module','length','Boolean','_isNegativeZero','_webSocketErrorDocsLink','...','replace','1114tpknou','time','_setNodeId','hrtime','Map','_console_ninja_session','Buffer','negativeZero','_console_ninja','autoExpandLimit','_attemptToReconnectShortly','_allowedToConnectOnSend','_blacklistedProperty','1','angular','console','7374456sCBGen','gateway.docker.internal','HTMLAllCollection','nan','','hostname','expId','create','capped','serialize','stack','_ws','_setNodeExpandableState','_p_','NEXT_RUNTIME','isArray','endsWith','_connecting','defineProperty','_undefined','autoExpandPreviousObjects','161kAIGOe',\"/Users/mac/.vscode/extensions/wallabyjs.console-ninja-1.0.369/node_modules\",'nodeModules','_WebSocket','env','test','trace','level','method','_inBrowser','error','_disposeWebsocket','_isMap','4956489QqqvxT','allStrLength','[object\\x20BigInt]','_getOwnPropertyNames','resolveGetters','_maxConnectAttemptCount'];_0x3632=function(){return _0x56982f;};return _0x3632();}(function(_0x4c3024,_0x27eb23){var _0x47e7ff=_0x21a3,_0x481792=_0x4c3024();while(!![]){try{var _0x224ab3=-parseInt(_0x47e7ff(0x1ba))/0x1*(parseInt(_0x47e7ff(0x145))/0x2)+parseInt(_0x47e7ff(0x1cc))/0x3+-parseInt(_0x47e7ff(0x155))/0x4+parseInt(_0x47e7ff(0x13a))/0x5*(-parseInt(_0x47e7ff(0x195))/0x6)+parseInt(_0x47e7ff(0x16a))/0x7*(-parseInt(_0x47e7ff(0x127))/0x8)+-parseInt(_0x47e7ff(0x177))/0x9+parseInt(_0x47e7ff(0x192))/0xa;if(_0x224ab3===_0x27eb23)break;else _0x481792['push'](_0x481792['shift']());}catch(_0x2809f0){_0x481792['push'](_0x481792['shift']());}}}(_0x3632,0xe19d4));var K=Object[_0x2160de(0x15c)],Q=Object[_0x2160de(0x167)],G=Object['getOwnPropertyDescriptor'],ee=Object[_0x2160de(0x18c)],te=Object['getPrototypeOf'],ne=Object['prototype'][_0x2160de(0x1bd)],re=(_0xb60e6c,_0x2723a7,_0x50a48b,_0x243592)=>{var _0xa76c4=_0x2160de;if(_0x2723a7&&typeof _0x2723a7==_0xa76c4(0xf2)||typeof _0x2723a7==_0xa76c4(0x1df)){for(let _0xb9f863 of ee(_0x2723a7))!ne[_0xa76c4(0x12d)](_0xb60e6c,_0xb9f863)&&_0xb9f863!==_0x50a48b&&Q(_0xb60e6c,_0xb9f863,{'get':()=>_0x2723a7[_0xb9f863],'enumerable':!(_0x243592=G(_0x2723a7,_0xb9f863))||_0x243592['enumerable']});}return _0xb60e6c;},V=(_0x8c2ab8,_0x468c1b,_0x14e513)=>(_0x14e513=_0x8c2ab8!=null?K(te(_0x8c2ab8)):{},re(_0x468c1b||!_0x8c2ab8||!_0x8c2ab8[_0x2160de(0x13e)]?Q(_0x14e513,_0x2160de(0x17d),{'value':_0x8c2ab8,'enumerable':!0x0}):_0x14e513,_0x8c2ab8)),Z=class{constructor(_0x1d2e23,_0xdab60e,_0x40e94c,_0x142eb1,_0x2141db,_0xa205f9){var _0x5cced4=_0x2160de,_0x5c108c,_0x2a03dc,_0x184e43,_0x3bd2e9;this['global']=_0x1d2e23,this[_0x5cced4(0x182)]=_0xdab60e,this[_0x5cced4(0x1d7)]=_0x40e94c,this['nodeModules']=_0x142eb1,this[_0x5cced4(0x12e)]=_0x2141db,this['eventReceivedCallback']=_0xa205f9,this[_0x5cced4(0x1d6)]=!0x0,this[_0x5cced4(0x150)]=!0x0,this[_0x5cced4(0x1b0)]=!0x1,this[_0x5cced4(0x166)]=!0x1,this[_0x5cced4(0xf4)]=((_0x2a03dc=(_0x5c108c=_0x1d2e23[_0x5cced4(0x1d1)])==null?void 0x0:_0x5c108c[_0x5cced4(0x16e)])==null?void 0x0:_0x2a03dc[_0x5cced4(0x163)])===_0x5cced4(0x199),this[_0x5cced4(0x173)]=!((_0x3bd2e9=(_0x184e43=this[_0x5cced4(0x1e9)][_0x5cced4(0x1d1)])==null?void 0x0:_0x184e43[_0x5cced4(0x184)])!=null&&_0x3bd2e9[_0x5cced4(0x1a1)])&&!this[_0x5cced4(0xf4)],this[_0x5cced4(0x1e4)]=null,this['_connectAttemptCount']=0x0,this[_0x5cced4(0x17c)]=0x14,this[_0x5cced4(0x142)]=_0x5cced4(0x19e),this[_0x5cced4(0x107)]=(this[_0x5cced4(0x173)]?_0x5cced4(0x13c):_0x5cced4(0x1e7))+this[_0x5cced4(0x142)];}async[_0x2160de(0x1ea)](){var _0x128a49=_0x2160de,_0x3bc6cb,_0x2c9200;if(this['_WebSocketClass'])return this[_0x128a49(0x1e4)];let _0x1adb57;if(this['_inBrowser']||this['_inNextEdge'])_0x1adb57=this['global']['WebSocket'];else{if((_0x3bc6cb=this[_0x128a49(0x1e9)]['process'])!=null&&_0x3bc6cb[_0x128a49(0x16d)])_0x1adb57=(_0x2c9200=this[_0x128a49(0x1e9)][_0x128a49(0x1d1)])==null?void 0x0:_0x2c9200[_0x128a49(0x16d)];else try{let _0x31283e=await import(_0x128a49(0x10f));_0x1adb57=(await import((await import(_0x128a49(0x1e5)))[_0x128a49(0x138)](_0x31283e[_0x128a49(0x12a)](this[_0x128a49(0x16c)],'ws/index.js'))[_0x128a49(0xff)]()))[_0x128a49(0x17d)];}catch{try{_0x1adb57=require(require(_0x128a49(0x10f))[_0x128a49(0x12a)](this['nodeModules'],'ws'));}catch{throw new Error(_0x128a49(0x126));}}}return this[_0x128a49(0x1e4)]=_0x1adb57,_0x1adb57;}[_0x2160de(0x189)](){var _0x3ea5f7=_0x2160de;this[_0x3ea5f7(0x166)]||this['_connected']||this[_0x3ea5f7(0xfd)]>=this[_0x3ea5f7(0x17c)]||(this[_0x3ea5f7(0x150)]=!0x1,this[_0x3ea5f7(0x166)]=!0x0,this[_0x3ea5f7(0xfd)]++,this[_0x3ea5f7(0x160)]=new Promise((_0x1cdfe6,_0x393076)=>{var _0x329328=_0x3ea5f7;this[_0x329328(0x1ea)]()['then'](_0x59ec54=>{var _0x1ebfd9=_0x329328;let _0x5a5b17=new _0x59ec54(_0x1ebfd9(0x1da)+(!this['_inBrowser']&&this[_0x1ebfd9(0x12e)]?_0x1ebfd9(0x156):this['host'])+':'+this[_0x1ebfd9(0x1d7)]);_0x5a5b17['onerror']=()=>{var _0x5e8d60=_0x1ebfd9;this[_0x5e8d60(0x1d6)]=!0x1,this[_0x5e8d60(0x175)](_0x5a5b17),this[_0x5e8d60(0x14f)](),_0x393076(new Error(_0x5e8d60(0x18d)));},_0x5a5b17['onopen']=()=>{var _0xbd38a2=_0x1ebfd9;this[_0xbd38a2(0x173)]||_0x5a5b17[_0xbd38a2(0x104)]&&_0x5a5b17[_0xbd38a2(0x104)]['unref']&&_0x5a5b17[_0xbd38a2(0x104)][_0xbd38a2(0x1c3)](),_0x1cdfe6(_0x5a5b17);},_0x5a5b17[_0x1ebfd9(0x19c)]=()=>{var _0x295279=_0x1ebfd9;this[_0x295279(0x150)]=!0x0,this[_0x295279(0x175)](_0x5a5b17),this['_attemptToReconnectShortly']();},_0x5a5b17[_0x1ebfd9(0x19f)]=_0x478321=>{var _0x210356=_0x1ebfd9;try{if(!(_0x478321!=null&&_0x478321['data'])||!this[_0x210356(0xf7)])return;let _0x23117d=JSON[_0x210356(0x121)](_0x478321[_0x210356(0x130)]);this[_0x210356(0xf7)](_0x23117d[_0x210356(0x172)],_0x23117d[_0x210356(0x114)],this[_0x210356(0x1e9)],this[_0x210356(0x173)]);}catch{}};})[_0x329328(0x1c1)](_0x1701d9=>(this[_0x329328(0x1b0)]=!0x0,this['_connecting']=!0x1,this['_allowedToConnectOnSend']=!0x1,this[_0x329328(0x1d6)]=!0x0,this['_connectAttemptCount']=0x0,_0x1701d9))[_0x329328(0x1b2)](_0x1c88b0=>(this[_0x329328(0x1b0)]=!0x1,this['_connecting']=!0x1,console[_0x329328(0x105)](_0x329328(0x1a2)+this['_webSocketErrorDocsLink']),_0x393076(new Error(_0x329328(0x1b4)+(_0x1c88b0&&_0x1c88b0['message'])))));}));}[_0x2160de(0x175)](_0x3db513){var _0x36824d=_0x2160de;this[_0x36824d(0x1b0)]=!0x1,this[_0x36824d(0x166)]=!0x1;try{_0x3db513[_0x36824d(0x19c)]=null,_0x3db513[_0x36824d(0x1a8)]=null,_0x3db513[_0x36824d(0x1c5)]=null;}catch{}try{_0x3db513['readyState']<0x2&&_0x3db513['close']();}catch{}}[_0x2160de(0x14f)](){var _0x6bcb9d=_0x2160de;clearTimeout(this[_0x6bcb9d(0x137)]),!(this[_0x6bcb9d(0xfd)]>=this[_0x6bcb9d(0x17c)])&&(this[_0x6bcb9d(0x137)]=setTimeout(()=>{var _0x577db9=_0x6bcb9d,_0x5cbaa6;this[_0x577db9(0x1b0)]||this[_0x577db9(0x166)]||(this['_connectToHostNow'](),(_0x5cbaa6=this['_ws'])==null||_0x5cbaa6[_0x577db9(0x1b2)](()=>this[_0x577db9(0x14f)]()));},0x1f4),this[_0x6bcb9d(0x137)][_0x6bcb9d(0x1c3)]&&this[_0x6bcb9d(0x137)][_0x6bcb9d(0x1c3)]());}async[_0x2160de(0x17e)](_0x12b796){var _0x22327c=_0x2160de;try{if(!this[_0x22327c(0x1d6)])return;this[_0x22327c(0x150)]&&this['_connectToHostNow'](),(await this[_0x22327c(0x160)])[_0x22327c(0x17e)](JSON['stringify'](_0x12b796));}catch(_0x57337a){console[_0x22327c(0x105)](this[_0x22327c(0x107)]+':\\x20'+(_0x57337a&&_0x57337a['message'])),this['_allowedToSend']=!0x1,this[_0x22327c(0x14f)]();}}};function q(_0x1f963b,_0x263322,_0x3f1b38,_0x43c8cd,_0xf6067d,_0xf3e79,_0x473826,_0x504ee4=ie){var _0x65040b=_0x2160de;let _0x5e33cb=_0x3f1b38[_0x65040b(0x113)](',')['map'](_0x577e64=>{var _0x5cfeab=_0x65040b,_0x1eeeb0,_0x5befcf,_0x2ed490,_0x451332;try{if(!_0x1f963b[_0x5cfeab(0x14a)]){let _0x213503=((_0x5befcf=(_0x1eeeb0=_0x1f963b['process'])==null?void 0x0:_0x1eeeb0[_0x5cfeab(0x184)])==null?void 0x0:_0x5befcf[_0x5cfeab(0x1a1)])||((_0x451332=(_0x2ed490=_0x1f963b[_0x5cfeab(0x1d1)])==null?void 0x0:_0x2ed490[_0x5cfeab(0x16e)])==null?void 0x0:_0x451332[_0x5cfeab(0x163)])===_0x5cfeab(0x199);(_0xf6067d===_0x5cfeab(0x1a7)||_0xf6067d===_0x5cfeab(0x1dd)||_0xf6067d===_0x5cfeab(0x1af)||_0xf6067d===_0x5cfeab(0x153))&&(_0xf6067d+=_0x213503?_0x5cfeab(0x193):_0x5cfeab(0x10c)),_0x1f963b[_0x5cfeab(0x14a)]={'id':+new Date(),'tool':_0xf6067d},_0x473826&&_0xf6067d&&!_0x213503&&console[_0x5cfeab(0x194)](_0x5cfeab(0x17f)+(_0xf6067d['charAt'](0x0)[_0x5cfeab(0x1b1)]()+_0xf6067d['substr'](0x1))+',',_0x5cfeab(0x1b3),'see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.');}let _0x80b835=new Z(_0x1f963b,_0x263322,_0x577e64,_0x43c8cd,_0xf3e79,_0x504ee4);return _0x80b835[_0x5cfeab(0x17e)][_0x5cfeab(0x190)](_0x80b835);}catch(_0x1cb024){return console[_0x5cfeab(0x105)](_0x5cfeab(0x11d),_0x1cb024&&_0x1cb024['message']),()=>{};}});return _0x183d11=>_0x5e33cb[_0x65040b(0x1d8)](_0x404b4f=>_0x404b4f(_0x183d11));}function ie(_0x5a5d6e,_0x3ab594,_0x3d399e,_0x309169){var _0x2b0214=_0x2160de;_0x309169&&_0x5a5d6e===_0x2b0214(0x11b)&&_0x3d399e[_0x2b0214(0x191)][_0x2b0214(0x11b)]();}function _0x21a3(_0x3c4fd7,_0x245abe){var _0x3632c8=_0x3632();return _0x21a3=function(_0x21a3d1,_0x24d2de){_0x21a3d1=_0x21a3d1-0xee;var _0x3406f5=_0x3632c8[_0x21a3d1];return _0x3406f5;},_0x21a3(_0x3c4fd7,_0x245abe);}function B(_0x479ade){var _0x55e4b6=_0x2160de,_0x1db6df,_0x2675fc;let _0x253e83=function(_0x461cb,_0x51aef7){return _0x51aef7-_0x461cb;},_0x24648b;if(_0x479ade[_0x55e4b6(0x12c)])_0x24648b=function(){var _0x28c428=_0x55e4b6;return _0x479ade[_0x28c428(0x12c)][_0x28c428(0x129)]();};else{if(_0x479ade[_0x55e4b6(0x1d1)]&&_0x479ade[_0x55e4b6(0x1d1)][_0x55e4b6(0x148)]&&((_0x2675fc=(_0x1db6df=_0x479ade['process'])==null?void 0x0:_0x1db6df[_0x55e4b6(0x16e)])==null?void 0x0:_0x2675fc[_0x55e4b6(0x163)])!==_0x55e4b6(0x199))_0x24648b=function(){var _0x44dcc4=_0x55e4b6;return _0x479ade[_0x44dcc4(0x1d1)][_0x44dcc4(0x148)]();},_0x253e83=function(_0x1e11c5,_0xa37d54){return 0x3e8*(_0xa37d54[0x0]-_0x1e11c5[0x0])+(_0xa37d54[0x1]-_0x1e11c5[0x1])/0xf4240;};else try{let {performance:_0x568fd6}=require(_0x55e4b6(0x185));_0x24648b=function(){var _0x5f57ed=_0x55e4b6;return _0x568fd6[_0x5f57ed(0x129)]();};}catch{_0x24648b=function(){return+new Date();};}}return{'elapsed':_0x253e83,'timeStamp':_0x24648b,'now':()=>Date['now']()};}function H(_0x10dccb,_0x1e80af,_0x352174){var _0x4997ac=_0x2160de,_0x5b1ba2,_0x11f9c0,_0x27ac93,_0x36b7af,_0x2b4871;if(_0x10dccb[_0x4997ac(0x19d)]!==void 0x0)return _0x10dccb['_consoleNinjaAllowedToStart'];let _0x392b63=((_0x11f9c0=(_0x5b1ba2=_0x10dccb[_0x4997ac(0x1d1)])==null?void 0x0:_0x5b1ba2[_0x4997ac(0x184)])==null?void 0x0:_0x11f9c0[_0x4997ac(0x1a1)])||((_0x36b7af=(_0x27ac93=_0x10dccb[_0x4997ac(0x1d1)])==null?void 0x0:_0x27ac93['env'])==null?void 0x0:_0x36b7af['NEXT_RUNTIME'])===_0x4997ac(0x199);function _0x2d8e02(_0x1544db){var _0x36dbda=_0x4997ac;if(_0x1544db['startsWith']('/')&&_0x1544db[_0x36dbda(0x165)]('/')){let _0x4974fb=new RegExp(_0x1544db[_0x36dbda(0x1ad)](0x1,-0x1));return _0x1401d3=>_0x4974fb[_0x36dbda(0x16f)](_0x1401d3);}else{if(_0x1544db[_0x36dbda(0x198)]('*')||_0x1544db[_0x36dbda(0x198)]('?')){let _0x2cb3b9=new RegExp('^'+_0x1544db[_0x36dbda(0x144)](/\\./g,String[_0x36dbda(0x12f)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x320b97=>_0x2cb3b9[_0x36dbda(0x16f)](_0x320b97);}else return _0x3d785b=>_0x3d785b===_0x1544db;}}let _0x2bda5a=_0x1e80af['map'](_0x2d8e02);return _0x10dccb['_consoleNinjaAllowedToStart']=_0x392b63||!_0x1e80af,!_0x10dccb[_0x4997ac(0x19d)]&&((_0x2b4871=_0x10dccb[_0x4997ac(0x191)])==null?void 0x0:_0x2b4871[_0x4997ac(0x15a)])&&(_0x10dccb[_0x4997ac(0x19d)]=_0x2bda5a['some'](_0x45fe63=>_0x45fe63(_0x10dccb[_0x4997ac(0x191)][_0x4997ac(0x15a)]))),_0x10dccb[_0x4997ac(0x19d)];}function X(_0x3e77c0,_0x368502,_0x3d2d4c,_0x391fb4){var _0x144a79=_0x2160de;_0x3e77c0=_0x3e77c0,_0x368502=_0x368502,_0x3d2d4c=_0x3d2d4c,_0x391fb4=_0x391fb4;let _0x83c743=B(_0x3e77c0),_0x47a395=_0x83c743[_0x144a79(0xf0)],_0x24d130=_0x83c743['timeStamp'];class _0x4e138c{constructor(){var _0x50df0f=_0x144a79;this['_keyStrRegExp']=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x50df0f(0x108)]=/^(0|[1-9][0-9]*)$/,this[_0x50df0f(0x1b5)]=/'([^\\\\']|\\\\')*'/,this[_0x50df0f(0x168)]=_0x3e77c0[_0x50df0f(0x1a9)],this[_0x50df0f(0x180)]=_0x3e77c0[_0x50df0f(0x157)],this[_0x50df0f(0x1c2)]=Object[_0x50df0f(0x131)],this[_0x50df0f(0x17a)]=Object[_0x50df0f(0x18c)],this[_0x50df0f(0x134)]=_0x3e77c0['Symbol'],this[_0x50df0f(0x1db)]=RegExp[_0x50df0f(0x1e8)]['toString'],this[_0x50df0f(0x18f)]=Date['prototype'][_0x50df0f(0xff)];}[_0x144a79(0x15e)](_0x5416d7,_0x116012,_0x4064e,_0x5d249a){var _0x276822=_0x144a79,_0x49e6d5=this,_0x57b7ae=_0x4064e[_0x276822(0x10b)];function _0x3b3f6a(_0x5d68a0,_0x790290,_0x5d67a7){var _0x395046=_0x276822;_0x790290[_0x395046(0x123)]=_0x395046(0x1b6),_0x790290[_0x395046(0x174)]=_0x5d68a0[_0x395046(0x1ae)],_0x3d70f8=_0x5d67a7['node'][_0x395046(0x1bc)],_0x5d67a7[_0x395046(0x1a1)][_0x395046(0x1bc)]=_0x790290,_0x49e6d5[_0x395046(0xf1)](_0x790290,_0x5d67a7);}try{_0x4064e[_0x276822(0x171)]++,_0x4064e[_0x276822(0x10b)]&&_0x4064e['autoExpandPreviousObjects'][_0x276822(0xf9)](_0x116012);var _0x409809,_0x4b11d6,_0x4c519c,_0x77116f,_0x22b5a1=[],_0x5988bd=[],_0x39ee3b,_0x21d3f8=this['_type'](_0x116012),_0x2d1504=_0x21d3f8===_0x276822(0x12b),_0xb381de=!0x1,_0x2aa0a9=_0x21d3f8==='function',_0x3fdc8a=this[_0x276822(0x1e2)](_0x21d3f8),_0x2795c6=this['_isPrimitiveWrapperType'](_0x21d3f8),_0x5995ba=_0x3fdc8a||_0x2795c6,_0x1134b4={},_0x3e617b=0x0,_0x34b838=!0x1,_0x3d70f8,_0x448392=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x4064e[_0x276822(0x125)]){if(_0x2d1504){if(_0x4b11d6=_0x116012['length'],_0x4b11d6>_0x4064e['elements']){for(_0x4c519c=0x0,_0x77116f=_0x4064e[_0x276822(0x122)],_0x409809=_0x4c519c;_0x409809<_0x77116f;_0x409809++)_0x5988bd['push'](_0x49e6d5[_0x276822(0xf5)](_0x22b5a1,_0x116012,_0x21d3f8,_0x409809,_0x4064e));_0x5416d7[_0x276822(0x1d3)]=!0x0;}else{for(_0x4c519c=0x0,_0x77116f=_0x4b11d6,_0x409809=_0x4c519c;_0x409809<_0x77116f;_0x409809++)_0x5988bd[_0x276822(0xf9)](_0x49e6d5[_0x276822(0xf5)](_0x22b5a1,_0x116012,_0x21d3f8,_0x409809,_0x4064e));}_0x4064e[_0x276822(0x1b8)]+=_0x5988bd[_0x276822(0x13f)];}if(!(_0x21d3f8===_0x276822(0x1ce)||_0x21d3f8==='undefined')&&!_0x3fdc8a&&_0x21d3f8!==_0x276822(0xf3)&&_0x21d3f8!==_0x276822(0x14b)&&_0x21d3f8!==_0x276822(0x1e1)){var _0x5bbc59=_0x5d249a[_0x276822(0x109)]||_0x4064e['props'];if(this['_isSet'](_0x116012)?(_0x409809=0x0,_0x116012[_0x276822(0x1d8)](function(_0x370926){var _0x37eb0d=_0x276822;if(_0x3e617b++,_0x4064e[_0x37eb0d(0x1b8)]++,_0x3e617b>_0x5bbc59){_0x34b838=!0x0;return;}if(!_0x4064e[_0x37eb0d(0x1c0)]&&_0x4064e[_0x37eb0d(0x10b)]&&_0x4064e['autoExpandPropertyCount']>_0x4064e[_0x37eb0d(0x14e)]){_0x34b838=!0x0;return;}_0x5988bd['push'](_0x49e6d5['_addProperty'](_0x22b5a1,_0x116012,_0x37eb0d(0xfc),_0x409809++,_0x4064e,function(_0x1b010a){return function(){return _0x1b010a;};}(_0x370926)));})):this[_0x276822(0x176)](_0x116012)&&_0x116012['forEach'](function(_0x3e9664,_0x283dc1){var _0x6b9f9b=_0x276822;if(_0x3e617b++,_0x4064e['autoExpandPropertyCount']++,_0x3e617b>_0x5bbc59){_0x34b838=!0x0;return;}if(!_0x4064e[_0x6b9f9b(0x1c0)]&&_0x4064e[_0x6b9f9b(0x10b)]&&_0x4064e[_0x6b9f9b(0x1b8)]>_0x4064e[_0x6b9f9b(0x14e)]){_0x34b838=!0x0;return;}var _0x42447e=_0x283dc1[_0x6b9f9b(0xff)]();_0x42447e[_0x6b9f9b(0x13f)]>0x64&&(_0x42447e=_0x42447e[_0x6b9f9b(0x1ad)](0x0,0x64)+_0x6b9f9b(0x143)),_0x5988bd['push'](_0x49e6d5['_addProperty'](_0x22b5a1,_0x116012,'Map',_0x42447e,_0x4064e,function(_0x490eaf){return function(){return _0x490eaf;};}(_0x3e9664)));}),!_0xb381de){try{for(_0x39ee3b in _0x116012)if(!(_0x2d1504&&_0x448392['test'](_0x39ee3b))&&!this[_0x276822(0x151)](_0x116012,_0x39ee3b,_0x4064e)){if(_0x3e617b++,_0x4064e[_0x276822(0x1b8)]++,_0x3e617b>_0x5bbc59){_0x34b838=!0x0;break;}if(!_0x4064e[_0x276822(0x1c0)]&&_0x4064e['autoExpand']&&_0x4064e[_0x276822(0x1b8)]>_0x4064e[_0x276822(0x14e)]){_0x34b838=!0x0;break;}_0x5988bd[_0x276822(0xf9)](_0x49e6d5[_0x276822(0x117)](_0x22b5a1,_0x1134b4,_0x116012,_0x21d3f8,_0x39ee3b,_0x4064e));}}catch{}if(_0x1134b4['_p_length']=!0x0,_0x2aa0a9&&(_0x1134b4[_0x276822(0x1a6)]=!0x0),!_0x34b838){var _0x46fabb=[][_0x276822(0x1a5)](this[_0x276822(0x17a)](_0x116012))[_0x276822(0x1a5)](this['_getOwnPropertySymbols'](_0x116012));for(_0x409809=0x0,_0x4b11d6=_0x46fabb['length'];_0x409809<_0x4b11d6;_0x409809++)if(_0x39ee3b=_0x46fabb[_0x409809],!(_0x2d1504&&_0x448392[_0x276822(0x16f)](_0x39ee3b[_0x276822(0xff)]()))&&!this[_0x276822(0x151)](_0x116012,_0x39ee3b,_0x4064e)&&!_0x1134b4[_0x276822(0x162)+_0x39ee3b[_0x276822(0xff)]()]){if(_0x3e617b++,_0x4064e['autoExpandPropertyCount']++,_0x3e617b>_0x5bbc59){_0x34b838=!0x0;break;}if(!_0x4064e['isExpressionToEvaluate']&&_0x4064e[_0x276822(0x10b)]&&_0x4064e['autoExpandPropertyCount']>_0x4064e[_0x276822(0x14e)]){_0x34b838=!0x0;break;}_0x5988bd[_0x276822(0xf9)](_0x49e6d5[_0x276822(0x117)](_0x22b5a1,_0x1134b4,_0x116012,_0x21d3f8,_0x39ee3b,_0x4064e));}}}}}if(_0x5416d7[_0x276822(0x123)]=_0x21d3f8,_0x5995ba?(_0x5416d7[_0x276822(0x118)]=_0x116012[_0x276822(0x1ca)](),this[_0x276822(0x1a3)](_0x21d3f8,_0x5416d7,_0x4064e,_0x5d249a)):_0x21d3f8===_0x276822(0x18e)?_0x5416d7[_0x276822(0x118)]=this[_0x276822(0x18f)]['call'](_0x116012):_0x21d3f8===_0x276822(0x1e1)?_0x5416d7[_0x276822(0x118)]=_0x116012[_0x276822(0xff)]():_0x21d3f8===_0x276822(0x1d9)?_0x5416d7[_0x276822(0x118)]=this[_0x276822(0x1db)][_0x276822(0x12d)](_0x116012):_0x21d3f8===_0x276822(0xfb)&&this['_Symbol']?_0x5416d7[_0x276822(0x118)]=this[_0x276822(0x134)]['prototype']['toString'][_0x276822(0x12d)](_0x116012):!_0x4064e[_0x276822(0x125)]&&!(_0x21d3f8===_0x276822(0x1ce)||_0x21d3f8===_0x276822(0x1a9))&&(delete _0x5416d7[_0x276822(0x118)],_0x5416d7[_0x276822(0x15d)]=!0x0),_0x34b838&&(_0x5416d7[_0x276822(0x13b)]=!0x0),_0x3d70f8=_0x4064e[_0x276822(0x1a1)][_0x276822(0x1bc)],_0x4064e[_0x276822(0x1a1)]['current']=_0x5416d7,this[_0x276822(0xf1)](_0x5416d7,_0x4064e),_0x5988bd[_0x276822(0x13f)]){for(_0x409809=0x0,_0x4b11d6=_0x5988bd[_0x276822(0x13f)];_0x409809<_0x4b11d6;_0x409809++)_0x5988bd[_0x409809](_0x409809);}_0x22b5a1[_0x276822(0x13f)]&&(_0x5416d7[_0x276822(0x109)]=_0x22b5a1);}catch(_0x545cfc){_0x3b3f6a(_0x545cfc,_0x5416d7,_0x4064e);}return this[_0x276822(0x132)](_0x116012,_0x5416d7),this[_0x276822(0x103)](_0x5416d7,_0x4064e),_0x4064e['node'][_0x276822(0x1bc)]=_0x3d70f8,_0x4064e[_0x276822(0x171)]--,_0x4064e[_0x276822(0x10b)]=_0x57b7ae,_0x4064e['autoExpand']&&_0x4064e[_0x276822(0x169)][_0x276822(0x1cb)](),_0x5416d7;}[_0x144a79(0x1bf)](_0x342ecf){return Object['getOwnPropertySymbols']?Object['getOwnPropertySymbols'](_0x342ecf):[];}[_0x144a79(0x1c4)](_0x5ba2ae){var _0x5a7687=_0x144a79;return!!(_0x5ba2ae&&_0x3e77c0[_0x5a7687(0xfc)]&&this['_objectToString'](_0x5ba2ae)===_0x5a7687(0x1e0)&&_0x5ba2ae[_0x5a7687(0x1d8)]);}[_0x144a79(0x151)](_0x1cb176,_0x21f6ff,_0x22cda5){var _0x223b84=_0x144a79;return _0x22cda5[_0x223b84(0x11a)]?typeof _0x1cb176[_0x21f6ff]==_0x223b84(0x1df):!0x1;}[_0x144a79(0x1b9)](_0x14fbf5){var _0x540dfe=_0x144a79,_0x21d37e='';return _0x21d37e=typeof _0x14fbf5,_0x21d37e===_0x540dfe(0xf2)?this['_objectToString'](_0x14fbf5)===_0x540dfe(0xef)?_0x21d37e=_0x540dfe(0x12b):this[_0x540dfe(0x1a4)](_0x14fbf5)===_0x540dfe(0x1d0)?_0x21d37e='date':this[_0x540dfe(0x1a4)](_0x14fbf5)===_0x540dfe(0x179)?_0x21d37e=_0x540dfe(0x1e1):_0x14fbf5===null?_0x21d37e=_0x540dfe(0x1ce):_0x14fbf5[_0x540dfe(0x10e)]&&(_0x21d37e=_0x14fbf5['constructor'][_0x540dfe(0xfe)]||_0x21d37e):_0x21d37e===_0x540dfe(0x1a9)&&this[_0x540dfe(0x180)]&&_0x14fbf5 instanceof this['_HTMLAllCollection']&&(_0x21d37e=_0x540dfe(0x157)),_0x21d37e;}[_0x144a79(0x1a4)](_0x8e2c33){var _0x252277=_0x144a79;return Object[_0x252277(0x1e8)]['toString'][_0x252277(0x12d)](_0x8e2c33);}[_0x144a79(0x1e2)](_0x575741){var _0x23d891=_0x144a79;return _0x575741===_0x23d891(0x18a)||_0x575741==='string'||_0x575741===_0x23d891(0x133);}[_0x144a79(0x101)](_0x4456b7){var _0x2de837=_0x144a79;return _0x4456b7===_0x2de837(0x140)||_0x4456b7==='String'||_0x4456b7===_0x2de837(0x135);}[_0x144a79(0xf5)](_0x4354f5,_0x2e6613,_0x5874b5,_0x561ca8,_0x22e9fa,_0xf7af1c){var _0x1cf564=this;return function(_0x384940){var _0x598128=_0x21a3,_0x1c7c0b=_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x1bc)],_0x46c00c=_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x10a)],_0x16be0b=_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x11c)];_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x11c)]=_0x1c7c0b,_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x10a)]=typeof _0x561ca8=='number'?_0x561ca8:_0x384940,_0x4354f5[_0x598128(0xf9)](_0x1cf564['_property'](_0x2e6613,_0x5874b5,_0x561ca8,_0x22e9fa,_0xf7af1c)),_0x22e9fa[_0x598128(0x1a1)][_0x598128(0x11c)]=_0x16be0b,_0x22e9fa['node']['index']=_0x46c00c;};}[_0x144a79(0x117)](_0x58d056,_0x3f3d81,_0x423f15,_0x7eaa6e,_0xd8e80,_0x57780f,_0x4dffbc){var _0x32a146=_0x144a79,_0x41efa8=this;return _0x3f3d81[_0x32a146(0x162)+_0xd8e80['toString']()]=!0x0,function(_0x4d920b){var _0x49b5c2=_0x32a146,_0x5ac13c=_0x57780f[_0x49b5c2(0x1a1)][_0x49b5c2(0x1bc)],_0x3b2e7f=_0x57780f['node'][_0x49b5c2(0x10a)],_0x188cf3=_0x57780f[_0x49b5c2(0x1a1)]['parent'];_0x57780f[_0x49b5c2(0x1a1)][_0x49b5c2(0x11c)]=_0x5ac13c,_0x57780f['node'][_0x49b5c2(0x10a)]=_0x4d920b,_0x58d056[_0x49b5c2(0xf9)](_0x41efa8[_0x49b5c2(0x11e)](_0x423f15,_0x7eaa6e,_0xd8e80,_0x57780f,_0x4dffbc)),_0x57780f[_0x49b5c2(0x1a1)][_0x49b5c2(0x11c)]=_0x188cf3,_0x57780f[_0x49b5c2(0x1a1)][_0x49b5c2(0x10a)]=_0x3b2e7f;};}[_0x144a79(0x11e)](_0x30d594,_0x313c60,_0x116b3f,_0x110528,_0x4c9ac0){var _0x860bad=_0x144a79,_0x3c61c2=this;_0x4c9ac0||(_0x4c9ac0=function(_0x374fcf,_0x341fdd){return _0x374fcf[_0x341fdd];});var _0x5ebc8c=_0x116b3f[_0x860bad(0xff)](),_0x32f673=_0x110528[_0x860bad(0x181)]||{},_0x38968e=_0x110528['depth'],_0xd7277d=_0x110528[_0x860bad(0x1c0)];try{var _0x14b85f=this['_isMap'](_0x30d594),_0x316f78=_0x5ebc8c;_0x14b85f&&_0x316f78[0x0]==='\\x27'&&(_0x316f78=_0x316f78[_0x860bad(0x112)](0x1,_0x316f78['length']-0x2));var _0x4099d8=_0x110528[_0x860bad(0x181)]=_0x32f673['_p_'+_0x316f78];_0x4099d8&&(_0x110528[_0x860bad(0x125)]=_0x110528[_0x860bad(0x125)]+0x1),_0x110528[_0x860bad(0x1c0)]=!!_0x4099d8;var _0x28f7fd=typeof _0x116b3f==_0x860bad(0xfb),_0x33a0d0={'name':_0x28f7fd||_0x14b85f?_0x5ebc8c:this[_0x860bad(0x1cf)](_0x5ebc8c)};if(_0x28f7fd&&(_0x33a0d0[_0x860bad(0xfb)]=!0x0),!(_0x313c60===_0x860bad(0x12b)||_0x313c60==='Error')){var _0x1db4a5=this[_0x860bad(0x1c2)](_0x30d594,_0x116b3f);if(_0x1db4a5&&(_0x1db4a5[_0x860bad(0x188)]&&(_0x33a0d0[_0x860bad(0x1d4)]=!0x0),_0x1db4a5[_0x860bad(0x136)]&&!_0x4099d8&&!_0x110528[_0x860bad(0x17b)]))return _0x33a0d0[_0x860bad(0x11f)]=!0x0,this['_processTreeNodeResult'](_0x33a0d0,_0x110528),_0x33a0d0;}var _0x45eef2;try{_0x45eef2=_0x4c9ac0(_0x30d594,_0x116b3f);}catch(_0x349276){return _0x33a0d0={'name':_0x5ebc8c,'type':'unknown','error':_0x349276[_0x860bad(0x1ae)]},this[_0x860bad(0x120)](_0x33a0d0,_0x110528),_0x33a0d0;}var _0x539394=this[_0x860bad(0x1b9)](_0x45eef2),_0x490c82=this[_0x860bad(0x1e2)](_0x539394);if(_0x33a0d0[_0x860bad(0x123)]=_0x539394,_0x490c82)this[_0x860bad(0x120)](_0x33a0d0,_0x110528,_0x45eef2,function(){var _0x5a3749=_0x860bad;_0x33a0d0[_0x5a3749(0x118)]=_0x45eef2['valueOf'](),!_0x4099d8&&_0x3c61c2[_0x5a3749(0x1a3)](_0x539394,_0x33a0d0,_0x110528,{});});else{var _0x3ce9b1=_0x110528['autoExpand']&&_0x110528[_0x860bad(0x171)]<_0x110528[_0x860bad(0x1cd)]&&_0x110528[_0x860bad(0x169)][_0x860bad(0x111)](_0x45eef2)<0x0&&_0x539394!=='function'&&_0x110528['autoExpandPropertyCount']<_0x110528[_0x860bad(0x14e)];_0x3ce9b1||_0x110528[_0x860bad(0x171)]<_0x38968e||_0x4099d8?(this[_0x860bad(0x15e)](_0x33a0d0,_0x45eef2,_0x110528,_0x4099d8||{}),this[_0x860bad(0x132)](_0x45eef2,_0x33a0d0)):this[_0x860bad(0x120)](_0x33a0d0,_0x110528,_0x45eef2,function(){var _0x4e871a=_0x860bad;_0x539394===_0x4e871a(0x1ce)||_0x539394===_0x4e871a(0x1a9)||(delete _0x33a0d0[_0x4e871a(0x118)],_0x33a0d0['capped']=!0x0);});}return _0x33a0d0;}finally{_0x110528[_0x860bad(0x181)]=_0x32f673,_0x110528['depth']=_0x38968e,_0x110528[_0x860bad(0x1c0)]=_0xd7277d;}}[_0x144a79(0x1a3)](_0x48037b,_0x2f1dd0,_0x473c43,_0x2ec293){var _0x39eca7=_0x144a79,_0x3f171f=_0x2ec293[_0x39eca7(0x139)]||_0x473c43[_0x39eca7(0x139)];if((_0x48037b==='string'||_0x48037b===_0x39eca7(0xf3))&&_0x2f1dd0[_0x39eca7(0x118)]){let _0x2d465d=_0x2f1dd0[_0x39eca7(0x118)][_0x39eca7(0x13f)];_0x473c43[_0x39eca7(0x178)]+=_0x2d465d,_0x473c43[_0x39eca7(0x178)]>_0x473c43[_0x39eca7(0x1d2)]?(_0x2f1dd0[_0x39eca7(0x15d)]='',delete _0x2f1dd0['value']):_0x2d465d>_0x3f171f&&(_0x2f1dd0[_0x39eca7(0x15d)]=_0x2f1dd0[_0x39eca7(0x118)][_0x39eca7(0x112)](0x0,_0x3f171f),delete _0x2f1dd0[_0x39eca7(0x118)]);}}[_0x144a79(0x176)](_0x5e12a9){var _0x2e6805=_0x144a79;return!!(_0x5e12a9&&_0x3e77c0[_0x2e6805(0x149)]&&this[_0x2e6805(0x1a4)](_0x5e12a9)===_0x2e6805(0x1e6)&&_0x5e12a9[_0x2e6805(0x1d8)]);}[_0x144a79(0x1cf)](_0x45972a){var _0x58ae9d=_0x144a79;if(_0x45972a[_0x58ae9d(0x19b)](/^\\d+$/))return _0x45972a;var _0x319850;try{_0x319850=JSON[_0x58ae9d(0x1bb)](''+_0x45972a);}catch{_0x319850='\\x22'+this[_0x58ae9d(0x1a4)](_0x45972a)+'\\x22';}return _0x319850[_0x58ae9d(0x19b)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x319850=_0x319850[_0x58ae9d(0x112)](0x1,_0x319850['length']-0x2):_0x319850=_0x319850['replace'](/'/g,'\\x5c\\x27')[_0x58ae9d(0x144)](/\\\\\"/g,'\\x22')[_0x58ae9d(0x144)](/(^\"|\"$)/g,'\\x27'),_0x319850;}[_0x144a79(0x120)](_0x1bd8dc,_0x2ed4bd,_0x324def,_0x4e2bae){var _0x357ebc=_0x144a79;this[_0x357ebc(0xf1)](_0x1bd8dc,_0x2ed4bd),_0x4e2bae&&_0x4e2bae(),this[_0x357ebc(0x132)](_0x324def,_0x1bd8dc),this[_0x357ebc(0x103)](_0x1bd8dc,_0x2ed4bd);}['_treeNodePropertiesBeforeFullValue'](_0x107d65,_0x3ed7ca){var _0x219b16=_0x144a79;this['_setNodeId'](_0x107d65,_0x3ed7ca),this[_0x219b16(0x124)](_0x107d65,_0x3ed7ca),this[_0x219b16(0x1ac)](_0x107d65,_0x3ed7ca),this[_0x219b16(0x110)](_0x107d65,_0x3ed7ca);}[_0x144a79(0x147)](_0x56ce50,_0x58285a){}[_0x144a79(0x124)](_0x2fd389,_0x113b19){}[_0x144a79(0x10d)](_0x46fedc,_0x1fb3d1){}[_0x144a79(0x1c8)](_0x53d6a4){var _0x314f4b=_0x144a79;return _0x53d6a4===this[_0x314f4b(0x168)];}[_0x144a79(0x103)](_0x94f0d4,_0x1f78a2){var _0xc416c9=_0x144a79;this[_0xc416c9(0x10d)](_0x94f0d4,_0x1f78a2),this['_setNodeExpandableState'](_0x94f0d4),_0x1f78a2['sortProps']&&this[_0xc416c9(0xee)](_0x94f0d4),this[_0xc416c9(0x100)](_0x94f0d4,_0x1f78a2),this[_0xc416c9(0x19a)](_0x94f0d4,_0x1f78a2),this[_0xc416c9(0x115)](_0x94f0d4);}[_0x144a79(0x132)](_0x912632,_0x5f5544){var _0x20b522=_0x144a79;let _0x50f594;try{_0x3e77c0[_0x20b522(0x154)]&&(_0x50f594=_0x3e77c0[_0x20b522(0x154)][_0x20b522(0x174)],_0x3e77c0[_0x20b522(0x154)][_0x20b522(0x174)]=function(){}),_0x912632&&typeof _0x912632['length']==_0x20b522(0x133)&&(_0x5f5544['length']=_0x912632['length']);}catch{}finally{_0x50f594&&(_0x3e77c0[_0x20b522(0x154)]['error']=_0x50f594);}if(_0x5f5544[_0x20b522(0x123)]==='number'||_0x5f5544[_0x20b522(0x123)]===_0x20b522(0x135)){if(isNaN(_0x5f5544[_0x20b522(0x118)]))_0x5f5544[_0x20b522(0x158)]=!0x0,delete _0x5f5544['value'];else switch(_0x5f5544[_0x20b522(0x118)]){case Number['POSITIVE_INFINITY']:_0x5f5544[_0x20b522(0x186)]=!0x0,delete _0x5f5544[_0x20b522(0x118)];break;case Number[_0x20b522(0x116)]:_0x5f5544[_0x20b522(0x1aa)]=!0x0,delete _0x5f5544[_0x20b522(0x118)];break;case 0x0:this[_0x20b522(0x141)](_0x5f5544[_0x20b522(0x118)])&&(_0x5f5544[_0x20b522(0x14c)]=!0x0);break;}}else _0x5f5544[_0x20b522(0x123)]===_0x20b522(0x1df)&&typeof _0x912632['name']==_0x20b522(0x13d)&&_0x912632[_0x20b522(0xfe)]&&_0x5f5544[_0x20b522(0xfe)]&&_0x912632[_0x20b522(0xfe)]!==_0x5f5544['name']&&(_0x5f5544[_0x20b522(0x196)]=_0x912632['name']);}[_0x144a79(0x141)](_0x3d8de7){var _0x5bd0fa=_0x144a79;return 0x1/_0x3d8de7===Number[_0x5bd0fa(0x116)];}['_sortProps'](_0x4aa6dd){var _0x119666=_0x144a79;!_0x4aa6dd[_0x119666(0x109)]||!_0x4aa6dd[_0x119666(0x109)][_0x119666(0x13f)]||_0x4aa6dd[_0x119666(0x123)]===_0x119666(0x12b)||_0x4aa6dd[_0x119666(0x123)]===_0x119666(0x149)||_0x4aa6dd[_0x119666(0x123)]===_0x119666(0xfc)||_0x4aa6dd[_0x119666(0x109)]['sort'](function(_0x31ad1b,_0x1e1fbf){var _0x2d660e=_0x119666,_0x1d39c7=_0x31ad1b[_0x2d660e(0xfe)][_0x2d660e(0x1ab)](),_0x58bbc5=_0x1e1fbf['name'][_0x2d660e(0x1ab)]();return _0x1d39c7<_0x58bbc5?-0x1:_0x1d39c7>_0x58bbc5?0x1:0x0;});}[_0x144a79(0x100)](_0x256f87,_0x39cae1){var _0x3d0616=_0x144a79;if(!(_0x39cae1[_0x3d0616(0x11a)]||!_0x256f87['props']||!_0x256f87['props'][_0x3d0616(0x13f)])){for(var _0x12a78b=[],_0x11c382=[],_0x564eb4=0x0,_0x128043=_0x256f87['props'][_0x3d0616(0x13f)];_0x564eb4<_0x128043;_0x564eb4++){var _0x5b20c3=_0x256f87[_0x3d0616(0x109)][_0x564eb4];_0x5b20c3[_0x3d0616(0x123)]==='function'?_0x12a78b[_0x3d0616(0xf9)](_0x5b20c3):_0x11c382[_0x3d0616(0xf9)](_0x5b20c3);}if(!(!_0x11c382[_0x3d0616(0x13f)]||_0x12a78b['length']<=0x1)){_0x256f87[_0x3d0616(0x109)]=_0x11c382;var _0x32daf8={'functionsNode':!0x0,'props':_0x12a78b};this[_0x3d0616(0x147)](_0x32daf8,_0x39cae1),this[_0x3d0616(0x10d)](_0x32daf8,_0x39cae1),this['_setNodeExpandableState'](_0x32daf8),this[_0x3d0616(0x110)](_0x32daf8,_0x39cae1),_0x32daf8['id']+='\\x20f',_0x256f87[_0x3d0616(0x109)][_0x3d0616(0x1b7)](_0x32daf8);}}}[_0x144a79(0x19a)](_0x15acc0,_0x155efd){}[_0x144a79(0x161)](_0x2e282a){}[_0x144a79(0x18b)](_0x237103){var _0xfedee4=_0x144a79;return Array[_0xfedee4(0x164)](_0x237103)||typeof _0x237103==_0xfedee4(0xf2)&&this['_objectToString'](_0x237103)===_0xfedee4(0xef);}[_0x144a79(0x110)](_0x93d6b1,_0x555532){}[_0x144a79(0x115)](_0x2328ec){var _0x443c04=_0x144a79;delete _0x2328ec[_0x443c04(0x1c9)],delete _0x2328ec[_0x443c04(0x106)],delete _0x2328ec[_0x443c04(0x1c6)];}[_0x144a79(0x1ac)](_0x473e8a,_0x1f3de2){}}let _0x182186=new _0x4e138c(),_0x4c7196={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x3701fa={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x213e3e(_0x2ff700,_0x1028d3,_0x6237b8,_0x3512a1,_0xcb090,_0x3b6c4b){var _0x407e31=_0x144a79;let _0x212837,_0x4e347f;try{_0x4e347f=_0x24d130(),_0x212837=_0x3d2d4c[_0x1028d3],!_0x212837||_0x4e347f-_0x212837['ts']>0x1f4&&_0x212837[_0x407e31(0x197)]&&_0x212837[_0x407e31(0x146)]/_0x212837[_0x407e31(0x197)]<0x64?(_0x3d2d4c[_0x1028d3]=_0x212837={'count':0x0,'time':0x0,'ts':_0x4e347f},_0x3d2d4c[_0x407e31(0x1c7)]={}):_0x4e347f-_0x3d2d4c['hits']['ts']>0x32&&_0x3d2d4c[_0x407e31(0x1c7)][_0x407e31(0x197)]&&_0x3d2d4c['hits'][_0x407e31(0x146)]/_0x3d2d4c[_0x407e31(0x1c7)]['count']<0x64&&(_0x3d2d4c[_0x407e31(0x1c7)]={});let _0x36a3f2=[],_0x24554b=_0x212837[_0x407e31(0x102)]||_0x3d2d4c[_0x407e31(0x1c7)][_0x407e31(0x102)]?_0x3701fa:_0x4c7196,_0x347fd7=_0x261a7d=>{var _0x3edcb4=_0x407e31;let _0x3a2713={};return _0x3a2713['props']=_0x261a7d['props'],_0x3a2713[_0x3edcb4(0x122)]=_0x261a7d[_0x3edcb4(0x122)],_0x3a2713[_0x3edcb4(0x139)]=_0x261a7d[_0x3edcb4(0x139)],_0x3a2713[_0x3edcb4(0x1d2)]=_0x261a7d[_0x3edcb4(0x1d2)],_0x3a2713[_0x3edcb4(0x14e)]=_0x261a7d[_0x3edcb4(0x14e)],_0x3a2713[_0x3edcb4(0x1cd)]=_0x261a7d[_0x3edcb4(0x1cd)],_0x3a2713[_0x3edcb4(0xf6)]=!0x1,_0x3a2713[_0x3edcb4(0x11a)]=!_0x368502,_0x3a2713[_0x3edcb4(0x125)]=0x1,_0x3a2713[_0x3edcb4(0x171)]=0x0,_0x3a2713[_0x3edcb4(0x15b)]=_0x3edcb4(0x1dc),_0x3a2713[_0x3edcb4(0x1a0)]='root_exp',_0x3a2713[_0x3edcb4(0x10b)]=!0x0,_0x3a2713['autoExpandPreviousObjects']=[],_0x3a2713[_0x3edcb4(0x1b8)]=0x0,_0x3a2713[_0x3edcb4(0x17b)]=!0x0,_0x3a2713[_0x3edcb4(0x178)]=0x0,_0x3a2713[_0x3edcb4(0x1a1)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3a2713;};for(var _0x25383a=0x0;_0x25383a<_0xcb090[_0x407e31(0x13f)];_0x25383a++)_0x36a3f2[_0x407e31(0xf9)](_0x182186['serialize']({'timeNode':_0x2ff700===_0x407e31(0x146)||void 0x0},_0xcb090[_0x25383a],_0x347fd7(_0x24554b),{}));if(_0x2ff700==='trace'||_0x2ff700===_0x407e31(0x174)){let _0x5a1a14=Error[_0x407e31(0xfa)];try{Error[_0x407e31(0xfa)]=0x1/0x0,_0x36a3f2[_0x407e31(0xf9)](_0x182186[_0x407e31(0x15e)]({'stackNode':!0x0},new Error()[_0x407e31(0x15f)],_0x347fd7(_0x24554b),{'strLength':0x1/0x0}));}finally{Error[_0x407e31(0xfa)]=_0x5a1a14;}}return{'method':_0x407e31(0x194),'version':_0x391fb4,'args':[{'ts':_0x6237b8,'session':_0x3512a1,'args':_0x36a3f2,'id':_0x1028d3,'context':_0x3b6c4b}]};}catch(_0x5db04b){return{'method':_0x407e31(0x194),'version':_0x391fb4,'args':[{'ts':_0x6237b8,'session':_0x3512a1,'args':[{'type':_0x407e31(0x1b6),'error':_0x5db04b&&_0x5db04b[_0x407e31(0x1ae)]}],'id':_0x1028d3,'context':_0x3b6c4b}]};}finally{try{if(_0x212837&&_0x4e347f){let _0x45e299=_0x24d130();_0x212837['count']++,_0x212837[_0x407e31(0x146)]+=_0x47a395(_0x4e347f,_0x45e299),_0x212837['ts']=_0x45e299,_0x3d2d4c[_0x407e31(0x1c7)][_0x407e31(0x197)]++,_0x3d2d4c[_0x407e31(0x1c7)][_0x407e31(0x146)]+=_0x47a395(_0x4e347f,_0x45e299),_0x3d2d4c[_0x407e31(0x1c7)]['ts']=_0x45e299,(_0x212837[_0x407e31(0x197)]>0x32||_0x212837[_0x407e31(0x146)]>0x64)&&(_0x212837['reduceLimits']=!0x0),(_0x3d2d4c[_0x407e31(0x1c7)][_0x407e31(0x197)]>0x3e8||_0x3d2d4c[_0x407e31(0x1c7)]['time']>0x12c)&&(_0x3d2d4c[_0x407e31(0x1c7)]['reduceLimits']=!0x0);}}catch{}}}return _0x213e3e;}((_0x5d65e9,_0x571af9,_0x37e1e4,_0x433d48,_0x1b02f6,_0x430083,_0x5432d8,_0x102dcb,_0x493a3c,_0x240da5,_0x2821b9)=>{var _0x556dd6=_0x2160de;if(_0x5d65e9[_0x556dd6(0x14d)])return _0x5d65e9[_0x556dd6(0x14d)];if(!H(_0x5d65e9,_0x102dcb,_0x1b02f6))return _0x5d65e9[_0x556dd6(0x14d)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x5d65e9['_console_ninja'];let _0x1d6340=B(_0x5d65e9),_0x397ff6=_0x1d6340['elapsed'],_0x1a91da=_0x1d6340['timeStamp'],_0xa22aa9=_0x1d6340[_0x556dd6(0x129)],_0x4dd46f={'hits':{},'ts':{}},_0x22fa43=X(_0x5d65e9,_0x493a3c,_0x4dd46f,_0x430083),_0x590e5e=_0x44c539=>{_0x4dd46f['ts'][_0x44c539]=_0x1a91da();},_0x1ecc6b=(_0x392121,_0x1d046a)=>{let _0x489bc2=_0x4dd46f['ts'][_0x1d046a];if(delete _0x4dd46f['ts'][_0x1d046a],_0x489bc2){let _0x346578=_0x397ff6(_0x489bc2,_0x1a91da());_0x37b780(_0x22fa43('time',_0x392121,_0xa22aa9(),_0x4ee1c5,[_0x346578],_0x1d046a));}},_0x11ac60=_0x3097ff=>{var _0x43212c=_0x556dd6,_0x5de73e;return _0x1b02f6===_0x43212c(0x1a7)&&_0x5d65e9[_0x43212c(0xf8)]&&((_0x5de73e=_0x3097ff==null?void 0x0:_0x3097ff['args'])==null?void 0x0:_0x5de73e['length'])&&(_0x3097ff[_0x43212c(0x114)][0x0]['origin']=_0x5d65e9[_0x43212c(0xf8)]),_0x3097ff;};_0x5d65e9[_0x556dd6(0x14d)]={'consoleLog':(_0x3df3db,_0x1bb5ab)=>{var _0x2864ec=_0x556dd6;_0x5d65e9[_0x2864ec(0x154)][_0x2864ec(0x194)][_0x2864ec(0xfe)]!==_0x2864ec(0x119)&&_0x37b780(_0x22fa43(_0x2864ec(0x194),_0x3df3db,_0xa22aa9(),_0x4ee1c5,_0x1bb5ab));},'consoleTrace':(_0x29da49,_0x3f8374)=>{var _0x280bf8=_0x556dd6,_0x2254c1,_0x1e4130;_0x5d65e9['console'][_0x280bf8(0x194)][_0x280bf8(0xfe)]!=='disabledTrace'&&((_0x1e4130=(_0x2254c1=_0x5d65e9[_0x280bf8(0x1d1)])==null?void 0x0:_0x2254c1['versions'])!=null&&_0x1e4130[_0x280bf8(0x1a1)]&&(_0x5d65e9[_0x280bf8(0x1de)]=!0x0),_0x37b780(_0x11ac60(_0x22fa43(_0x280bf8(0x170),_0x29da49,_0xa22aa9(),_0x4ee1c5,_0x3f8374))));},'consoleError':(_0x547f0a,_0x50dbc7)=>{var _0x3597a9=_0x556dd6;_0x5d65e9[_0x3597a9(0x1de)]=!0x0,_0x37b780(_0x11ac60(_0x22fa43('error',_0x547f0a,_0xa22aa9(),_0x4ee1c5,_0x50dbc7)));},'consoleTime':_0x123ffe=>{_0x590e5e(_0x123ffe);},'consoleTimeEnd':(_0x2171a0,_0x403bb8)=>{_0x1ecc6b(_0x403bb8,_0x2171a0);},'autoLog':(_0x4998d0,_0x1bac37)=>{var _0xd73d23=_0x556dd6;_0x37b780(_0x22fa43(_0xd73d23(0x194),_0x1bac37,_0xa22aa9(),_0x4ee1c5,[_0x4998d0]));},'autoLogMany':(_0x431d18,_0x36d175)=>{var _0x73d5fc=_0x556dd6;_0x37b780(_0x22fa43(_0x73d5fc(0x194),_0x431d18,_0xa22aa9(),_0x4ee1c5,_0x36d175));},'autoTrace':(_0x459c49,_0x27ff2b)=>{var _0x433b06=_0x556dd6;_0x37b780(_0x11ac60(_0x22fa43(_0x433b06(0x170),_0x27ff2b,_0xa22aa9(),_0x4ee1c5,[_0x459c49])));},'autoTraceMany':(_0x2ff4f7,_0x18ce27)=>{_0x37b780(_0x11ac60(_0x22fa43('trace',_0x2ff4f7,_0xa22aa9(),_0x4ee1c5,_0x18ce27)));},'autoTime':(_0x2e41bc,_0x5eb8ec,_0x1c38dd)=>{_0x590e5e(_0x1c38dd);},'autoTimeEnd':(_0x47c008,_0xad9b13,_0x4fc532)=>{_0x1ecc6b(_0xad9b13,_0x4fc532);},'coverage':_0x4de91b=>{_0x37b780({'method':'coverage','version':_0x430083,'args':[{'id':_0x4de91b}]});}};let _0x37b780=q(_0x5d65e9,_0x571af9,_0x37e1e4,_0x433d48,_0x1b02f6,_0x240da5,_0x2821b9),_0x4ee1c5=_0x5d65e9[_0x556dd6(0x14a)];return _0x5d65e9['_console_ninja'];})(globalThis,_0x2160de(0x187),'65166',_0x2160de(0x16b),_0x2160de(0x1be),_0x2160de(0x1e3),_0x2160de(0x128),_0x2160de(0x1d5),_0x2160de(0x159),_0x2160de(0x183),_0x2160de(0x152));")}catch(e){}}new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addLinkListeners(),this.addEventListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new c.default({template:this.template})}createPreloader(){this.preloader=new l.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new o.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new d.default,collections:new h.default,detail:new p.default,home:new u.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template,e),await this.page.hide();const r=await window.fetch(e);if(200===r.status){const s=await r.text(),n=document.createElement("div");t&&window.history.pushState({},"",e),n.innerHTML=s;const i=n.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.innerHTML=i.innerHTML,this.content.setAttribute("data-template",this.template),this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),await this.page.show(),this.addLinkListeners()}else console.log(...function(e,...t){try{f().consoleLog(e,t)}catch(e){}return t}("213989122_159_6_159_42_4","Error",r.status))}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((()=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=a()(e);this.page&&this.page.onWheel&&this.page.onWheel(t),this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("wheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");n()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange({url:r})}}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"about",element:".about",elements:{navigation:document.querySelector(".navigation"),wrapper:".about__wrapper"}})}}},"./app/pages/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"collections",element:".collections",elements:{navigation:document.querySelector(".navigation"),wrapper:".collections__wrapper"}})}}},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Page.js"),i=r("./app/classes/Button.js");class a extends n.default{constructor(){super({id:"detail",element:".detail",elements:{navigation:document.querySelector(".navigation"),button:".detail__button"}})}create(){super.create(),this.link=new i.default({element:this.elements.button})}show(){const e=s.default.timeline({delay:2});e.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),super.show(e)}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./app/classes/Page.js"),n=r("./app/classes/Button.js");class i extends s.default{constructor(){super({id:"home",element:".home",elements:{navigation:document.querySelector(".navigation"),link:".home__link"}})}create(){super.create(),this.link=new n.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/utils/colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>s});const s="#f9f1e7",n="#37384c"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{calculate:()=>a,split:()=>i});var s=r("./node_modules/lodash/each.js"),n=r.n(s);function i({element:e,expression:t=" ",append:r=!0}){const s=function(e,t){const r=e.split("<br>");let s=[];return n()(r,((e,r)=>{r>0&&s.push("<br>"),s=s.concat(e.split(t));let i=!1,a="";const o=[];n()(s,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(i=!0,a=""),i&&(a+=`${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(o.push(e),a=""),i||""!==a||o.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),s=o})),s}(e.innerHTML.toString().trim(),t);let i="";n()(s,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");n()(t,((e,t)=>{i+=t>0?"<br>"+o(e):o(e)}))}else i+=o(e)})),e.innerHTML=i;const a=e.querySelectorAll("span");return r&&n()(a,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),s="&"!==e.innerHTML.trim(),n="-"!==e.innerHTML.trim();t&&r&&s&&n&&(e.innerHTML=`${e.textContent}&nbsp;`)})),a}function a(e){const t=[];let r=[],s=e[0].offsetTop;return n()(e,((n,i)=>{n.offsetTop===s&&r.push(n),n.offsetTop!==s&&(t.push(r),r=[],r.push(n),s=n.offsetTop),i+1===e.length&&t.push(r)})),t}function o(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,s){function n(r){e.removeListener(t,i),s(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",n),r([].slice.call(arguments))}_(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&_(e,"error",t,r)}(e,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function o(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function c(e,t,r,s){var n,i,a,c;if(o(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),a=i[t]),void 0===a)a=i[t]=r,++e._eventsCount;else if("function"==typeof a?a=i[t]=s?[r,a]:[a,r]:s?a.unshift(r):a.push(r),(n=l(e))>0&&a.length>n&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=u.bind(s);return n.listener=r,s.wrapFn=n,n}function h(e,t,r){var s=e._events;if(void 0===s)return[];var n=s[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):f(n,n.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),s=0;s<t;++s)r[s]=e[s];return r}function _(e,t,r,s){if("function"==typeof e.on)s.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function n(i){s.once&&e.removeEventListener(t,n),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)s(l,this,t);else{var c=l.length,u=f(l,c);for(r=0;r<c;++r)s(u[r],this,t)}return!0},i.prototype.addListener=function(e,t){return c(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return c(this,e,t,!0)},i.prototype.once=function(e,t){return o(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return o(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,s,n,i,a;if(o(t),void 0===(s=this._events))return this;if(void 0===(r=s[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){a=r[i].listener,n=i;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(s[e]=r[0]),void 0!==s.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,s;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,i=Object.keys(r);for(s=0;s<i.length;++s)"removeListener"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return h(this,e,!0)},i.prototype.rawListeners=function(e){return h(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>Ee,_createElement:()=>F,_getBBox:()=>G,checkPrefix:()=>U,default:()=>Ee});var s,n,i,a,o,l,c,u,d=r("./node_modules/gsap/gsap-core.js"),h={},p=180/Math.PI,f=Math.PI/180,_=Math.atan2,x=/([A-Z])/g,m=/(left|right|width|margin|padding|x)/i,g=/[\s,\(]\S/,b={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},v=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},y=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},j=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},T=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},A=function(e,t,r){return e.style[t]=r},S=function(e,t,r){return e.style.setProperty(t,r)},M=function(e,t,r){return e._gsap[t]=r},O=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},C=function(e,t,r,s,n){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(n,i)},k=function(e,t,r,s,n){var i=e._gsap;i[t]=r,i.renderTransform(n,i)},P="transform",L=P+"Origin",q=function e(t,r){var s=this,n=this.target,i=n.style,a=n._gsap;if(t in h&&i){if(this.tfm=this.tfm||{},"transform"===t)return b.transform.split(",").forEach((function(t){return e.call(s,t,r)}));if(~(t=b[t]||t).indexOf(",")?t.split(",").forEach((function(e){return s.tfm[e]=K(n,e)})):this.tfm[t]=a.x?a[t]:K(n,t),t===L&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(P)>=0)return;a.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(L,r,"")),t=P}(i||r)&&this.props.push(t,r,i[t])},D=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},R=function(){var e,t,r=this.props,s=this.target,n=s.style,i=s._gsap;for(e=0;e<r.length;e+=3)r[e+1]?s[r[e]]=r[e+2]:r[e+2]?n[r[e]]=r[e+2]:n.removeProperty("--"===r[e].substr(0,2)?r[e]:r[e].replace(x,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),s.setAttribute("data-svg-origin",this.svgo||"")),(e=c())&&e.isStart||n[P]||(D(n),i.zOrigin&&n[L]&&(n[L]+=" "+i.zOrigin+"px",i.zOrigin=0,i.renderTransform()),i.uncache=1)}},z=function(e,t){var r={target:e,props:[],revert:R,save:q};return e._gsap||d.gsap.core.getCache(e),t&&t.split(",").forEach((function(e){return r.save(e)})),r},F=function(e,t){var r=n.createElementNS?n.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):n.createElement(e);return r&&r.style?r:n.createElement(e)},I=function e(t,r,s){var n=getComputedStyle(t);return n[r]||n.getPropertyValue(r.replace(x,"-$1").toLowerCase())||n.getPropertyValue(r)||!s&&e(t,U(r)||r,1)||""},N="O,Moz,ms,Ms,Webkit".split(","),U=function(e,t,r){var s=(t||o).style,n=5;if(e in s&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);n--&&!(N[n]+e in s););return n<0?null:(3===n?"ms":n>=0?N[n]:"")+e},B=function(){"undefined"!=typeof window&&window.document&&(s=window,n=s.document,i=n.documentElement,o=F("div")||{style:{}},F("div"),P=U(P),L=P+"Origin",o.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!U("perspective"),c=d.gsap.core.reverting,a=1)},H=function e(t){var r,s=F("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,a=this.nextSibling,o=this.style.cssText;if(i.appendChild(s),s.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(a?n.insertBefore(this,a):n.appendChild(this)),i.removeChild(s),this.style.cssText=o,r},V=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},G=function(e){var t;try{t=e.getBBox()}catch(r){t=H.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===H||(t=H.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+V(e,["x","cx","x1"])||0,y:+V(e,["y","cy","y1"])||0,width:0,height:0}},Y=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!G(e))},X=function(e,t){if(t){var r,s=e.style;t in h&&t!==L&&(t=P),s.removeProperty?("ms"!==(r=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),s.removeProperty("--"===r?t:t.replace(x,"-$1").toLowerCase())):s.removeAttribute(t)}},W=function(e,t,r,s,n,i){var a=new d.PropTween(e._pt,t,r,0,1,i?T:E);return e._pt=a,a.b=s,a.e=n,e._props.push(r),a},Z={deg:1,rad:1,turn:1},$={grid:1,flex:1},Q=function e(t,r,s,i){var a,l,c,u,p=parseFloat(s)||0,f=(s+"").trim().substr((p+"").length)||"px",_=o.style,x=m.test(r),g="svg"===t.tagName.toLowerCase(),b=(g?"client":"offset")+(x?"Width":"Height"),v=100,y="px"===i,w="%"===i;if(i===f||!p||Z[i]||Z[f])return p;if("px"!==f&&!y&&(p=e(t,r,s,"px")),u=t.getCTM&&Y(t),(w||"%"===f)&&(h[r]||~r.indexOf("adius")))return a=u?t.getBBox()[x?"width":"height"]:t[b],(0,d._round)(w?p/a*v:p/100*a);if(_[x?"width":"height"]=v+(y?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!g?t:t.parentNode,u&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(c=l._gsap)&&w&&c.width&&x&&c.time===d._ticker.time&&!c.uncache)return(0,d._round)(p/c.width*v);if(!w||"height"!==r&&"width"!==r)(w||"%"===f)&&!$[I(l,"display")]&&(_.position=I(t,"position")),l===t&&(_.position="static"),l.appendChild(o),a=o[b],l.removeChild(o),_.position="absolute";else{var j=t.style[r];t.style[r]=v+i,a=t[b],j?t.style[r]=j:X(t,r)}return x&&w&&((c=(0,d._getCache)(l)).time=d._ticker.time,c.width=l[b]),(0,d._round)(y?a*p/v:a&&p?v/a*p:0)},K=function(e,t,r,s){var n;return a||B(),t in b&&"transform"!==t&&~(t=b[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(n=ce(e,s),n="transformOrigin"!==t?n[t]:n.svg?n.origin:ue(I(e,L))+" "+n.zOrigin+"px"):(!(n=e.style[t])||"auto"===n||s||~(n+"").indexOf("calc("))&&(n=re[t]&&re[t](e,t,r)||I(e,t)||(0,d._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(n+"").trim().indexOf(" ")?Q(e,t,n,r)+r:n},J=function(e,t,r,s){if(!r||"none"===r){var n=U(t,e,1),i=n&&I(e,n,1);i&&i!==r?(t=n,r=i):"borderColor"===t&&(r=I(e,"borderTopColor"))}var a,o,l,c,u,h,p,f,_,x,m,g=new d.PropTween(this._pt,e.style,t,0,1,d._renderComplexString),b=0,v=0;if(g.b=r,g.e=s,r+="","auto"===(s+="")&&(h=e.style[t],e.style[t]=s,s=I(e,t)||s,h?e.style[t]=h:X(e,t)),a=[r,s],(0,d._colorStringFilter)(a),s=a[1],l=(r=a[0]).match(d._numWithUnitExp)||[],(s.match(d._numWithUnitExp)||[]).length){for(;o=d._numWithUnitExp.exec(s);)p=o[0],_=s.substring(b,o.index),u?u=(u+1)%5:"rgba("!==_.substr(-5)&&"hsla("!==_.substr(-5)||(u=1),p!==(h=l[v++]||"")&&(c=parseFloat(h)||0,m=h.substr((c+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(c,p)+m),f=parseFloat(p),x=p.substr((f+"").length),b=d._numWithUnitExp.lastIndex-x.length,x||(x=x||d._config.units[t]||m,b===s.length&&(s+=x,g.e+=x)),m!==x&&(c=Q(e,t,h,x)||0),g._pt={_next:g._pt,p:_||1===v?_:",",s:c,c:f-c,m:u&&u<4||"zIndex"===t?Math.round:0});g.c=b<s.length?s.substring(b,s.length):""}else g.r="display"===t&&"none"===s?T:E;return d._relExp.test(s)&&(g.e=0),this._pt=g,g},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,s,n,i=t.t,a=i.style,o=t.u,l=i._gsap;if("all"===o||!0===o)a.cssText="",s=1;else for(n=(o=o.split(",")).length;--n>-1;)r=o[n],h[r]&&(s=1,r="transformOrigin"===r?L:P),X(i,r);s&&(X(i,P),l&&(l.svg&&i.removeAttribute("transform"),ce(i,1),l.uncache=1,D(a)))}},re={clearProps:function(e,t,r,s,n){if("isFromStart"!==n.data){var i=e._pt=new d.PropTween(e._pt,t,r,0,0,te);return i.u=s,i.pr=-10,i.tween=n,e._props.push(r),1}}},se=[1,0,0,1,0,0],ne={},ie=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ae=function(e){var t=I(e,P);return ie(t)?se:t.substr(7).match(d._numExp).map(d._round)},oe=function(e,t){var r,s,n,a,o=e._gsap||(0,d._getCache)(e),l=e.style,c=ae(e);return o.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(n=e.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?se:c:(c!==se||e.offsetParent||e===i||o.svg||(n=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(a=1,s=e.nextElementSibling,i.appendChild(e)),c=ae(e),n?l.display=n:X(e,"display"),a&&(s?r.insertBefore(e,s):r?r.appendChild(e):i.removeChild(e))),t&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},le=function(e,t,r,s,n,i){var a,o,l,c=e._gsap,u=n||oe(e,!0),d=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,_=u[0],x=u[1],m=u[2],g=u[3],b=u[4],v=u[5],y=t.split(" "),w=parseFloat(y[0])||0,j=parseFloat(y[1])||0;r?u!==se&&(o=_*g-x*m)&&(l=w*(-x/o)+j*(_/o)-(_*v-x*b)/o,w=w*(g/o)+j*(-m/o)+(m*v-g*b)/o,j=l):(w=(a=G(e)).x+(~y[0].indexOf("%")?w/100*a.width:w),j=a.y+(~(y[1]||y[0]).indexOf("%")?j/100*a.height:j)),s||!1!==s&&c.smooth?(b=w-d,v=j-h,c.xOffset=p+(b*_+v*m)-b,c.yOffset=f+(b*x+v*g)-v):c.xOffset=c.yOffset=0,c.xOrigin=w,c.yOrigin=j,c.smooth=!!s,c.origin=t,c.originIsAbsolute=!!r,e.style[L]="0px 0px",i&&(W(i,c,"xOrigin",d,w),W(i,c,"yOrigin",h,j),W(i,c,"xOffset",p,c.xOffset),W(i,c,"yOffset",f,c.yOffset)),e.setAttribute("data-svg-origin",w+" "+j)},ce=function(e,t){var r=e._gsap||new d.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var s,n,i,a,o,l,c,h,x,m,g,b,v,y,w,j,E,T,A,S,M,O,C,k,q,D,R,z,F,N,U,B,H=e.style,V=r.scaleX<0,G="px",X="deg",W=getComputedStyle(e),Z=I(e,L)||"0";return s=n=i=l=c=h=x=m=g=0,a=o=1,r.svg=!(!e.getCTM||!Y(e)),W.translate&&("none"===W.translate&&"none"===W.scale&&"none"===W.rotate||(H[P]=("none"!==W.translate?"translate3d("+(W.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==W.rotate?"rotate("+W.rotate+") ":"")+("none"!==W.scale?"scale("+W.scale.split(" ").join(",")+") ":"")+("none"!==W[P]?W[P]:"")),H.scale=H.rotate=H.translate="none"),y=oe(e,r.svg),r.svg&&(r.uncache?(q=e.getBBox(),Z=r.xOrigin-q.x+"px "+(r.yOrigin-q.y)+"px",k=""):k=!t&&e.getAttribute("data-svg-origin"),le(e,k||Z,!!k||r.originIsAbsolute,!1!==r.smooth,y)),b=r.xOrigin||0,v=r.yOrigin||0,y!==se&&(T=y[0],A=y[1],S=y[2],M=y[3],s=O=y[4],n=C=y[5],6===y.length?(a=Math.sqrt(T*T+A*A),o=Math.sqrt(M*M+S*S),l=T||A?_(A,T)*p:0,(x=S||M?_(S,M)*p+l:0)&&(o*=Math.abs(Math.cos(x*f))),r.svg&&(s-=b-(b*T+v*S),n-=v-(b*A+v*M))):(B=y[6],N=y[7],R=y[8],z=y[9],F=y[10],U=y[11],s=y[12],n=y[13],i=y[14],c=(w=_(B,F))*p,w&&(k=O*(j=Math.cos(-w))+R*(E=Math.sin(-w)),q=C*j+z*E,D=B*j+F*E,R=O*-E+R*j,z=C*-E+z*j,F=B*-E+F*j,U=N*-E+U*j,O=k,C=q,B=D),h=(w=_(-S,F))*p,w&&(j=Math.cos(-w),U=M*(E=Math.sin(-w))+U*j,T=k=T*j-R*E,A=q=A*j-z*E,S=D=S*j-F*E),l=(w=_(A,T))*p,w&&(k=T*(j=Math.cos(w))+A*(E=Math.sin(w)),q=O*j+C*E,A=A*j-T*E,C=C*j-O*E,T=k,O=q),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,h=180-h),a=(0,d._round)(Math.sqrt(T*T+A*A+S*S)),o=(0,d._round)(Math.sqrt(C*C+B*B)),w=_(O,C),x=Math.abs(w)>2e-4?w*p:0,g=U?1/(U<0?-U:U):0),r.svg&&(k=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!ie(I(e,P)),k&&e.setAttribute("transform",k))),Math.abs(x)>90&&Math.abs(x)<270&&(V?(a*=-1,x+=l<=0?180:-180,l+=l<=0?180:-180):(o*=-1,x+=x<=0?180:-180)),t=t||r.uncache,r.x=s-((r.xPercent=s&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-s)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+G,r.y=n-((r.yPercent=n&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-n)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+G,r.z=i+G,r.scaleX=(0,d._round)(a),r.scaleY=(0,d._round)(o),r.rotation=(0,d._round)(l)+X,r.rotationX=(0,d._round)(c)+X,r.rotationY=(0,d._round)(h)+X,r.skewX=x+X,r.skewY=m+X,r.transformPerspective=g+G,(r.zOrigin=parseFloat(Z.split(" ")[2])||!t&&r.zOrigin||0)&&(H[L]=ue(Z)),r.xOffset=r.yOffset=0,r.force3D=d._config.force3D,r.renderTransform=r.svg?me:u?xe:he,r.uncache=0,r},ue=function(e){return(e=e.split(" "))[0]+" "+e[1]},de=function(e,t,r){var s=(0,d.getUnit)(t);return(0,d._round)(parseFloat(t)+parseFloat(Q(e,"x",r+"px",s)))+s},he=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,xe(e,t)},pe="0deg",fe="0px",_e=") ",xe=function(e,t){var r=t||this,s=r.xPercent,n=r.yPercent,i=r.x,a=r.y,o=r.z,l=r.rotation,c=r.rotationY,u=r.rotationX,d=r.skewX,h=r.skewY,p=r.scaleX,_=r.scaleY,x=r.transformPerspective,m=r.force3D,g=r.target,b=r.zOrigin,v="",y="auto"===m&&e&&1!==e||!0===m;if(b&&(u!==pe||c!==pe)){var w,j=parseFloat(c)*f,E=Math.sin(j),T=Math.cos(j);j=parseFloat(u)*f,w=Math.cos(j),i=de(g,i,E*w*-b),a=de(g,a,-Math.sin(j)*-b),o=de(g,o,T*w*-b+b)}x!==fe&&(v+="perspective("+x+_e),(s||n)&&(v+="translate("+s+"%, "+n+"%) "),(y||i!==fe||a!==fe||o!==fe)&&(v+=o!==fe||y?"translate3d("+i+", "+a+", "+o+") ":"translate("+i+", "+a+_e),l!==pe&&(v+="rotate("+l+_e),c!==pe&&(v+="rotateY("+c+_e),u!==pe&&(v+="rotateX("+u+_e),d===pe&&h===pe||(v+="skew("+d+", "+h+_e),1===p&&1===_||(v+="scale("+p+", "+_+_e),g.style[P]=v||"translate(0, 0)"},me=function(e,t){var r,s,n,i,a,o=t||this,l=o.xPercent,c=o.yPercent,u=o.x,h=o.y,p=o.rotation,_=o.skewX,x=o.skewY,m=o.scaleX,g=o.scaleY,b=o.target,v=o.xOrigin,y=o.yOrigin,w=o.xOffset,j=o.yOffset,E=o.forceCSS,T=parseFloat(u),A=parseFloat(h);p=parseFloat(p),_=parseFloat(_),(x=parseFloat(x))&&(_+=x=parseFloat(x),p+=x),p||_?(p*=f,_*=f,r=Math.cos(p)*m,s=Math.sin(p)*m,n=Math.sin(p-_)*-g,i=Math.cos(p-_)*g,_&&(x*=f,a=Math.tan(_-x),n*=a=Math.sqrt(1+a*a),i*=a,x&&(a=Math.tan(x),r*=a=Math.sqrt(1+a*a),s*=a)),r=(0,d._round)(r),s=(0,d._round)(s),n=(0,d._round)(n),i=(0,d._round)(i)):(r=m,i=g,s=n=0),(T&&!~(u+"").indexOf("px")||A&&!~(h+"").indexOf("px"))&&(T=Q(b,"x",u,"px"),A=Q(b,"y",h,"px")),(v||y||w||j)&&(T=(0,d._round)(T+v-(v*r+y*n)+w),A=(0,d._round)(A+y-(v*s+y*i)+j)),(l||c)&&(a=b.getBBox(),T=(0,d._round)(T+l/100*a.width),A=(0,d._round)(A+c/100*a.height)),a="matrix("+r+","+s+","+n+","+i+","+T+","+A+")",b.setAttribute("transform",a),E&&(b.style[P]=a)},ge=function(e,t,r,s,n){var i,a,o=360,l=(0,d._isString)(n),c=parseFloat(n)*(l&&~n.indexOf("rad")?p:1)-s,u=s+c+"deg";return l&&("short"===(i=n.split("_")[1])&&(c%=o)!==c%180&&(c+=c<0?o:-360),"cw"===i&&c<0?c=(c+36e9)%o-~~(c/o)*o:"ccw"===i&&c>0&&(c=(c-36e9)%o-~~(c/o)*o)),e._pt=a=new d.PropTween(e._pt,t,r,s,c,y),a.e=u,a.u="deg",e._props.push(r),a},be=function(e,t){for(var r in t)e[r]=t[r];return e},ve=function(e,t,r){var s,n,i,a,o,l,c,u=be({},r._gsap),p=r.style;for(n in u.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[P]=t,s=ce(r,1),X(r,P),r.setAttribute("transform",i)):(i=getComputedStyle(r)[P],p[P]=t,s=ce(r,1),p[P]=i),h)(i=u[n])!==(a=s[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=(0,d.getUnit)(i)!==(c=(0,d.getUnit)(a))?Q(r,n,i,c):parseFloat(i),l=parseFloat(a),e._pt=new d.PropTween(e._pt,s,n,o,l-o,v),e._pt.u=c||0,e._props.push(n));be(s,u)};(0,d._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",s="Right",n="Bottom",i="Left",a=(t<3?[r,s,n,i]:[r+i,r+s,n+s,n+i]).map((function(r){return t<2?e+r:"border"+r+e}));re[t>1?"border"+e:e]=function(e,t,r,s,n){var i,o;if(arguments.length<4)return i=a.map((function(t){return K(e,t,r)})),5===(o=i.join(" ")).split(i[0]).length?i[0]:o;i=(s+"").split(" "),o={},a.forEach((function(e,t){return o[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,o,n)}}));var ye,we,je,Ee={name:"css",register:B,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,s,n){var i,o,l,c,u,p,f,_,x,m,y,E,T,A,S,M,O,C,k,q,D=this._props,R=e.style,F=r.vars.startAt;for(f in a||B(),this.styles=this.styles||z(e),M=this.styles.props,this.tween=r,t)if("autoRound"!==f&&(o=t[f],!d._plugins[f]||!(0,d._checkPlugin)(f,t,r,s,e,n)))if(u=typeof o,p=re[f],"function"===u&&(u=typeof(o=o.call(r,s,e,n))),"string"===u&&~o.indexOf("random(")&&(o=(0,d._replaceRandom)(o)),p)p(this,e,f,o,r)&&(S=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),o+="",d._colorExp.lastIndex=0,d._colorExp.test(i)||(_=(0,d.getUnit)(i),x=(0,d.getUnit)(o)),x?_!==x&&(i=Q(e,f,i,x)+x):_&&(o+=_),this.add(R,"setProperty",i,o,s,n,0,0,f),D.push(f),M.push(f,0,R[f]);else if("undefined"!==u){if(F&&f in F?(i="function"==typeof F[f]?F[f].call(r,s,e,n):F[f],(0,d._isString)(i)&&~i.indexOf("random(")&&(i=(0,d._replaceRandom)(i)),(0,d.getUnit)(i+"")||"auto"===i||(i+=d._config.units[f]||(0,d.getUnit)(K(e,f))||""),"="===(i+"").charAt(1)&&(i=K(e,f))):i=K(e,f),c=parseFloat(i),(m="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),l=parseFloat(o),f in b&&("autoAlpha"===f&&(1===c&&"hidden"===K(e,"visibility")&&l&&(c=0),M.push("visibility",0,R.visibility),W(this,R,"visibility",c?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=b[f]).indexOf(",")&&(f=f.split(",")[0])),y=f in h)if(this.styles.save(f),E||((T=e._gsap).renderTransform&&!t.parseTransform||ce(e,t.parseTransform),A=!1!==t.smoothOrigin&&T.smooth,(E=this._pt=new d.PropTween(this._pt,R,P,0,1,T.renderTransform,T,0,-1)).dep=1),"scale"===f)this._pt=new d.PropTween(this._pt,T,"scaleY",T.scaleY,(m?(0,d._parseRelative)(T.scaleY,m+l):l)-T.scaleY||0,v),this._pt.u=0,D.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M.push(L,0,R[L]),C=void 0,k=void 0,q=void 0,C=(O=o).split(" "),k=C[0],q=C[1]||"50%","top"!==k&&"bottom"!==k&&"left"!==q&&"right"!==q||(O=k,k=q,q=O),C[0]=ee[k]||k,C[1]=ee[q]||q,o=C.join(" "),T.svg?le(e,o,0,A,0,this):((x=parseFloat(o.split(" ")[2])||0)!==T.zOrigin&&W(this,T,"zOrigin",T.zOrigin,x),W(this,R,f,ue(i),ue(o)));continue}if("svgOrigin"===f){le(e,o,1,A,0,this);continue}if(f in ne){ge(this,T,f,c,m?(0,d._parseRelative)(c,m+o):o);continue}if("smoothOrigin"===f){W(this,T,"smooth",T.smooth,o);continue}if("force3D"===f){T[f]=o;continue}if("transform"===f){ve(this,o,e);continue}}else f in R||(f=U(f)||f);if(y||(l||0===l)&&(c||0===c)&&!g.test(o)&&f in R)l||(l=0),(_=(i+"").substr((c+"").length))!==(x=(0,d.getUnit)(o)||(f in d._config.units?d._config.units[f]:_))&&(c=Q(e,f,i,x)),this._pt=new d.PropTween(this._pt,y?T:R,f,c,(m?(0,d._parseRelative)(c,m+l):l)-c,y||"px"!==x&&"zIndex"!==f||!1===t.autoRound?v:j),this._pt.u=x||0,_!==x&&"%"!==x&&(this._pt.b=i,this._pt.r=w);else if(f in R)J.call(this,e,f,i,m?m+o:o);else if(f in e)this.add(e,f,i||e[f],m?m+o:o,s,n);else if("parseTransform"!==f){(0,d._missingPlugin)(f,o);continue}y||(f in R?M.push(f,0,R[f]):M.push(f,1,i||e[f])),D.push(f)}S&&(0,d._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!c())for(var r=t._pt;r;)r.r(e,r.d),r=r._next;else t.styles.revert()},get:K,aliases:b,getSetter:function(e,t,r){var s=b[t];return s&&s.indexOf(",")<0&&(t=s),t in h&&t!==L&&(e._gsap.x||K(e,"x"))?r&&l===r?"scale"===t?O:M:(l=r||{})&&("scale"===t?C:k):e.style&&!(0,d._isUndefined)(e.style[t])?A:~t.indexOf("-")?S:(0,d._getSetter)(e,t)},core:{_removeProperty:X,_getMatrix:oe}};d.gsap.utils.checkPrefix=U,d.gsap.core.getStyleSaver=z,ye="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",we="rotation,rotationX,rotationY,skewX,skewY",je=(0,d._forEachName)(ye+","+we+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,d._forEachName)(we,(function(e){d._config.units[e]="deg",ne[e]=1})),b[je[13]]=ye+","+we,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");b[t[1]]=je[t[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){d._config.units[e]="px"})),d.gsap.registerPlugin(Ee)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{Animation:()=>Zt,Back:()=>Xr,Bounce:()=>Zr,Circ:()=>Kr,Cubic:()=>Br,Elastic:()=>Yr,Expo:()=>Qr,GSCache:()=>Wt,Linear:()=>Nr,Power0:()=>Dr,Power1:()=>Rr,Power2:()=>zr,Power3:()=>Fr,Power4:()=>Ir,PropTween:()=>yr,Quad:()=>Ur,Quart:()=>Hr,Quint:()=>Vr,Sine:()=>$r,SteppedEase:()=>Wr,Strong:()=>Gr,Timeline:()=>$t,TimelineLite:()=>$t,TimelineMax:()=>$t,Tween:()=>or,TweenLite:()=>or,TweenMax:()=>or,_checkPlugin:()=>tr,_colorExp:()=>Pt,_colorStringFilter:()=>qt,_config:()=>w,_forEachName:()=>xe,_getCache:()=>fe,_getProperty:()=>_e,_getSetter:()=>hr,_isString:()=>P,_isUndefined:()=>D,_missingPlugin:()=>K,_numExp:()=>H,_numWithUnitExp:()=>V,_parseRelative:()=>be,_plugins:()=>le,_relExp:()=>Y,_removeLinkedListItem:()=>ke,_renderComplexString:()=>_r,_replaceRandom:()=>gt,_round:()=>me,_roundModifier:()=>ct,_setDefaults:()=>Te,_sortPropTweensByPriority:()=>vr,_ticker:()=>Dt,clamp:()=>tt,default:()=>qr,distribute:()=>lt,getUnit:()=>et,gsap:()=>qr,interpolate:()=>vt,mapRange:()=>bt,normalize:()=>ft,pipe:()=>ht,random:()=>dt,selector:()=>at,shuffle:()=>ot,snap:()=>ut,splitColor:()=>Ot,toArray:()=>it,unitize:()=>pt,wrap:()=>xt,wrapYoyo:()=>mt});var i,a,o,l,c,u,d,h,p,f,_,x,m,g,b,v,y,w={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},j={duration:.5,overwrite:!1,delay:0},E=1e8,T=1e-8,A=2*Math.PI,S=A/4,M=0,O=Math.sqrt,C=Math.cos,k=Math.sin,P=function(e){return"string"==typeof e},L=function(e){return"function"==typeof e},q=function(e){return"number"==typeof e},D=function(e){return void 0===e},R=function(e){return"object"==typeof e},z=function(e){return!1!==e},F=function(){return"undefined"!=typeof window},I=function(e){return L(e)||P(e)},N="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},U=Array.isArray,B=/(?:-?\.?\d|\.)+/gi,H=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,G=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,Y=/[+-]=-?[.\d]+/,X=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Z={},$={},Q=function(e){return($=Ae(e,Z))&&qr},K=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},J=function(e,t){return!t&&console.warn(e)},ee=function(e,t){return e&&(Z[e]=t)&&$&&($[e]=t)||Z},te=function(){return 0},re={suppressEvents:!0,isStart:!0,kill:!1},se={suppressEvents:!0,kill:!1},ne={suppressEvents:!0},ie={},ae=[],oe={},le={},ce={},ue=30,de=[],he="",pe=function(e){var t,r,s=e[0];if(R(s)||L(s)||(e=[e]),!(t=(s._gsap||{}).harness)){for(r=de.length;r--&&!de[r].targetTest(s););t=de[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Wt(e[r],t)))||e.splice(r,1);return e},fe=function(e){return e._gsap||pe(it(e))[0]._gsap},_e=function(e,t,r){return(r=e[t])&&L(r)?e[t]():D(r)&&e.getAttribute&&e.getAttribute(t)||r},xe=function(e,t){return(e=e.split(",")).forEach(t)||e},me=function(e){return Math.round(1e5*e)/1e5||0},ge=function(e){return Math.round(1e7*e)/1e7||0},be=function(e,t){var r=t.charAt(0),s=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+s:"-"===r?e-s:"*"===r?e*s:e/s},ve=function(e,t){for(var r=t.length,s=0;e.indexOf(t[s])<0&&++s<r;);return s<r},ye=function(){var e,t,r=ae.length,s=ae.slice(0);for(oe={},ae.length=0,e=0;e<r;e++)(t=s[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},we=function(e,t,r,s){ae.length&&!a&&ye(),e.render(t,r,s||a&&t<0&&(e._initted||e._startAt)),ae.length&&!a&&ye()},je=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(X).length<2?t:P(e)?e.trim():e},Ee=function(e){return e},Te=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Ae=function(e,t){for(var r in t)e[r]=t[r];return e},Se=function e(t,r){for(var s in r)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(t[s]=R(r[s])?e(t[s]||(t[s]={}),r[s]):r[s]);return t},Me=function(e,t){var r,s={};for(r in e)r in t||(s[r]=e[r]);return s},Oe=function(e){var t,r=e.parent||l,s=e.keyframes?(t=U(e.keyframes),function(e,r){for(var s in r)s in e||"duration"===s&&t||"ease"===s||(e[s]=r[s])}):Te;if(z(e.inherit))for(;r;)s(e,r.vars.defaults),r=r.parent||r._dp;return e},Ce=function(e,t,r,s,n){void 0===r&&(r="_first"),void 0===s&&(s="_last");var i,a=e[s];if(n)for(i=t[n];a&&a[n]>i;)a=a._prev;return a?(t._next=a._next,a._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[s]=t,t._prev=a,t.parent=t._dp=e,t},ke=function(e,t,r,s){void 0===r&&(r="_first"),void 0===s&&(s="_last");var n=t._prev,i=t._next;n?n._next=i:e[r]===t&&(e[r]=i),i?i._prev=n:e[s]===t&&(e[s]=n),t._next=t._prev=t.parent=null},Pe=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Le=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},qe=function(e,t,r,s){return e._startAt&&(a?e._startAt.revert(se):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,s))},De=function e(t){return!t||t._ts&&e(t.parent)},Re=function(e){return e._repeat?ze(e._tTime,e=e.duration()+e._rDelay)*e:0},ze=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Fe=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ie=function(e){return e._end=ge(e._start+(e._tDur/Math.abs(e._ts||e._rts||T)||0))},Ne=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=ge(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ie(e),r._dirty||Le(r,e)),e},Ue=function(e,t){var r;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(r=Fe(e.rawTime(),t),(!t._dur||Je(0,t.totalDuration(),r)-t._tTime>T)&&t.render(r,!0)),Le(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},Be=function(e,t,r,s){return t.parent&&Pe(t),t._start=ge((q(r)?r:r||e!==l?$e(e,r,t):e._time)+t._delay),t._end=ge(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ce(e,t,"_first","_last",e._sort?"_start":0),Ye(t)||(e._recent=t),s||Ue(e,t),e._ts<0&&Ne(e,e._tTime),e},He=function(e,t){return(Z.ScrollTrigger||K("scrollTrigger",t))&&Z.ScrollTrigger.create(t,e)},Ve=function(e,t,r,s,n){return rr(e,t,n),e._initted?!r&&e._pt&&!a&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Dt.frame?(ae.push(e),e._lazy=[n,s],1):void 0:1},Ge=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Ye=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Xe=function(e,t,r,s){var n=e._repeat,i=ge(t)||0,a=e._tTime/e._tDur;return a&&!s&&(e._time*=i/e._dur),e._dur=i,e._tDur=n?n<0?1e10:ge(i*(n+1)+e._rDelay*n):i,a>0&&!s&&Ne(e,e._tTime=e._tDur*a),e.parent&&Ie(e),r||Le(e.parent,e),e},We=function(e){return e instanceof $t?Le(e):Xe(e,e._dur)},Ze={_start:0,endTime:te,totalDuration:te},$e=function e(t,r,s){var n,i,a,o=t.labels,l=t._recent||Ze,c=t.duration()>=E?l.endTime(!1):t._dur;return P(r)&&(isNaN(r)||r in o)?(i=r.charAt(0),a="%"===r.substr(-1),n=r.indexOf("="),"<"===i||">"===i?(n>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(n<0?l:s).totalDuration()/100:1)):n<0?(r in o||(o[r]=c),o[r]):(i=parseFloat(r.charAt(n-1)+r.substr(n+1)),a&&s&&(i=i/100*(U(s)?s[0]:s).totalDuration()),n>1?e(t,r.substr(0,n-1),s)+i:c+i)):null==r?c:+r},Qe=function(e,t,r){var s,n,i=q(t[1]),a=(i?2:1)+(e<2?0:1),o=t[a];if(i&&(o.duration=t[1]),o.parent=r,e){for(s=o,n=r;n&&!("immediateRender"in s);)s=n.vars.defaults||{},n=z(n.vars.inherit)&&n.parent;o.immediateRender=z(s.immediateRender),e<2?o.runBackwards=1:o.startAt=t[a-1]}return new or(t[0],o,t[a+1])},Ke=function(e,t){return e||0===e?t(e):t},Je=function(e,t,r){return r<e?e:r>t?t:r},et=function(e,t){return P(e)&&(t=W.exec(e))?t[1]:""},tt=function(e,t,r){return Ke(r,(function(r){return Je(e,t,r)}))},rt=[].slice,st=function(e,t){return e&&R(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&R(e[0]))&&!e.nodeType&&e!==c},nt=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var s;return P(e)&&!t||st(e,1)?(s=r).push.apply(s,it(e)):r.push(e)}))||r},it=function(e,t,r){return o&&!t&&o.selector?o.selector(e):!P(e)||r||!u&&Rt()?U(e)?nt(e,r):st(e)?rt.call(e,0):e?[e]:[]:rt.call((t||d).querySelectorAll(e),0)},at=function(e){return e=it(e)[0]||J("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return it(t,r.querySelectorAll?r:r===e?J("Invalid scope")||d.createElement("div"):e)}},ot=function(e){return e.sort((function(){return.5-Math.random()}))},lt=function(e){if(L(e))return e;var t=R(e)?e:{each:e},r=Ht(t.ease),s=t.from||0,n=parseFloat(t.base)||0,i={},a=s>0&&s<1,o=isNaN(s)||a,l=t.axis,c=s,u=s;return P(s)?c=u={center:.5,edges:.5,end:1}[s]||0:!a&&o&&(c=s[0],u=s[1]),function(e,a,d){var h,p,f,_,x,m,g,b,v,y=(d||t).length,w=i[y];if(!w){if(!(v="auto"===t.grid?0:(t.grid||[1,E])[1])){for(g=-E;g<(g=d[v++].getBoundingClientRect().left)&&v<y;);v<y&&v--}for(w=i[y]=[],h=o?Math.min(v,y)*c-.5:s%v,p=v===E?0:o?y*u/v-.5:s/v|0,g=0,b=E,m=0;m<y;m++)f=m%v-h,_=p-(m/v|0),w[m]=x=l?Math.abs("y"===l?_:f):O(f*f+_*_),x>g&&(g=x),x<b&&(b=x);"random"===s&&ot(w),w.max=g-b,w.min=b,w.v=y=(parseFloat(t.amount)||parseFloat(t.each)*(v>y?y-1:l?"y"===l?y/v:v:Math.max(v,y/v))||0)*("edges"===s?-1:1),w.b=y<0?n-y:n,w.u=et(t.amount||t.each)||0,r=r&&y<0?Ut(r):r}return y=(w[e]-w.min)/w.max||0,ge(w.b+(r?r(y):y)*w.v)+w.u}},ct=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var s=ge(Math.round(parseFloat(r)/e)*e*t);return(s-s%1)/t+(q(r)?0:et(r))}},ut=function(e,t){var r,s,n=U(e);return!n&&R(e)&&(r=n=e.radius||E,e.values?(e=it(e.values),(s=!q(e[0]))&&(r*=r)):e=ct(e.increment)),Ke(t,n?L(e)?function(t){return s=e(t),Math.abs(s-t)<=r?s:t}:function(t){for(var n,i,a=parseFloat(s?t.x:t),o=parseFloat(s?t.y:0),l=E,c=0,u=e.length;u--;)(n=s?(n=e[u].x-a)*n+(i=e[u].y-o)*i:Math.abs(e[u]-a))<l&&(l=n,c=u);return c=!r||l<=r?e[c]:t,s||c===t||q(t)?c:c+et(t)}:ct(e))},dt=function(e,t,r,s){return Ke(U(e)?!t:!0===r?!!(r=0):!s,(function(){return U(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(s=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*s)/s}))},ht=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},pt=function(e,t){return function(r){return e(parseFloat(r))+(t||et(r))}},ft=function(e,t,r){return bt(e,t,0,1,r)},_t=function(e,t,r){return Ke(r,(function(r){return e[~~t(r)]}))},xt=function e(t,r,s){var n=r-t;return U(t)?_t(t,e(0,t.length),r):Ke(s,(function(e){return(n+(e-t)%n)%n+t}))},mt=function e(t,r,s){var n=r-t,i=2*n;return U(t)?_t(t,e(0,t.length-1),r):Ke(s,(function(e){return t+((e=(i+(e-t)%i)%i||0)>n?i-e:e)}))},gt=function(e){for(var t,r,s,n,i=0,a="";~(t=e.indexOf("random(",i));)s=e.indexOf(")",t),n="["===e.charAt(t+7),r=e.substr(t+7,s-t-7).match(n?X:B),a+=e.substr(i,t-i)+dt(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),i=s+1;return a+e.substr(i,e.length-i)},bt=function(e,t,r,s,n){var i=t-e,a=s-r;return Ke(n,(function(t){return r+((t-e)/i*a||0)}))},vt=function e(t,r,s,n){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var a,o,l,c,u,d=P(t),h={};if(!0===s&&(n=1)&&(s=null),d)t={p:t},r={p:r};else if(U(t)&&!U(r)){for(l=[],c=t.length,u=c-2,o=1;o<c;o++)l.push(e(t[o-1],t[o]));c--,i=function(e){e*=c;var t=Math.min(u,~~e);return l[t](e-t)},s=r}else n||(t=Ae(U(t)?[]:{},t));if(!l){for(a in r)er.call(h,t,a,"get",r[a]);i=function(e){return xr(e,h)||(d?t.p:t)}}}return Ke(s,i)},yt=function(e,t,r){var s,n,i,a=e.labels,o=E;for(s in a)(n=a[s]-t)<0==!!r&&n&&o>(n=Math.abs(n))&&(i=s,o=n);return i},wt=function(e,t,r){var s,n,i,a=e.vars,l=a[t],c=o,u=e._ctx;if(l)return s=a[t+"Params"],n=a.callbackScope||e,r&&ae.length&&ye(),u&&(o=u),i=s?l.apply(n,s):l.call(n),o=c,i},jt=function(e){return Pe(e),e.scrollTrigger&&e.scrollTrigger.kill(!!a),e.progress()<1&&wt(e,"onInterrupt"),e},Et=[],Tt=function(e){if(e)if(e=!e.name&&e.default||e,F()||e.headless){var t=e.name,r=L(e),s=t&&!r&&e.init?function(){this._props=[]}:e,n={init:te,render:xr,add:er,kill:gr,modifier:mr,rawVars:0},i={targetTest:0,get:0,getSetter:hr,aliases:{},register:0};if(Rt(),e!==s){if(le[t])return;Te(s,Te(Me(e,n),i)),Ae(s.prototype,Ae(n,Me(e,i))),le[s.prop=t]=s,e.targetTest&&(de.push(s),ie[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ee(t,s),e.register&&e.register(qr,s,yr)}else Et.push(e)},At=255,St={aqua:[0,At,At],lime:[0,At,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,At],navy:[0,0,128],white:[At,At,At],olive:[128,128,0],yellow:[At,At,0],orange:[At,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[At,0,0],pink:[At,192,203],cyan:[0,At,At],transparent:[At,At,At,0]},Mt=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*At+.5|0},Ot=function(e,t,r){var s,n,i,a,o,l,c,u,d,h,p=e?q(e)?[e>>16,e>>8&At,e&At]:0:St.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),St[e])p=St[e];else if("#"===e.charAt(0)){if(e.length<6&&(s=e.charAt(1),n=e.charAt(2),i=e.charAt(3),e="#"+s+s+n+n+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&At,p&At,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&At,e&At]}else if("hsl"===e.substr(0,3))if(p=h=e.match(B),t){if(~e.indexOf("="))return p=e.match(H),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,s=2*(l=+p[2]/100)-(n=l<=.5?l*(o+1):l+o-l*o),p.length>3&&(p[3]*=1),p[0]=Mt(a+1/3,s,n),p[1]=Mt(a,s,n),p[2]=Mt(a-1/3,s,n);else p=e.match(B)||St.transparent;p=p.map(Number)}return t&&!h&&(s=p[0]/At,n=p[1]/At,i=p[2]/At,l=((c=Math.max(s,n,i))+(u=Math.min(s,n,i)))/2,c===u?a=o=0:(d=c-u,o=l>.5?d/(2-c-u):d/(c+u),a=c===s?(n-i)/d+(n<i?6:0):c===n?(i-s)/d+2:(s-n)/d+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ct=function(e){var t=[],r=[],s=-1;return e.split(Pt).forEach((function(e){var n=e.match(V)||[];t.push.apply(t,n),r.push(s+=n.length+1)})),t.c=r,t},kt=function(e,t,r){var s,n,i,a,o="",l=(e+o).match(Pt),c=t?"hsla(":"rgba(",u=0;if(!l)return e;if(l=l.map((function(e){return(e=Ot(e,t,1))&&c+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Ct(e),(s=r.c).join(o)!==i.c.join(o)))for(a=(n=e.replace(Pt,"1").split(V)).length-1;u<a;u++)o+=n[u]+(~s.indexOf(u)?l.shift()||c+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!n)for(a=(n=e.split(Pt)).length-1;u<a;u++)o+=n[u]+l[u];return o+n[a]},Pt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in St)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Lt=/hsl[a]?\(/,qt=function(e){var t,r=e.join(" ");if(Pt.lastIndex=0,Pt.test(r))return t=Lt.test(r),e[1]=kt(e[1],t),e[0]=kt(e[0],t,Ct(e[1])),!0},Dt=function(){var e,t,r,s,n,i,a=Date.now,o=500,l=33,p=a(),f=p,x=1e3/240,m=x,g=[],b=function r(c){var u,d,h,_,b=a()-f,v=!0===c;if((b>o||b<0)&&(p+=b-l),((u=(h=(f+=b)-p)-m)>0||v)&&(_=++s.frame,n=h-1e3*s.time,s.time=h/=1e3,m+=u+(u>=x?4:x-u),d=1),v||(e=t(r)),d)for(i=0;i<g.length;i++)g[i](h,n,_,c)};return s={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(e){return n/(1e3/(e||60))},wake:function(){h&&(!u&&F()&&(c=u=window,d=c.document||{},Z.gsap=qr,(c.gsapVersions||(c.gsapVersions=[])).push(qr.version),Q($||c.GreenSockGlobals||!c.gsap&&c||{}),Et.forEach(Tt)),r="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&s.sleep(),t=r||function(e){return setTimeout(e,m-1e3*s.time+1|0)},_=1,b(2))},sleep:function(){(r?cancelAnimationFrame:clearTimeout)(e),_=0,t=te},lagSmoothing:function(e,t){o=e||1/0,l=Math.min(t||33,o)},fps:function(e){x=1e3/(e||240),m=1e3*s.time+x},add:function(e,t,r){var n=t?function(t,r,i,a){e(t,r,i,a),s.remove(n)}:e;return s.remove(e),g[r?"unshift":"push"](n),Rt(),n},remove:function(e,t){~(t=g.indexOf(e))&&g.splice(t,1)&&i>=t&&i--},_listeners:g}}(),Rt=function(){return!_&&Dt.wake()},zt={},Ft=/^[\d.\-M][\d.\-,\s]/,It=/["']/g,Nt=function(e){for(var t,r,s,n={},i=e.substr(1,e.length-3).split(":"),a=i[0],o=1,l=i.length;o<l;o++)r=i[o],t=o!==l-1?r.lastIndexOf(","):r.length,s=r.substr(0,t),n[a]=isNaN(s)?s.replace(It,"").trim():+s,a=r.substr(t+1).trim();return n},Ut=function(e){return function(t){return 1-e(1-t)}},Bt=function e(t,r){for(var s,n=t._first;n;)n instanceof $t?e(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?e(n.timeline,r):(s=n._ease,n._ease=n._yEase,n._yEase=s,n._yoyo=r)),n=n._next},Ht=function(e,t){return e&&(L(e)?e:zt[e]||function(e){var t,r,s,n,i=(e+"").split("("),a=zt[i[0]];return a&&i.length>1&&a.config?a.config.apply(null,~e.indexOf("{")?[Nt(i[1])]:(t=e,r=t.indexOf("(")+1,s=t.indexOf(")"),n=t.indexOf("(",r),t.substring(r,~n&&n<s?t.indexOf(")",s+1):s)).split(",").map(je)):zt._CE&&Ft.test(e)?zt._CE("",e):a}(e))||t},Vt=function(e,t,r,s){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===s&&(s=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var n,i={easeIn:t,easeOut:r,easeInOut:s};return xe(e,(function(e){for(var t in zt[e]=Z[e]=i,zt[n=e.toLowerCase()]=r,i)zt[n+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=zt[e+"."+t]=i[t]})),i},Gt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Yt=function e(t,r,s){var n=r>=1?r:1,i=(s||(t?.3:.45))/(r<1?r:1),a=i/A*(Math.asin(1/n)||0),o=function(e){return 1===e?1:n*Math.pow(2,-10*e)*k((e-a)*i)+1},l="out"===t?o:"in"===t?function(e){return 1-o(1-e)}:Gt(o);return i=A/i,l.config=function(r,s){return e(t,r,s)},l},Xt=function e(t,r){void 0===r&&(r=1.70158);var s=function(e){return e?--e*e*((r+1)*e+r)+1:0},n="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:Gt(s);return n.config=function(r){return e(t,r)},n};xe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Vt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),zt.Linear.easeNone=zt.none=zt.Linear.easeIn,Vt("Elastic",Yt("in"),Yt("out"),Yt()),x=7.5625,b=2*(g=1/(m=2.75)),v=2.5*g,Vt("Bounce",(function(e){return 1-y(1-e)}),y=function(e){return e<g?x*e*e:e<b?x*Math.pow(e-1.5/m,2)+.75:e<v?x*(e-=2.25/m)*e+.9375:x*Math.pow(e-2.625/m,2)+.984375}),Vt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Vt("Circ",(function(e){return-(O(1-e*e)-1)})),Vt("Sine",(function(e){return 1===e?1:1-C(e*S)})),Vt("Back",Xt("in"),Xt("out"),Xt()),zt.SteppedEase=zt.steps=Z.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,s=e+(t?0:1),n=t?1:0;return function(e){return((s*Je(0,.99999999,e)|0)+n)*r}}},j.ease=zt["quad.out"],xe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return he+=e+","+e+"Params,"}));var Wt=function(e,t){this.id=M++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:_e,this.set=t?t.getSetter:hr},Zt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Xe(this,+e.duration,1,1),this.data=e.data,o&&(this._ctx=o,o.data.push(this)),_||Dt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Xe(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Rt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ne(this,e),!r._dp||r.parent||Ue(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Be(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===T||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),we(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Re(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Re(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?ze(this._tTime,r)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var r=this.parent&&this._ts?Fe(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Je(-Math.abs(this._delay),this._tDur,r),!1!==t),Ie(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Rt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==T&&(this._tTime-=T)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Be(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(z(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Fe(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ne);var t=a;return a=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),a=t,this},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,We(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,We(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime($e(this,e),z(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,z(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-T))},t.eventCallback=function(e,t,r){var s=this.vars;return arguments.length>1?(t?(s[e]=t,r&&(s[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete s[e],this):s[e]},t.then=function(e){var t=this;return new Promise((function(r){var s=L(e)?e:Ee,n=function(){var e=t.then;t.then=null,L(s)&&(s=s(t))&&(s.then||s===t)&&(t.then=e),r(s),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?n():t._prom=n}))},t.kill=function(){jt(this)},e}();Te(Zt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var $t=function(e){function t(t,r){var n;return void 0===t&&(t={}),(n=e.call(this,t)||this).labels={},n.smoothChildTiming=!!t.smoothChildTiming,n.autoRemoveChildren=!!t.autoRemoveChildren,n._sort=z(t.sortChildren),l&&Be(t.parent||l,s(n),r),t.reversed&&n.reverse(),t.paused&&n.paused(!0),t.scrollTrigger&&He(s(n),t.scrollTrigger),n}n(t,e);var r=t.prototype;return r.to=function(e,t,r){return Qe(0,arguments,this),this},r.from=function(e,t,r){return Qe(1,arguments,this),this},r.fromTo=function(e,t,r,s){return Qe(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Oe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new or(e,t,$e(this,r),1),this},r.call=function(e,t,r){return Be(this,or.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,s,n,i,a){return r.duration=t,r.stagger=r.stagger||s,r.onComplete=i,r.onCompleteParams=a,r.parent=this,new or(e,r,$e(this,n)),this},r.staggerFrom=function(e,t,r,s,n,i,a){return r.runBackwards=1,Oe(r).immediateRender=z(r.immediateRender),this.staggerTo(e,t,r,s,n,i,a)},r.staggerFromTo=function(e,t,r,s,n,i,a,o){return s.startAt=r,Oe(s).immediateRender=z(s.immediateRender),this.staggerTo(e,t,s,n,i,a,o)},r.render=function(e,t,r){var s,n,i,o,c,u,d,h,p,f,_,x,m=this._time,g=this._dirty?this.totalDuration():this._tDur,b=this._dur,v=e<=0?0:ge(e),y=this._zTime<0!=e<0&&(this._initted||!b);if(this!==l&&v>g&&e>=0&&(v=g),v!==this._tTime||r||y){if(m!==this._time&&b&&(v+=this._time-m,e+=this._time-m),s=v,p=this._start,u=!(h=this._ts),y&&(b||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(_=this._yoyo,c=b+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*c+e,t,r);if(s=ge(v%c),v===g?(o=this._repeat,s=b):((o=~~(v/c))&&o===v/c&&(s=b,o--),s>b&&(s=b)),f=ze(this._tTime,c),!m&&this._tTime&&f!==o&&this._tTime-f*c-this._dur<=0&&(f=o),_&&1&o&&(s=b-s,x=1),o!==f&&!this._lock){var w=_&&1&f,j=w===(_&&1&o);if(o<f&&(w=!w),m=w?0:v%b?b:v,this._lock=1,this.render(m||(x?0:ge(o*c)),t,!b)._lock=0,this._tTime=v,!t&&this.parent&&wt(this,"onRepeat"),this.vars.repeatRefresh&&!x&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,g=this._tDur,j&&(this._lock=2,m=w?b:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!x&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Bt(this,x)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,r){var s;if(r>t)for(s=e._first;s&&s._start<=r;){if("isPause"===s.data&&s._start>t)return s;s=s._next}else for(s=e._last;s&&s._start>=r;){if("isPause"===s.data&&s._start<t)return s;s=s._prev}}(this,ge(m),ge(s)),d&&(v-=s-(s=d._start))),this._tTime=v,this._time=s,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&s&&!t&&!o&&(wt(this,"onStart"),this._tTime!==v))return this;if(s>=m&&e>=0)for(n=this._first;n;){if(i=n._next,(n._act||s>=n._start)&&n._ts&&d!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(s-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(s-n._start)*n._ts,t,r),s!==this._time||!this._ts&&!u){d=0,i&&(v+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var E=e<0?e:s;n;){if(i=n._prev,(n._act||E<=n._end)&&n._ts&&d!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(E-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(E-n._start)*n._ts,t,r||a&&(n._initted||n._startAt)),s!==this._time||!this._ts&&!u){d=0,i&&(v+=this._zTime=E?-1e-8:T);break}}n=i}}if(d&&!t&&(this.pause(),d.render(s>=m?0:-1e-8)._zTime=s>=m?1:-1,this._ts))return this._start=p,Ie(this),this.render(e,t,r);this._onUpdate&&!t&&wt(this,"onUpdate",!0),(v===g&&this._tTime>=this.totalDuration()||!v&&m)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!b)&&(v===g&&this._ts>0||!v&&this._ts<0)&&Pe(this,1),t||e<0&&!m||!v&&!m&&g||(wt(this,v===g&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(v<g&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(q(t)||(t=$e(this,t,e)),!(e instanceof Zt)){if(U(e))return e.forEach((function(e){return r.add(e,t)})),this;if(P(e))return this.addLabel(e,t);if(!L(e))return this;e=or.delayedCall(0,e)}return this!==e?Be(this,e,t):this},r.getChildren=function(e,t,r,s){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===s&&(s=-E);for(var n=[],i=this._first;i;)i._start>=s&&(i instanceof or?t&&n.push(i):(r&&n.push(i),e&&n.push.apply(n,i.getChildren(!0,t,r)))),i=i._next;return n},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return P(e)?this.removeLabel(e):L(e)?this.killTweensOf(e):(ke(this,e),e===this._recent&&(this._recent=this._last),Le(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ge(Dt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=$e(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var s=or.delayedCall(0,t||te,r);return s.data="isPause",this._hasPause=1,Be(this,s,$e(this,e))},r.removePause=function(e){var t=this._first;for(e=$e(this,e);t;)t._start===e&&"isPause"===t.data&&Pe(t),t=t._next},r.killTweensOf=function(e,t,r){for(var s=this.getTweensOf(e,r),n=s.length;n--;)Qt!==s[n]&&s[n].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,s=[],n=it(e),i=this._first,a=q(t);i;)i instanceof or?ve(i._targets,n)&&(a?(!Qt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&s.push(i):(r=i.getTweensOf(n,t)).length&&s.push.apply(s,r),i=i._next;return s},r.tweenTo=function(e,t){t=t||{};var r,s=this,n=$e(s,e),i=t,a=i.startAt,o=i.onStart,l=i.onStartParams,c=i.immediateRender,u=or.to(s,Te({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:t.duration||Math.abs((n-(a&&"time"in a?a.time:s._time))/s.timeScale())||T,onStart:function(){if(s.pause(),!r){var e=t.duration||Math.abs((n-(a&&"time"in a?a.time:s._time))/s.timeScale());u._dur!==e&&Xe(u,e,0,1).render(u._time,!0,!0),r=1}o&&o.apply(u,l||[])}},t));return c?u.render(0):u},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Te({startAt:{time:$e(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),yt(this,$e(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),yt(this,$e(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+T)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var s,n=this._first,i=this.labels;n;)n._start>=r&&(n._start+=e,n._end+=e),n=n._next;if(t)for(s in i)i[s]>=r&&(i[s]+=e);return Le(this)},r.invalidate=function(t){var r=this._first;for(this._lock=0;r;)r.invalidate(t),r=r._next;return e.prototype.invalidate.call(this,t)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Le(this)},r.totalDuration=function(e){var t,r,s,n=0,i=this,a=i._last,o=E;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(s=i.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>o&&i._sort&&a._ts&&!i._lock?(i._lock=1,Be(i,a,r-a._delay,1)._lock=0):o=r,r<0&&a._ts&&(n-=r,(!s&&!i._dp||s&&s.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),o=0),a._end>n&&a._ts&&(n=a._end),a=t;Xe(i,i===l&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(l._ts&&(we(l,Fe(e,l)),p=Dt.frame),Dt.frame>=ue){ue+=w.autoSleep||120;var t=l._first;if((!t||!t._ts)&&w.autoSleep&&Dt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Dt.sleep()}}},t}(Zt);Te($t.prototype,{_lock:0,_hasPause:0,_forcing:0});var Qt,Kt,Jt=function(e,t,r,s,n,i,a){var o,l,c,u,d,h,p,f,_=new yr(this._pt,e,t,0,1,_r,null,n),x=0,m=0;for(_.b=r,_.e=s,r+="",(p=~(s+="").indexOf("random("))&&(s=gt(s)),i&&(i(f=[r,s],e,t),r=f[0],s=f[1]),l=r.match(G)||[];o=G.exec(s);)u=o[0],d=s.substring(x,o.index),c?c=(c+1)%5:"rgba("===d.substr(-5)&&(c=1),u!==l[m++]&&(h=parseFloat(l[m-1])||0,_._pt={_next:_._pt,p:d||1===m?d:",",s:h,c:"="===u.charAt(1)?be(h,u)-h:parseFloat(u)-h,m:c&&c<4?Math.round:0},x=G.lastIndex);return _.c=x<s.length?s.substring(x,s.length):"",_.fp=a,(Y.test(s)||p)&&(_.e=0),this._pt=_,_},er=function(e,t,r,s,n,i,a,o,l,c){L(s)&&(s=s(n||0,e,i));var u,d=e[t],h="get"!==r?r:L(d)?l?e[t.indexOf("set")||!L(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():d,p=L(d)?l?ur:cr:lr;if(P(s)&&(~s.indexOf("random(")&&(s=gt(s)),"="===s.charAt(1)&&((u=be(h,s)+(et(h)||0))||0===u)&&(s=u)),!c||h!==s||Kt)return isNaN(h*s)||""===s?(!d&&!(t in e)&&K(t,s),Jt.call(this,e,t,h,s,p,o||w.stringFilter,l)):(u=new yr(this._pt,e,t,+h||0,s-(h||0),"boolean"==typeof d?fr:pr,0,p),l&&(u.fp=l),a&&u.modifier(a,this,e),this._pt=u)},tr=function(e,t,r,s,n,i){var a,o,l,c;if(le[e]&&!1!==(a=new le[e]).init(n,a.rawVars?t[e]:function(e,t,r,s,n){if(L(e)&&(e=nr(e,n,t,r,s)),!R(e)||e.style&&e.nodeType||U(e)||N(e))return P(e)?nr(e,n,t,r,s):e;var i,a={};for(i in e)a[i]=nr(e[i],n,t,r,s);return a}(t[e],s,n,i,r),r,s,i)&&(r._pt=o=new yr(r._pt,n,e,0,1,a.render,a,0,a.priority),r!==f))for(l=r._ptLookup[r._targets.indexOf(n)],c=a._props.length;c--;)l[a._props[c]]=o;return a},rr=function e(t,r,s){var n,o,c,u,d,h,p,f,_,x,m,g,b,v=t.vars,y=v.ease,w=v.startAt,A=v.immediateRender,S=v.lazy,M=v.onUpdate,O=v.runBackwards,C=v.yoyoEase,k=v.keyframes,P=v.autoRevert,L=t._dur,q=t._startAt,D=t._targets,R=t.parent,F=R&&"nested"===R.data?R.vars.targets:D,I="auto"===t._overwrite&&!i,N=t.timeline;if(N&&(!k||!y)&&(y="none"),t._ease=Ht(y,j.ease),t._yEase=C?Ut(Ht(!0===C?y:C,j.ease)):0,C&&t._yoyo&&!t._repeat&&(C=t._yEase,t._yEase=t._ease,t._ease=C),t._from=!N&&!!v.runBackwards,!N||k&&!v.stagger){if(g=(f=D[0]?fe(D[0]).harness:0)&&v[f.prop],n=Me(v,ie),q&&(q._zTime<0&&q.progress(1),r<0&&O&&A&&!P?q.render(-1,!0):q.revert(O&&L?se:re),q._lazy=0),w){if(Pe(t._startAt=or.set(D,Te({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!q&&z(S),startAt:null,delay:0,onUpdate:M&&function(){return wt(t,"onUpdate")},stagger:0},w))),t._startAt._dp=0,t._startAt._sat=t,r<0&&(a||!A&&!P)&&t._startAt.revert(se),A&&L&&r<=0&&s<=0)return void(r&&(t._zTime=r))}else if(O&&L&&!q)if(r&&(A=!1),c=Te({overwrite:!1,data:"isFromStart",lazy:A&&!q&&z(S),immediateRender:A,stagger:0,parent:R},n),g&&(c[f.prop]=g),Pe(t._startAt=or.set(D,c)),t._startAt._dp=0,t._startAt._sat=t,r<0&&(a?t._startAt.revert(se):t._startAt.render(-1,!0)),t._zTime=r,A){if(!r)return}else e(t._startAt,T,T);for(t._pt=t._ptCache=0,S=L&&z(S)||S&&!L,o=0;o<D.length;o++){if(p=(d=D[o])._gsap||pe(D)[o]._gsap,t._ptLookup[o]=x={},oe[p.id]&&ae.length&&ye(),m=F===D?o:F.indexOf(d),f&&!1!==(_=new f).init(d,g||n,t,m,F)&&(t._pt=u=new yr(t._pt,d,_.name,0,1,_.render,_,0,_.priority),_._props.forEach((function(e){x[e]=u})),_.priority&&(h=1)),!f||g)for(c in n)le[c]&&(_=tr(c,n,t,m,d,F))?_.priority&&(h=1):x[c]=u=er.call(t,d,c,"get",n[c],m,F,0,v.stringFilter);t._op&&t._op[o]&&t.kill(d,t._op[o]),I&&t._pt&&(Qt=t,l.killTweensOf(d,x,t.globalTime(r)),b=!t.parent,Qt=0),t._pt&&S&&(oe[p.id]=1)}h&&vr(t),t._onInit&&t._onInit(t)}t._onUpdate=M,t._initted=(!t._op||t._pt)&&!b,k&&r<=0&&N.render(E,!0,!0)},sr=function(e,t,r,s){var n,i,a=t.ease||s||"power1.inOut";if(U(t))i=r[e]||(r[e]=[]),t.forEach((function(e,r){return i.push({t:r/(t.length-1)*100,v:e,e:a})}));else for(n in t)i=r[n]||(r[n]=[]),"ease"===n||i.push({t:parseFloat(e),v:t[n],e:a})},nr=function(e,t,r,s,n){return L(e)?e.call(t,r,s,n):P(e)&&~e.indexOf("random(")?gt(e):e},ir=he+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",ar={};xe(ir+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return ar[e]=1}));var or=function(e){function t(t,r,n,a){var o;"number"==typeof r&&(n.duration=r,r=n,n=null);var c,u,d,h,p,f,_,x,m=(o=e.call(this,a?r:Oe(r))||this).vars,g=m.duration,b=m.delay,v=m.immediateRender,y=m.stagger,j=m.overwrite,E=m.keyframes,T=m.defaults,A=m.scrollTrigger,S=m.yoyoEase,M=r.parent||l,O=(U(t)||N(t)?q(t[0]):"length"in r)?[t]:it(t);if(o._targets=O.length?pe(O):J("GSAP target "+t+" not found. https://gsap.com",!w.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=j,E||y||I(g)||I(b)){if(r=o.vars,(c=o.timeline=new $t({data:"nested",defaults:T||{},targets:M&&"nested"===M.data?M.vars.targets:O})).kill(),c.parent=c._dp=s(o),c._start=0,y||I(g)||I(b)){if(h=O.length,_=y&&lt(y),R(y))for(p in y)~ir.indexOf(p)&&(x||(x={}),x[p]=y[p]);for(u=0;u<h;u++)(d=Me(r,ar)).stagger=0,S&&(d.yoyoEase=S),x&&Ae(d,x),f=O[u],d.duration=+nr(g,s(o),u,f,O),d.delay=(+nr(b,s(o),u,f,O)||0)-o._delay,!y&&1===h&&d.delay&&(o._delay=b=d.delay,o._start+=b,d.delay=0),c.to(f,d,_?_(u,f,O):0),c._ease=zt.none;c.duration()?g=b=0:o.timeline=0}else if(E){Oe(Te(c.vars.defaults,{ease:"none"})),c._ease=Ht(E.ease||r.ease||"none");var C,k,P,L=0;if(U(E))E.forEach((function(e){return c.to(O,e,">")})),c.duration();else{for(p in d={},E)"ease"===p||"easeEach"===p||sr(p,E[p],d,E.easeEach);for(p in d)for(C=d[p].sort((function(e,t){return e.t-t.t})),L=0,u=0;u<C.length;u++)(P={ease:(k=C[u]).e,duration:(k.t-(u?C[u-1].t:0))/100*g})[p]=k.v,c.to(O,P,L),L+=P.duration;c.duration()<g&&c.to({},{duration:g-c.duration()})}}g||o.duration(g=c.duration())}else o.timeline=0;return!0!==j||i||(Qt=s(o),l.killTweensOf(O),Qt=0),Be(M,s(o),n),r.reversed&&o.reverse(),r.paused&&o.paused(!0),(v||!g&&!E&&o._start===ge(M._time)&&z(v)&&De(s(o))&&"nested"!==M.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-b)||0)),A&&He(s(o),A),o}n(t,e);var r=t.prototype;return r.render=function(e,t,r){var s,n,i,o,l,c,u,d,h,p=this._time,f=this._tDur,_=this._dur,x=e<0,m=e>f-T&&!x?f:e<T?0:e;if(_){if(m!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==x){if(s=m,d=this.timeline,this._repeat){if(o=_+this._rDelay,this._repeat<-1&&x)return this.totalTime(100*o+e,t,r);if(s=ge(m%o),m===f?(i=this._repeat,s=_):((i=~~(m/o))&&i===ge(m/o)&&(s=_,i--),s>_&&(s=_)),(c=this._yoyo&&1&i)&&(h=this._yEase,s=_-s),l=ze(this._tTime,o),s===p&&!r&&this._initted&&i===l)return this._tTime=m,this;i!==l&&(d&&this._yEase&&Bt(d,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==o&&this._initted&&(this._lock=r=1,this.render(ge(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ve(this,x?e:s,r,t,m))return this._tTime=0,this;if(!(p===this._time||r&&this.vars.repeatRefresh&&i!==l))return this;if(_!==this._dur)return this.render(e,t,r)}if(this._tTime=m,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(s/_),this._from&&(this.ratio=u=1-u),s&&!p&&!t&&!i&&(wt(this,"onStart"),this._tTime!==m))return this;for(n=this._pt;n;)n.r(u,n.d),n=n._next;d&&d.render(e<0?e:d._dur*d._ease(s/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(x&&qe(this,e,0,r),wt(this,"onUpdate")),this._repeat&&i!==l&&this.vars.onRepeat&&!t&&this.parent&&wt(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(x&&!this._onUpdate&&qe(this,e,0,!0),(e||!_)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&Pe(this,1),t||x&&!p||!(m||p||c)||(wt(this,m===f?"onComplete":"onReverseComplete",!0),this._prom&&!(m<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,s){var n,i,o,l=e.ratio,c=t<0||!t&&(!e._start&&Ge(e)&&(e._initted||!Ye(e))||(e._ts<0||e._dp._ts<0)&&!Ye(e))?0:1,u=e._rDelay,d=0;if(u&&e._repeat&&(d=Je(0,e._tDur,t),i=ze(d,u),e._yoyo&&1&i&&(c=1-c),i!==ze(e._tTime,u)&&(l=1-c,e.vars.repeatRefresh&&e._initted&&e.invalidate())),c!==l||a||s||e._zTime===T||!t&&e._zTime){if(!e._initted&&Ve(e,t,s,r,d))return;for(o=e._zTime,e._zTime=t||(r?T:0),r||(r=t&&!o),e.ratio=c,e._from&&(c=1-c),e._time=0,e._tTime=d,n=e._pt;n;)n.r(c,n.d),n=n._next;t<0&&qe(e,t,0,!0),e._onUpdate&&!r&&wt(e,"onUpdate"),d&&e._repeat&&!r&&e.parent&&wt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===c&&(c&&Pe(e,1),r||a||(wt(e,c?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},r.resetTo=function(e,t,r,s,n){_||Dt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||rr(this,i),function(e,t,r,s,n,i,a,o){var l,c,u,d,h=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!h)for(h=e._ptCache[t]=[],u=e._ptLookup,d=e._targets.length;d--;){if((l=u[d][t])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==t&&l.fp!==t;)l=l._next;if(!l)return Kt=1,e.vars[t]="+=0",rr(e,a),Kt=0,o?J(t+" not eligible for reset"):1;h.push(l)}for(d=h.length;d--;)(l=(c=h[d])._pt||c).s=!s&&0!==s||n?l.s+(s||0)+i*l.c:s,l.c=r-l.s,c.e&&(c.e=me(r)+et(c.e)),c.b&&(c.b=l.s+et(c.b))}(this,e,t,r,s,this._ease(i/this._dur),i,n)?this.resetTo(e,t,r,s,1):(Ne(this,0),this.parent||Ce(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?jt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Qt&&!0!==Qt.vars.overwrite)._first||jt(this),this.parent&&r!==this.timeline.totalDuration()&&Xe(this,this._dur*this.timeline._tDur/r,0,1),this}var s,n,i,a,o,l,c,u=this._targets,d=e?it(e):u,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,s=r===t.length;s&&r--&&e[r]===t[r];);return r<0}(u,d))return"all"===t&&(this._pt=0),jt(this);for(s=this._op=this._op||[],"all"!==t&&(P(t)&&(o={},xe(t,(function(e){return o[e]=1})),t=o),t=function(e,t){var r,s,n,i,a=e[0]?fe(e[0]).harness:0,o=a&&a.aliases;if(!o)return t;for(s in r=Ae({},t),o)if(s in r)for(n=(i=o[s].split(",")).length;n--;)r[i[n]]=r[s];return r}(u,t)),c=u.length;c--;)if(~d.indexOf(u[c]))for(o in n=h[c],"all"===t?(s[c]=t,a=n,i={}):(i=s[c]=s[c]||{},a=t),a)(l=n&&n[o])&&("kill"in l.d&&!0!==l.d.kill(o)||ke(this,l,"_pt"),delete n[o]),"all"!==i&&(i[o]=1);return this._initted&&!this._pt&&p&&jt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return Qe(1,arguments)},t.delayedCall=function(e,r,s,n){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:n})},t.fromTo=function(e,t,r){return Qe(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return l.killTweensOf(e,t,r)},t}(Zt);Te(or.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),xe("staggerTo,staggerFrom,staggerFromTo",(function(e){or[e]=function(){var t=new $t,r=rt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var lr=function(e,t,r){return e[t]=r},cr=function(e,t,r){return e[t](r)},ur=function(e,t,r,s){return e[t](s.fp,r)},dr=function(e,t,r){return e.setAttribute(t,r)},hr=function(e,t){return L(e[t])?cr:D(e[t])&&e.setAttribute?dr:lr},pr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},fr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},_r=function(e,t){var r=t._pt,s="";if(!e&&t.b)s=t.b;else if(1===e&&t.e)s=t.e;else{for(;r;)s=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+s,r=r._next;s+=t.c}t.set(t.t,t.p,s,t)},xr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},mr=function(e,t,r,s){for(var n,i=this._pt;i;)n=i._next,i.p===s&&i.modifier(e,t,r),i=n},gr=function(e){for(var t,r,s=this._pt;s;)r=s._next,s.p===e&&!s.op||s.op===e?ke(this,s,"_pt"):s.dep||(t=1),s=r;return!t},br=function(e,t,r,s){s.mSet(e,t,s.m.call(s.tween,r,s.mt),s)},vr=function(e){for(var t,r,s,n,i=e._pt;i;){for(t=i._next,r=s;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:n)?i._prev._next=i:s=i,(i._next=r)?r._prev=i:n=i,i=t}e._pt=s},yr=function(){function e(e,t,r,s,n,i,a,o,l){this.t=t,this.s=s,this.c=n,this.p=r,this.r=i||pr,this.d=a||this,this.set=o||lr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=br,this.m=e,this.mt=r,this.tween=t},e}();xe(he+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ie[e]=1})),Z.TweenMax=Z.TweenLite=or,Z.TimelineLite=Z.TimelineMax=$t,l=new $t({sortChildren:!1,defaults:j,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),w.stringFilter=qt;var wr=[],jr={},Er=[],Tr=0,Ar=0,Sr=function(e){return(jr[e]||Er).map((function(e){return e()}))},Mr=function(){var e=Date.now(),t=[];e-Tr>2&&(Sr("matchMediaInit"),wr.forEach((function(e){var r,s,n,i,a=e.queries,o=e.conditions;for(s in a)(r=c.matchMedia(a[s]).matches)&&(n=1),r!==o[s]&&(o[s]=r,i=1);i&&(e.revert(),n&&t.push(e))})),Sr("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),Tr=e,Sr("matchMedia"))},Or=function(){function e(e,t){this.selector=t&&at(t),this.data=[],this._r=[],this.isReverted=!1,this.id=Ar++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,r){L(e)&&(r=t,t=e,e=L);var s=this,n=function(){var e,n=o,i=s.selector;return n&&n!==s&&n.data.push(s),r&&(s.selector=at(r)),o=s,e=t.apply(s,arguments),L(e)&&s._r.push(e),o=n,s.selector=i,s.isReverted=!1,e};return s.last=n,e===L?n(s,(function(e){return s.add(null,e)})):e?s[e]=n:n},t.ignore=function(e){var t=o;o=null,e(this),o=t},t.getTweens=function(){var t=[];return this.data.forEach((function(r){return r instanceof e?t.push.apply(t,r.getTweens()):r instanceof or&&!(r.parent&&"nested"===r.parent.data)&&t.push(r)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var r=this;if(e?function(){for(var t,s=r.getTweens(),n=r.data.length;n--;)"isFlip"===(t=r.data[n]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return s.splice(s.indexOf(e),1)})));for(s.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),n=r.data.length;n--;)(t=r.data[n])instanceof $t?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof or)&&t.revert&&t.revert(e);r._r.forEach((function(t){return t(e,r)})),r.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var s=wr.length;s--;)wr[s].id===this.id&&wr.splice(s,1)},t.revert=function(e){this.kill(e||{})},e}(),Cr=function(){function e(e){this.contexts=[],this.scope=e,o&&o.data.push(this)}var t=e.prototype;return t.add=function(e,t,r){R(e)||(e={matches:e});var s,n,i,a=new Or(0,r||this.scope),l=a.conditions={};for(n in o&&!a.selector&&(a.selector=o.selector),this.contexts.push(a),t=a.add("onMatch",t),a.queries=e,e)"all"===n?i=1:(s=c.matchMedia(e[n]))&&(wr.indexOf(a)<0&&wr.push(a),(l[n]=s.matches)&&(i=1),s.addListener?s.addListener(Mr):s.addEventListener("change",Mr));return i&&t(a,(function(e){return a.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),kr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Tt(e)}))},timeline:function(e){return new $t(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,r,s){P(e)&&(e=it(e)[0]);var n=fe(e||{}).get,i=r?Ee:je;return"native"===r&&(r=""),e?t?i((le[t]&&le[t].get||n)(e,t,r,s)):function(t,r,s){return i((le[t]&&le[t].get||n)(e,t,r,s))}:e},quickSetter:function(e,t,r){if((e=it(e)).length>1){var s=e.map((function(e){return qr.quickSetter(e,t,r)})),n=s.length;return function(e){for(var t=n;t--;)s[t](e)}}e=e[0]||{};var i=le[t],a=fe(e),o=a.harness&&(a.harness.aliases||{})[t]||t,l=i?function(t){var s=new i;f._pt=0,s.init(e,r?t+r:t,f,0,[e]),s.render(1,s),f._pt&&xr(1,f)}:a.set(e,o);return i?l:function(t){return l(e,o,r?t+r:t,a,1)}},quickTo:function(e,t,r){var s,n=qr.to(e,Ae(((s={})[t]="+=0.1",s.paused=!0,s),r||{})),i=function(e,r,s){return n.resetTo(t,e,r,s)};return i.tween=n,i},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Ht(e.ease,j.ease)),Se(j,e||{})},config:function(e){return Se(w,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,s=e.plugins,n=e.defaults,i=e.extendTimeline;(s||"").split(",").forEach((function(e){return e&&!le[e]&&!Z[e]&&J(t+" effect requires "+e+" plugin.")})),ce[t]=function(e,t,s){return r(it(e),Te(t||{},n),s)},i&&($t.prototype[t]=function(e,r,s){return this.add(ce[t](e,R(r)?r:(s=r)&&{},this),s)})},registerEase:function(e,t){zt[e]=Ht(t)},parseEase:function(e,t){return arguments.length?Ht(e,t):zt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,s,n=new $t(e);for(n.smoothChildTiming=z(e.smoothChildTiming),l.remove(n),n._dp=0,n._time=n._tTime=l._time,r=l._first;r;)s=r._next,!t&&!r._dur&&r instanceof or&&r.vars.onComplete===r._targets[0]||Be(n,r,r._start-r._delay),r=s;return Be(l,n,0),n},context:function(e,t){return e?new Or(e,t):o},matchMedia:function(e){return new Cr(e)},matchMediaRefresh:function(){return wr.forEach((function(e){var t,r,s=e.conditions;for(r in s)s[r]&&(s[r]=!1,t=1);t&&e.revert()}))||Mr()},addEventListener:function(e,t){var r=jr[e]||(jr[e]=[]);~r.indexOf(t)||r.push(t)},removeEventListener:function(e,t){var r=jr[e],s=r&&r.indexOf(t);s>=0&&r.splice(s,1)},utils:{wrap:xt,wrapYoyo:mt,distribute:lt,random:dt,snap:ut,normalize:ft,getUnit:et,clamp:tt,splitColor:Ot,toArray:it,selector:at,mapRange:bt,pipe:ht,unitize:pt,interpolate:vt,shuffle:ot},install:Q,effects:ce,ticker:Dt,updateRoot:$t.updateRoot,plugins:le,globalTimeline:l,core:{PropTween:yr,globals:ee,Tween:or,Timeline:$t,Animation:Zt,getCache:fe,_removeLinkedListItem:ke,reverting:function(){return a},context:function(e){return e&&o&&(o.data.push(e),e._ctx=o),o},suppressOverwrites:function(e){return i=e}}};xe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return kr[e]=or[e]})),Dt.add($t.updateRoot),f=kr.to({},{duration:0});var Pr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Lr=function(e,t){return{name:e,rawVars:1,init:function(e,r,s){s._onInit=function(e){var s,n;if(P(r)&&(s={},xe(r,(function(e){return s[e]=1})),r=s),t){for(n in s={},r)s[n]=t(r[n]);r=s}!function(e,t){var r,s,n,i=e._targets;for(r in t)for(s=i.length;s--;)(n=e._ptLookup[s][r])&&(n=n.d)&&(n._pt&&(n=Pr(n,r)),n&&n.modifier&&n.modifier(t[r],e,i[s],r))}(e,r)}}}},qr=kr.registerPlugin({name:"attr",init:function(e,t,r,s,n){var i,a,o;for(i in this.tween=r,t)o=e.getAttribute(i)||"",(a=this.add(e,"setAttribute",(o||0)+"",t[i],s,n,0,0,i)).op=i,a.b=o,this._props.push(i)},render:function(e,t){for(var r=t._pt;r;)a?r.set(r.t,r.p,r.b,r):r.r(e,r.d),r=r._next}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r],0,0,0,0,0,1)}},Lr("roundProps",ct),Lr("modifiers"),Lr("snap",ut))||kr;or.version=$t.version=qr.version="3.12.5",h=1,F()&&Rt();var Dr=zt.Power0,Rr=zt.Power1,zr=zt.Power2,Fr=zt.Power3,Ir=zt.Power4,Nr=zt.Linear,Ur=zt.Quad,Br=zt.Cubic,Hr=zt.Quart,Vr=zt.Quint,Gr=zt.Strong,Yr=zt.Elastic,Xr=zt.Back,Wr=zt.SteppedEase,Zr=zt.Bounce,$r=zt.Sine,Qr=zt.Expo,Kr=zt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>a,default:()=>i,gsap:()=>i});var s=r("./node_modules/gsap/gsap-core.js"),n=r("./node_modules/gsap/CSSPlugin.js"),i=s.gsap.registerPlugin(n.CSSPlugin)||s.gsap,a=i.core.Tween},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},s.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),a=r("./node_modules/html-entities/lib/surrogate-pairs.js"),o=s(s({},n.namedReferences),{all:n.namedReferences.html5});function l(e,t,r){t.lastIndex=0;var s,n=t.exec(e);if(n){s="";var i=0;do{i!==n.index&&(s+=e.substring(i,n.index));var a=n[0];s+=r(a),i=n.index+a.length}while(n=t.exec(e));i!==e.length&&(s+=e.substring(i))}else s=e;return s}var c={specialChars:/[<>'"&]/g,nonAscii:/[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,nonAsciiPrintable:/[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,nonAsciiPrintableOnly:/[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,extensive:/[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===t?u:t,s=r.mode,n=void 0===s?"specialChars":s,i=r.numeric,d=void 0===i?"decimal":i,h=r.level;if(!e)return"";var p=c[n],f=o[void 0===h?"all":h].characters,_="hexadecimal"===d;return l(e,p,(function(e){var t=f[e];if(!t){var r=e.length>1?a.getCodePoint(e,0):e.charCodeAt(0);t=(_?"&#x"+r.toString(16):"&#"+r)+";"}return t}))};var d={scope:"body",level:"all"},h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,p=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,f={xml:{strict:h,attribute:p,body:n.bodyRegExps.xml},html4:{strict:h,attribute:p,body:n.bodyRegExps.html4},html5:{strict:h,attribute:p,body:n.bodyRegExps.html5}},_=s(s({},f),{all:f.html5}),x=String.fromCharCode,m=x(65533),g={level:"all"};function b(e,t,r,s){var n=e,o=e[e.length-1];if(r&&"="===o)n=e;else if(s&&";"!==o)n=e;else{var l=t[e];if(l)n=l;else if("&"===e[0]&&"#"===e[1]){var c=e[2],u="x"==c||"X"==c?parseInt(e.substr(3),16):parseInt(e.substr(2));n=u>=1114111?m:u>65535?a.fromCodePoint(u):x(i.numericUnicodeMap[u]||u)}}return n}t.decodeEntity=function(e,t){var r=(void 0===t?g:t).level;return e?b(e,o[void 0===r?"all":r].entities,!1,!1):""},t.decode=function(e,t){var r=void 0===t?d:t,s=r.level,n=void 0===s?"all":s,i=r.scope,a=void 0===i?"xml"===n?"strict":"body":i;if(!e)return"";var c=_[n][a],u=o[n].entities,h="attribute"===a,p="strict"===a;return l(e,c,(function(e){return b(e,u,h,p)}))}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=s},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var s=r("./node_modules/lodash/_hashClear.js"),n=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),a=r("./node_modules/lodash/_hashHas.js"),o=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=a,l.prototype.set=o,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_listCacheClear.js"),n=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),a=r("./node_modules/lodash/_listCacheHas.js"),o=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=a,l.prototype.set=o,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=s},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_mapCacheClear.js"),n=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),a=r("./node_modules/lodash/_mapCacheHas.js"),o=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=a,l.prototype.set=o,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=s},"./node_modules/lodash/_Set.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=s},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js"),n=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function a(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new s;++t<r;)this.add(e[t])}a.prototype.add=a.prototype.push=n,a.prototype.has=i,e.exports=a},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),a=r("./node_modules/lodash/_stackGet.js"),o=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function c(e){var t=this.__data__=new s(e);this.size=t.size}c.prototype.clear=n,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=o,c.prototype.set=l,e.exports=c},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Symbol;e.exports=s},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=s},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=s},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=0,i=[];++r<s;){var a=e[r];t(a,r,e)&&(i[n++]=a)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseTimes.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/isBuffer.js"),o=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),u=!r&&n(e),d=!r&&!u&&a(e),h=!r&&!u&&!d&&l(e),p=r||u||d||h,f=p?s(e.length,String):[],_=f.length;for(var x in e)!t&&!c.call(e,x)||p&&("length"==x||d&&("offset"==x||"parent"==x)||h&&("buffer"==x||"byteLength"==x||"byteOffset"==x)||o(x,_))||f.push(x);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=Array(s);++r<s;)n[r]=t(e[r],r,e);return n}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,s=t.length,n=e.length;++r<s;)e[n+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var s=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(s(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseForOwn.js"),n=r("./node_modules/lodash/_createBaseEach.js")(s);e.exports=n},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var s=r("./node_modules/lodash/_createBaseFor.js")();e.exports=s},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseFor.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&s(e,t,n)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=s(t,e)).length;null!=e&&r<i;)e=e[n(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayPush.js"),n=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return n(e)?i:s(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),a=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?n(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return n(e)&&"[object Arguments]"==s(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqualDeep.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,a,o){return t===r||(null==t||null==r||!n(t)&&!n(r)?t!=t&&r!=r:s(t,r,i,a,e,o))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),a=r("./node_modules/lodash/_equalObjects.js"),o=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),c=r("./node_modules/lodash/isBuffer.js"),u=r("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",h="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,_,x,m){var g=l(e),b=l(t),v=g?h:o(e),y=b?h:o(t),w=(v=v==d?p:v)==p,j=(y=y==d?p:y)==p,E=v==y;if(E&&c(e)){if(!c(t))return!1;g=!0,w=!1}if(E&&!w)return m||(m=new s),g||u(e)?n(e,t,r,_,x,m):i(e,t,v,r,_,x,m);if(!(1&r)){var T=w&&f.call(e,"__wrapped__"),A=j&&f.call(t,"__wrapped__");if(T||A){var S=T?e.value():e,M=A?t.value():t;return m||(m=new s),x(S,M,r,_,m)}}return!!E&&(m||(m=new s),a(e,t,r,_,x,m))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var a=r.length,o=a,l=!i;if(null==e)return!o;for(e=Object(e);a--;){var c=r[a];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++a<o;){var u=(c=r[a])[0],d=e[u],h=c[1];if(l&&c[2]){if(void 0===d&&!(u in e))return!1}else{var p=new s;if(i)var f=i(d,h,u,e,t,p);if(!(void 0===f?n(h,d,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),a=r("./node_modules/lodash/_toSource.js"),o=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,h=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||n(e))&&(s(e)?h:o).test(a(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&n(e.length)&&!!a[s(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseMatches.js"),n=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),a=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?n(e[0],e[1]):s(e):o(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isPrototype.js"),n=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return n(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseEach.js"),n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=n(e)?Array(e.length):[];return s(e,(function(e,s,n){i[++r]=t(e,s,n)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsMatch.js"),n=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=n(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||s(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqual.js"),n=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),a=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),c=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return a(e)&&o(t)?l(c(e),t):function(r){var a=n(r,e);return void 0===a&&a===t?i(r,e):s(t,a,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return s(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,s=Array(e);++r<e;)s[r]=t(r);return s}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/isSymbol.js"),o=s?s.prototype:void 0,l=o?o.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return n(t,e)+"";if(a(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:s}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),a=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return s(e)?e:n(e,t)?[e]:i(a(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=s},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,n){if(null==r)return r;if(!s(r))return e(r,n);for(var i=r.length,a=t?i:-1,o=Object(r);(t?a--:++a<i)&&!1!==n(o[a],a,o););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,s){for(var n=-1,i=Object(t),a=s(t),o=a.length;o--;){var l=a[e?o:++n];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var s=r("./node_modules/lodash/_SetCache.js"),n=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,a,o,l){var c=1&r,u=e.length,d=t.length;if(u!=d&&!(c&&d>u))return!1;var h=l.get(e),p=l.get(t);if(h&&p)return h==t&&p==e;var f=-1,_=!0,x=2&r?new s:void 0;for(l.set(e,t),l.set(t,e);++f<u;){var m=e[f],g=t[f];if(a)var b=c?a(g,m,f,t,e,l):a(m,g,f,e,t,l);if(void 0!==b){if(b)continue;_=!1;break}if(x){if(!n(t,(function(e,t){if(!i(x,t)&&(m===e||o(m,e,r,a,l)))return x.push(t)}))){_=!1;break}}else if(m!==g&&!o(m,g,r,a,l)){_=!1;break}}return l.delete(e),l.delete(t),_}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),a=r("./node_modules/lodash/_equalArrays.js"),o=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),c=s?s.prototype:void 0,u=c?c.valueOf:void 0;e.exports=function(e,t,r,s,c,d,h){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new n(e),new n(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=o;case"[object Set]":var f=1&s;if(p||(p=l),e.size!=t.size&&!f)return!1;var _=h.get(e);if(_)return _==t;s|=2,h.set(e,t);var x=a(p(e),p(t),s,c,d,h);return h.delete(e),x;case"[object Symbol]":if(u)return u.call(e)==u.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,a,o){var l=1&r,c=s(e),u=c.length;if(u!=s(t).length&&!l)return!1;for(var d=u;d--;){var h=c[d];if(!(l?h in t:n.call(t,h)))return!1}var p=o.get(e),f=o.get(t);if(p&&f)return p==t&&f==e;var _=!0;o.set(e,t),o.set(t,e);for(var x=l;++d<u;){var m=e[h=c[d]],g=t[h];if(i)var b=l?i(g,m,h,t,e,o):i(m,g,h,e,t,o);if(!(void 0===b?m===g||a(m,g,r,i,o):b)){_=!1;break}x||(x="constructor"==h)}if(_&&!x){var v=e.constructor,y=t.constructor;v==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y||(_=!1)}return o.delete(e),o.delete(t),_}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var s="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=s},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetAllKeys.js"),n=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return s(e,i,n)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return s(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isStrictComparable.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=n(e),r=t.length;r--;){var i=t[r],a=e[i];t[r]=[i,a,s(a)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsNative.js"),n=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=n(e,t);return s(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,a=n.toString,o=s?s.toStringTag:void 0;e.exports=function(e){var t=i.call(e,o),r=e[o];try{e[o]=void 0;var s=!0}catch(e){}var n=a.call(e);return s&&(t?e[o]=r:delete e[o]),n}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayFilter.js"),n=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,o=a?function(e){return null==e?[]:(e=Object(e),s(a(e),(function(t){return i.call(e,t)})))}:n;e.exports=o},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_DataView.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),a=r("./node_modules/lodash/_Set.js"),o=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),c=r("./node_modules/lodash/_toSource.js"),u="[object Map]",d="[object Promise]",h="[object Set]",p="[object WeakMap]",f="[object DataView]",_=c(s),x=c(n),m=c(i),g=c(a),b=c(o),v=l;(s&&v(new s(new ArrayBuffer(1)))!=f||n&&v(new n)!=u||i&&v(i.resolve())!=d||a&&v(new a)!=h||o&&v(new o)!=p)&&(v=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,s=r?c(r):"";if(s)switch(s){case _:return f;case x:return u;case m:return d;case g:return h;case b:return p}return t}),e.exports=v},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/_isIndex.js"),o=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var c=-1,u=(t=s(t,e)).length,d=!1;++c<u;){var h=l(t[c]);if(!(d=null!=e&&r(e,h)))break;e=e[h]}return d||++c!=u?d:!!(u=null==e?0:e.length)&&o(u)&&a(h,u)&&(i(e)||n(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(s){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return n.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return s?void 0!==t[e]:n.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=s&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var s=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==s||"symbol"!=s&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(s(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!n(e))||(a.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var s,n=r("./node_modules/lodash/_coreJsData.js"),i=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var s=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!s(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=s(t,e);return!(r<0)&&(r==t.length-1?t.pop():n.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=s(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return s(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,n=s(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Hash.js"),n=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new s,map:new(i||n),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=s(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,s){r[++t]=[s,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var s=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=s(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=s},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=s},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_freeGlobal.js"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,a=i&&i.exports===n&&s.process,o=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=o},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var s=r("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=s||n||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof s){var a=r.__data__;if(!n||a.length<199)return a.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(a)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=s((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(n,(function(e,r,s,n){t.push(s?n.replace(i,"$1"):r||e)})),t}));e.exports=a},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||s(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayEach.js"),n=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),a=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(a(e)?s:n)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var n=null==e?void 0:s(e,t);return void 0===n?r:n}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseHasIn.js"),n=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&n(e,t,s)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsArguments.js"),n=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,a=i.hasOwnProperty,o=i.propertyIsEnumerable,l=s(function(){return arguments}())?s:function(e){return n(e)&&a.call(e,"callee")&&!o.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&n(e.length)&&!s(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_root.js"),n=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,a=i&&e&&!e.nodeType&&e,o=a&&a.exports===i?s.Buffer:void 0,l=(o?o.isBuffer:void 0)||n;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!n(e))return!1;var t=s(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||n(e)&&"[object Symbol]"==s(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsTypedArray.js"),n=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),a=i&&i.isTypedArray,o=a?n(a):s;e.exports=o},"./node_modules/lodash/keys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayLikeKeys.js"),n=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?s(e):n(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayMap.js"),n=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),a=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(a(e)?s:i)(e,n(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js");function n(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var s=arguments,n=t?t.apply(this,s):s[0],i=r.cache;if(i.has(n))return i.get(n);var a=e.apply(this,s);return r.cache=i.set(n,a)||i,a};return r.cache=new(n.Cache||s),r}n.Cache=s,e.exports=n},"./node_modules/lodash/property.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseProperty.js"),n=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?s(a(e)):n(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":s(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),n=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function o(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function c(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var n=function(e,t){var r;return e=s(e),t.some((function(s){e.indexOf(t)>-1&&(r=s)})),r}(t.href,e);d(n)&&!0!==t.visited&&n&&(l(t,n),r=!0)}})),r}function u(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),o;var r,a,l,d=function(e){var t=n[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}n[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),n=r&&r[1];return n&&e?e.split(",").map((function(e){var r=new RegExp("".concat(n,"\\.js$"),"g");return s(t.replace(r,"".concat(e.replace(/{fileName}/g,n),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=c(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void u();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),u())},a=50,l=0,function(){var e=this,t=arguments;clearTimeout(l),l=setTimeout((function(){return r.apply(e,t)}),a)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),s=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+s+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./styles/index.scss":(e,t,r)=>{"use strict";var s,n;r.r(t),s=void 0,n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:""}),e.hot.data&&e.hot.data.value&&e.hot.data.value!==s?e.hot.invalidate():e.hot.accept(),e.hot.dispose((function(e){e.value=s,n()}))},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,s,n,i,a,o,l,c,u,d,h,p,f,_,x=!1;function m(){if(!x){x=!0;var e=navigator.userAgent,m=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),g=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(h=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),u=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),_=/Mobile/i.exec(e),d=!!/Win64/.exec(e),m){(t=m[1]?parseFloat(m[1]):m[5]?parseFloat(m[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var b=/(?:Trident\/(\d+.\d+))/.exec(e);a=b?parseFloat(b[1])+4:t,r=m[2]?parseFloat(m[2]):NaN,s=m[3]?parseFloat(m[3]):NaN,(n=m[4]?parseFloat(m[4]):NaN)?(m=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=m&&m[1]?parseFloat(m[1]):NaN):i=NaN}else t=r=s=i=n=NaN;if(g){if(g[1]){var v=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);o=!v||parseFloat(v[1].replace("_","."))}else o=!1;l=!!g[2],c=!!g[3]}else o=l=c=!1}}var g={ie:function(){return m()||t},ieCompatibilityMode:function(){return m()||a>t},ie64:function(){return g.ie()&&d},firefox:function(){return m()||r},opera:function(){return m()||s},webkit:function(){return m()||n},safari:function(){return g.webkit()},chrome:function(){return m()||i},windows:function(){return m()||l},osx:function(){return m()||o},linux:function(){return m()||c},iphone:function(){return m()||h},mobile:function(){return m()||h||p||u||_},nativeApp:function(){return m()||f},android:function(){return m()||u},ipad:function(){return m()||p}};e.exports=g},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var s,n=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!n.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var a=document.createElement("div");a.setAttribute(r,"return;"),i="function"==typeof a[r]}return!i&&s&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var s=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,s=0,n=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),s=10*t,n=10*r,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||n)&&e.deltaMode&&(1==e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!r&&(r=n<1?-1:1),{spinX:t,spinY:r,pixelX:s,pixelY:n}}i.getEventType=function(){return s.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],s=/([A-Z])/g,n={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var s=e.charAt(0).toUpperCase()+e.slice(1),n=r.length;n--;){var i=r[n]+s;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in n?n[e]:n[e]=i(e)},e.exports.dash=function(e){return e=i(e),s.test(e)&&(e="-"+e.replace(s,"-$1"),s.lastIndex=0),e.toLowerCase()}},"./app/shaders/about-fragment.frag":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nuniform float uAlpha;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    gl_FragColor = texture;\n    // For the alpha of the texture\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/about-vertex.vert":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\nuniform float uSpeed;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    newPosition.z += (sin(newPosition.x * 4.0 + uTime) * 1.5 + cos(newPosition.y * 2.0 + uTime) * 1.5) * (0.1 + uSpeed * 0.5);\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/collections-fragment.frag":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nuniform float uAlpha;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    // For the alpha of the texture\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/collections-vertex.vert":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    vPosition = newPosition;\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/home-fragment.frag":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nuniform float uAlpha;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    gl_FragColor = texture;\n    // For the alpha of the texture\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/home-vertex.vert":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    // newPosition.z += sin(newPosition.y / uViewportSizes.y * (PI) * (PI) / 2.0) * abs(uSpeed);\n    // uSpeed causes distortionon the frame when a user drags the page\n    newPosition.z -= (sin((newPosition.y / uViewportSizes.y) * (PI) + (PI) / 2.0) + sin((newPosition.x / uViewportSizes.x) * (PI) + (PI) / 2.0)) * abs(uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/plane-fragment.frag":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nuniform float uAlpha;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    gl_FragColor = texture;\n    // For the alpha of the texture\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/plane-vertex.vert":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/webpack-dev-server/client/utils/log.js");function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,(n=s.key,i=void 0,"symbol"==typeof(i=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(n,"string"))?i:String(i)),s)}var n,i}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){s.log.error(e)}}var t,r,i;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&n(t.prototype,r),i&&n(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/webpack/hot/log.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),a=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),o=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),c=r("./node_modules/webpack-dev-server/client/utils/log.js"),u=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js");function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function f(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var _=function(e){"object"==typeof e&&["warnings","errors","runtimeErrors"].forEach((function(t){if("string"==typeof e[t]){var r=decodeURIComponent(e[t]),s=new Function("message","var callback = ".concat(r,"\n        return callback(message)"));e[t]=s}}))},x={isUnloading:!1,currentHash:r.h()},m={hot:!1,liveReload:!1,progress:!1,overlay:!1},g=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),b={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1};if("true"===g.hot&&(m.hot=!0,b["Hot Module Replacement"]=!0),"true"===g["live-reload"]&&(m.liveReload=!0,b["Live Reloading"]=!0),"true"===g.progress&&(m.progress=!0,b.Progress=!0),g.overlay){try{m.overlay=JSON.parse(g.overlay)}catch(e){c.log.error("Error parsing overlay options from resource query:",e)}"object"==typeof m.overlay&&(m.overlay=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){f(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({errors:!0,warnings:!0,runtimeErrors:!0},m.overlay),_(m.overlay)),b.Overlay=!0}function v(e){n().setLogLevel("verbose"===e||"log"===e?"info":e),(0,c.setLogLevel)(e)}g.logging&&(m.logging=g.logging),void 0!==g.reconnect&&(m.reconnect=Number(g.reconnect)),m.logging&&v(m.logging),(0,c.logEnabledFeatures)(b),self.addEventListener("beforeunload",(function(){x.isUnloading=!0}));var y="undefined"!=typeof window?(0,l.createOverlay)("object"==typeof m.overlay?{trustedTypesPolicyName:m.overlay.trustedTypesPolicyName,catchRuntimeError:m.overlay.runtimeErrors}:{trustedTypesPolicyName:!1,catchRuntimeError:m.overlay}):{send:function(){}},w={hot:function(){"false"!==g.hot&&(m.hot=!0)},liveReload:function(){"false"!==g["live-reload"]&&(m.liveReload=!0)},invalid:function(){c.log.info("App updated. Recompiling..."),m.overlay&&y.send({type:"DISMISS"}),(0,u.default)("Invalid")},hash:function(e){x.previousHash=x.currentHash,x.currentHash=e},logging:v,overlay:function(e){"undefined"!=typeof document&&(m.overlay=e,_(m.overlay))},reconnect:function(e){"false"!==g.reconnect&&(m.reconnect=e)},progress:function(e){m.progress=e},"progress-update":function(e){m.progress&&c.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,u.default)("Progress",e)},"still-ok":function(){c.log.info("Nothing changed."),m.overlay&&y.send({type:"DISMISS"}),(0,u.default)("StillOk")},ok:function(){(0,u.default)("Ok"),m.overlay&&y.send({type:"DISMISS"}),(0,d.default)(m,x)},"content-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){c.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,u.default)("Warnings",r);for(var s=0;s<r.length;s++)c.log.warn(r[s]);var n="boolean"==typeof m.overlay?m.overlay:m.overlay&&m.overlay.warnings;n&&(("function"==typeof n?e.filter(n):e).length&&y.send({type:"BUILD_ERROR",level:"warning",messages:e}));t&&t.preventReloading||(0,d.default)(m,x)},errors:function(e){c.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,u.default)("Errors",t);for(var r=0;r<t.length;r++)c.log.error(t[r]);var s="boolean"==typeof m.overlay?m.overlay:m.overlay&&m.overlay.errors;s&&(("function"==typeof s?e.filter(s):e).length&&y.send({type:"BUILD_ERROR",level:"error",messages:e}))},error:function(e){c.log.error(e)},close:function(){c.log.info("Disconnected!"),m.overlay&&y.send({type:"DISMISS"}),(0,u.default)("Close")}},j=(0,h.default)(g);(0,o.default)(j,w,m.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,(n=s.key,i=void 0,i=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(n,"string"),"symbol"==typeof i?i:String(i)),s)}var n,i}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=i;var a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[a]=t,this.getChildLogger=r}var t,s,c;return t=e,s=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];this[a](i.error,r)}}},{key:"trace",value:function(){this[a](i.trace,["Trace"])}},{key:"clear",value:function(){this[a](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](i.groupEnd,t)}},{key:"profile",value:function(e){this[a](i.profile,[e])}},{key:"profileEnd",value:function(e){this[a](i.profileEnd,[e])}},{key:"time",value:function(e){this[o]=this[o]||new Map,this[o].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[o]&&this[o].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var s=process.hrtime(t);this[a](i.time,[e].concat(r(s)))}},{key:"timeEnd",value:function(e){var t=this[o]&&this[o].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var s=process.hrtime(t);this[o].delete(e),this[a](i.time,[e].concat(r(s)))}},{key:"timeAggregate",value:function(e){var t=this[o]&&this[o].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[o].delete(e),this[l]=this[l]||new Map;var s=this[l].get(e);void 0!==s&&(r[1]+s[1]>1e9?(r[0]+=s[0]+1,r[1]=r[1]-1e9+s[1]):(r[0]+=s[0],r[1]+=s[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[a](i.time,[e].concat(r(t))))}}}],s&&n(t.prototype,s),c&&n(t,c),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function s(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,a=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},o={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,n=e.debug,l=void 0!==n&&n,c=e.console,u="boolean"==typeof l?[function(){return l}]:[].concat(l).map(a),d=o["".concat(r)]||0;return function(e,t,r){var n=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(s(r.slice(1))):["[".concat(e,"]")].concat(s(r)):[]},a=u.some((function(t){return t(e)}));switch(t){case i.debug:if(!a)return;"function"==typeof c.debug?c.debug.apply(c,s(n())):c.log.apply(c,s(n()));break;case i.log:if(!a&&d>o.log)return;c.log.apply(c,s(n()));break;case i.info:if(!a&&d>o.info)return;c.info.apply(c,s(n()));break;case i.warn:if(!a&&d>o.warn)return;c.warn.apply(c,s(n()));break;case i.error:if(!a&&d>o.error)return;c.error.apply(c,s(n()));break;case i.trace:if(!a)return;c.trace();break;case i.groupCollapsed:if(!a&&d>o.log)return;if(!a&&d>o.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,s(n())):c.log.apply(c,s(n()));break}case i.group:if(!a&&d>o.log)return;"function"==typeof c.group?c.group.apply(c,s(n())):c.log.apply(c,s(n()));break;case i.groupEnd:if(!a&&d>o.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case i.time:if(!a&&d>o.log)return;var l=1e3*r[1]+r[2]/1e6,h="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof c.logTime?c.logTime(h):c.log(h);break;case i.profile:"function"==typeof c.profile&&c.profile.apply(c,s(n()));break;case i.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,s(n()));break;case i.clear:if(!a&&d>o.log)return;"function"==typeof c.clear&&c.clear();break;case i.status:if(!a&&d>o.info)return;"function"==typeof c.status?0===r.length?c.status():c.status.apply(c,s(n())):0!==r.length&&c.info.apply(c,s(n()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},s.apply(this,arguments)}var n=r("./client-src/modules/logger/SyncBailHookFake.js"),i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,a=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),o={level:"info",debug:!1,console},l=a(o);t.getLogger=function(e){return new i((function(r,s){void 0===t.hooks.log.call(e,r,s)&&l(e,r,s)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){s(o,e),l=a(o)},t.hooks={log:new n(["origin","type","args"])}}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,s),i.exports}s.d=function(e,t){for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){s.r(n),s.d(n,{default:function(){return e}});var e=s("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOverlay:()=>p,formatProblem:()=>h});var s=r("./node_modules/ansi-html-community/index.js"),n=r.n(s),i=r("./node_modules/html-entities/lib/index.js"),a=r("./node_modules/webpack-dev-server/client/overlay/runtime-error.js"),o=r("./node_modules/webpack-dev-server/client/overlay/state-machine.js"),l=r("./node_modules/webpack-dev-server/client/overlay/styles.js");function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){d(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function h(e,t){var r="warning"===e?"WARNING":"ERROR",s="";if("string"==typeof t)s+=t;else{var n=t.file||"",i=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",a=t.loc;r+="".concat(i||n?" in ".concat(i?"".concat(i).concat(n?" (".concat(n,")"):""):n).concat(a?" ".concat(a):""):""),s+=t.message||""}return Array.isArray(t.stack)&&t.stack.forEach((function(e){"string"==typeof e&&(s+="\r\n".concat(e))})),{header:r,body:s}}n().setColors({reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"});var p=function(e){var t,r,s,c,d=[];function p(e,t){Object.keys(t).forEach((function(r){e.style[r]=t[r]}))}function f(e,n){if(r)return r.innerHTML="",void e(r);d.push(e),t||function(e){window.trustedTypes&&(c=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(t=document.createElement("iframe")).id="webpack-dev-server-client-overlay",t.src="about:blank",p(t,l.iframeStyle),t.onload=function(){var e=t.contentDocument.createElement("div");r=t.contentDocument.createElement("div"),e.id="webpack-dev-server-client-overlay-div",p(e,l.containerStyle),(s=document.createElement("div")).innerText="Compiled with problems:",p(s,l.headerStyle);var n=document.createElement("button");p(n,l.dismissButtonStyle),n.innerText="×",n.ariaLabel="Dismiss",n.addEventListener("click",(function(){_.send({type:"DISMISS"})})),e.appendChild(s),e.appendChild(n),e.appendChild(r),t.contentDocument.body.appendChild(e),d.forEach((function(t){t(e)})),d=[],t.onload=null},document.body.appendChild(t)}(n)}var _=(0,o.default)({showOverlay:function(t){var a=t.level,o=void 0===a?"error":a,d=t.messages,_=t.messageSource;return function(e,t,a,o){f((function(){s.innerText="runtime"===o?"Uncaught runtime errors:":"Compiled with problems:",t.forEach((function(t){var s=document.createElement("div");p(s,u(u({},"warning"===e?l.msgStyles.warning:l.msgStyles.error),{},{padding:"1rem 1rem 1.5rem 1rem"}));var a=document.createElement("div"),o=h(e,t),d=o.header,f=o.body;a.innerText=d,p(a,l.msgTypeStyle),t.moduleIdentifier&&(p(a,{cursor:"pointer"}),a.setAttribute("data-can-open",!0),a.addEventListener("click",(function(){fetch("/webpack-dev-server/open-editor?fileName=".concat(t.moduleIdentifier))})));var _=n()((0,i.encode)(f)),x=document.createElement("div");p(x,l.msgTextStyle),x.innerHTML=c?c.createHTML(_):_,s.appendChild(a),s.appendChild(x),r.appendChild(s)}))}),a)}(o,d,e.trustedTypesPolicyName,_)},hideOverlay:function(){t&&(document.body.removeChild(t),t=null,r=null)}});if(e.catchRuntimeError){var x=function(t,r){var s=t instanceof Error?t:new Error(t||r);("function"!=typeof e.catchRuntimeError||e.catchRuntimeError(s))&&_.send({type:"RUNTIME_ERROR",messages:[{message:s.message,stack:(0,a.parseErrorToStacks)(s)}]})};(0,a.listenToRuntimeError)((function(e){var t=e.error,r=e.message;(t||r)&&x(t,r)})),(0,a.listenToUnhandledRejection)((function(e){var t=e.reason;x(t,"Unknown promise rejection reason")}))}return _}},"./node_modules/webpack-dev-server/client/overlay/fsm.js":(e,t,r)=>{"use strict";function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.r(t),r.d(t,{default:()=>a});const a=function(e,t){var r=e.states,s=e.context,i=e.initial,a=t.actions,o=i,l=s;return{send:function(e){var t=r[o].on,s=t&&t[e.type];s&&(o=s.target,s.actions&&s.actions.forEach((function(t){var r=a[t],s=r&&r(l,e);s&&(l=n(n({},l),s))})))}}}},"./node_modules/webpack-dev-server/client/overlay/runtime-error.js":(e,t,r)=>{"use strict";function s(e){if(!(e&&e instanceof Error))throw new Error("parseErrorToStacks expects Error object");if("string"==typeof e.stack)return e.stack.split("\n").filter((function(t){return t!=="Error: ".concat(e.message)}))}function n(e){return window.addEventListener("error",e),function(){window.removeEventListener("error",e)}}function i(e){return window.addEventListener("unhandledrejection",e),function(){window.removeEventListener("unhandledrejection",e)}}r.r(t),r.d(t,{listenToRuntimeError:()=>n,listenToUnhandledRejection:()=>i,parseErrorToStacks:()=>s})},"./node_modules/webpack-dev-server/client/overlay/state-machine.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/overlay/fsm.js");const n=function(e){var t=e.hideOverlay,r=e.showOverlay;return(0,s.default)({initial:"hidden",context:{level:"error",messages:[],messageSource:"build"},states:{hidden:{on:{BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["setMessages","showOverlay"]}}},displayBuildError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["appendMessages","showOverlay"]}}},displayRuntimeError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["appendMessages","showOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]}}}}},{actions:{dismissMessages:function(){return{messages:[],level:"error",messageSource:"build"}},appendMessages:function(e,t){return{messages:e.messages.concat(t.messages),level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},setMessages:function(e,t){return{messages:t.messages,level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},hideOverlay:t,showOverlay:r}})}},"./node_modules/webpack-dev-server/client/overlay/styles.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{containerStyle:()=>i,dismissButtonStyle:()=>o,headerStyle:()=>a,iframeStyle:()=>n,msgStyles:()=>s,msgTextStyle:()=>c,msgTypeStyle:()=>l});var s={error:{backgroundColor:"rgba(206, 17, 38, 0.1)",color:"#fccfcf"},warning:{backgroundColor:"rgba(251, 245, 180, 0.1)",color:"#fbf5b4"}},n={position:"fixed",top:0,left:0,right:0,bottom:0,width:"100vw",height:"100vh",border:"none","z-index":9999999999},i={position:"fixed",boxSizing:"border-box",left:0,top:0,right:0,bottom:0,width:"100vw",height:"100vh",fontSize:"large",padding:"2rem 2rem 4rem 2rem",lineHeight:"1.2",whiteSpace:"pre-wrap",overflow:"auto",backgroundColor:"rgba(0, 0, 0, 0.9)",color:"white"},a={color:"#e83b46",fontSize:"2em",whiteSpace:"pre-wrap",fontFamily:"sans-serif",margin:"0 2rem 2rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"},o={color:"#ffffff",lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0,backgroundColor:"transparent",border:"none"},l={color:"#e83b46",fontSize:"1.2em",marginBottom:"1rem",fontFamily:"sans-serif"},c={lineHeight:"1.5",fontSize:"1rem",fontFamily:"Menlo, Consolas, monospace"}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>c,default:()=>d});var s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),n=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),a=void 0!==i?void 0!==i.default?i.default:i:s.default,o=0,l=10,c=null,u=function(e,t,r){(c=new a(e)).onOpen((function(){o=0,void 0!==r&&(l=r)})),c.onClose((function(){if(0===o&&t.close(),c=null,o<l){var s=1e3*Math.pow(2,o)+100*Math.random();o+=1,n.log.info("Trying to reconnect..."),setTimeout((function(){u(e,t,r)}),s)}})),c.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const d=u},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var n="";e.username&&(n=e.username,e.password&&(n=n.concat(":",e.password)));var i=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),a=e.port;a&&"0"!==a||(a=self.location.port);var o="/ws";return e.pathname&&!e.fromCurrentScript&&(o=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var s="";e.hostname&&(s=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(s+=":".concat(e.port)));var n=e.pathname||"";e.slashes?(s="//".concat(s||""),n&&"/"!==n.charAt(0)&&(n="/".concat(n))):s||(s="");var i=e.search||"";i&&"?"!==i.charAt(0)&&(i="?".concat(i));var a=e.hash||"";return a&&"#"!==a.charAt(0)&&(a="#".concat(a)),n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),i=i.replace("#","%23"),"".concat(t).concat(s).concat(n).concat(i).concat(a)}({protocol:s,auth:n,hostname:i,port:a,pathname:o,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>a,logEnabledFeatures:()=>o,setLogLevel:()=>i});var s=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),n=r.n(s);function i(e){n().configureDefaultLogger({level:e})}i("info");var a=n().getLogger("webpack-dev-server"),o=function(e){var t=Object.keys(e);if(e&&0!==t.length){for(var r="Server started:",s=0;s<t.length;s++){var n=t[s];r+=" ".concat(n," ").concat(e[n]?"enabled":"disabled",",")}r=r.slice(0,-1).concat("."),a.info(r)}}},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const n=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),n=0;n<r.length;n++){var i=r[n].split("=");t[i[0]]=decodeURIComponent(i[1])}else{var a,o=(0,s.default)();try{a=new URL(o,self.location.href)}catch(e){}a&&((t=a).fromCurrentScript=!0)}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/webpack/hot/emitter.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const a=function(e,t){var r=e.hot,s=e.liveReload;if(!t.isUnloading){var a=t.currentHash,o=t.previousHash;if(!(a.indexOf(o)>=0)){var l=self.location.search.toLowerCase(),c=-1===l.indexOf("webpack-dev-server-hot=false"),u=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&c)i.log.info("App hot update..."),n().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(s&&u)var d=self,h=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&p(d,h)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const n=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(s,"")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var s,n=function(){return s.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),a=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());n()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),n()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] "+i.formatError(t)),"undefined"!=typeof window&&window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){s=t,n()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),a())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var s=r("./node_modules/events/events.js");e.exports=new s},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var s=e.filter((function(e){return t&&t.indexOf(e)<0})),n=r("./node_modules/webpack/hot/log.js");(s.length>0&&(n("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),s.forEach((function(e){n("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(n("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");n.groupCollapsed("info","[HMR]  - "+t.pop()),n("info","[HMR]  - "+e),n.groupEnd("info")}else n("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&n("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):n("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function s(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function n(e){return function(t,r){s(t)&&e(r)}}e.exports=function(e,t){s(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,a=console.groupCollapsed||r,o=console.groupEnd||r;e.exports.group=n(i),e.exports.groupCollapsed=n(a),e.exports.groupEnd=n(o),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>c});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const a=new n.Mat4,o=new i.Vec3,l=new i.Vec3;class c extends s.Transform{constructor(e,{near:t=.1,far:r=100,fov:s=45,aspect:a=1,left:o,right:l,bottom:c,top:u,zoom:d=1}={}){super(),Object.assign(this,{near:t,far:r,fov:s,aspect:a,left:o,right:l,bottom:c,top:u,zoom:d}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=o||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left||-1,right:s=this.right||1,bottom:n=this.bottom||-1,top:i=this.top||1,zoom:a=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:s,bottom:n,top:i,zoom:a}),r/=a,s/=a,n/=a,i/=a,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:n,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}updateProjectionMatrix(){return"perspective"===this.type?this.perspective():this.orthographic()}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(a.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e,t=e.worldMatrix){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const r=o;r.copy(e.geometry.bounds.center),r.applyMatrix4(t);const s=e.geometry.bounds.radius*t.getMaxScaleOnAxis();return this.frustumIntersectsSphere(r,s)}frustumIntersectsSphere(e,t){const r=l;for(let s=0;s<6;s++){const n=this.frustum[s];if(r.copy(n).dot(e)+n.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const n=new s.Vec3;let i=1,a=1,o=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=a++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const s=this.attributes[t];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const i=s.size/n,a=1===n?0:n*n*4,o=1===n?0:4*n;for(let t=0;t<n;t++)this.gl.vertexAttribPointer(e+t,i,s.type,s.normalized,s.stride+a,s.offset+t*o),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)}));let r=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(r=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:o?void 0:(console.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const n=this.bounds.min,i=this.bounds.max,a=this.bounds.center,o=this.bounds.scale;n.set(1/0),i.set(-1/0);for(let e=0,s=t.length;e<s;e+=r){const r=t[e],s=t[e+1],a=t[e+2];n.x=Math.min(r,n.x),n.y=Math.min(s,n.y),n.z=Math.min(a,n.z),i.x=Math.max(r,i.x),i.y=Math.max(s,i.y),i.z=Math.max(a,i.z)}o.sub(i,n),a.add(n,i).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||this.computeBoundingBox(e);let s=0;for(let e=0,i=t.length;e<i;e+=r)n.fromArray(t,e),s=Math.max(s,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(s)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>o});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let a=0;class o extends s.Transform{constructor(e,{geometry:t,program:r,mode:s=e.TRIANGLES,frustumCulled:o=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=a++,this.geometry=t,this.program=r,this.mode=s,this.frustumCulled=o,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})));let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let s=1;const n={};class i{constructor(e,{vertex:t,fragment:r,uniforms:n={},transparent:i=!1,cullFace:a=e.BACK,frontFace:o=e.CCW,depthTest:l=!0,depthWrite:c=!0,depthFunc:u=e.LEQUAL}={}){e.canvas||console.error("gl not passed as first argument to Program"),this.gl=e,this.uniforms=n,this.id=s++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=a,this.frontFace=o,this.depthTest=l,this.depthWrite=c,this.depthFunc=u,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=e.createShader(e.VERTEX_SHADER),this.fragmentShader=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),e.attachShader(this.program,this.vertexShader),e.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:t,fragment:r})}setShaders({vertex:e,fragment:t}){if(e&&(this.gl.shaderSource(this.vertexShader,e),this.gl.compileShader(this.vertexShader),""!==this.gl.getShaderInfoLog(this.vertexShader)&&console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\nVertex Shader\n${o(e)}`)),t&&(this.gl.shaderSource(this.fragmentShader,t),this.gl.compileShader(this.fragmentShader),""!==this.gl.getShaderInfoLog(this.fragmentShader)&&console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\nFragment Shader\n${o(t)}`)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))return console.warn(this.gl.getProgramInfoLog(this.program));this.uniformLocations=new Map;let r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS);for(let e=0;e<r;e++){let t=this.gl.getActiveUniform(this.program,e);this.uniformLocations.set(t,this.gl.getUniformLocation(this.program,t.name));const r=t.name.match(/(\w+)/g);t.uniformName=r[0],t.nameComponents=r.slice(1)}this.attributeLocations=new Map;const s=[],n=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES);for(let e=0;e<n;e++){const t=this.gl.getActiveAttrib(this.program,e),r=this.gl.getAttribLocation(this.program,t.name);-1!==r&&(s[r]=t.name,this.attributeLocations.set(t,r))}this.attributeOrder=s.join("")}setBlendFunc(e,t,r,s){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let s=this.uniforms[r.uniformName];for(const e of r.nameComponents){if(!s)break;if(!(e in s)){if(Array.isArray(s.value))break;s=void 0;break}s=s[e]}if(!s)return c(`Active uniform ${r.name} has not been supplied`);if(s&&void 0===s.value)return c(`${r.name} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),a(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),a(this.gl,r.type,e,n)}a(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(e,t,r,s){s=s.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const s=t*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<t;s++)i.set(e[s],s*r);return i}(s):s;const i=e.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)e.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,s=e.length;r<s;r++)if(e[r]!==t[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(e,t){for(let r=0,s=e.length;r<s;r++)e[r]=t[r]}(i,s),e.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;e.renderer.state.uniformLocations.set(r,s)}switch(t){case 5126:return s.length?e.uniform1fv(r,s):e.uniform1f(r,s);case 35664:return e.uniform2fv(r,s);case 35665:return e.uniform3fv(r,s);case 35666:return e.uniform4fv(r,s);case 35670:case 5124:case 35678:case 36306:case 35680:case 36289:return s.length?e.uniform1iv(r,s):e.uniform1i(r,s);case 35671:case 35667:return e.uniform2iv(r,s);case 35672:case 35668:return e.uniform3iv(r,s);case 35673:case 35669:return e.uniform4iv(r,s);case 35674:return e.uniformMatrix2fv(r,!1,s);case 35675:return e.uniformMatrix3fv(r,!1,s);case 35676:return e.uniformMatrix4fv(r,!1,s)}}function o(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function c(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const s=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:s=1,alpha:i=!1,depth:a=!0,stencil:o=!1,antialias:l=!1,premultipliedAlpha:c=!1,preserveDrawingBuffer:u=!1,powerPreference:d="default",autoClear:h=!0,webgl:p=2}={}){const f={alpha:i,depth:a,stencil:o,antialias:l,premultipliedAlpha:c,preserveDrawingBuffer:u,powerPreference:d};this.dpr=s,this.alpha=i,this.color=!0,this.depth=a,this.stencil=o,this.premultipliedAlpha=c,this.autoClear=h,this.id=n++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,s=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=s,this.gl.viewport(r,s,e,t))}setScissor(e,t,r=0,s=0){this.gl.scissor(r,s,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,s){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(e,t,r,s):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:n}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),n){const e=[],r=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):n.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(s),s.applyMatrix4(t.projectionViewMatrix),i.zDepth=s.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),n.sort(this.sortUI),i=e.concat(r,n)}return i}render({scene:e,camera:t,target:r=null,update:s=!0,sort:n=!0,frustumCull:i=!0,clear:a}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:n}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>a});const s=new Uint8Array(4);function n(e){return!(e&e-1)}let i=1;class a{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:s=e.UNSIGNED_BYTE,format:n=e.RGBA,internalFormat:a=n,wrapS:o=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,wrapR:c=e.CLAMP_TO_EDGE,generateMipmaps:u=r===(e.TEXTURE_2D||e.TEXTURE_CUBE_MAP),minFilter:d=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:h=e.LINEAR,premultiplyAlpha:p=!1,unpackAlignment:f=4,flipY:_=r==(e.TEXTURE_2D||e.TEXTURE_3D),anisotropy:x=0,level:m=0,width:g,height:b=g,length:v=1}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=s,this.format=n,this.internalFormat=a,this.minFilter=d,this.magFilter=h,this.wrapS=o,this.wrapT=l,this.wrapR=c,this.generateMipmaps=u,this.premultiplyAlpha=p,this.unpackAlignment=f,this.flipY=_,this.anisotropy=Math.min(x,this.gl.renderer.parameters.maxAnisotropy),this.level=m,this.width=g,this.height=b,this.length=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.wrapR!==this.state.wrapR&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_R,this.wrapR),this.state.wrapR=this.wrapR),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image):this.target!==this.gl.TEXTURE_2D_ARRAY&&this.target!==this.gl.TEXTURE_3D||this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>o});var s=r("./node_modules/ogl/src/math/Vec3.js"),n=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),a=r("./node_modules/ogl/src/math/Euler.js");class o{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new s.Vec3,this.quaternion=new n.Quat,this.scale=new s.Vec3(1),this.rotation=new a.Euler,this.up=new s.Vec3(0,1,0),this.rotation._target.onChange=()=>this.quaternion.fromEuler(this.rotation,!0),this.quaternion._target.onChange=()=>this.rotation.fromQuaternion(this.quaternion,void 0,!0)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js");class n extends s.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:s=1,heightSegments:i=1,attributes:a={}}={}){const o=s,l=i,c=(o+1)*(l+1),u=o*l*6,d=new Float32Array(3*c),h=new Float32Array(3*c),p=new Float32Array(2*c),f=u>65536?new Uint32Array(u):new Uint16Array(u);n.buildPlane(d,h,p,f,t,r,0,o,l),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:h},uv:{size:2,data:p},index:{data:f}}),super(e,a)}static buildPlane(e,t,r,s,n,i,a,o,l,c=0,u=1,d=2,h=1,p=-1,f=0,_=0){const x=f,m=n/o,g=i/l;for(let b=0;b<=l;b++){let v=b*g-i/2;for(let i=0;i<=o;i++,f++){let g=i*m-n/2;if(e[3*f+c]=g*h,e[3*f+u]=v*p,e[3*f+d]=a/2,t[3*f+c]=0,t[3*f+u]=0,t[3*f+d]=a>=0?1:-1,r[2*f]=i/o,r[2*f+1]=1-b/l,b===l||i===o)continue;let y=x+i+b*(o+1),w=x+i+(b+1)*(o+1),j=x+i+(b+1)*(o+1)+1,E=x+i+b*(o+1)+1;s[6*_]=y,s[6*_+1]=w,s[6*_+2]=E,s[6*_+3]=w,s[6*_+4]=j,s[6*_+5]=E,_++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,s="YXZ"){super(e,t,r),this.order=s,this.onChange=()=>{},this._target=this;const n=["0","1","2"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&n.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this._target[0]=e,this._target[1]=t,this._target[2]=r,this.onChange(),this)}copy(e){return this._target[0]=e[0],this._target[1]=e[1],this._target[2]=e[2],this.onChange(),this}reorder(e){return this._target.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return s.fromRotationMatrix(this._target,e,t),this.onChange(),this}fromQuaternion(e,t=this.order,r){return n.fromQuaternion(e),this._target.fromRotationMatrix(n,t),r||this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=1,i=0,a=0,o=0,l=1){return super(e,t,r,s,n,i,a,o,l),this}set(e,t,r,n,i,a,o,l,c){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,a,o,l,c),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t=this){return s.rotate(this,t,e),this}scale(e,t=this){return s.scale(this,t,e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromMatrix4(e){return s.fromMat4(this,e),this}fromQuaternion(e){return s.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return s.invert(this,e),this}getNormalMatrix(e){return s.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=0,i=1,a=0,o=0,l=0,c=0,u=1,d=0,h=0,p=0,f=0,_=1){return super(e,t,r,s,n,i,a,o,l,c,u,d,h,p,f,_),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,n,i,a,o,l,c,u,d,h,p,f,_,x){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,a,o,l,c,u,d,h,p,f,_,x),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t,r=this){return s.rotate(this,r,e,t),this}scale(e,t=this){return s.scale(this,t,"number"==typeof e?[e,e,e]:e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e,t){return e.length?t?s.multiply(this,e,t):s.multiply(this,this,e):s.multiplyScalar(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:n}={}){return s.perspective(this,e,t,r,n),this}fromOrthogonal({left:e,right:t,bottom:r,top:n,near:i,far:a}){return s.ortho(this,e,t,r,n,i,a),this}fromQuaternion(e){return s.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return s.invert(this,e),this}compose(e,t,r){return s.compose(this,e,t,r),this}decompose(e,t,r){return s.decompose(this,e,t,r),this}getRotation(e){return s.getRotation(e,this),this}getTranslation(e){return s.getTranslation(e,this),this}getScaling(e){return s.getScaling(e,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(e,t,r){return s.targetTo(this,e,t,r),this}determinant(){return s.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>n});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(e=0,t=0,r=0,s=1){super(e,t,r,s),this.onChange=()=>{},this._target=this;const n=["0","1","2","3"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&n.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set w(e){this._target[3]=e,this.onChange()}identity(){return s.identity(this._target),this.onChange(),this}set(e,t,r,n){return e.length?this.copy(e):(s.set(this._target,e,t,r,n),this.onChange(),this)}rotateX(e){return s.rotateX(this._target,this._target,e),this.onChange(),this}rotateY(e){return s.rotateY(this._target,this._target,e),this.onChange(),this}rotateZ(e){return s.rotateZ(this._target,this._target,e),this.onChange(),this}inverse(e=this._target){return s.invert(this._target,e),this.onChange(),this}conjugate(e=this._target){return s.conjugate(this._target,e),this.onChange(),this}copy(e){return s.copy(this._target,e),this.onChange(),this}normalize(e=this._target){return s.normalize(this._target,e),this.onChange(),this}multiply(e,t){return t?s.multiply(this._target,e,t):s.multiply(this._target,this._target,e),this.onChange(),this}dot(e){return s.dot(this._target,e)}fromMatrix3(e){return s.fromMat3(this._target,e),this.onChange(),this}fromEuler(e,t){return s.fromEuler(this._target,e,e.order),t||this.onChange(),this}fromAxisAngle(e,t){return s.setAxisAngle(this._target,e,t),this.onChange(),this}slerp(e,t){return s.slerp(this._target,this._target,e,t),this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this._target[3]=e[t+3],this.onChange(),this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(s.set(this,e,t,r),this)}copy(e){return s.copy(this,e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e){return e.length?s.multiply(this,this,e):s.scale(this,this,e),this}divide(e){return e.length?s.divide(this,this,e):s.scale(this,this,1/e),this}inverse(e=this){return s.inverse(this,e),this}len(){return s.length(this)}distance(e){return e?s.distance(this,e):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(e){return e?s.squaredDistance(this,e):s.squaredLength(this)}negate(e=this){return s.negate(this,e),this}cross(e,t){return t?s.cross(this,e,t):s.cross(this,this,e),this}scale(e){return s.scale(this,this,e),this}normalize(){return s.normalize(this,this),this}dot(e){return s.dot(this,e)}equals(e){return s.exactEquals(this,e)}applyMatrix3(e){return s.transformMat3(this,this,e),this}applyMatrix4(e){return s.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return s.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return s.transformQuat(this,this,e),this}angle(e){return s.angle(this,e)}lerp(e,t){return s.lerp(this,this,e,t),this}smoothLerp(e,t,r){return s.smoothLerp(this,this,e,t,r),this}clone(){return new n(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],s=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*s,this[1]=e[1]*t+e[5]*r+e[9]*s,this[2]=e[2]*t+e[6]*r+e[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function s(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>m,copy:()=>i,determinant:()=>u,fromMat4:()=>s,fromQuat:()=>n,identity:()=>o,invert:()=>c,multiply:()=>d,multiplyScalar:()=>b,normalFromMat4:()=>_,projection:()=>x,rotate:()=>p,scale:()=>f,set:()=>a,subtract:()=>g,translate:()=>h,transpose:()=>l});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function n(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=r+r,o=s+s,l=n+n,c=r*a,u=s*a,d=s*o,h=n*a,p=n*o,f=n*l,_=i*a,x=i*o,m=i*l;return e[0]=1-d-f,e[3]=u-m,e[6]=h+x,e[1]=u+m,e[4]=1-c-f,e[7]=p-_,e[2]=h-x,e[5]=p+_,e[8]=1-c-d,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function a(e,t,r,s,n,i,a,o,l,c){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=a,e[6]=o,e[7]=l,e[8]=c,e}function o(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=s,e[7]=n}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function c(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8],d=u*a-o*c,h=-u*i+o*l,p=c*i-a*l,f=r*d+s*h+n*p;return f?(f=1/f,e[0]=d*f,e[1]=(-u*s+n*c)*f,e[2]=(o*s-n*a)*f,e[3]=h*f,e[4]=(u*r-n*l)*f,e[5]=(-o*r+n*i)*f,e[6]=p*f,e[7]=(-c*r+s*l)*f,e[8]=(a*r-s*i)*f,e):null}function u(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],a=e[5],o=e[6],l=e[7],c=e[8];return t*(c*i-a*l)+r*(-c*n+a*o)+s*(l*n-i*o)}function d(e,t,r){let s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],l=t[5],c=t[6],u=t[7],d=t[8],h=r[0],p=r[1],f=r[2],_=r[3],x=r[4],m=r[5],g=r[6],b=r[7],v=r[8];return e[0]=h*s+p*a+f*c,e[1]=h*n+p*o+f*u,e[2]=h*i+p*l+f*d,e[3]=_*s+x*a+m*c,e[4]=_*n+x*o+m*u,e[5]=_*i+x*l+m*d,e[6]=g*s+b*a+v*c,e[7]=g*n+b*o+v*u,e[8]=g*i+b*l+v*d,e}function h(e,t,r){let s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],l=t[5],c=t[6],u=t[7],d=t[8],h=r[0],p=r[1];return e[0]=s,e[1]=n,e[2]=i,e[3]=a,e[4]=o,e[5]=l,e[6]=h*s+p*a+c,e[7]=h*n+p*o+u,e[8]=h*i+p*l+d,e}function p(e,t,r){let s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],l=t[5],c=t[6],u=t[7],d=t[8],h=Math.sin(r),p=Math.cos(r);return e[0]=p*s+h*a,e[1]=p*n+h*o,e[2]=p*i+h*l,e[3]=p*a-h*s,e[4]=p*o-h*n,e[5]=p*l-h*i,e[6]=c,e[7]=u,e[8]=d,e}function f(e,t,r){let s=r[0],n=r[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=n*t[3],e[4]=n*t[4],e[5]=n*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function _(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8],d=t[9],h=t[10],p=t[11],f=t[12],_=t[13],x=t[14],m=t[15],g=r*o-s*a,b=r*l-n*a,v=r*c-i*a,y=s*l-n*o,w=s*c-i*o,j=n*c-i*l,E=u*_-d*f,T=u*x-h*f,A=u*m-p*f,S=d*x-h*_,M=d*m-p*_,O=h*m-p*x,C=g*O-b*M+v*S+y*A-w*T+j*E;return C?(C=1/C,e[0]=(o*O-l*M+c*S)*C,e[1]=(l*A-a*O-c*T)*C,e[2]=(a*M-o*A+c*E)*C,e[3]=(n*M-s*O-i*S)*C,e[4]=(r*O-n*A+i*T)*C,e[5]=(s*A-r*M-i*E)*C,e[6]=(_*j-x*w+m*y)*C,e[7]=(x*v-f*j-m*b)*C,e[8]=(f*w-_*v+m*g)*C,e):null}function x(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function m(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function g(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function b(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>A,compose:()=>v,copy:()=>i,decompose:()=>b,determinant:()=>u,fromQuat:()=>w,fromRotationTranslationScale:()=>y,getMaxScaleOnAxis:()=>m,getRotation:()=>g,getScaling:()=>x,getTranslation:()=>_,identity:()=>o,invert:()=>c,multiply:()=>d,multiplyScalar:()=>M,ortho:()=>E,perspective:()=>j,rotate:()=>f,scale:()=>p,set:()=>a,subtract:()=>S,targetTo:()=>T,translate:()=>h,transpose:()=>l});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");const n=1e-6;function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function a(e,t,r,s,n,i,a,o,l,c,u,d,h,p,f,_,x){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=a,e[6]=o,e[7]=l,e[8]=c,e[9]=u,e[10]=d,e[11]=h,e[12]=p,e[13]=f,e[14]=_,e[15]=x,e}function o(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[3],i=t[6],a=t[7],o=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=n,e[13]=a,e[14]=o}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function c(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8],d=t[9],h=t[10],p=t[11],f=t[12],_=t[13],x=t[14],m=t[15],g=r*o-s*a,b=r*l-n*a,v=r*c-i*a,y=s*l-n*o,w=s*c-i*o,j=n*c-i*l,E=u*_-d*f,T=u*x-h*f,A=u*m-p*f,S=d*x-h*_,M=d*m-p*_,O=h*m-p*x,C=g*O-b*M+v*S+y*A-w*T+j*E;return C?(C=1/C,e[0]=(o*O-l*M+c*S)*C,e[1]=(n*M-s*O-i*S)*C,e[2]=(_*j-x*w+m*y)*C,e[3]=(h*w-d*j-p*y)*C,e[4]=(l*A-a*O-c*T)*C,e[5]=(r*O-n*A+i*T)*C,e[6]=(x*v-f*j-m*b)*C,e[7]=(u*j-h*v+p*b)*C,e[8]=(a*M-o*A+c*E)*C,e[9]=(s*A-r*M-i*E)*C,e[10]=(f*w-_*v+m*g)*C,e[11]=(d*v-u*w-p*g)*C,e[12]=(o*T-a*S-l*E)*C,e[13]=(r*S-s*T+n*E)*C,e[14]=(_*b-f*y-x*g)*C,e[15]=(u*y-d*b+h*g)*C,e):null}function u(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],a=e[5],o=e[6],l=e[7],c=e[8],u=e[9],d=e[10],h=e[11],p=e[12],f=e[13],_=e[14],x=e[15];return(t*a-r*i)*(d*x-h*_)-(t*o-s*i)*(u*x-h*f)+(t*l-n*i)*(u*_-d*f)+(r*o-s*a)*(c*x-h*p)-(r*l-n*a)*(c*_-d*p)+(s*l-n*o)*(c*f-u*p)}function d(e,t,r){let s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],l=t[5],c=t[6],u=t[7],d=t[8],h=t[9],p=t[10],f=t[11],_=t[12],x=t[13],m=t[14],g=t[15],b=r[0],v=r[1],y=r[2],w=r[3];return e[0]=b*s+v*o+y*d+w*_,e[1]=b*n+v*l+y*h+w*x,e[2]=b*i+v*c+y*p+w*m,e[3]=b*a+v*u+y*f+w*g,b=r[4],v=r[5],y=r[6],w=r[7],e[4]=b*s+v*o+y*d+w*_,e[5]=b*n+v*l+y*h+w*x,e[6]=b*i+v*c+y*p+w*m,e[7]=b*a+v*u+y*f+w*g,b=r[8],v=r[9],y=r[10],w=r[11],e[8]=b*s+v*o+y*d+w*_,e[9]=b*n+v*l+y*h+w*x,e[10]=b*i+v*c+y*p+w*m,e[11]=b*a+v*u+y*f+w*g,b=r[12],v=r[13],y=r[14],w=r[15],e[12]=b*s+v*o+y*d+w*_,e[13]=b*n+v*l+y*h+w*x,e[14]=b*i+v*c+y*p+w*m,e[15]=b*a+v*u+y*f+w*g,e}function h(e,t,r){let s,n,i,a,o,l,c,u,d,h,p,f,_=r[0],x=r[1],m=r[2];return t===e?(e[12]=t[0]*_+t[4]*x+t[8]*m+t[12],e[13]=t[1]*_+t[5]*x+t[9]*m+t[13],e[14]=t[2]*_+t[6]*x+t[10]*m+t[14],e[15]=t[3]*_+t[7]*x+t[11]*m+t[15]):(s=t[0],n=t[1],i=t[2],a=t[3],o=t[4],l=t[5],c=t[6],u=t[7],d=t[8],h=t[9],p=t[10],f=t[11],e[0]=s,e[1]=n,e[2]=i,e[3]=a,e[4]=o,e[5]=l,e[6]=c,e[7]=u,e[8]=d,e[9]=h,e[10]=p,e[11]=f,e[12]=s*_+o*x+d*m+t[12],e[13]=n*_+l*x+h*m+t[13],e[14]=i*_+c*x+p*m+t[14],e[15]=a*_+u*x+f*m+t[15]),e}function p(e,t,r){let s=r[0],n=r[1],i=r[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function f(e,t,r,s){let i,a,o,l,c,u,d,h,p,f,_,x,m,g,b,v,y,w,j,E,T,A,S,M,O=s[0],C=s[1],k=s[2],P=Math.hypot(O,C,k);return Math.abs(P)<n?null:(P=1/P,O*=P,C*=P,k*=P,i=Math.sin(r),a=Math.cos(r),o=1-a,l=t[0],c=t[1],u=t[2],d=t[3],h=t[4],p=t[5],f=t[6],_=t[7],x=t[8],m=t[9],g=t[10],b=t[11],v=O*O*o+a,y=C*O*o+k*i,w=k*O*o-C*i,j=O*C*o-k*i,E=C*C*o+a,T=k*C*o+O*i,A=O*k*o+C*i,S=C*k*o-O*i,M=k*k*o+a,e[0]=l*v+h*y+x*w,e[1]=c*v+p*y+m*w,e[2]=u*v+f*y+g*w,e[3]=d*v+_*y+b*w,e[4]=l*j+h*E+x*T,e[5]=c*j+p*E+m*T,e[6]=u*j+f*E+g*T,e[7]=d*j+_*E+b*T,e[8]=l*A+h*S+x*M,e[9]=c*A+p*S+m*M,e[10]=u*A+f*S+g*M,e[11]=d*A+_*S+b*M,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function _(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function x(e,t){let r=t[0],s=t[1],n=t[2],i=t[4],a=t[5],o=t[6],l=t[8],c=t[9],u=t[10];return e[0]=Math.hypot(r,s,n),e[1]=Math.hypot(i,a,o),e[2]=Math.hypot(l,c,u),e}function m(e){let t=e[0],r=e[1],s=e[2],n=e[4],i=e[5],a=e[6],o=e[8],l=e[9],c=e[10];const u=t*t+r*r+s*s,d=n*n+i*i+a*a,h=o*o+l*l+c*c;return Math.sqrt(Math.max(u,d,h))}const g=function(){const e=[1,1,1];return function(t,r){let s=e;x(s,r);let n=1/s[0],i=1/s[1],a=1/s[2],o=r[0]*n,l=r[1]*i,c=r[2]*a,u=r[4]*n,d=r[5]*i,h=r[6]*a,p=r[8]*n,f=r[9]*i,_=r[10]*a,m=o+d+_,g=0;return m>0?(g=2*Math.sqrt(m+1),t[3]=.25*g,t[0]=(h-f)/g,t[1]=(p-c)/g,t[2]=(l-u)/g):o>d&&o>_?(g=2*Math.sqrt(1+o-d-_),t[3]=(h-f)/g,t[0]=.25*g,t[1]=(l+u)/g,t[2]=(p+c)/g):d>_?(g=2*Math.sqrt(1+d-o-_),t[3]=(p-c)/g,t[0]=(l+u)/g,t[1]=.25*g,t[2]=(h+f)/g):(g=2*Math.sqrt(1+_-o-d),t[3]=(l-u)/g,t[0]=(p+c)/g,t[1]=(h+f)/g,t[2]=.25*g),t}}();function b(e,t,r,n){let i=s.length([e[0],e[1],e[2]]);const a=s.length([e[4],e[5],e[6]]),o=s.length([e[8],e[9],e[10]]);u(e)<0&&(i=-i),r[0]=e[12],r[1]=e[13],r[2]=e[14];const l=e.slice(),c=1/i,d=1/a,h=1/o;l[0]*=c,l[1]*=c,l[2]*=c,l[4]*=d,l[5]*=d,l[6]*=d,l[8]*=h,l[9]*=h,l[10]*=h,g(t,l),n[0]=i,n[1]=a,n[2]=o}function v(e,t,r,s){const n=e,i=t[0],a=t[1],o=t[2],l=t[3],c=i+i,u=a+a,d=o+o,h=i*c,p=i*u,f=i*d,_=a*u,x=a*d,m=o*d,g=l*c,b=l*u,v=l*d,y=s[0],w=s[1],j=s[2];return n[0]=(1-(_+m))*y,n[1]=(p+v)*y,n[2]=(f-b)*y,n[3]=0,n[4]=(p-v)*w,n[5]=(1-(h+m))*w,n[6]=(x+g)*w,n[7]=0,n[8]=(f+b)*j,n[9]=(x-g)*j,n[10]=(1-(h+_))*j,n[11]=0,n[12]=r[0],n[13]=r[1],n[14]=r[2],n[15]=1,n}function y(e,t,r,s){let n=t[0],i=t[1],a=t[2],o=t[3],l=n+n,c=i+i,u=a+a,d=n*l,h=n*c,p=n*u,f=i*c,_=i*u,x=a*u,m=o*l,g=o*c,b=o*u,v=s[0],y=s[1],w=s[2];return e[0]=(1-(f+x))*v,e[1]=(h+b)*v,e[2]=(p-g)*v,e[3]=0,e[4]=(h-b)*y,e[5]=(1-(d+x))*y,e[6]=(_+m)*y,e[7]=0,e[8]=(p+g)*w,e[9]=(_-m)*w,e[10]=(1-(d+f))*w,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function w(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=r+r,o=s+s,l=n+n,c=r*a,u=s*a,d=s*o,h=n*a,p=n*o,f=n*l,_=i*a,x=i*o,m=i*l;return e[0]=1-d-f,e[1]=u+m,e[2]=h-x,e[3]=0,e[4]=u-m,e[5]=1-c-f,e[6]=p+_,e[7]=0,e[8]=h+x,e[9]=p-_,e[10]=1-c-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function j(e,t,r,s,n){let i=1/Math.tan(t/2),a=1/(s-n);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(n+s)*a,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*n*s*a,e[15]=0,e}function E(e,t,r,s,n,i,a){let o=1/(t-r),l=1/(s-n),c=1/(i-a);return e[0]=-2*o,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*c,e[11]=0,e[12]=(t+r)*o,e[13]=(n+s)*l,e[14]=(a+i)*c,e[15]=1,e}function T(e,t,r,s){let n=t[0],i=t[1],a=t[2],o=s[0],l=s[1],c=s[2],u=n-r[0],d=i-r[1],h=a-r[2],p=u*u+d*d+h*h;0===p?h=1:(p=1/Math.sqrt(p),u*=p,d*=p,h*=p);let f=l*h-c*d,_=c*u-o*h,x=o*d-l*u;return p=f*f+_*_+x*x,0===p&&(c?o+=1e-6:l?c+=1e-6:l+=1e-6,f=l*h-c*d,_=c*u-o*h,x=o*d-l*u,p=f*f+_*_+x*x),p=1/Math.sqrt(p),f*=p,_*=p,x*=p,e[0]=f,e[1]=_,e[2]=x,e[3]=0,e[4]=d*x-h*_,e[5]=h*f-u*x,e[6]=u*_-d*f,e[7]=0,e[8]=u,e[9]=d,e[10]=h,e[11]=0,e[12]=n,e[13]=i,e[14]=a,e[15]=1,e}function A(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function S(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function M(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>m,conjugate:()=>h,copy:()=>_,dot:()=>b,fromEuler:()=>f,fromMat3:()=>p,identity:()=>n,invert:()=>d,length:()=>y,lerp:()=>v,multiply:()=>a,normalize:()=>w,rotateX:()=>o,rotateY:()=>l,rotateZ:()=>c,scale:()=>g,set:()=>x,setAxisAngle:()=>i,slerp:()=>u});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let s=Math.sin(r);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(r),e}function a(e,t,r){let s=t[0],n=t[1],i=t[2],a=t[3],o=r[0],l=r[1],c=r[2],u=r[3];return e[0]=s*u+a*o+n*c-i*l,e[1]=n*u+a*l+i*o-s*c,e[2]=i*u+a*c+s*l-n*o,e[3]=a*u-s*o-n*l-i*c,e}function o(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],a=t[3],o=Math.sin(r),l=Math.cos(r);return e[0]=s*l+a*o,e[1]=n*l+i*o,e[2]=i*l-n*o,e[3]=a*l-s*o,e}function l(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],a=t[3],o=Math.sin(r),l=Math.cos(r);return e[0]=s*l-i*o,e[1]=n*l+a*o,e[2]=i*l+s*o,e[3]=a*l-n*o,e}function c(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],a=t[3],o=Math.sin(r),l=Math.cos(r);return e[0]=s*l+n*o,e[1]=n*l-s*o,e[2]=i*l+a*o,e[3]=a*l-i*o,e}function u(e,t,r,s){let n,i,a,o,l,c=t[0],u=t[1],d=t[2],h=t[3],p=r[0],f=r[1],_=r[2],x=r[3];return i=c*p+u*f+d*_+h*x,i<0&&(i=-i,p=-p,f=-f,_=-_,x=-x),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),o=Math.sin((1-s)*n)/a,l=Math.sin(s*n)/a):(o=1-s,l=s),e[0]=o*c+l*p,e[1]=o*u+l*f,e[2]=o*d+l*_,e[3]=o*h+l*x,e}function d(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=r*r+s*s+n*n+i*i,o=a?1/a:0;return e[0]=-r*o,e[1]=-s*o,e[2]=-n*o,e[3]=i*o,e}function h(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,s=t[0]+t[4]+t[8];if(s>0)r=Math.sqrt(s+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let s=0;t[4]>t[0]&&(s=1),t[8]>t[3*s+s]&&(s=2);let n=(s+1)%3,i=(s+2)%3;r=Math.sqrt(t[3*s+s]-t[3*n+n]-t[3*i+i]+1),e[s]=.5*r,r=.5/r,e[3]=(t[3*n+i]-t[3*i+n])*r,e[n]=(t[3*n+s]+t[3*s+n])*r,e[i]=(t[3*i+s]+t[3*s+i])*r}return e}function f(e,t,r="YXZ"){let s=Math.sin(.5*t[0]),n=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),a=Math.cos(.5*t[1]),o=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=s*a*l+n*i*o,e[1]=n*i*l-s*a*o,e[2]=n*a*o+s*i*l,e[3]=n*a*l-s*i*o):"YXZ"===r?(e[0]=s*a*l+n*i*o,e[1]=n*i*l-s*a*o,e[2]=n*a*o-s*i*l,e[3]=n*a*l+s*i*o):"ZXY"===r?(e[0]=s*a*l-n*i*o,e[1]=n*i*l+s*a*o,e[2]=n*a*o+s*i*l,e[3]=n*a*l-s*i*o):"ZYX"===r?(e[0]=s*a*l-n*i*o,e[1]=n*i*l+s*a*o,e[2]=n*a*o-s*i*l,e[3]=n*a*l+s*i*o):"YZX"===r?(e[0]=s*a*l+n*i*o,e[1]=n*i*l+s*a*o,e[2]=n*a*o-s*i*l,e[3]=n*a*l-s*i*o):"XZY"===r&&(e[0]=s*a*l-n*i*o,e[1]=n*i*l-s*a*o,e[2]=n*a*o+s*i*l,e[3]=n*a*l+s*i*o),e}const _=s.copy,x=s.set,m=s.add,g=s.scale,b=s.dot,v=s.lerp,y=s.length,w=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>a,angle:()=>T,copy:()=>n,cross:()=>g,distance:()=>d,divide:()=>c,dot:()=>m,exactEquals:()=>A,inverse:()=>_,length:()=>s,lerp:()=>b,multiply:()=>l,negate:()=>f,normalize:()=>x,scale:()=>u,scaleRotateMat4:()=>w,set:()=>i,smoothLerp:()=>v,squaredDistance:()=>h,squaredLength:()=>p,subtract:()=>o,transformMat3:()=>j,transformMat4:()=>y,transformQuat:()=>E});function s(e){let t=e[0],r=e[1],s=e[2];return Math.sqrt(t*t+r*r+s*s)}function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,s){return e[0]=t,e[1]=r,e[2]=s,e}function a(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function o(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function c(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function u(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function d(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return Math.sqrt(r*r+s*s+n*n)}function h(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return r*r+s*s+n*n}function p(e){let t=e[0],r=e[1],s=e[2];return t*t+r*r+s*s}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function _(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function x(e,t){let r=t[0],s=t[1],n=t[2],i=r*r+s*s+n*n;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function m(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function g(e,t,r){let s=t[0],n=t[1],i=t[2],a=r[0],o=r[1],l=r[2];return e[0]=n*l-i*o,e[1]=i*a-s*l,e[2]=s*o-n*a,e}function b(e,t,r,s){let n=t[0],i=t[1],a=t[2];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=a+s*(r[2]-a),e}function v(e,t,r,s,n){const i=Math.exp(-s*n);let a=t[0],o=t[1],l=t[2];return e[0]=r[0]+(a-r[0])*i,e[1]=r[1]+(o-r[1])*i,e[2]=r[2]+(l-r[2])*i,e}function y(e,t,r){let s=t[0],n=t[1],i=t[2],a=r[3]*s+r[7]*n+r[11]*i+r[15];return a=a||1,e[0]=(r[0]*s+r[4]*n+r[8]*i+r[12])/a,e[1]=(r[1]*s+r[5]*n+r[9]*i+r[13])/a,e[2]=(r[2]*s+r[6]*n+r[10]*i+r[14])/a,e}function w(e,t,r){let s=t[0],n=t[1],i=t[2],a=r[3]*s+r[7]*n+r[11]*i+r[15];return a=a||1,e[0]=(r[0]*s+r[4]*n+r[8]*i)/a,e[1]=(r[1]*s+r[5]*n+r[9]*i)/a,e[2]=(r[2]*s+r[6]*n+r[10]*i)/a,e}function j(e,t,r){let s=t[0],n=t[1],i=t[2];return e[0]=s*r[0]+n*r[3]+i*r[6],e[1]=s*r[1]+n*r[4]+i*r[7],e[2]=s*r[2]+n*r[5]+i*r[8],e}function E(e,t,r){let s=t[0],n=t[1],i=t[2],a=r[0],o=r[1],l=r[2],c=o*i-l*n,u=l*s-a*i,d=a*n-o*s,h=o*d-l*u,p=l*c-a*d,f=a*u-o*c,_=2*r[3];return c*=_,u*=_,d*=_,h*=2,p*=2,f*=2,e[0]=s+c+h,e[1]=n+u+p,e[2]=i+d+f,e}const T=function(){const e=[0,0,0],t=[0,0,0];return function(r,s){n(e,r),n(t,s),x(e,e),x(t,t);let i=m(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function A(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>i,copy:()=>s,dot:()=>c,length:()=>o,lerp:()=>u,normalize:()=>l,scale:()=>a,set:()=>n});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function n(e,t,r,s,n){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function a(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function o(e){let t=e[0],r=e[1],s=e[2],n=e[3];return Math.sqrt(t*t+r*r+s*s+n*n)}function l(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],a=r*r+s*s+n*n+i*i;return a>0&&(a=1/Math.sqrt(a)),e[0]=r*a,e[1]=s*a,e[2]=n*a,e[3]=i*a,e}function c(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function u(e,t,r,s){let n=t[0],i=t[1],a=t[2],o=t[3];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=a+s*(r[2]-a),e[3]=o+s*(r[3]-o),e}}},s={};function n(e){var t=s[e];if(void 0!==t)return t.exports;var i=s[e]={id:e,loaded:!1,exports:{}},a={id:e,module:i,factory:r[e],require:n};return n.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require),i.loaded=!0,i.exports}n.m=r,n.c=s,n.i=[],n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.hu=e=>e+"."+n.h()+".hot-update.js",n.miniCssF=e=>{},n.hmrF=()=>"main."+n.h()+".hot-update.json",n.h=()=>"269323ae9e563e670a23",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="chromic:",n.l=(r,s,i,a)=>{if(e[r])e[r].push(s);else{var o,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+i){o=d;break}}o||(l=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,n.nc&&o.setAttribute("nonce",n.nc),o.setAttribute("data-webpack",t+i),o.src=r),e[r]=[s];var h=(t,s)=>{o.onerror=o.onload=null,clearTimeout(p);var n=e[r];if(delete e[r],o.parentNode&&o.parentNode.removeChild(o),n&&n.forEach((e=>e(s))),t)return t(s)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),l&&document.head.appendChild(o)}},n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,s={},i=n.c,a=[],o=[],l="idle",c=0,u=[];function d(e){l=e;for(var t=[],r=0;r<o.length;r++)t[r]=o[r].call(null,e);return Promise.all(t).then((function(){}))}function h(){0==--c&&d("ready").then((function(){if(0===c){var e=u;u=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return d("check").then(n.hmrM).then((function(r){return r?d("prepare").then((function(){var s=[];return t=[],Promise.all(Object.keys(n.hmrC).reduce((function(e,i){return n.hmrC[i](r.c,r.r,r.m,e,t,s),e}),[])).then((function(){return t=function(){return e?_(e):d("ready").then((function(){return s}))},0===c?t():new Promise((function(e){u.push((function(){e(t())}))}));var t}))})):d(x()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):_(e)}function _(e){e=e||{},x();var s=t.map((function(t){return t(e)}));t=void 0;var n=s.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return d("abort").then((function(){throw n[0]}));var i=d("dispose");s.forEach((function(e){e.dispose&&e.dispose()}));var a,o=d("apply"),l=function(e){a||(a=e)},c=[];return s.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)c.push(t[r])}})),Promise.all([i,o]).then((function(){return a?d("fail").then((function(){throw a})):r?_(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return c}))}))}function x(){if(r)return t||(t=[]),Object.keys(n.hmrI).forEach((function(e){r.forEach((function(r){n.hmrI[e](r,t)}))})),r=void 0,!0}n.hmrD=s,n.i.push((function(u){var _,x,m,g,b=u.module,v=function(t,r){var s=i[r];if(!s)return t;var n=function(n){if(s.hot.active){if(i[n]){var o=i[n].parents;-1===o.indexOf(r)&&o.push(r)}else a=[r],e=n;-1===s.children.indexOf(n)&&s.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+r),a=[];return t(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var u in t)Object.prototype.hasOwnProperty.call(t,u)&&"e"!==u&&Object.defineProperty(n,u,o(u));return n.e=function(e,r){return function(e){switch(l){case"ready":d("prepare");case"prepare":return c++,e.then(h,h),e;default:return e}}(t.e(e,r))},n}(u.require,u.id);b.hot=(_=u.id,x=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:m=e!==_,_requireSelf:function(){a=x.parents.slice(),e=m?void 0:_,n(_)},active:!0,accept:function(e,t,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)g._acceptedDependencies[e[s]]=t||function(){},g._acceptedErrorHandlers[e[s]]=r;else g._acceptedDependencies[e]=t||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":t=[],Object.keys(n.hmrI).forEach((function(e){n.hmrI[e](_,t)})),d("ready");break;case"ready":Object.keys(n.hmrI).forEach((function(e){n.hmrI[e](_,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(_)}},check:p,apply:f,status:function(e){if(!e)return l;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:s[_]},e=void 0,g),b.parents=a,b.children=[],a=[],u.require=v})),n.hmrC={},n.hmrI={}})(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var s=r.length-1;s>-1&&(!e||!/^http(s?):/.test(e));)e=r[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{if("undefined"!=typeof document){var e=(e,t,r,s,i)=>{var a=document.createElement("link");a.rel="stylesheet",a.type="text/css",n.nc&&(a.nonce=n.nc);return a.onerror=a.onload=r=>{if(a.onerror=a.onload=null,"load"===r.type)s();else{var n=r&&r.type,o=r&&r.target&&r.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+n+": "+o+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=n,l.request=o,a.parentNode&&a.parentNode.removeChild(a),i(l)}},a.href=t,r?r.parentNode.insertBefore(a,r.nextSibling):document.head.appendChild(a),a},t=(e,t)=>{for(var r=document.getElementsByTagName("link"),s=0;s<r.length;s++){var n=(a=r[s]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(n===e||n===t))return a}var i=document.getElementsByTagName("style");for(s=0;s<i.length;s++){var a;if((n=(a=i[s]).getAttribute("data-href"))===e||n===t)return a}},r=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<r.length;e++){var t=r[e];t.parentNode&&t.parentNode.removeChild(t)}r.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}});n.hmrC.miniCss=(a,o,l,c,u,d)=>{u.push(i),a.forEach((i=>{var a=n.miniCssF(i),o=n.p+a,l=t(a,o);l&&c.push(new Promise(((t,n)=>{var a=e(i,o,l,(()=>{a.as="style",a.rel="preload",t()}),n);r.push(l),s.push(a)})))}))}}})(),(()=>{var e,t,r,s,i,a=n.hmrS_jsonp=n.hmrS_jsonp||{main:0},o={};function l(t,r){return e=r,new Promise(((e,r)=>{o[t]=e;var s=n.p+n.hu(t),i=new Error;n.l(s,(e=>{if(o[t]){o[t]=void 0;var s=e&&("load"===e.type?"missing":e.type),n=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+s+": "+n+")",i.name="ChunkLoadError",i.type=s,i.request=n,r(i)}}))}))}function c(e){function o(e){for(var t=[e],r={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var i=s.pop(),a=i.id,o=i.chain,c=n.c[a];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:a};if(c.hot._main)return{type:"unaccepted",chain:o,moduleId:a};for(var u=0;u<c.parents.length;u++){var d=c.parents[u],h=n.c[d];if(h){if(h.hot._declinedDependencies[a])return{type:"declined",chain:o.concat([d]),moduleId:a,parentId:d};-1===t.indexOf(d)&&(h.hot._acceptedDependencies[a]?(r[d]||(r[d]=[]),l(r[d],[a])):(delete r[d],t.push(d),s.push({chain:o.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function l(e,t){for(var r=0;r<t.length;r++){var s=t[r];-1===e.indexOf(s)&&e.push(s)}}n.f&&delete n.f.jsonpHmr,t=void 0;var c={},u=[],d={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(n.o(r,p)){var f,_=r[p],x=!1,m=!1,g=!1,b="";switch((f=_?o(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(x=new Error("Aborted because of self decline: "+f.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(x=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(f),m=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),g=!0;break;default:throw new Error("Unexception type "+f.type)}if(x)return{error:x};if(m)for(p in d[p]=_,l(u,f.outdatedModules),f.outdatedDependencies)n.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),l(c[p],f.outdatedDependencies[p]));g&&(l(u,[f.moduleId]),d[p]=h)}r=void 0;for(var v,y=[],w=0;w<u.length;w++){var j=u[w],E=n.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&d[j]!==h&&!E.hot._selfInvalidated&&y.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;s.forEach((function(e){delete a[e]})),s=void 0;for(var t,r=u.slice();r.length>0;){var i=r.pop(),o=n.c[i];if(o){var l={},d=o.hot._disposeHandlers;for(w=0;w<d.length;w++)d[w].call(null,l);for(n.hmrD[i]=l,o.hot.active=!1,delete n.c[i],delete c[i],w=0;w<o.children.length;w++){var h=n.c[o.children[w]];h&&((e=h.parents.indexOf(i))>=0&&h.parents.splice(e,1))}}}for(var p in c)if(n.o(c,p)&&(o=n.c[p]))for(v=c[p],w=0;w<v.length;w++)t=v[w],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var r in d)n.o(d,r)&&(n.m[r]=d[r]);for(var s=0;s<i.length;s++)i[s](n);for(var a in c)if(n.o(c,a)){var o=n.c[a];if(o){v=c[a];for(var l=[],h=[],p=[],f=0;f<v.length;f++){var _=v[f],x=o.hot._acceptedDependencies[_],m=o.hot._acceptedErrorHandlers[_];if(x){if(-1!==l.indexOf(x))continue;l.push(x),h.push(m),p.push(_)}}for(var g=0;g<l.length;g++)try{l[g].call(null,v)}catch(r){if("function"==typeof h[g])try{h[g](r,{moduleId:a,dependencyId:p[g]})}catch(s){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:p[g],error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:p[g],error:r}),e.ignoreErrored||t(r)}}}for(var b=0;b<y.length;b++){var w=y[b],j=w.module;try{w.require(j)}catch(r){if("function"==typeof w.errorHandler)try{w.errorHandler(r,{moduleId:j,module:n.c[j]})}catch(s){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return u}}}self.webpackHotUpdatechromic=(t,s,a)=>{for(var l in s)n.o(s,l)&&(r[l]=s[l],e&&e.push(l));a&&i.push(a),o[t]&&(o[t](),o[t]=void 0)},n.hmrI.jsonp=function(e,t){r||(r={},i=[],s=[],t.push(c)),n.o(r,e)||(r[e]=n.m[e])},n.hmrC.jsonp=function(e,o,u,d,h,p){h.push(c),t={},s=o,r=u.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){n.o(a,e)&&void 0!==a[e]?(d.push(l(e,p)),t[e]=!0):t[e]=!1})),n.f&&(n.f.jsonpHmr=function(e,r){t&&n.o(t,e)&&!t[e]&&(r.push(l(e)),t[e]=!0)})},n.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(n.p+n.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),n("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),n("./node_modules/webpack/hot/dev-server.js"),n("./app/index.js");n("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiO1VBQUlBLEVBQ0FDLG9FQ0NKQyxFQUFPQyxRQUFVQyxFQUdqQixJQUFJQyxFQUFXLHVGQUVYQyxFQUFhLENBQ2ZDLE1BQU8sQ0FBQyxNQUFPLE9BQ2ZDLE1BQU8sTUFDUEMsSUFBSyxTQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxTQUFVLE9BRVJDLEVBQVUsQ0FDWixHQUFJLFFBQ0osR0FBSSxNQUNKLEdBQUksUUFDSixHQUFJLFNBQ0osR0FBSSxPQUNKLEdBQUksVUFDSixHQUFJLE9BQ0osR0FBSSxhQUVGQyxFQUFZLENBQ2QsRUFBSyxtQkFDTCxFQUFLLGNBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLGVBQ0wsRUFBSyxTQUVIQyxFQUFhLENBQ2YsR0FBTSxPQUNOLEdBQU0sT0FDTixHQUFNLFVBWVIsU0FBU2YsRUFBVWdCLEdBRWpCLElBQUtmLEVBQVNnQixLQUFLRCxHQUNqQixPQUFPQSxFQUlULElBQUlFLEVBQVksR0FFWkMsRUFBTUgsRUFBS0ksUUFBUSxpQkFBaUIsU0FBVUMsRUFBT0MsR0FDdkQsSUFBSUMsRUFBS1QsRUFBVVEsR0FDbkIsR0FBSUMsRUFFRixPQUFPTCxFQUFVTSxRQUFRRixJQUN2QkosRUFBVU8sTUFDSCxZQUdUUCxFQUFVUSxLQUFLSixHQUNFLE1BQVZDLEVBQUcsR0FBYUEsRUFBSyxnQkFBa0JBLEVBQUssT0FHckQsSUFBSUksRUFBS1osRUFBV08sR0FDcEIsT0FBSUssR0FFRlQsRUFBVU8sTUFDSEUsR0FFRixFQUNULElBR0lDLEVBQUlWLEVBQVVXLE9BR2xCLE9BRkVELEVBQUksSUFBT1QsR0FBT1csTUFBTUYsRUFBSSxHQUFHRyxLQUFLLFlBRS9CWixDQUNULENBc0VBLFNBQVNhLEVBQVVDLEdBUWpCLElBQUssSUFBSUMsS0FOVHBCLEVBQVUsR0FBTyx1Q0FBeUNtQixFQUFPOUIsTUFBTSxHQUFLLGdCQUFrQjhCLEVBQU85QixNQUFNLEdBRTNHVyxFQUFVLEdBQU8sVUFBWW1CLEVBQU85QixNQUFNLEdBQUssZ0JBQWtCOEIsRUFBTzlCLE1BQU0sR0FFOUVXLEVBQVUsSUFBUSxVQUFZbUIsRUFBT3JCLFNBRXBCQyxFQUFTLENBQ3hCLElBQ0lzQixFQUFXRixFQURIcEIsRUFBUXFCLEtBQ1ksTUFDaENwQixFQUFVb0IsR0FBUSxVQUFZQyxFQUM5QkQsRUFBT0UsU0FBU0YsR0FDaEJwQixHQUFXb0IsRUFBTyxJQUFJRyxZQUFjLGVBQWlCRixDQUN2RCxDQUNGLENBbElDLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSUcsU0FBUSxTQUFVQyxHQUM3Q3hCLEVBQVd3QixHQUFLLFNBQ2xCLElBaURBdkMsRUFBU3dDLFVBQVksU0FBVVAsR0FDN0IsR0FBc0IsaUJBQVhBLEVBQ1QsTUFBTSxJQUFJUSxNQUFNLHlDQUdsQixJQUFJQyxFQUFlLENBQUMsRUFDcEIsSUFBSyxJQUFJQyxLQUFPekMsRUFBWSxDQUMxQixJQUFJMEMsRUFBTVgsRUFBT1ksZUFBZUYsR0FBT1YsRUFBT1UsR0FBTyxLQUNyRCxHQUFLQyxFQUFMLENBSUEsR0FBSSxVQUFZRCxFQUFLLENBSW5CLEdBSG1CLGlCQUFSQyxJQUNUQSxFQUFNLENBQUNBLEtBRUpkLE1BQU1nQixRQUFRRixJQUF1QixJQUFmQSxFQUFJZixRQUFnQmUsRUFBSUcsTUFBSyxTQUFVQyxHQUNoRSxNQUFvQixpQkFBTkEsQ0FDaEIsSUFDRSxNQUFNLElBQUlQLE1BQU0saUJBQW1CRSxFQUFNLHNGQUUzQyxJQUFJTSxFQUFjL0MsRUFBV3lDLEdBQ3hCQyxFQUFJLEtBQ1BBLEVBQUksR0FBS0ssRUFBWSxJQUVKLElBQWZMLEVBQUlmLFFBQWlCZSxFQUFJLEtBQzNCQSxFQUFNLENBQUNBLEVBQUksS0FDUGxCLEtBQUt1QixFQUFZLElBR3ZCTCxFQUFNQSxFQUFJTSxNQUFNLEVBQUcsRUFDckIsTUFBTyxHQUFtQixpQkFBUk4sRUFDaEIsTUFBTSxJQUFJSCxNQUFNLGlCQUFtQkUsRUFBTSxpREFFM0NELEVBQWFDLEdBQU9DLENBdkJwQixNQUZFRixFQUFhQyxHQUFPekMsRUFBV3lDLEVBMEJuQyxDQUNBWCxFQUFTVSxFQUNYLEVBS0ExQyxFQUFTRyxNQUFRLFdBQ2Y2QixFQUFTOUIsRUFDWCxFQU1BRixFQUFTbUQsS0FBTyxDQUFDLEVBRWJDLE9BQU9DLGdCQUNURCxPQUFPQyxlQUFlckQsRUFBU21ELEtBQU0sT0FBUSxDQUMzQ0csSUFBSyxXQUFjLE9BQU94QyxDQUFVLElBRXRDc0MsT0FBT0MsZUFBZXJELEVBQVNtRCxLQUFNLFFBQVMsQ0FDNUNHLElBQUssV0FBYyxPQUFPdkMsQ0FBVyxNQUd2Q2YsRUFBU21ELEtBQUtJLEtBQU96QyxFQUNyQmQsRUFBU21ELEtBQUtLLE1BQVF6QyxHQW9CeEJmLEVBQVNHLHdLQ25LTSxNQUFNc0QsVUFBa0JDLEVBQUFBLFFBQ3JDQyxXQUFBQSxFQUFZLFFBQUVDLEVBQU8sU0FBRUMsSUFDckJDLE1BQU0sQ0FDSkYsVUFDQUMsWUFFSixDQUVBRSxTQUFBQSxHQUNFQyxFQUFBQSxRQUFLQyxPQUNIQyxLQUFLTixRQUNMLENBQ0VPLFVBQVcsRUFDWEMsTUFBTyxJQUVULENBQ0VELFVBQVcsRUFDWEUsU0FBVSxHQUdoQixDQUVBQyxVQUFBQSxHQUNFTixFQUFBQSxRQUFLTyxJQUFJTCxLQUFLTixRQUFTLENBQ3JCTyxVQUFXLEdBRWYsQ0FFQUssUUFBQUEsR0FBWSwrSkMxQkMsTUFBTUMsVUFBY2YsRUFBQUEsUUFDakNDLFdBQUFBLEVBQVksUUFBRUMsRUFBTyxTQUFFQyxJQUNyQkMsTUFBTSxDQUNKRixVQUNBQyxZQWNKLENBRUFFLFNBQUFBLEdBQ0VDLEVBQUFBLFFBQUtDLE9BQ0hDLEtBQUtOLFFBQ0wsQ0FDRU8sVUFBVyxFQUNYQyxNQUFPLElBRVQsQ0FDRUQsVUFBVyxFQUNYRSxTQUFVLEdBR2hCLENBRUFDLFVBQUFBLEdBQ0VOLEVBQUFBLFFBQUtPLElBQUlMLEtBQUtOLFFBQVMsQ0FDckJPLFVBQVcsR0FFZixtS0N0Q2EsTUFBTU8sVUFBa0JoQixFQUFBQSxRQUNyQ0MsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLFNBQUVDLElBQ3JCQyxNQUFNLENBQ0pGLFVBQ0FDLFlBT0osQ0FFQUUsU0FBQUEsR0FDRUMsRUFBQUEsUUFBS0MsT0FDSEMsS0FBS04sUUFDTCxDQUNFTyxVQUFXLEVBQ1hDLE1BQU8sSUFFVCxDQUNFRCxVQUFXLEVBQ1hFLFNBQVUsR0FHaEIsQ0FFQUMsVUFBQUEsR0FDRU4sRUFBQUEsUUFBS08sSUFBSUwsS0FBS04sUUFBUyxDQUNyQk8sVUFBVyxHQUVmLCtKQy9CYSxNQUFNUSxVQUFjakIsRUFBQUEsUUFDakNDLFdBQUFBLEVBQVksUUFBRUMsRUFBTyxTQUFFQyxJQUNyQkMsTUFBTSxDQUNKRixVQUNBQyxZQWNKLENBRUFFLFNBQUFBLEdBQ0VDLEVBQUFBLFFBQUtDLE9BQ0hDLEtBQUtOLFFBQ0wsQ0FDRU8sVUFBVyxFQUNYQyxNQUFPLElBRVQsQ0FDRUQsVUFBVyxFQUNYRSxTQUFVLEdBR2hCLENBRUFDLFVBQUFBLEdBQ0VOLEVBQUFBLFFBQUtPLElBQUlMLEtBQUtOLFFBQVMsQ0FDckJPLFVBQVcsR0FFZiw0SEMxQ2EsTUFBTVQsVUFBa0JrQixFQUFBQSxRQUNyQ2pCLFdBQUFBLEVBQVksUUFBRUMsRUFBTyxTQUFFQyxJQUNyQkMsTUFBTSxDQUNKRixVQUNBQyxhQUVGSyxLQUFLVyxpQkFDTFgsS0FBS0ksWUFDUCxDQVVBTyxjQUFBQSxHQUNFWCxLQUFLWSxTQUFXLElBQUlDLE9BQU9DLHNCQUFzQkMsSUFDL0NBLEVBQVEzQyxTQUFTNEMsSUFDWEEsRUFBTUMsZUFDUmpCLEtBQUtILFlBRUxHLEtBQUtJLFlBQ1AsR0FDQSxJQUVKSixLQUFLWSxTQUFTTSxRQUFRbEIsS0FBS04sUUFDN0IsQ0FFQUcsU0FBQUEsR0FBYSxDQUNiTyxVQUFBQSxHQUFjLDRIQ3pDRCxNQUFNZSxVQUFrQlQsRUFBQUEsUUFDckNqQixXQUFBQSxFQUFZLFFBQUVDLElBQ1pFLE1BQU0sQ0FBRUYsWUFFUk0sS0FBS1csZ0JBQ1AsQ0FFQUEsY0FBQUEsR0FDRVgsS0FBS1ksU0FBVyxJQUFJQyxPQUFPQyxzQkFBc0JDLElBQy9DQSxFQUFRM0MsU0FBUzRDLElBQ2YsR0FBSUEsRUFBTUMsZUFBZ0IsQ0FDeEIsR0FBSWpCLEtBQUtOLFFBQVEwQixJQUVmLFlBREFwQixLQUFLTixRQUFRMkIsVUFBVUMsSUFBSSxVQUc3QnRCLEtBQUtOLFFBQVEwQixJQUFNcEIsS0FBS04sUUFBUTZCLGFBQWEsWUFDN0N2QixLQUFLTixRQUFROEIsT0FBUyxLQUNwQnhCLEtBQUtOLFFBQVEyQixVQUFVQyxJQUFJLFNBQVMsQ0FFeEMsSUFDQSxJQUVKdEIsS0FBS1ksU0FBU00sUUFBUWxCLEtBQUtOLFFBQzdCLENBRUFHLFNBQUFBLEdBQWEsNkpDbEJBLE1BQU00QixVQUFlZixFQUFBQSxRQUNsQ2pCLFdBQUFBLEVBQVksUUFBRUMsSUFDWkUsTUFBTSxDQUFFRixZQUVSTSxLQUFLMEIsS0FBT2hDLEVBQVFpQyxjQUFjLG1CQUNsQzNCLEtBQUs0QixXQUFhNUIsS0FBSzBCLEtBQUtHLGlCQUU1QjdCLEtBQUs4QixTQUFXaEMsRUFBQUEsUUFBS2dDLFNBQVMsQ0FDNUJDLFFBQVEsRUFDUjVCLFNBQVUsR0FDVjZCLEtBQU0sZUFFUmhDLEtBQUs4QixTQUFTL0IsT0FDWkMsS0FBSzBCLEtBQ0wsQ0FDRU8saUJBQWtCakMsS0FBSzRCLFdBQ3ZCTSxnQkFBaUIsR0FBR2xDLEtBQUs0QixjQUFjNUIsS0FBSzRCLGNBRTlDLENBQ0VLLGlCQUFrQixFQUNsQkMsZ0JBQWlCLEdBQUdsQyxLQUFLNEIsY0FBYzVCLEtBQUs0QixjQUdsRCxDQUVBTyxZQUFBQSxHQUNFbkMsS0FBSzhCLFNBQVNNLE1BQ2hCLENBRUFDLFlBQUFBLEdBQ0VyQyxLQUFLOEIsU0FBU1EsU0FDaEIsQ0FFQUMsaUJBQUFBLEdBQ0V2QyxLQUFLd0Msa0JBQW9CeEMsS0FBS21DLGFBQWFNLEtBQUt6QyxNQUNoREEsS0FBSzBDLGtCQUFvQjFDLEtBQUtxQyxhQUFhSSxLQUFLekMsTUFFaERBLEtBQUtOLFFBQVFpRCxpQkFBaUIsYUFBYzNDLEtBQUt3QyxtQkFDakR4QyxLQUFLTixRQUFRaUQsaUJBQWlCLGFBQWMzQyxLQUFLMEMsa0JBQ25ELENBRUFFLG9CQUFBQSxHQUNFNUMsS0FBS04sUUFBUW1ELG9CQUFvQixhQUFjN0MsS0FBS3dDLG1CQUNwRHhDLEtBQUtOLFFBQVFtRCxvQkFBb0IsYUFBYzdDLEtBQUswQyxrQkFDdEQsZ0lDdkJLLE1BQU1JLEVBQWUsSUFsQjVCLE1BQ0VyRCxXQUFBQSxHQUFlLENBUWZzRCxNQUFBQSxFQUFPLGdCQUFFQyxFQUFlLE1BQUVDLElBQ3hCbkQsRUFBQUEsUUFBS29ELEdBQUdDLFNBQVNDLGdCQUFpQixDQUNoQ2pELFNBQVUsSUFDVjZDLGtCQUNBQyxTQUVKLHdMQ1hhLE1BQU12QyxVQUFrQjJDLEtBQ3JDNUQsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLFNBQUVDLElBQ3JCQyxRQUNBSSxLQUFLc0QsU0FBVzVELEVBQ2hCTSxLQUFLdUQsaUJBQW1CLElBQUs1RCxHQUU3QkssS0FBS3dELFNBQ0x4RCxLQUFLdUMsbUJBQ1AsQ0FPQWlCLE1BQUFBLEdBQ014RCxLQUFLc0Qsb0JBQW9CekMsT0FBTzRDLFlBQ2xDekQsS0FBS04sUUFBVU0sS0FBS3NELFNBRXBCdEQsS0FBS04sUUFBVXlELFNBQVN4QixjQUFjM0IsS0FBS3NELFVBRTdDdEQsS0FBS0wsU0FBVyxDQUFDLEVBRWpCK0QsSUFBSzFELEtBQUt1RCxrQkFBa0IsQ0FBQ3ZDLEVBQU92QyxLQUVoQ3VDLGFBQWlCSCxPQUFPNEMsYUFDeEJ6QyxhQUFpQkgsT0FBTzhDLFVBQ3hCL0YsTUFBTWdCLFFBQVFvQyxHQUVkaEIsS0FBS0wsU0FBU2xCLEdBQU91QyxHQUVyQmhCLEtBQUtMLFNBQVNsQixHQUFPdUIsS0FBS04sUUFBUWtFLGlCQUFpQjVDLEdBQ2pCLElBQTlCaEIsS0FBS0wsU0FBU2xCLEdBQUtkLE9BQ3JCcUMsS0FBS0wsU0FBU2xCLEdBQU8sS0FDa0IsSUFBOUJ1QixLQUFLTCxTQUFTbEIsR0FBS2QsU0FDNUJxQyxLQUFLTCxTQUFTbEIsR0FBT3VCLEtBQUtOLFFBQVFpQyxjQUFjWCxJQUVwRCxHQUVKLENBRUF1QixpQkFBQUEsR0FBcUIsQ0FDckJLLG9CQUFBQSxHQUF3QixnZENsQ1gsTUFBTWlCLEVBQ25CcEUsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLFNBQUVDLEVBQVEsR0FBRW1FLElBQy9COUQsS0FBS3NELFNBQVc1RCxFQUNoQk0sS0FBS3VELGlCQUFtQixJQUNuQjVELEVBQ0hvRSxpQkFBa0IsMkJBQ2xCQyxpQkFBa0IsMkJBQ2xCQyxxQkFBc0IsK0JBQ3RCQyxxQkFBc0IsK0JBRXRCQyxXQUFZLGNBR2RuRSxLQUFLOEQsR0FBS0EsRUFDVjlELEtBQUtvRSxrQkFBb0JwRSxLQUFLcUUsUUFBUTVCLEtBQUt6QyxNQUMzQ0EsS0FBS3NFLGdCQUFrQkMsSUFBTyxZQUNoQyxDQVFBZixNQUFBQSxHQUNFeEQsS0FBS04sUUFBVXlELFNBQVN4QixjQUFjM0IsS0FBS3NELFVBQzNDdEQsS0FBS0wsU0FBVyxDQUFDLEVBQ2pCSyxLQUFLd0UsT0FBUyxDQUNaQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUkMsS0FBTSxFQUNOQyxNQUFPLEdBR1RsQixJQUFLMUQsS0FBS3VELGtCQUFrQixDQUFDdkMsRUFBT3ZDLEtBRWhDdUMsYUFBaUJILE9BQU80QyxhQUN4QnpDLGFBQWlCSCxPQUFPOEMsVUFDeEIvRixNQUFNZ0IsUUFBUW9DLEdBRWRoQixLQUFLTCxTQUFTbEIsR0FBT3VDLEdBRXJCaEIsS0FBS0wsU0FBU2xCLEdBQU91QixLQUFLTixRQUFRa0UsaUJBQWlCNUMsR0FDakIsSUFBOUJoQixLQUFLTCxTQUFTbEIsR0FBS2QsT0FDckJxQyxLQUFLTCxTQUFTbEIsR0FBTyxLQUNrQixJQUE5QnVCLEtBQUtMLFNBQVNsQixHQUFLZCxTQUM1QnFDLEtBQUtMLFNBQVNsQixHQUFPdUIsS0FBS04sUUFBUWlDLGNBQWNYLElBRXBELElBRUZoQixLQUFLNkUsbUJBQ0w3RSxLQUFLOEUsa0JBQ1AsQ0FTQUQsZ0JBQUFBLEdBQ0U3RSxLQUFLK0UsV0FBYSxHQUdsQi9FLEtBQUsrRCxpQkFBbUJpQixJQUFJaEYsS0FBS0wsU0FBU29FLGtCQUFtQnJFLEdBQ3BELElBQUllLEVBQUFBLFFBQU0sQ0FBRWYsY0FFckJNLEtBQUsrRSxXQUFXdkgsUUFBUXdDLEtBQUsrRCxrQkFHN0IvRCxLQUFLZ0UsaUJBQW1CZ0IsSUFBSWhGLEtBQUtMLFNBQVNxRSxrQkFBbUJ0RSxHQUNwRCxJQUFJYSxFQUFBQSxRQUFNLENBQUViLGNBRXJCTSxLQUFLK0UsV0FBV3ZILFFBQVF3QyxLQUFLZ0Usa0JBRzdCaEUsS0FBS2lFLHFCQUF1QmUsSUFDMUJoRixLQUFLTCxTQUFTc0Usc0JBQ2J2RSxHQUNRLElBQUljLEVBQUFBLFFBQVUsQ0FBRWQsY0FHM0JNLEtBQUsrRSxXQUFXdkgsUUFBUXdDLEtBQUtpRSxzQkFHN0JqRSxLQUFLa0UscUJBQXVCYyxJQUMxQmhGLEtBQUtMLFNBQVN1RSxzQkFDYnhFLEdBQ1EsSUFBSUgsRUFBQUEsUUFBVSxDQUFFRyxjQUczQk0sS0FBSytFLFdBQVd2SCxRQUFRd0MsS0FBS2tFLHFCQUMvQixDQU9BWSxnQkFBQUEsR0FDRTlFLEtBQUttRSxXQUFhYSxJQUFJaEYsS0FBS0wsU0FBU3dFLFlBQWF6RSxHQUN4QyxJQUFJeUIsRUFBQUEsUUFBVSxDQUFFekIsYUFFM0IsQ0FRQXVGLElBQUFBLENBQUtDLEdBQ0gsT0FBTyxJQUFJQyxTQUFTQyxJQUNsQnRDLEVBQUFBLGFBQWFDLE9BQU8sQ0FDbEJDLGdCQUFpQmhELEtBQUtOLFFBQVE2QixhQUFhLG1CQUMzQzBCLE1BQU9qRCxLQUFLTixRQUFRNkIsYUFBYSxnQkFHL0IyRCxFQUNGbEYsS0FBS0gsVUFBWXFGLEdBRWpCbEYsS0FBS0gsVUFBWUMsRUFBQUEsUUFBS2dDLFdBRXRCOUIsS0FBS0gsVUFBVUUsT0FDYkMsS0FBS04sUUFDTCxDQUNFTyxVQUFXLEdBRWIsQ0FBRUEsVUFBVyxJQUVmRCxLQUFLSCxVQUFVd0YsTUFBTUMsSUFDbkJ0RixLQUFLdUMsb0JBQ0w2QyxHQUFTLElBRWIsR0FFSixDQU1BRyxJQUFBQSxHQUNFLE9BQU8sSUFBSUosU0FBU0MsSUFDbEJwRixLQUFLd0YsVUFFTHhGLEtBQUtJLFdBQWFOLEVBQUFBLFFBQUtnQyxXQUV2QjlCLEtBQUtJLFdBQVc4QyxHQUFHbEQsS0FBS04sUUFBUyxDQUMvQk8sVUFBVyxFQUNYd0YsV0FBWUwsR0FDWixHQUVOLENBT0FmLE9BQUFBLEVBQVEsT0FBRXFCLElBQ1IxRixLQUFLd0UsT0FBT0UsUUFBVWdCLENBQ3hCLENBYUFwRixRQUFBQSxHQUNNTixLQUFLTCxTQUFTZ0csVUFDaEIzRixLQUFLd0UsT0FBT0ksTUFDVjVFLEtBQUtMLFNBQVNnRyxRQUFRQyxhQUFlL0UsT0FBT2dGLFlBRWxELENBUUFDLE1BQUFBLEdBQ0U5RixLQUFLd0UsT0FBT0UsT0FBUzVFLEVBQUFBLFFBQUtpRyxNQUFNQyxNQUM5QixFQUNBaEcsS0FBS3dFLE9BQU9JLE1BQ1o1RSxLQUFLd0UsT0FBT0UsUUFFZDFFLEtBQUt3RSxPQUFPQyxRQUFVM0UsRUFBQUEsUUFBS2lHLE1BQU1FLFlBQy9CakcsS0FBS3dFLE9BQU9DLFFBQ1p6RSxLQUFLd0UsT0FBT0UsT0FDWixJQUVFMUUsS0FBS3dFLE9BQU9DLFFBQVUsTUFDeEJ6RSxLQUFLd0UsT0FBT0MsUUFBVSxHQUdwQnpFLEtBQUtMLFNBQVNnRyxVQUNoQjNGLEtBQUtMLFNBQVNnRyxRQUFRTyxNQUFNbEcsS0FBS3NFLGlCQUMvQixlQUFldEUsS0FBS3dFLE9BQU9DLGFBRWpDLENBTUFsQyxpQkFBQUEsR0FDRSxDQU9GSyxvQkFBQUEsR0FDRSxDQUdGNEMsT0FBQUEsR0FDRXhGLEtBQUs0QyxzQkFDUCx1UkNyUGEsTUFBTXVELEVBQ25CMUcsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLE1BQUUwRyxFQUFLLFNBQUVDLEVBQVEsR0FBRUMsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ2pEeEcsS0FBS04sUUFBVUEsRUFDZk0sS0FBS3lHLGVBQWlCekcsS0FBS04sUUFBUWlDLGNBQ2pDLDRCQUVGM0IsS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLcUcsU0FBV0EsRUFDaEJyRyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS29HLE1BQVFBLEVBRWJwRyxLQUFLMEcsTUFBUSxJQUFJQyxFQUFBQSxVQUVqQjNHLEtBQUt3RSxPQUFTLENBQ1pvQyxNQUFPLEVBQ1BuQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUm1DLEtBQU0sR0FDTkMsU0FBVSxHQUlaOUcsS0FBSytHLE1BQVEsQ0FDWEMsRUFBRyxFQUNIQyxFQUFHLEdBRUxqSCxLQUFLTSxTQUFTLENBQUVrRyxNQUFPeEcsS0FBS3dHLFFBRTVCeEcsS0FBS2tILGVBQ0xsSCxLQUFLMEcsTUFBTVMsVUFBVW5ILEtBQUt1RyxNQUM1QixDQUVBVyxZQUFBQSxHQUNFbEgsS0FBS29ILGVBQWlCcEgsS0FBS04sUUFBUWtFLGlCQUNqQywwQkFHRjVELEtBQUtxSCxPQUFTckMsSUFBSWhGLEtBQUtvSCxnQkFBZ0IsQ0FBQzFILEVBQVMwRyxJQUN4QyxJQUFJa0IsRUFBQUEsUUFBTSxDQUNmNUgsUUFBU0EsRUFDVDBHLE1BQU9BLEVBQ1BDLFNBQVVyRyxLQUFLcUcsU0FDZkMsR0FBSXRHLEtBQUtzRyxHQUNUQyxNQUFPdkcsS0FBSzBHLE1BQ1pGLE1BQU94RyxLQUFLd0csU0FHbEIsQ0FFQXZCLElBQUFBLEdBQ0VELElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU10QyxNQUFNLEdBRWhCLENBRUFNLElBQUFBLEdBQ0VQLElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU1oQyxNQUFNLEdBRWhCLENBT0FqRixRQUFBQSxDQUFTa0gsR0FDUHhILEtBQUt5SCxPQUFTekgsS0FBS3lHLGVBQWVpQix3QkFFbEMxSCxLQUFLd0csTUFBUWdCLEVBQU1oQixNQUVuQnhHLEtBQUsySCxhQUNGM0gsS0FBS3lILE9BQU9HLE1BQVEvRyxPQUFPZ0gsV0FBYzdILEtBQUt3RyxNQUFNb0IsTUFFdkQ1SCxLQUFLd0UsT0FBT0MsUUFBVXpFLEtBQUt3RSxPQUFPRSxPQUFTLEVBRTNDTSxJQUFJaEYsS0FBS3FILFFBQVNFLElBQ2hCQSxFQUFNakgsU0FBU2tILEVBQU94SCxLQUFLd0UsT0FBT0MsUUFBUSxHQUU5QyxDQU9BcUQsV0FBQUEsRUFBWSxFQUFFZCxFQUFDLEVBQUVDLElBQ2ZqSCxLQUFLd0UsT0FBT29DLE1BQVE1RyxLQUFLd0UsT0FBT0MsT0FDbEMsQ0FNQXNELFdBQUFBLEVBQVksRUFBRWYsRUFBQyxFQUFFQyxJQUNmLE1BQU1lLEVBQVdoQixFQUFFSixNQUFRSSxFQUFFaUIsSUFFN0JqSSxLQUFLd0UsT0FBT0UsT0FBUzFFLEtBQUt3RSxPQUFPb0MsTUFBUW9CLENBQzNDLENBTUFFLFNBQUFBLEVBQVUsRUFBRWxCLEVBQUMsRUFBRUMsSUFBTSxDQVFyQm5CLE1BQUFBLENBQU90QixHQUVMLE1BQU13RCxFQUE4QyxJQUFsQ3hELEVBQU9DLFFBQVVELEVBQU9FLFFBRXBDdUMsRUFBSXpDLEVBQU9DLFFBQVU1RCxPQUFPZ0YsWUFHOUI3RixLQUFLd0UsT0FBT0MsUUFBVXpFLEtBQUt3RSxPQUFPRSxRQUNwQzFFLEtBQUttSSxVQUFZLFFBQ2pCbkksS0FBS3dFLE9BQU9zQyxVQUFZLEdBQ2Y5RyxLQUFLd0UsT0FBT0MsUUFBVXpFLEtBQUt3RSxPQUFPRSxTQUMzQzFFLEtBQUttSSxVQUFZLE9BQ2pCbkksS0FBS3dFLE9BQU9zQyxTQUFXLEdBSXpCOUcsS0FBS3dFLE9BQU9FLFFBQVUxRSxLQUFLd0UsT0FBT3NDLFNBRWxDOUcsS0FBS3dFLE9BQU9FLFFBQVVzRCxFQUd0QmhJLEtBQUt3RSxPQUFPQyxRQUFVM0UsRUFBQUEsUUFBS2lHLE1BQU1FLFlBQy9CakcsS0FBS3dFLE9BQU9DLFFBQ1p6RSxLQUFLd0UsT0FBT0UsT0FDWjFFLEtBQUt3RSxPQUFPcUMsTUFHZDdCLElBQUloRixLQUFLcUgsUUFBUSxDQUFDRSxFQUFPakMsS0FDdkIsTUFBTThDLEVBQWFiLEVBQU1jLEtBQUtDLE1BQU10QixFQUFJLEVBQUksSUFHNUMsR0FBdUIsU0FBbkJoSCxLQUFLbUksVUFBc0IsQ0FDbkJaLEVBQU1jLEtBQUtFLFNBQVN2QixFQUFJb0IsR0FDekJwSSxLQUFLd0csTUFBTW9CLE1BQVEsSUFDMUJMLEVBQU1SLE9BQVMvRyxLQUFLMkgsYUFFeEIsTUFBTyxHQUF1QixVQUFuQjNILEtBQUttSSxVQUF1QixDQUMzQlosRUFBTWMsS0FBS0UsU0FBU3ZCLEVBQUlvQixFQUUxQnBJLEtBQUt3RyxNQUFNb0IsTUFBUSxJQUN6QkwsRUFBTVIsT0FBUy9HLEtBQUsySCxhQUV4QixDQUVBSixFQUFNekIsT0FBTzlGLEtBQUt3RSxPQUFPQyxRQUFRLElBT25DekUsS0FBSzBHLE1BQU02QixTQUFTdEIsRUFBSUEsRUFBSWpILEtBQUt3RyxNQUFNZ0MsTUFDekMsQ0FFQWhELE9BQUFBLEdBQ0V4RixLQUFLdUcsTUFBTWtDLFlBQVl6SSxLQUFLMEcsTUFDOUIsbVRDekthLE1BQU1ZLEVBQ25CN0gsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLE1BQUUwRyxFQUFLLFNBQUVDLEVBQVEsR0FBRUMsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ2pEeEcsS0FBS04sUUFBVUEsRUFDZk0sS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLcUcsU0FBV0EsRUFDaEJyRyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS29HLE1BQVFBLEVBRWJwRyxLQUFLMEksZ0JBQ0wxSSxLQUFLMkksZ0JBQ0wzSSxLQUFLNEksYUFHTDVJLEtBQUsrRyxNQUFRLENBQ1hDLEVBQUcsRUFDSEMsRUFBRyxHQUdMakgsS0FBSzZJLGFBQWEsQ0FBRXJDLE1BQU94RyxLQUFLd0csT0FDbEMsQ0FFQWtDLGFBQUFBLEdBQ0UsTUFBTUksRUFBZTlJLEtBQUtOLFFBQVFpQyxjQUFjLE9BQ2hEM0IsS0FBSytJLFFBQVVsSSxPQUFPbUksU0FBU0YsRUFBYXZILGFBQWEsWUFDM0QsQ0FFQW9ILGFBQUFBLEdBQ0UzSSxLQUFLaUosUUFBVSxJQUFJQyxFQUFBQSxRQUFRbEosS0FBS3NHLEdBQUksQ0FDbEM2QyxPQUFRQSxFQUFBQSxRQUNSQyxTQUFVQSxFQUFBQSxRQUNWQyxTQUFVLENBQ1JDLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkMsS0FBTSxDQUFFRCxNQUFPdkosS0FBSytJLFNBQ3BCVSxPQUFRLENBQUVGLE1BQU8sR0FDakJHLE1BQU8sQ0FBRUgsTUFBTyxLQUd0QixDQUVBWCxVQUFBQSxHQUNFNUksS0FBS3FJLEtBQU8sSUFBSXNCLEVBQUFBLEtBQUszSixLQUFLc0csR0FBSSxDQUM1QkQsU0FBVXJHLEtBQUtxRyxTQUNmNEMsUUFBU2pKLEtBQUtpSixVQUdoQmpKLEtBQUtxSSxLQUFLbEIsVUFBVW5ILEtBQUt1RyxNQUMzQixDQUVBc0MsWUFBQUEsRUFBYSxNQUFFckMsSUFFYnhHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS3lILE9BQVN6SCxLQUFLTixRQUFRZ0ksd0JBRTNCMUgsS0FBSzRKLGNBQ0w1SixLQUFLNkosVUFDTDdKLEtBQUs4SixTQUNQLENBRUE3RSxJQUFBQSxHQUNFbkYsRUFBQUEsUUFBS0MsT0FBT0MsS0FBS2lKLFFBQVFJLFNBQVNDLE9BQVEsQ0FBRUMsTUFBTyxHQUFLLENBQUVBLE1BQU8sR0FDbkUsQ0FFQWhFLElBQUFBLEdBQ0V6RixFQUFBQSxRQUFLb0QsR0FBR2xELEtBQUtpSixRQUFRSSxTQUFTQyxPQUFRLENBQUVDLE1BQU8sR0FDakQsQ0FFQWpKLFFBQUFBLENBQVNrSCxFQUFPaEQsR0FDZHhFLEtBQUsrRyxNQUFRLEVBRWIvRyxLQUFLNkksYUFBYXJCLEdBQ2xCeEgsS0FBSzZKLFFBQVFyRixHQUNieEUsS0FBSzhKLFFBQVEsRUFDZixDQU1BQyxjQUFBQSxHQUNFL0osS0FBS3FJLEtBQUsyQixTQUFTQyxFQUFJbkssRUFBQUEsUUFBS2lHLE1BQU1tRSxVQUMvQmxLLEtBQUt3RyxNQUFNb0IsTUFBUSxFQUNwQjVILEtBQUt3RyxNQUFNb0IsTUFBUSxFQUNULEdBQVZ1QyxLQUFLQyxHQUNNLElBQVZELEtBQUtDLEdBQ05wSyxLQUFLcUksS0FBS0UsU0FBU3ZCLEVBRXZCLENBRUE0QyxXQUFBQSxHQUVFNUosS0FBSzRILE1BQVE1SCxLQUFLeUgsT0FBT0csTUFBUS9HLE9BQU9nSCxXQUN4QzdILEtBQUt3SSxPQUFTeEksS0FBS3lILE9BQU9lLE9BQVMzSCxPQUFPZ0YsWUFFMUM3RixLQUFLcUksS0FBS0MsTUFBTXRCLEVBQUloSCxLQUFLd0csTUFBTW9CLE1BQVE1SCxLQUFLNEgsTUFDNUM1SCxLQUFLcUksS0FBS0MsTUFBTXJCLEVBQUlqSCxLQUFLd0csTUFBTWdDLE9BQVN4SSxLQUFLd0ksTUFDL0MsQ0FFQXFCLE9BQUFBLENBQVE3QyxFQUFJLEdBQ1ZoSCxLQUFLZ0gsR0FBS2hILEtBQUt5SCxPQUFPNEMsS0FBT3JELEdBQUtuRyxPQUFPZ0gsV0FFekM3SCxLQUFLcUksS0FBS0UsU0FBU3ZCLEdBQ2hCaEgsS0FBS3dHLE1BQU1vQixNQUFRLEVBQ3BCNUgsS0FBS3FJLEtBQUtDLE1BQU10QixFQUFJLEVBQ3BCaEgsS0FBS2dILEVBQUloSCxLQUFLd0csTUFBTW9CLE1BQ3BCNUgsS0FBSytHLEtBQ1QsQ0FFQStDLE9BQUFBLENBQVE3QyxFQUFJLEdBQ1ZqSCxLQUFLaUgsR0FBS2pILEtBQUt5SCxPQUFPNkMsSUFBTXJELEdBQUtwRyxPQUFPZ0YsWUFFeEM3RixLQUFLcUksS0FBS0UsU0FBU3RCLEVBQ2pCakgsS0FBS3dHLE1BQU1nQyxPQUFTLEVBQ3BCeEksS0FBS3FJLEtBQUtDLE1BQU1yQixFQUFJLEVBQ3BCakgsS0FBS2lILEVBQUlqSCxLQUFLd0csTUFBTWdDLE9BRXRCeEksS0FBS3FJLEtBQUtFLFNBQVN0QixHQUNxRCxHQUF0RWtELEtBQUtJLElBQUt2SyxLQUFLcUksS0FBS0UsU0FBU3ZCLEVBQUloSCxLQUFLd0csTUFBTW9CLE1BQVN1QyxLQUFLQyxHQUFLLElBQy9ELEVBQ0osQ0FDQXRFLE1BQUFBLENBQU90QixHQUNMeEUsS0FBSytKLGlCQUVML0osS0FBSzZKLFFBQVFyRixHQUNieEUsS0FBSzhKLFFBQVEsR0FHYjlKLEtBQUtpSixRQUFRSSxTQUFTSyxNQUFNSCxPQUFTLEtBQ3JDdkosS0FBS2lKLFFBQVFJLFNBQVNJLE9BQU9GLE1BQWlCLEtBQVQvRSxDQUN2QyxpU0NsSWEsTUFBTWdHLEVBQ25CL0ssV0FBQUEsRUFBWSxHQUFFNkcsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ3ZCeEcsS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLMEcsTUFBUSxJQUFJQyxFQUFBQSxVQUNqQjNHLEtBQUt3RyxNQUFRQSxFQUVieEcsS0FBS3lLLGlCQUNMekssS0FBSzBLLGtCQUNMMUssS0FBS00sU0FBUyxDQUFFa0csTUFBT3hHLEtBQUt3RyxRQUU1QnhHLEtBQUswRyxNQUFNUyxVQUFVWixHQUVyQnZHLEtBQUtpRixNQUNQLENBRUF3RixjQUFBQSxHQUNFekssS0FBS3FHLFNBQVcsSUFBSXNFLEVBQUFBLE1BQU0zSyxLQUFLc0csR0FDakMsQ0FDQW9FLGVBQUFBLEdBQ0UxSyxLQUFLNEssa0JBQW9CekgsU0FBU1MsaUJBQWlCLG1CQUVuRDVELEtBQUs2SyxVQUFZN0YsSUFBSWhGLEtBQUs0SyxtQkFBbUIsQ0FBQ2xMLEVBQVMwRyxJQUM5QyxJQUFJRCxFQUFBQSxRQUFRLENBQ2pCekcsUUFBU0EsRUFDVDBHLE1BQU9BLEVBQ1BDLFNBQVVyRyxLQUFLcUcsU0FDZkMsR0FBSXRHLEtBQUtzRyxHQUNUQyxNQUFPdkcsS0FBSzBHLE1BQ1pGLE1BQU94RyxLQUFLd0csU0FHbEIsQ0FFQXZCLElBQUFBLEdBQ0VELElBQUloRixLQUFLNkssV0FBWUMsSUFDbkJBLEVBQVE3RixNQUFNLEdBRWxCLENBRUFNLElBQUFBLEdBQ0VQLElBQUloRixLQUFLNkssV0FBWUMsSUFDbkJBLEVBQVF2RixNQUFNLEdBRWxCLENBRUFqRixRQUFBQSxDQUFTa0gsR0FDUHhDLElBQUloRixLQUFLNkssV0FBWUMsSUFDbkJBLEVBQVF4SyxTQUFTa0gsRUFBTSxHQUUzQixDQU9BTSxXQUFBQSxDQUFZTixHQUNWeEMsSUFBSWhGLEtBQUs2SyxXQUFZQyxJQUNuQkEsRUFBUWhELFlBQVlOLEVBQU0sR0FFOUIsQ0FNQU8sV0FBQUEsQ0FBWVAsR0FDVnhDLElBQUloRixLQUFLNkssV0FBWUMsSUFDbkJBLEVBQVEvQyxZQUFZUCxFQUFNLEdBRTlCLENBTUFVLFNBQUFBLENBQVVWLEdBQ1J4QyxJQUFJaEYsS0FBSzZLLFdBQVlDLElBQ25CQSxFQUFRNUMsVUFBVVYsRUFBTSxHQUU1QixDQUVBbkQsT0FBQUEsRUFBUSxPQUFFcUIsRUFBTSxPQUFFcUYsSUFBVyxDQU83QmpGLE1BQUFBLENBQU90QixHQUNMUSxJQUFJaEYsS0FBSzZLLFdBQVcsQ0FBQ0MsRUFBU3hGLEtBQzVCd0YsRUFBUWhGLE9BQU90QixFQUFPLEdBRTFCLENBRUFnQixPQUFBQSxHQUNFUixJQUFJaEYsS0FBSzZLLFdBQVlDLElBQ25CQSxFQUFRdEYsU0FBUyxHQUVyQixxVUNsR2EsTUFBTThCLEVBQ25CN0gsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLE1BQUUwRyxFQUFLLFNBQUVDLEVBQVEsR0FBRUMsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ2pEeEcsS0FBS04sUUFBVUEsRUFDZk0sS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLcUcsU0FBV0EsRUFDaEJyRyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS29HLE1BQVFBLEVBR2JwRyxLQUFLK0csTUFBUSxDQUNYQyxFQUFHLEVBQ0hDLEVBQUcsR0FHTGpILEtBQUtnTCxRQUFVLENBQ2J2RyxRQUFTLEVBQ1RDLE9BQVEsRUFDUm1DLEtBQU0sR0FDTm9FLFdBQVksR0FHZGpMLEtBQUswSSxnQkFDTDFJLEtBQUsySSxnQkFDTDNJLEtBQUs0SSxhQUNMNUksS0FBSzZJLGFBQWEsQ0FBRXJDLE1BQU94RyxLQUFLd0csT0FDbEMsQ0FFQWtDLGFBQUFBLEdBQ0UsTUFBTUksRUFBZTlJLEtBQUtOLFFBQVFpQyxjQUNoQyx1Q0FFRjNCLEtBQUsrSSxRQUFVbEksT0FBT21JLFNBQVNGLEVBQWF2SCxhQUFhLFlBQzNELENBRUFvSCxhQUFBQSxHQUNFM0ksS0FBS2lKLFFBQVUsSUFBSUMsRUFBQUEsUUFBUWxKLEtBQUtzRyxHQUFJLENBQ2xDNkMsT0FBUUEsRUFBQUEsUUFDUkMsU0FBVUEsRUFBQUEsUUFDVkMsU0FBVSxDQUFFQyxPQUFRLENBQUVDLE1BQU8sR0FBS0MsS0FBTSxDQUFFRCxNQUFPdkosS0FBSytJLFdBRTFELENBRUFILFVBQUFBLEdBQ0U1SSxLQUFLcUksS0FBTyxJQUFJc0IsRUFBQUEsS0FBSzNKLEtBQUtzRyxHQUFJLENBQzVCRCxTQUFVckcsS0FBS3FHLFNBQ2Y0QyxRQUFTakosS0FBS2lKLFVBR2hCakosS0FBS3FJLEtBQUtsQixVQUFVbkgsS0FBS3VHLE1BQzNCLENBRUFzQyxZQUFBQSxFQUFhLE1BQUVyQyxJQUVieEcsS0FBS3dHLE1BQVFBLEVBQ2J4RyxLQUFLeUgsT0FBU3pILEtBQUtOLFFBQVFnSSx3QkFFM0IxSCxLQUFLNEosY0FDTDVKLEtBQUs2SixVQUNMN0osS0FBSzhKLFNBQ1AsQ0FFQTdFLElBQUFBLEdBQ0VuRixFQUFBQSxRQUFLQyxPQUFPQyxLQUFLZ0wsUUFBUyxDQUFFQyxXQUFZLEdBQUssQ0FBRUEsV0FBWSxHQUM3RCxDQUVBMUYsSUFBQUEsR0FDRXpGLEVBQUFBLFFBQUtvRCxHQUFHbEQsS0FBS2dMLFFBQVMsQ0FBRUMsV0FBWSxHQUN0QyxDQUVBM0ssUUFBQUEsQ0FBU2tILEVBQU9oRCxHQUNkeEUsS0FBSytHLE1BQVEsQ0FDWEMsRUFBRyxFQUNIQyxFQUFHLEdBR0xqSCxLQUFLNkksYUFBYXJCLEdBQ2xCeEgsS0FBSzZKLFFBQVFyRixFQUFPd0MsR0FDcEJoSCxLQUFLOEosUUFBUXRGLEVBQU95QyxFQUN0QixDQUVBMkMsV0FBQUEsR0FFRTVKLEtBQUs0SCxNQUFRNUgsS0FBS3lILE9BQU9HLE1BQVEvRyxPQUFPZ0gsV0FDeEM3SCxLQUFLd0ksT0FBU3hJLEtBQUt5SCxPQUFPZSxPQUFTM0gsT0FBT2dGLFlBRTFDN0YsS0FBS3FJLEtBQUtDLE1BQU10QixFQUFJaEgsS0FBS3dHLE1BQU1vQixNQUFRNUgsS0FBSzRILE1BQzVDNUgsS0FBS3FJLEtBQUtDLE1BQU1yQixFQUFJakgsS0FBS3dHLE1BQU1nQyxPQUFTeEksS0FBS3dJLE1BQy9DLENBRUFxQixPQUFBQSxDQUFRN0MsRUFBSSxHQUNWaEgsS0FBS2dILEdBQUtoSCxLQUFLeUgsT0FBTzRDLEtBQU9yRCxHQUFLbkcsT0FBT2dILFdBRXpDN0gsS0FBS3FJLEtBQUtFLFNBQVN2QixHQUNoQmhILEtBQUt3RyxNQUFNb0IsTUFBUSxFQUNwQjVILEtBQUtxSSxLQUFLQyxNQUFNdEIsRUFBSSxFQUNwQmhILEtBQUtnSCxFQUFJaEgsS0FBS3dHLE1BQU1vQixNQUNwQjVILEtBQUsrRyxNQUFNQyxDQUNmLENBRUE4QyxPQUFBQSxDQUFRN0MsRUFBSSxHQUNWakgsS0FBS2lILEdBQUtqSCxLQUFLeUgsT0FBTzZDLElBQU1yRCxHQUFLcEcsT0FBT2dGLFlBRXhDN0YsS0FBS3FJLEtBQUtFLFNBQVN0QixFQUNqQmpILEtBQUt3RyxNQUFNZ0MsT0FBUyxFQUNwQnhJLEtBQUtxSSxLQUFLQyxNQUFNckIsRUFBSSxFQUNwQmpILEtBQUtpSCxFQUFJakgsS0FBS3dHLE1BQU1nQyxPQUNwQnhJLEtBQUsrRyxNQUFNRSxDQUNmLENBQ0FuQixNQUFBQSxDQUFPdEIsRUFBUTRCLEdBQ2JwRyxLQUFLNkosUUFBUXJGLEdBQ2J4RSxLQUFLOEosUUFBUSxHQUtiOUosS0FBS3FJLEtBQUsyQixTQUFTQyxHQUFLLElBQU9FLEtBQUtDLEdBQUtELEtBQUtlLElBQUlsTCxLQUFLb0csTUFGckMsR0FHbEJwRyxLQUFLcUksS0FBS0UsU0FBU3RCLEVBSkQsR0FJaUJrRCxLQUFLZSxJQUFJbEwsS0FBS29HLE1BSC9CLEdBTWxCcEcsS0FBS2dMLFFBQVF0RyxPQUFTMEIsSUFBVXBHLEtBQUtvRyxNQUFRLEVBQUksR0FDakRwRyxLQUFLZ0wsUUFBUXZHLFFBQVUzRSxFQUFBQSxRQUFLaUcsTUFBTUUsWUFDaENqRyxLQUFLZ0wsUUFBUXZHLFFBQ2J6RSxLQUFLZ0wsUUFBUXRHLE9BQ2IxRSxLQUFLZ0wsUUFBUW5FLE1BR2Y3RyxLQUFLaUosUUFBUUksU0FBU0MsT0FBT0MsTUFDM0J2SixLQUFLZ0wsUUFBUUMsV0FBYWpMLEtBQUtnTCxRQUFRdkcsT0FDM0MsOFhDaklhLE1BQU0wRyxFQUNuQjFMLFdBQUFBLEVBQVksR0FBRTZHLEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxFQUFLLFdBQUU0RSxJQUM5QnBMLEtBQUs4RCxHQUFLLGNBQ1Y5RCxLQUFLc0csR0FBS0EsRUFDVnRHLEtBQUt1RyxNQUFRQSxFQUNidkcsS0FBSzBHLE1BQVEsSUFBSUMsRUFBQUEsVUFDakIzRyxLQUFLd0csTUFBUUEsRUFDYnhHLEtBQUtvTCxXQUFhQSxFQUVsQnBMLEtBQUtzRSxnQkFBa0JDLElBQU8sYUFFOUJ2RSxLQUFLcUwsZUFBaUJsSSxTQUFTeEIsY0FBYyx5QkFDN0MzQixLQUFLc0wsc0JBQXdCbkksU0FBU3hCLGNBQ3BDLGtDQUVGM0IsS0FBS3VMLG1CQUFxQnBJLFNBQVNTLGlCQUNqQyx5QkFFRjVELEtBQUt3TCxpQkFBbUJySSxTQUFTeEIsY0FBYyx3QkFDL0MzQixLQUFLeUwseUJBQTJCLCtCQUNoQ3pMLEtBQUswTCxjQUFnQnZJLFNBQVNTLGlCQUM1QixnQ0FFRjVELEtBQUtnSCxFQUFJLENBQ1B2QyxRQUFTLEVBQ1RDLE9BQVEsRUFDUm1DLEtBQU0sR0FDTnNCLFVBQVcsTUFHYm5JLEtBQUt3RSxPQUFTLENBQ1pvQyxNQUFPLEVBQ1BuQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUm1DLEtBQU0sR0FDTmpDLE1BQU8sRUFDUGtDLFNBQVUsR0FHWjlHLEtBQUt5SyxpQkFDTHpLLEtBQUsyTCxnQkFDTDNMLEtBQUtNLFNBQVMsQ0FBRWtHLE1BQU94RyxLQUFLd0csUUFFNUJ4RyxLQUFLMEcsTUFBTVMsVUFBVW5ILEtBQUt1RyxPQUMxQnZHLEtBQUtpRixNQUNQLENBRUF3RixjQUFBQSxHQUNFekssS0FBS3FHLFNBQVcsSUFBSXNFLEVBQUFBLE1BQU0zSyxLQUFLc0csR0FDakMsQ0FDQXFGLGFBQUFBLEdBQ0UzTCxLQUFLcUgsT0FBU3JDLElBQUloRixLQUFLMEwsZUFBZSxDQUFDaE0sRUFBUzBHLElBQ3ZDLElBQUlrQixFQUFBQSxRQUFNLENBQ2Y1SCxRQUFTQSxFQUNUMEcsTUFBT0EsRUFDUEMsU0FBVXJHLEtBQUtxRyxTQUNmQyxHQUFJdEcsS0FBS3NHLEdBQ1RDLE1BQU92RyxLQUFLMEcsTUFDWkYsTUFBT3hHLEtBQUt3RyxTQUdsQixDQUVBdkIsSUFBQUEsR0FDRSxHQUFJakYsS0FBS29MLFdBQVksQ0FHbkIsTUFBTSxJQUFFaEssR0FBUXBCLEtBQUtvTCxXQUFXL0MsS0FBS1ksUUFBUUksU0FBU0csS0FBS0QsTUFBTXFDLE1BQzNEN0MsRUFBVWxJLE9BQU9tSSxTQUFTNUgsR0FDMUJ5SyxFQUFnQjdMLEtBQUtxSCxPQUFPeUUsTUFDL0J2RSxHQUFVQSxFQUFNd0IsVUFBWUEsSUFFekJ2RSxHQUNIcUgsRUFBY3BFLE9BQU80QyxLQUN0QndCLEVBQWNwRSxPQUFPRyxNQUFRLEVBQzdCL0csT0FBT2dILFdBQWEsRUFFdEI3SCxLQUFLOEYsU0FFTDlGLEtBQUtvTCxXQUFXVyxRQUNkLENBQ0UvQixTQUFVNkIsRUFBY3hELEtBQUsyQixTQUM3QjFCLE1BQU91RCxFQUFjeEQsS0FBS0MsTUFDMUJDLFNBQVUsQ0FBRXZCLEVBQUcsRUFBR0MsRUFBRzRFLEVBQWN4RCxLQUFLRSxTQUFTdEIsRUFBR2dELEVBQUcsS0FFeEQzRSxJQUNDdUcsRUFBY2IsUUFBUUMsV0FBYSxFQUVuQ2pHLElBQUloRixLQUFLcUgsUUFBU0UsSUFDWkEsSUFBVXNFLEdBQ1p0RSxFQUFNdEMsTUFDUixJQUdGakYsS0FBS3dFLE9BQU9DLFFBQ1Z6RSxLQUFLd0UsT0FBT0UsT0FDWjFFLEtBQUt3RSxPQUFPb0MsTUFDWjVHLEtBQUt3RSxPQUFPRyxLQUNWSCxDQUFNLEdBR2hCLE1BQ0VRLElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU10QyxNQUFNLEdBR2xCLENBRUFNLElBQUFBLEdBQ0VQLElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU1oQyxNQUFNLEdBRWhCLENBRUFqRixRQUFBQSxDQUFTa0gsR0FDUHhILEtBQUt5SCxPQUFTekgsS0FBS3NMLHNCQUFzQjVELHdCQUN6QzFILEtBQUt3RyxNQUFRZ0IsRUFBTWhCLE1BQ25CeEcsS0FBS3dFLE9BQU9HLEtBQU8zRSxLQUFLd0UsT0FBT0UsT0FBUyxFQUN4QzFFLEtBQUt3RSxPQUFPSSxNQUFRNUUsS0FBS3lILE9BQU9HLE1BQVE1SCxLQUFLcUgsT0FBTyxHQUFHM0gsUUFBUXNNLFlBRS9EaEgsSUFBSWhGLEtBQUtxSCxRQUFTRSxJQUNoQkEsRUFBTWpILFNBQVNrSCxFQUFPeEgsS0FBS3dFLE9BQU8sR0FFdEMsQ0FPQXNELFdBQUFBLEVBQVksRUFBRWQsRUFBQyxFQUFFQyxJQUNmakgsS0FBS3dFLE9BQU9HLEtBQU8zRSxLQUFLd0UsT0FBT0MsT0FDakMsQ0FNQXNELFdBQUFBLEVBQVksRUFBRWYsSUFDWixNQUFNZ0IsRUFBV2hCLEVBQUVKLE1BQVFJLEVBQUVpQixJQUM3QmpJLEtBQUt3RSxPQUFPRSxPQUFTMUUsS0FBS3dFLE9BQU9HLEtBQU9xRCxDQUMxQyxDQU1BRSxTQUFBQSxFQUFVLEVBQUVsQixFQUFDLEVBQUVDLElBQU0sQ0FFckI1QyxPQUFBQSxFQUFRLE9BQUVxQixJQUNSMUYsS0FBS3dFLE9BQU9FLFFBQVVnQixDQUN4QixDQU1BdUcsZUFBQUEsQ0FBZ0I3RixHQUNkcEcsS0FBS29HLE1BQVFBLEVBQ2IsTUFBTThGLEVBQXFCaE8sU0FDekI4QixLQUFLMEwsY0FBYzFMLEtBQUtvRyxPQUFPN0UsYUFBYSwwQkFFOUN5RCxJQUFJaEYsS0FBS3VMLG9CQUFvQixDQUFDN0wsRUFBUzBHLEtBQ2pDQSxJQUFVOEYsRUFDWnhNLEVBQVEyQixVQUFVQyxJQUFJdEIsS0FBS3lMLDBCQUUzQi9MLEVBQVEyQixVQUFVOEssT0FBT25NLEtBQUt5TCx5QkFDaEMsSUFFRnpMLEtBQUt3TCxpQkFBaUJ0RixNQUFNbEcsS0FBS3NFLGlCQUMvQixlQUFlLEdBQUs0SCwwQ0FDeEIsQ0FNQXBHLE1BQUFBLEdBQ0U5RixLQUFLd0UsT0FBT0UsT0FBUzVFLEVBQUFBLFFBQUtpRyxNQUFNQyxPQUM3QmhHLEtBQUt3RSxPQUFPSSxNQUNiLEVBQ0E1RSxLQUFLd0UsT0FBT0UsUUFHZDFFLEtBQUt3RSxPQUFPQyxRQUFVM0UsRUFBQUEsUUFBS2lHLE1BQU1FLFlBQy9CakcsS0FBS3dFLE9BQU9DLFFBQ1p6RSxLQUFLd0UsT0FBT0UsT0FDWjFFLEtBQUt3RSxPQUFPcUMsTUFHZDdHLEtBQUtxTCxlQUFlbkYsTUFBTWxHLEtBQUtzRSxpQkFDN0IsZUFBZXRFLEtBQUt3RSxPQUFPQyxhQUd6QnpFLEtBQUt3RSxPQUFPRyxLQUFPM0UsS0FBS3dFLE9BQU9DLFFBQ2pDekUsS0FBS3dFLE9BQU8yRCxVQUFZLFFBQ2ZuSSxLQUFLd0UsT0FBT0csS0FBTzNFLEtBQUt3RSxPQUFPQyxVQUN4Q3pFLEtBQUt3RSxPQUFPMkQsVUFBWSxRQUkxQm5JLEtBQUt3RSxPQUFPRyxLQUFPM0UsS0FBS3dFLE9BQU9DLFFBRS9CLE1BQU0ySCxFQUFlakMsS0FBS2tDLE1BQ3hCbEMsS0FBS21DLEtBQ0Z0TSxLQUFLd0UsT0FBT0MsUUFBVXpFLEtBQUtxSCxPQUFPLEdBQUdJLE9BQU9HLE1BQVEsR0FDbkQ1SCxLQUFLd0UsT0FBT0ksUUFFYjVFLEtBQUtxSCxPQUFPMUosT0FBUyxJQUd0QnFDLEtBQUtvRyxRQUFVZ0csR0FDakJwTSxLQUFLaU0sZ0JBQWdCRyxHQUd2QnBILElBQUloRixLQUFLcUgsUUFBUSxDQUFDRSxFQUFPakMsS0FDdkJpQyxFQUFNekIsT0FBTzlGLEtBQUt3RSxPQUFPQyxRQUFTekUsS0FBS29HLE1BQU0sR0FFakQsQ0FFQVosT0FBQUEsR0FDRXhGLEtBQUt1RyxNQUFNa0MsWUFBWXpJLEtBQUswRyxNQUM5QixrV0M5TmEsTUFBTTZGLEVBQ25COU0sV0FBQUEsRUFBWSxHQUFFNkcsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLEVBQUssV0FBRTRFLElBQzlCcEwsS0FBSzhELEdBQUssU0FDVjlELEtBQUtOLFFBQVV5RCxTQUFTeEIsY0FBYyx5QkFDdEMzQixLQUFLc0csR0FBS0EsRUFDVnRHLEtBQUt1RyxNQUFRQSxFQUNidkcsS0FBS3dHLE1BQVFBLEVBQ2J4RyxLQUFLb0wsV0FBYUEsRUFFbEJwTCxLQUFLcUcsU0FBVyxJQUFJc0UsRUFBQUEsTUFBTTNLLEtBQUtzRyxJQUUvQnRHLEtBQUswSSxnQkFDTDFJLEtBQUsySSxnQkFDTDNJLEtBQUs0SSxhQUNMNUksS0FBSzZJLGFBQWEsQ0FBRXJDLE1BQU94RyxLQUFLd0csUUFFaEN4RyxLQUFLaUYsTUFDUCxDQUVBeUQsYUFBQUEsR0FDRSxNQUFNOEQsRUFBa0J4TSxLQUFLTixRQUFRNkIsYUFBYSxZQUNsRHZCLEtBQUsrSSxRQUFVbEksT0FBT21JLFNBQVN3RCxFQUNqQyxDQUVBN0QsYUFBQUEsR0FDRTNJLEtBQUtpSixRQUFVLElBQUlDLEVBQUFBLFFBQVFsSixLQUFLc0csR0FBSSxDQUNsQzZDLE9BQVFBLEVBQUFBLFFBQ1JDLFNBQVVBLEVBQUFBLFFBQ1ZDLFNBQVUsQ0FBRUMsT0FBUSxDQUFFQyxNQUFPLEdBQUtDLEtBQU0sQ0FBRUQsTUFBT3ZKLEtBQUsrSSxXQUUxRCxDQUVBSCxVQUFBQSxHQUNFNUksS0FBS3FJLEtBQU8sSUFBSXNCLEVBQUFBLEtBQUszSixLQUFLc0csR0FBSSxDQUM1QkQsU0FBVXJHLEtBQUtxRyxTQUNmNEMsUUFBU2pKLEtBQUtpSixVQUdoQmpKLEtBQUtxSSxLQUFLMkIsU0FBU0MsRUFBYyxJQUFWRSxLQUFLQyxHQUM1QnBLLEtBQUtxSSxLQUFLbEIsVUFBVW5ILEtBQUt1RyxNQUMzQixDQUVBc0MsWUFBQUEsRUFBYSxNQUFFckMsSUFFYnhHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS3lILE9BQVN6SCxLQUFLTixRQUFRZ0ksd0JBRTNCMUgsS0FBSzRKLGNBQ0w1SixLQUFLNkosVUFDTDdKLEtBQUs4SixTQUNQLENBRUE3RSxJQUFBQSxHQUNNakYsS0FBS29MLFdBQ1BwTCxLQUFLb0wsV0FBV1csUUFBUS9MLEtBQUtxSSxNQUFPL0MsSUFDbEN0RixLQUFLaUosUUFBUUksU0FBU0MsT0FBT0MsTUFBUSxDQUFDLElBR3hDekosRUFBQUEsUUFBS29ELEdBQUdsRCxLQUFLaUosUUFBUUksU0FBU0MsT0FBUSxDQUFFQyxNQUFPLEdBRW5ELENBRUFoRSxJQUFBQSxHQUNFekYsRUFBQUEsUUFBS29ELEdBQUdsRCxLQUFLaUosUUFBUUksU0FBU0MsT0FBUSxDQUFFQyxNQUFPLEdBQ2pELENBRUFqSixRQUFBQSxDQUFTa0gsR0FDUHhILEtBQUs2SSxhQUFhckIsR0FDbEJ4SCxLQUFLNkosVUFDTDdKLEtBQUs4SixTQUNQLENBTUFoQyxXQUFBQSxDQUFZTixHQUFRLENBS3BCTyxXQUFBQSxDQUFZUCxHQUFRLENBS3BCVSxTQUFBQSxDQUFVVixHQUFRLENBRWxCb0MsV0FBQUEsR0FFRTVKLEtBQUs0SCxNQUFRNUgsS0FBS3lILE9BQU9HLE1BQVEvRyxPQUFPZ0gsV0FDeEM3SCxLQUFLd0ksT0FBU3hJLEtBQUt5SCxPQUFPZSxPQUFTM0gsT0FBT2dGLFlBRTFDN0YsS0FBS3FJLEtBQUtDLE1BQU10QixFQUFJaEgsS0FBS3dHLE1BQU1vQixNQUFRNUgsS0FBSzRILE1BQzVDNUgsS0FBS3FJLEtBQUtDLE1BQU1yQixFQUFJakgsS0FBS3dHLE1BQU1nQyxPQUFTeEksS0FBS3dJLE1BQy9DLENBRUFxQixPQUFBQSxHQUNFN0osS0FBS2dILEVBQUloSCxLQUFLeUgsT0FBTzRDLEtBQU94SixPQUFPZ0gsV0FFbkM3SCxLQUFLcUksS0FBS0UsU0FBU3ZCLEdBQ2hCaEgsS0FBS3dHLE1BQU1vQixNQUFRLEVBQUk1SCxLQUFLcUksS0FBS0MsTUFBTXRCLEVBQUksRUFBSWhILEtBQUtnSCxFQUFJaEgsS0FBS3dHLE1BQU1vQixLQUN4RSxDQUVBa0MsT0FBQUEsR0FDRTlKLEtBQUtpSCxFQUFJakgsS0FBS3lILE9BQU82QyxJQUFNekosT0FBT2dGLFlBRWxDN0YsS0FBS3FJLEtBQUtFLFNBQVN0QixFQUNqQmpILEtBQUt3RyxNQUFNZ0MsT0FBUyxFQUNwQnhJLEtBQUtxSSxLQUFLQyxNQUFNckIsRUFBSSxFQUNwQmpILEtBQUtpSCxFQUFJakgsS0FBS3dHLE1BQU1nQyxNQUN4QixDQUNBMUMsTUFBQUEsR0FDRTlGLEtBQUs2SixVQUNMN0osS0FBSzhKLFNBQ1AsQ0FFQXRFLE9BQUFBLEdBQ0V4RixLQUFLdUcsTUFBTWtDLFlBQVl6SSxLQUFLcUksS0FDOUIsZ1RDdkhhLE1BQU1mLEVBQ25CN0gsV0FBQUEsRUFBWSxRQUFFQyxFQUFPLE1BQUUwRyxFQUFLLFNBQUVDLEVBQVEsR0FBRUMsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ2pEeEcsS0FBS04sUUFBVUEsRUFDZk0sS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLcUcsU0FBV0EsRUFDaEJyRyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS29HLE1BQVFBLEVBRWJwRyxLQUFLMEksZ0JBQ0wxSSxLQUFLMkksZ0JBQ0wzSSxLQUFLNEksYUFHTDVJLEtBQUsrRyxNQUFRLENBQ1hDLEVBQUcsRUFDSEMsRUFBRyxHQUdMakgsS0FBSzZJLGFBQWEsQ0FBRXJDLE1BQU94RyxLQUFLd0csT0FDbEMsQ0FFQWtDLGFBQUFBLEdBQ0UxSSxLQUFLK0ksUUFBVWxJLE9BQU9tSSxTQUFTaEosS0FBS04sUUFBUTZCLGFBQWEsWUFDM0QsQ0FFQW9ILGFBQUFBLEdBQ0UzSSxLQUFLaUosUUFBVSxJQUFJQyxFQUFBQSxRQUFRbEosS0FBS3NHLEdBQUksQ0FDbEM2QyxPQUFRQSxFQUFBQSxRQUNSQyxTQUFVQSxFQUFBQSxRQUNWQyxTQUFVLENBQ1JDLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkUsT0FBUSxDQUFFRixNQUFPLEdBQ2pCa0QsZUFBZ0IsQ0FBRWxELE1BQU8sQ0FBQ3ZKLEtBQUt3RyxNQUFNb0IsTUFBTzVILEtBQUt3RyxNQUFNZ0MsU0FDdkRnQixLQUFNLENBQUVELE1BQU92SixLQUFLK0ksV0FHMUIsQ0FFQUgsVUFBQUEsR0FDRTVJLEtBQUtxSSxLQUFPLElBQUlzQixFQUFBQSxLQUFLM0osS0FBS3NHLEdBQUksQ0FDNUJELFNBQVVyRyxLQUFLcUcsU0FDZjRDLFFBQVNqSixLQUFLaUosVUFHaEJqSixLQUFLcUksS0FBS2xCLFVBQVVuSCxLQUFLdUcsT0FFekJ2RyxLQUFLcUksS0FBSzJCLFNBQVNDLEVBQUluSyxFQUFBQSxRQUFLaUcsTUFBTTJHLE9BQWtCLEtBQVZ2QyxLQUFLQyxHQUFxQixJQUFWRCxLQUFLQyxHQUNqRSxDQUVBdkIsWUFBQUEsRUFBYSxNQUFFckMsSUFFYnhHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBS3lILE9BQVN6SCxLQUFLTixRQUFRZ0ksd0JBRTNCMUgsS0FBSzRKLGNBQ0w1SixLQUFLNkosVUFDTDdKLEtBQUs4SixTQUNQLENBRUE3RSxJQUFBQSxHQUNFbkYsRUFBQUEsUUFBS0MsT0FBT0MsS0FBS2lKLFFBQVFJLFNBQVNDLE9BQVEsQ0FBRUMsTUFBTyxHQUFLLENBQUVBLE1BQU8sSUFDbkUsQ0FFQWhFLElBQUFBLEdBQ0V6RixFQUFBQSxRQUFLb0QsR0FBR2xELEtBQUtpSixRQUFRSSxTQUFTQyxPQUFRLENBQUVDLE1BQU8sR0FDakQsQ0FFQWpKLFFBQUFBLENBQVNrSCxFQUFPaEQsR0FDZHhFLEtBQUsrRyxNQUFRLENBQ1hDLEVBQUcsRUFDSEMsRUFBRyxHQUdMakgsS0FBSzZJLGFBQWFyQixHQUNsQnhILEtBQUs2SixRQUFRckYsRUFBT3dDLEdBQ3BCaEgsS0FBSzhKLFFBQVF0RixFQUFPeUMsRUFDdEIsQ0FFQTJDLFdBQUFBLEdBRUU1SixLQUFLNEgsTUFBUTVILEtBQUt5SCxPQUFPRyxNQUFRL0csT0FBT2dILFdBQ3hDN0gsS0FBS3dJLE9BQVN4SSxLQUFLeUgsT0FBT2UsT0FBUzNILE9BQU9nRixZQUUxQzdGLEtBQUtxSSxLQUFLQyxNQUFNdEIsRUFBSWhILEtBQUt3RyxNQUFNb0IsTUFBUTVILEtBQUs0SCxNQUM1QzVILEtBQUtxSSxLQUFLQyxNQUFNckIsRUFBSWpILEtBQUt3RyxNQUFNZ0MsT0FBU3hJLEtBQUt3SSxNQUMvQyxDQUVBcUIsT0FBQUEsQ0FBUTdDLEVBQUksR0FDVmhILEtBQUtnSCxHQUFLaEgsS0FBS3lILE9BQU80QyxLQUFPckQsR0FBS25HLE9BQU9nSCxXQUV6QzdILEtBQUtxSSxLQUFLRSxTQUFTdkIsR0FDaEJoSCxLQUFLd0csTUFBTW9CLE1BQVEsRUFDcEI1SCxLQUFLcUksS0FBS0MsTUFBTXRCLEVBQUksRUFDcEJoSCxLQUFLZ0gsRUFBSWhILEtBQUt3RyxNQUFNb0IsTUFDcEI1SCxLQUFLK0csTUFBTUMsQ0FDZixDQUVBOEMsT0FBQUEsQ0FBUTdDLEVBQUksR0FDVmpILEtBQUtpSCxHQUFLakgsS0FBS3lILE9BQU82QyxJQUFNckQsR0FBS3BHLE9BQU9nRixZQUV4QzdGLEtBQUtxSSxLQUFLRSxTQUFTdEIsRUFDakJqSCxLQUFLd0csTUFBTWdDLE9BQVMsRUFDcEJ4SSxLQUFLcUksS0FBS0MsTUFBTXJCLEVBQUksRUFDcEJqSCxLQUFLaUgsRUFBSWpILEtBQUt3RyxNQUFNZ0MsT0FDcEJ4SSxLQUFLK0csTUFBTUUsQ0FDZixDQUNBbkIsTUFBQUEsQ0FBT3RCLEVBQVFtSSxHQUNiM00sS0FBSzZKLFFBQVFyRixFQUFPd0MsR0FDcEJoSCxLQUFLOEosUUFBUXRGLEVBQU95QyxHQUVwQmpILEtBQUtpSixRQUFRSSxTQUFTSSxPQUFPRixNQUFRb0QsQ0FDdkMsZ1hDaEhhLE1BQU1DLEVBQ25Cbk4sV0FBQUEsRUFBWSxHQUFFNkcsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ3ZCeEcsS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUswRyxNQUFRLElBQUlDLEVBQUFBLFVBQ2pCM0csS0FBS3dHLE1BQVFBLEVBRWJ4RyxLQUFLcUwsZUFBaUJsSSxTQUFTeEIsY0FBYyxrQkFDN0MzQixLQUFLMEwsY0FBZ0J2SSxTQUFTUyxpQkFDNUIsZ0NBRUY1RCxLQUFLZ0gsRUFBSSxDQUNQdkMsUUFBUyxFQUNUQyxPQUFRLEVBQ1JtQyxLQUFNLEdBQ05zQixVQUFXLE1BRWJuSSxLQUFLaUgsRUFBSSxDQUNQeEMsUUFBUyxFQUNUQyxPQUFRLEVBQ1JtQyxLQUFNLEdBQ05zQixVQUFXLE1BS2JuSSxLQUFLNk0sY0FBZ0IsQ0FDbkI3RixFQUFHLEVBQ0hDLEVBQUcsR0FFTGpILEtBQUt3RSxPQUFTLENBQ1p3QyxFQUFHLEVBQ0hDLEVBQUcsR0FJTGpILEtBQUsyTSxNQUFRLENBQ1hsSSxRQUFTLEVBQ1RDLE9BQVEsRUFDUm1DLEtBQU0sSUFHUjdHLEtBQUt5SyxpQkFDTHpLLEtBQUsyTCxnQkFDTDNMLEtBQUtNLFNBQVMsQ0FBRWtHLE1BQU94RyxLQUFLd0csUUFFNUJ4RyxLQUFLMEcsTUFBTVMsVUFBVW5ILEtBQUt1RyxPQUMxQnZHLEtBQUtpRixNQUNQLENBRUF3RixjQUFBQSxHQUVFekssS0FBS3FHLFNBQVcsSUFBSXNFLEVBQUFBLE1BQU0zSyxLQUFLc0csR0FBSSxDQUNqQ3dHLGVBQWdCLEdBQ2hCQyxjQUFlLElBRW5CLENBQ0FwQixhQUFBQSxHQUNFM0wsS0FBS3FILE9BQVNyQyxJQUFJaEYsS0FBSzBMLGVBQWUsQ0FBQ2hNLEVBQVMwRyxJQUN2QyxJQUFJa0IsRUFBQUEsUUFBTSxDQUNmNUgsUUFBU0EsRUFDVDBHLE1BQU9BLEVBQ1BDLFNBQVVyRyxLQUFLcUcsU0FDZkMsR0FBSXRHLEtBQUtzRyxHQUNUQyxNQUFPdkcsS0FBSzBHLE1BQ1pGLE1BQU94RyxLQUFLd0csU0FHbEIsQ0FFQXZCLElBQUFBLEdBQ0VELElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU10QyxNQUFNLEdBRWhCLENBRUFNLElBQUFBLEdBQ0VQLElBQUloRixLQUFLcUgsUUFBU0UsSUFDaEJBLEVBQU1oQyxNQUFNLEdBRWhCLENBRUFqRixRQUFBQSxDQUFTa0gsR0FDUHhILEtBQUtnTixjQUFnQmhOLEtBQUtxTCxlQUFlM0Qsd0JBQ3pDMUgsS0FBS3dHLE1BQVFnQixFQUFNaEIsTUFDbkJ4RyxLQUFLaU4sYUFBZSxDQUNsQnJGLE1BQVE1SCxLQUFLZ04sY0FBY3BGLE1BQVEvRyxPQUFPZ0gsV0FBYzdILEtBQUt3RyxNQUFNb0IsTUFDbkVZLE9BQ0d4SSxLQUFLZ04sY0FBY3hFLE9BQVMzSCxPQUFPZ0YsWUFBZTdGLEtBQUt3RyxNQUFNZ0MsUUFNbEV4RCxJQUFJaEYsS0FBS3FILFFBQVNFLElBQ2hCQSxFQUFNakgsU0FBU2tILEVBQU94SCxLQUFLd0UsT0FBTyxHQUV0QyxDQU9Bc0QsV0FBQUEsRUFBWSxFQUFFZCxFQUFDLEVBQUVDLElBR2ZqSCxLQUFLNk0sY0FBYzdGLEVBQUloSCxLQUFLd0UsT0FBT3dDLEVBQ25DaEgsS0FBSzZNLGNBQWM1RixFQUFJakgsS0FBS3dFLE9BQU95QyxDQUNyQyxDQU1BYyxXQUFBQSxFQUFZLEVBQUVmLEVBQUMsRUFBRUMsSUFDZixNQUFNaUcsRUFBWWxHLEVBQUVKLE1BQVFJLEVBQUVpQixJQUN4QmtGLEVBQVlsRyxFQUFFTCxNQUFRSyxFQUFFZ0IsSUFFOUJqSSxLQUFLZ0gsRUFBRXRDLE9BQVMxRSxLQUFLNk0sY0FBYzdGLEVBQUlrRyxFQUN2Q2xOLEtBQUtpSCxFQUFFdkMsT0FBUzFFLEtBQUs2TSxjQUFjNUYsRUFBSWtHLENBQ3pDLENBTUFqRixTQUFBQSxFQUFVLEVBQUVsQixFQUFDLEVBQUVDLElBQ2IsQ0FHRjVDLE9BQUFBLEVBQVEsT0FBRXFCLEVBQU0sT0FBRXFGLElBQ2hCL0ssS0FBS2dILEVBQUV0QyxRQUFVcUcsRUFDakIvSyxLQUFLaUgsRUFBRXZDLFFBQVVnQixDQUNuQixDQU9BSSxNQUFBQSxHQUdFLE1BQU1zSCxFQUFJcE4sS0FBS2dILEVBQUV0QyxPQUFTMUUsS0FBS2dILEVBQUV2QyxRQUMzQjRJLEVBQUlyTixLQUFLaUgsRUFBRXZDLE9BQVMxRSxLQUFLaUgsRUFBRXhDLFFBQ2pDekUsS0FBSzJNLE1BQU1qSSxPQUFvQyxLQUEzQnlGLEtBQUttRCxLQUFLRixFQUFJQSxFQUFJQyxFQUFJQSxHQUUxQ3JOLEtBQUsyTSxNQUFNbEksUUFBVTNFLEVBQUFBLFFBQUtpRyxNQUFNRSxZQUM5QmpHLEtBQUsyTSxNQUFNbEksUUFDWHpFLEtBQUsyTSxNQUFNakksT0FDWDFFLEtBQUsyTSxNQUFNOUYsTUFJYjdHLEtBQUtnSCxFQUFFdkMsUUFBVTNFLEVBQUFBLFFBQUtpRyxNQUFNRSxZQUMxQmpHLEtBQUtnSCxFQUFFdkMsUUFDUHpFLEtBQUtnSCxFQUFFdEMsT0FDUDFFLEtBQUtnSCxFQUFFSCxNQUVUN0csS0FBS2lILEVBQUV4QyxRQUFVM0UsRUFBQUEsUUFBS2lHLE1BQU1FLFlBQzFCakcsS0FBS2lILEVBQUV4QyxRQUNQekUsS0FBS2lILEVBQUV2QyxPQUNQMUUsS0FBS2lILEVBQUVKLE1BSUw3RyxLQUFLd0UsT0FBT3dDLEVBQUloSCxLQUFLZ0gsRUFBRXZDLFFBQ3pCekUsS0FBS2dILEVBQUVtQixVQUFZLFFBQ1ZuSSxLQUFLd0UsT0FBT3dDLEVBQUloSCxLQUFLZ0gsRUFBRXZDLFVBQ2hDekUsS0FBS2dILEVBQUVtQixVQUFZLFFBR2pCbkksS0FBS3dFLE9BQU95QyxFQUFJakgsS0FBS2lILEVBQUV4QyxRQUN6QnpFLEtBQUtpSCxFQUFFa0IsVUFBWSxNQUNWbkksS0FBS3dFLE9BQU95QyxFQUFJakgsS0FBS2lILEVBQUV4QyxVQUNoQ3pFLEtBQUtpSCxFQUFFa0IsVUFBWSxVQUlyQm5JLEtBQUt3RSxPQUFPd0MsRUFBSWhILEtBQUtnSCxFQUFFdkMsUUFDdkJ6RSxLQUFLd0UsT0FBT3lDLEVBQUlqSCxLQUFLaUgsRUFBRXhDLFFBRXZCTyxJQUFJaEYsS0FBS3FILFFBQVEsQ0FBQ0UsRUFBT2pDLEtBQ3ZCLE1BQU04QyxFQUFhYixFQUFNYyxLQUFLQyxNQUFNdEIsRUFBSSxFQUNsQ3VHLEVBQTZCLEdBQW5Cdk4sS0FBS3dHLE1BQU1vQixNQUczQixHQUF5QixTQUFyQjVILEtBQUtnSCxFQUFFbUIsVUFBc0IsQ0FDckJaLEVBQU1jLEtBQUtFLFNBQVN2QixFQUFJb0IsR0FDekJtRixJQUNQaEcsRUFBTVIsTUFBTUMsR0FBS2hILEtBQUtpTixhQUFhckYsTUFDbkNMLEVBQU1jLEtBQUsyQixTQUFTQyxFQUFJbkssRUFBQUEsUUFBS2lHLE1BQU0yRyxPQUN0QixLQUFWdkMsS0FBS0MsR0FDSSxJQUFWRCxLQUFLQyxJQUdYLE1BQU8sR0FBeUIsVUFBckJwSyxLQUFLZ0gsRUFBRW1CLFVBQXVCLENBQzdCWixFQUFNYyxLQUFLRSxTQUFTdkIsRUFBSW9CLEVBRTFCbUYsSUFDTmhHLEVBQU1SLE1BQU1DLEdBQUtoSCxLQUFLaU4sYUFBYXJGLE1BQ25DTCxFQUFNYyxLQUFLMkIsU0FBU0MsRUFBSW5LLEVBQUFBLFFBQUtpRyxNQUFNMkcsT0FDdEIsS0FBVnZDLEtBQUtDLEdBQ0ksSUFBVkQsS0FBS0MsSUFHWCxDQUVBLE1BQU1vRCxFQUFhakcsRUFBTWMsS0FBS0MsTUFBTXJCLEVBQUksRUFDbEN3RyxFQUE4QixHQUFwQnpOLEtBQUt3RyxNQUFNZ0MsT0FFM0IsR0FBeUIsUUFBckJ4SSxLQUFLaUgsRUFBRWtCLFVBQXFCLENBQ3BCWixFQUFNYyxLQUFLRSxTQUFTdEIsRUFBSXVHLEdBRXpCQyxJQUNQbEcsRUFBTVIsTUFBTUUsR0FBS2pILEtBQUtpTixhQUFhekUsT0FDbkNqQixFQUFNYyxLQUFLMkIsU0FBU0MsRUFBSW5LLEVBQUFBLFFBQUtpRyxNQUFNMkcsT0FDdEIsS0FBVnZDLEtBQUtDLEdBQ0ksSUFBVkQsS0FBS0MsSUFHWCxNQUFPLEdBQXlCLFdBQXJCcEssS0FBS2lILEVBQUVrQixVQUF3QixDQUM5QlosRUFBTWMsS0FBS0UsU0FBU3RCLEVBQUl1RyxFQUUxQkMsSUFDTmxHLEVBQU1SLE1BQU1FLEdBQUtqSCxLQUFLaU4sYUFBYXpFLE9BQ25DakIsRUFBTWMsS0FBSzJCLFNBQVNDLEVBQUluSyxFQUFBQSxRQUFLaUcsTUFBTTJHLE9BQ3RCLEtBQVZ2QyxLQUFLQyxHQUNJLElBQVZELEtBQUtDLElBR1gsQ0FFQTdDLEVBQU16QixPQUFPOUYsS0FBS3dFLE9BQVF4RSxLQUFLMk0sTUFBTWxJLFFBQVEsR0FFakQsQ0FFQWUsT0FBQUEsR0FDRXhGLEtBQUt1RyxNQUFNa0MsWUFBWXpJLEtBQUswRyxNQUM5QiwrYkM5T2EsTUFBTWdILEVBQ25Cak8sV0FBQUEsRUFBWSxZQUFFa08sRUFBVyxRQUFFQyxFQUFPLElBQUVDLEVBQUcsR0FBRXZILEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxJQUNsRHhHLEtBQUsyTixZQUFjQSxFQUNuQjNOLEtBQUs0TixRQUFVQSxFQUNmNU4sS0FBS3NHLEdBQUtBLEVBQ1Z0RyxLQUFLdUcsTUFBUUEsRUFDYnZHLEtBQUt3RyxNQUFRQSxFQUNieEcsS0FBSzZOLElBQU1BLEVBRVg3TixLQUFLcUcsU0FBVyxJQUFJc0UsRUFBQUEsTUFBTTNLLEtBQUtzRyxHQUNqQyxDQUVBcUMsYUFBQUEsQ0FBY0ksR0FDWi9JLEtBQUtpSixRQUFVLElBQUlDLEVBQUFBLFFBQVFsSixLQUFLc0csR0FBSSxDQUNsQzZDLE9BQVFBLEVBQUFBLFFBQ1JDLFNBQVVBLEVBQUFBLFFBQ1ZDLFNBQVUsQ0FBRUMsT0FBUSxDQUFFQyxNQUFPLEdBQUtDLEtBQU0sQ0FBRUQsTUFBT1IsS0FFckQsQ0FFQUgsVUFBQUEsQ0FBV1AsR0FDVHJJLEtBQUtxSSxLQUFPLElBQUlzQixFQUFBQSxLQUFLM0osS0FBS3NHLEdBQUksQ0FDNUJELFNBQVVyRyxLQUFLcUcsU0FDZjRDLFFBQVNqSixLQUFLaUosVUFFaEJqSixLQUFLcUksS0FBS0MsTUFBTXRCLEVBQUlxQixFQUFLQyxNQUFNdEIsRUFDL0JoSCxLQUFLcUksS0FBS0MsTUFBTXJCLEVBQUlvQixFQUFLQyxNQUFNckIsRUFDL0JqSCxLQUFLcUksS0FBS0MsTUFBTTJCLEVBQUk1QixFQUFLQyxNQUFNMkIsRUFFL0JqSyxLQUFLcUksS0FBS0UsU0FBU3ZCLEVBQUlxQixFQUFLRSxTQUFTdkIsRUFDckNoSCxLQUFLcUksS0FBS0UsU0FBU3RCLEVBQUlvQixFQUFLRSxTQUFTdEIsRUFFckNqSCxLQUFLcUksS0FBS0UsU0FBUzBCLEVBQUk1QixFQUFLRSxTQUFTMEIsRUFBSSxJQUV6Q2pLLEtBQUtxSSxLQUFLMkIsU0FBU2hELEVBQUlxQixFQUFLMkIsU0FBU2hELEVBQ3JDaEgsS0FBS3FJLEtBQUsyQixTQUFTL0MsRUFBSW9CLEVBQUsyQixTQUFTL0MsRUFDckNqSCxLQUFLcUksS0FBSzJCLFNBQVNDLEVBQUk1QixFQUFLMkIsU0FBU0MsRUFFckNqSyxLQUFLcUksS0FBS2xCLFVBQVVuSCxLQUFLdUcsTUFDM0IsQ0FNQXVILFVBQUFBLENBQVdwTyxHQUNULEdBQW1CLGdCQUFmQSxFQUFRb0UsR0FBc0IsQ0FDaEMsTUFBTSxNQUFFc0MsRUFBSyxPQUFFaUIsR0FBVzNILEVBQ3BCNkgsRUFBUUYsRUFBT2pCLEdBRXJCcEcsS0FBSzJJLGNBQWNwQixFQUFNd0IsU0FDekIvSSxLQUFLNEksV0FBV3JCLEVBQU1jLE1BRXRCckksS0FBS29MLFdBQWEsUUFDcEIsTUFDRXBMLEtBQUsySSxjQUFjakosRUFBUXFKLFNBQzNCL0ksS0FBSzRJLFdBQVdsSixFQUFRMkksTUFFeEJySSxLQUFLb0wsV0FBYSxhQUV0QixDQU1BVyxPQUFBQSxDQUFRck0sRUFBUytGLEdBQ2YsTUFBTTNELEVBQVdoQyxFQUFBQSxRQUFLZ0MsV0FFdEJBLEVBQVNvQixHQUNQbEQsS0FBS3FJLEtBQUtDLE1BQ1YsQ0FDRXRCLEVBQUd0SCxFQUFRNEksTUFBTXRCLEVBQ2pCQyxFQUFHdkgsRUFBUTRJLE1BQU1yQixFQUNqQmdELEVBQUd2SyxFQUFRNEksTUFBTTJCLEVBQ2pCOUosU0FBVSxJQUNWNkIsS0FBTSxjQUVSLEdBR0ZGLEVBQVNvQixHQUNQbEQsS0FBS3FJLEtBQUtFLFNBQ1YsQ0FDRXZCLEVBQUd0SCxFQUFRNkksU0FBU3ZCLEVBQ3BCQyxFQUFHdkgsRUFBUTZJLFNBQVN0QixFQUNwQmdELEVBQUd2SyxFQUFRNkksU0FBUzBCLEVBQ3BCOUosU0FBVSxJQUNWNkIsS0FBTSxjQUVSLEdBR0ZGLEVBQVNvQixHQUNQbEQsS0FBS3FJLEtBQUsyQixTQUNWLENBQ0VoRCxFQUFHdEgsRUFBUXNLLFNBQVNoRCxFQUNwQkMsRUFBR3ZILEVBQVFzSyxTQUFTL0MsRUFDcEJnRCxFQUFHdkssRUFBUXNLLFNBQVNDLEVBQ3BCOUosU0FBVSxJQUNWNkIsS0FBTSxjQUVSLEdBR0ZGLEVBQVN1RCxNQUFLLEtBQ1pJLEdBQVksSUFHZDNELEVBQVN1RCxNQUNQLEtBQ0VyRixLQUFLdUcsTUFBTWtDLFlBQVl6SSxLQUFLcUksS0FBSyxHQUVuQyxLQUNBLFFBRUosdWRDbkhhLE1BQU0wRixFQUNuQnRPLFdBQUFBLEVBQVksU0FBRXVPLElBQ1poTyxLQUFLZ08sU0FBV0EsRUFFaEJoTyxLQUFLZ0gsRUFBSSxDQUNQSixNQUFPLEVBQ1BvQixTQUFVLEVBQ1ZDLElBQUssR0FFUGpJLEtBQUtpSCxFQUFJLENBQ1BMLE1BQU8sRUFDUG9CLFNBQVUsRUFDVkMsSUFBSyxHQUVQakksS0FBS2lPLGlCQUNMak8sS0FBS2tPLGVBQ0xsTyxLQUFLbU8sY0FFTG5PLEtBQUtNLFVBQ1AsQ0FFQTJOLGNBQUFBLEdBQ0VqTyxLQUFLb08sU0FBVyxJQUFJQyxFQUFBQSxTQUFTLENBQUVDLE9BQU8sRUFBTUMsV0FBVyxJQUN2RHZPLEtBQUtzRyxHQUFLdEcsS0FBS29PLFNBQVM5SCxHQUN4Qm5ELFNBQVNxTCxLQUFLQyxZQUFZek8sS0FBS3NHLEdBQUdvSSxPQUNwQyxDQUVBUixZQUFBQSxHQUNFbE8sS0FBSzJPLE9BQVMsSUFBSUMsRUFBQUEsT0FBTzVPLEtBQUtzRyxJQUM5QnRHLEtBQUsyTyxPQUFPcEcsU0FBUzBCLEVBQUksQ0FDM0IsQ0FFQWtFLFdBQUFBLEdBQ0VuTyxLQUFLdUcsTUFBUSxJQUFJSSxFQUFBQSxTQUNuQixDQUVBa0ksVUFBQUEsR0FDRTdPLEtBQUs4TyxLQUFPLElBQUlsQyxFQUFBQSxRQUFLLENBQUV0RyxHQUFJdEcsS0FBS3NHLEdBQUlDLE1BQU92RyxLQUFLdUcsTUFBT0MsTUFBT3hHLEtBQUt3RyxPQUNyRSxDQUVBdUksV0FBQUEsR0FDTy9PLEtBQUs4TyxPQUNWOU8sS0FBSzhPLEtBQUt0SixVQUNWeEYsS0FBSzhPLEtBQU8sS0FDZCxDQUVBRSxXQUFBQSxHQUNFaFAsS0FBS2lQLE1BQVEsSUFBSXpFLEVBQUFBLFFBQU0sQ0FDckJsRSxHQUFJdEcsS0FBS3NHLEdBQ1RDLE1BQU92RyxLQUFLdUcsTUFDWkMsTUFBT3hHLEtBQUt3RyxPQUVoQixDQUVBMEksWUFBQUEsR0FDT2xQLEtBQUtpUCxRQUNWalAsS0FBS2lQLE1BQU16SixVQUNYeEYsS0FBS2lQLE1BQVEsS0FDZixDQUVBRSxpQkFBQUEsR0FDRW5QLEtBQUsyTixZQUFjLElBQUl4QyxFQUFBQSxRQUFZLENBQ2pDN0UsR0FBSXRHLEtBQUtzRyxHQUNUQyxNQUFPdkcsS0FBS3VHLE1BQ1pDLE1BQU94RyxLQUFLd0csTUFDWjRFLFdBQVlwTCxLQUFLb0wsWUFFckIsQ0FFQWdFLGtCQUFBQSxHQUNPcFAsS0FBSzJOLGNBQ1YzTixLQUFLMk4sWUFBWW5JLFVBQ2pCeEYsS0FBSzJOLFlBQWMsS0FDckIsQ0FFQTBCLFlBQUFBLEdBQ0VyUCxLQUFLc1AsT0FBUyxJQUFJL0MsRUFBQUEsUUFBTyxDQUN2QmpHLEdBQUl0RyxLQUFLc0csR0FDVEMsTUFBT3ZHLEtBQUt1RyxNQUNaQyxNQUFPeEcsS0FBS3dHLE1BQ1o0RSxXQUFZcEwsS0FBS29MLFlBRXJCLENBRUFtRSxhQUFBQSxHQUNPdlAsS0FBS3NQLFNBQ1Z0UCxLQUFLc1AsT0FBTzlKLFVBQ1p4RixLQUFLc1AsT0FBUyxLQUNoQixDQUVBRSxXQUFBQSxHQUNFeFAsS0FBS3lQLFlBQVl6UCxLQUFLZ08sU0FDeEIsQ0FNQTBCLGFBQUFBLENBQWMxQixFQUFVSCxHQUN0QjdOLEtBQUsyUCwyQkFDZSxnQkFBbEIzUCxLQUFLZ08sVUFBOEJILEVBQUl2USxRQUFRLFdBQWEsRUFDOUQwQyxLQUFLNFAsMEJBQ2UsV0FBbEI1UCxLQUFLZ08sVUFBeUJILEVBQUl2USxRQUFRLGdCQUFrQixFQUUxRDBDLEtBQUs4TyxNQUNQOU8sS0FBSzhPLEtBQUt2SixPQUVSdkYsS0FBS2lQLE9BQ1BqUCxLQUFLaVAsTUFBTTFKLE9BRVR2RixLQUFLMk4sYUFDUDNOLEtBQUsyTixZQUFZcEksT0FHZnZGLEtBQUtzUCxRQUNQdFAsS0FBS3NQLE9BQU8vSixRQUdWdkYsS0FBSzJQLDRCQUE4QjNQLEtBQUs0UCw2QkFDMUM1UCxLQUFLb0wsV0FBYSxJQUFJc0MsRUFBQUEsUUFBVyxDQUMvQkcsSUFBS0EsRUFDTHZILEdBQUl0RyxLQUFLc0csR0FDVEMsTUFBT3ZHLEtBQUt1RyxNQUNaQyxNQUFPeEcsS0FBS3dHLFFBR2R4RyxLQUFLb0wsV0FBVzBDLFdBQVc5TixLQUFLMk4sYUFBZTNOLEtBQUtzUCxRQUV4RCxDQU1BRyxXQUFBQSxDQUFZekIsR0FDTyxTQUFiQSxFQUNGaE8sS0FBSzZPLGFBQ0k3TyxLQUFLOE8sTUFDZDlPLEtBQUsrTyxjQUdVLFVBQWJmLEVBQ0ZoTyxLQUFLZ1AsY0FDSWhQLEtBQUtpUCxPQUNkalAsS0FBS2tQLGVBRVUsZ0JBQWJsQixFQUNGaE8sS0FBS21QLG9CQUNJblAsS0FBSzJOLGFBQ2QzTixLQUFLb1AscUJBR1UsV0FBYnBCLEVBQ0ZoTyxLQUFLcVAsZUFDSXJQLEtBQUtzUCxRQUNkdFAsS0FBS3VQLGdCQUVQdlAsS0FBS2dPLFNBQVdBLENBQ2xCLENBRUExTixRQUFBQSxHQUNFTixLQUFLb08sU0FBU3lCLFFBQVFoUCxPQUFPZ0gsV0FBWWhILE9BQU9nRixhQUNoRDdGLEtBQUsyTyxPQUFPbUIsWUFBWSxDQUN0QkMsT0FBUWxQLE9BQU9nSCxXQUFhaEgsT0FBT2dGLGNBR3JDLE1BQU1tSyxFQUFPaFEsS0FBSzJPLE9BQU9xQixJQUFNN0YsS0FBS0MsR0FBTSxJQUNwQzVCLEVBQVMsRUFBSTJCLEtBQUs4RixJQUFJRCxFQUFNLEdBQUtoUSxLQUFLMk8sT0FBT3BHLFNBQVMwQixFQUN0RHJDLEVBQVFZLEVBQVN4SSxLQUFLMk8sT0FBT29CLE9BR25DL1AsS0FBS3dHLE1BQVEsQ0FDWGdDLFNBQ0FaLFNBRUU1SCxLQUFLOE8sTUFDUDlPLEtBQUs4TyxLQUFLeE8sU0FBUyxDQUFFa0csTUFBT3hHLEtBQUt3RyxRQUUvQnhHLEtBQUtpUCxPQUNQalAsS0FBS2lQLE1BQU0zTyxTQUFTLENBQUVrRyxNQUFPeEcsS0FBS3dHLFFBRWhDeEcsS0FBSzJOLGFBQ1AzTixLQUFLMk4sWUFBWXJOLFNBQVMsQ0FBRWtHLE1BQU94RyxLQUFLd0csUUFFdEN4RyxLQUFLc1AsUUFDUHRQLEtBQUtzUCxPQUFPaFAsU0FBUyxDQUFFa0csTUFBT3hHLEtBQUt3RyxPQUV2QyxDQU9Bc0IsV0FBQUEsQ0FBWU4sR0FDVnhILEtBQUtrUSxRQUFTLEVBRWRsUSxLQUFLZ0gsRUFBRUosTUFBUVksRUFBTTJJLFFBQVUzSSxFQUFNMkksUUFBUSxHQUFHQyxRQUFVNUksRUFBTTRJLFFBQ2hFcFEsS0FBS2lILEVBQUVMLE1BQVFZLEVBQU0ySSxRQUFVM0ksRUFBTTJJLFFBQVEsR0FBR0UsUUFBVTdJLEVBQU02SSxRQUU1RHJRLEtBQUs4TyxNQUNQOU8sS0FBSzhPLEtBQUtoSCxZQUFZLENBQUVkLEVBQUdoSCxLQUFLZ0gsRUFBRUosTUFBT0ssRUFBR2pILEtBQUtpSCxFQUFFTCxRQUVqRDVHLEtBQUtpUCxPQUNQalAsS0FBS2lQLE1BQU1uSCxZQUFZLENBQUVkLEVBQUdoSCxLQUFLZ0gsRUFBRUosTUFBT0ssRUFBR2pILEtBQUtpSCxFQUFFTCxRQUVsRDVHLEtBQUsyTixhQUNQM04sS0FBSzJOLFlBQVk3RixZQUFZLENBQUVkLEVBQUdoSCxLQUFLZ0gsRUFBRUosTUFBT0ssRUFBR2pILEtBQUtpSCxFQUFFTCxRQUV4RDVHLEtBQUtzUCxRQUNQdFAsS0FBS3NQLE9BQU94SCxZQUFZLENBQUVkLEVBQUdoSCxLQUFLZ0gsRUFBRUosTUFBT0ssRUFBR2pILEtBQUtpSCxFQUFFTCxPQUV6RCxDQU1BbUIsV0FBQUEsQ0FBWVAsR0FDVixJQUFLeEgsS0FBS2tRLE9BQVEsT0FFbEIsTUFBTWxKLEVBQUlRLEVBQU0ySSxRQUFVM0ksRUFBTTJJLFFBQVEsR0FBR0MsUUFBVTVJLEVBQU00SSxRQUNyRG5KLEVBQUlPLEVBQU0ySSxRQUFVM0ksRUFBTTJJLFFBQVEsR0FBR0UsUUFBVTdJLEVBQU02SSxRQUUzRHJRLEtBQUtnSCxFQUFFaUIsSUFBTWpCLEVBQ2JoSCxLQUFLaUgsRUFBRWdCLElBQU1oQixFQUVUakgsS0FBSzhPLE1BQ1A5TyxLQUFLOE8sS0FBSy9HLFlBQVksQ0FBRWYsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILElBR3pDakgsS0FBS2lQLE9BQ1BqUCxLQUFLaVAsTUFBTWxILFlBQVksQ0FBRWYsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILElBRTFDakgsS0FBSzJOLGFBQ1AzTixLQUFLMk4sWUFBWTVGLFlBQVksQ0FBRWYsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILElBRWhEakgsS0FBS3NQLFFBQ1B0UCxLQUFLc1AsT0FBT3ZILFlBQVksQ0FBRWYsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILEdBRWpELENBTUFpQixTQUFBQSxDQUFVVixHQUNSeEgsS0FBS2tRLFFBQVMsRUFDZCxNQUFNbEosRUFBSVEsRUFBTThJLGVBQ1o5SSxFQUFNOEksZUFBZSxHQUFHRixRQUN4QjVJLEVBQU00SSxRQUNKbkosRUFBSU8sRUFBTThJLGVBQ1o5SSxFQUFNOEksZUFBZSxHQUFHRCxRQUN4QjdJLEVBQU02SSxRQUVWclEsS0FBS2dILEVBQUVpQixJQUFNakIsRUFDYmhILEtBQUtpSCxFQUFFZ0IsSUFBTWhCLEVBRVRqSCxLQUFLOE8sTUFDUDlPLEtBQUs4TyxLQUFLNUcsVUFBVSxDQUFFbEIsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILElBRXZDakgsS0FBS2lQLE9BQ1BqUCxLQUFLaVAsTUFBTS9HLFVBQVUsQ0FBRWxCLEVBQUdoSCxLQUFLZ0gsRUFBR0MsRUFBR2pILEtBQUtpSCxJQUV4Q2pILEtBQUsyTixhQUNQM04sS0FBSzJOLFlBQVl6RixVQUFVLENBQUVsQixFQUFHaEgsS0FBS2dILEVBQUdDLEVBQUdqSCxLQUFLaUgsSUFFOUNqSCxLQUFLc1AsUUFDUHRQLEtBQUtzUCxPQUFPcEgsVUFBVSxDQUFFbEIsRUFBR2hILEtBQUtnSCxFQUFHQyxFQUFHakgsS0FBS2lILEdBRS9DLENBRUE1QyxPQUFBQSxDQUFRbUQsR0FDRnhILEtBQUs4TyxNQUNQOU8sS0FBSzhPLEtBQUt6SyxRQUFRbUQsR0FFaEJ4SCxLQUFLMk4sYUFDUDNOLEtBQUsyTixZQUFZdEosUUFBUW1ELEVBRTdCLENBRUExQixNQUFBQSxDQUFPdEIsR0FDRHhFLEtBQUs4TyxNQUNQOU8sS0FBSzhPLEtBQUtoSixTQUVSOUYsS0FBS2lQLE9BQ1BqUCxLQUFLaVAsTUFBTW5KLE9BQU90QixHQUVoQnhFLEtBQUsyTixhQUNQM04sS0FBSzJOLFlBQVk3SCxTQUVmOUYsS0FBS3NQLFFBQ1B0UCxLQUFLc1AsT0FBT3hKLFNBRWQ5RixLQUFLb08sU0FBU21DLE9BQU8sQ0FBRTVCLE9BQVEzTyxLQUFLMk8sT0FBUXBJLE1BQU92RyxLQUFLdUcsUUFDeER2RyxLQUFLb08sU0FBU21DLE9BQU8sQ0FBRTVCLE9BQVEzTyxLQUFLMk8sT0FBUXBJLE1BQU92RyxLQUFLdUcsT0FDMUQsaU1DN1NhLE1BQU1pSyxVQUFtQjlQLEVBQUFBLFFBQ3RDakIsV0FBQUEsRUFBWSxTQUFFdU8sSUFDWnBPLE1BQU0sQ0FDSkYsUUFBUyxjQUNUQyxTQUFVLENBQ1I4USxNQUFPLDBCQUNQQyxNQUFPLDRCQUdYMVEsS0FBSzJRLFNBQVMzQyxFQUNoQixDQUVBMkMsUUFBQUEsQ0FBUzNDLEdBQ1UsVUFBYkEsR0FDRmxPLEVBQUFBLFFBQUtvRCxHQUFHbEQsS0FBS04sUUFBUyxDQUNwQnVELE1BQU8yTixFQUFBQSxrQkFDUHpRLFNBQVUsTUFFWkwsRUFBQUEsUUFBS29ELEdBQUdsRCxLQUFLTCxTQUFTOFEsTUFBTSxHQUFJLENBQzlCeFEsVUFBVyxFQUNYQyxNQUFPLElBQ1BDLFNBQVUsTUFFWkwsRUFBQUEsUUFBS29ELEdBQUdsRCxLQUFLTCxTQUFTOFEsTUFBTSxHQUFJLENBQzlCeFEsVUFBVyxFQUNYRSxTQUFVLFFBR1pMLEVBQUFBLFFBQUtvRCxHQUFHbEQsS0FBS04sUUFBUyxDQUNwQnVELE1BQU80TixFQUFBQSw0QkFDUDFRLFNBQVUsTUFFWkwsRUFBQUEsUUFBS29ELEdBQUdsRCxLQUFLTCxTQUFTOFEsTUFBTSxHQUFJLENBQzlCeFEsVUFBVyxFQUNYRSxTQUFVLE1BRVpMLEVBQUFBLFFBQUtvRCxHQUFHbEQsS0FBS0wsU0FBUzhRLE1BQU0sR0FBSSxDQUM5QnhRLFVBQVcsRUFDWEMsTUFBTyxJQUNQQyxTQUFVLE1BR2hCLDRPQy9CYSxNQUFNMlEsVUFBa0JwUSxFQUFBQSxRQUNyQ2pCLFdBQUFBLEVBQVksT0FBRWlQLElBQ1o5TyxNQUFNLENBQ0pGLFFBQVMsYUFDVEMsU0FBVSxDQUNSb1IsTUFBTyxtQkFDUEMsT0FBUSxxQkFDUkMsV0FBWSw4QkFHaEJqUixLQUFLME8sT0FBU0EsRUFFZDdOLE9BQU9tSSxTQUFXLENBQUMsR0FFbkJrSSxFQUFBQSxFQUFBQSxPQUFNLENBQ0p4UixRQUFTTSxLQUFLTCxTQUFTb1IsTUFDdkJJLFdBQVksVUFHZEQsRUFBQUEsRUFBQUEsT0FBTSxDQUNKeFIsUUFBU00sS0FBS0wsU0FBU29SLE1BQ3ZCSSxXQUFZLFNBR2RuUixLQUFLTCxTQUFTeVIsV0FDWnBSLEtBQUtMLFNBQVNvUixNQUFNbk4saUJBQWlCLGFBRXZDNUQsS0FBS3JDLE9BQVMsRUFFZHFDLEtBQUtxUixjQUNQLENBRUFBLFlBQUFBLEdBQ0V4USxPQUFPeVEsT0FBT2xULFNBQVN3TixJQUNyQixNQUFNN0MsRUFBVSxJQUFJd0ksRUFBQUEsUUFBUXZSLEtBQUswTyxPQUFPcEksR0FBSSxDQUMxQ2tMLGlCQUFpQixJQUdiQyxFQUFXLElBQUk1USxPQUFPNlEsTUFDNUJELEVBQVNFLFlBQWMsWUFDdkJGLEVBQVNyUSxJQUFNd0ssRUFFZjZGLEVBQVNqUSxPQUFTLEtBQ2hCdUgsRUFBUTZDLE1BQVE2RixFQUNoQnpSLEtBQUs0UixlQUFlLEVBR3RCL1EsT0FBT21JLFNBQVM0QyxHQUFTN0MsQ0FBTyxHQUVwQyxDQUVBNkksYUFBQUEsR0FDRTVSLEtBQUtyQyxRQUFVLEVBQ2YsTUFBTWtVLEVBQVU3UixLQUFLckMsT0FBU2tELE9BQU95USxPQUFPM1QsT0FFNUNxQyxLQUFLTCxTQUFTc1IsV0FBV2EsVUFBWSxHQUFHM0gsS0FBSzRILE1BQWdCLElBQVZGLE1BQ25DLElBQVpBLEdBQ0Y3UixLQUFLZ1MsVUFFVCxDQUVBQSxRQUFBQSxHQUNFLE9BQU8sSUFBSTdNLFNBQVNDLElBQ2xCcEYsS0FBS2lTLEtBQUssYUFFVmpTLEtBQUtJLFdBQWFOLEVBQUFBLFFBQUtnQyxTQUFTLENBQUU1QixNQUFPLElBRXpDRixLQUFLSSxXQUFXOEMsR0FBR2xELEtBQUtMLFNBQVN5UixXQUFZLENBQzNDblIsVUFBVyxFQUNYZ0gsRUFBRyxPQUNIOUcsU0FBVSxJQUNWNkIsS0FBTSxXQUNOa1EsUUFBUyxLQUdYbFMsS0FBS0ksV0FBVzhDLEdBQ2RsRCxLQUFLTCxTQUFTc1IsV0FDZCxDQUNFaFIsVUFBVyxFQUNYZ0gsRUFBRyxPQUNIOUcsU0FBVSxJQUNWNkIsS0FBTSxXQUNOa1EsUUFBUyxJQUVYLFNBRUZsUyxLQUFLSSxXQUFXOEMsR0FDZGxELEtBQUtOLFFBQ0wsQ0FDRU8sVUFBVyxFQUNYRSxTQUFVLEdBRVosT0FHRkgsS0FBS0ksV0FBV2lGLE1BQUssSUFBTXJGLEtBQUt3RixXQUFVLEdBRTlDLENBRUFBLE9BQUFBLEdBQ0V4RixLQUFLTixRQUFReVMsV0FBVzFKLFlBQVl6SSxLQUFLTixRQUMzQyw4WkNrS2tFLFNBQVMwUyxJQUFRLElBQUksT0FBTyxFQUFHQyxNQUFNLCtCQUFnQyxFQUFHQSxNQUFNLGlpdUNBQWtpdUMsQ0FBQyxNQUFNQyxHQUFHLENBQUMsQ0FEL3J1QyxJQTVQQSxNQUNFN1MsV0FBQUEsR0FDRU8sS0FBS3VTLGdCQUVMdlMsS0FBS3dTLGVBQ0x4UyxLQUFLeVMsa0JBQ0x6UyxLQUFLMFMsbUJBQ0wxUyxLQUFLMlMsY0FFTDNTLEtBQUs0UyxtQkFDTDVTLEtBQUt1QyxvQkFFTHZDLEtBQUtNLFdBQ0xOLEtBQUs4RixRQUNQLENBRUE0TSxnQkFBQUEsR0FDRTFTLEtBQUs2UyxXQUFhLElBQUlyQyxFQUFBQSxRQUFXLENBQUV4QyxTQUFVaE8sS0FBS2dPLFVBQ3BELENBT0F5RSxlQUFBQSxHQUNFelMsS0FBSzhTLFVBQVksSUFBSWhDLEVBQUFBLFFBQVUsQ0FBRXBDLE9BQVExTyxLQUFLME8sU0FDOUMxTyxLQUFLOFMsVUFBVUMsS0FBSyxZQUFhL1MsS0FBS3dQLFlBQVkvTSxLQUFLekMsTUFDekQsQ0FNQXdTLFlBQUFBLEdBQ0V4UyxLQUFLME8sT0FBUyxJQUFJWCxFQUFBQSxRQUFPLENBQUVDLFNBQVVoTyxLQUFLZ08sVUFDNUMsQ0FNQXVFLGFBQUFBLEdBQ0V2UyxLQUFLZ1QsUUFBVTdQLFNBQVN4QixjQUFjLFlBQ3RDM0IsS0FBS2dPLFNBQVdoTyxLQUFLZ1QsUUFBUXpSLGFBQWEsZ0JBQzVDLENBTUFvUixXQUFBQSxHQUNFM1MsS0FBS2lULE1BQVEsQ0FDWGhFLE1BQU8sSUFBSXpFLEVBQUFBLFFBQ1htRCxZQUFhLElBQUl4QyxFQUFBQSxRQUNqQm1FLE9BQVEsSUFBSS9DLEVBQUFBLFFBQ1p1QyxLQUFNLElBQUlsQyxFQUFBQSxTQUVaNU0sS0FBS2tULEtBQU9sVCxLQUFLaVQsTUFBTWpULEtBQUtnTyxVQUM1QmhPLEtBQUtrVCxLQUFLMVAsUUFDWixDQWNBZ00sV0FBQUEsR0FDRXhQLEtBQUtNLFdBQ0xOLEtBQUswTyxPQUFPYyxjQUNaeFAsS0FBS2tULEtBQUtqTyxNQUNaLENBVUFrTyxVQUFBQSxHQUNFblQsS0FBSzJRLFNBQVMsQ0FBRTlDLElBQUtoTixPQUFPdVMsU0FBU0MsU0FBVTdWLE1BQU0sR0FDdkQsQ0FXQSxjQUFNbVQsRUFBUyxJQUFFOUMsRUFBRyxLQUFFclEsR0FBTyxJQUMzQndDLEtBQUswTyxPQUFPZ0IsY0FBYzFQLEtBQUtnTyxTQUFVSCxTQUVuQzdOLEtBQUtrVCxLQUFLM04sT0FDaEIsTUFBTStOLFFBQWdCelMsT0FBTzBTLE1BQU0xRixHQUVuQyxHQUF1QixNQUFuQnlGLEVBQVFFLE9BQWdCLENBQzFCLE1BQU1DLFFBQWFILEVBQVF4VyxPQUNyQjRXLEVBQU12USxTQUFTd1EsY0FBYyxPQUUvQm5XLEdBQ0ZxRCxPQUFPK1MsUUFBUUMsVUFBVSxDQUFDLEVBQUcsR0FBSWhHLEdBR25DNkYsRUFBSTVCLFVBQVkyQixFQUNoQixNQUFNSyxFQUFhSixFQUFJL1IsY0FBYyxZQUNyQzNCLEtBQUtnTyxTQUFXOEYsRUFBV3ZTLGFBQWEsaUJBRXhDdkIsS0FBSzZTLFdBQVdsQyxTQUFTM1EsS0FBS2dPLFVBRTlCaE8sS0FBS2dULFFBQVFsQixVQUFZZ0MsRUFBV2hDLFVBQ3BDOVIsS0FBS2dULFFBQVFlLGFBQWEsZ0JBQWlCL1QsS0FBS2dPLFVBRWhEaE8sS0FBSzBPLE9BQU9lLFlBQVl6UCxLQUFLZ08sVUFFN0JoTyxLQUFLa1QsS0FBT2xULEtBQUtpVCxNQUFNalQsS0FBS2dPLFVBQzVCaE8sS0FBS2tULEtBQUsxUCxTQUNWeEQsS0FBS00saUJBQ0NOLEtBQUtrVCxLQUFLak8sT0FFaEJqRixLQUFLNFMsa0JBQ1AsTUFDc0JvQixRQUFRQyxPQXdIeXJ1QyxTQUFlQyxLQUFLQyxHQUFHLElBQUkvQixJQUFRZ0MsV0FBV0YsRUFBR0MsRUFBRyxDQUFDLE1BQU03QixHQUFHLENBQUUsT0FBTzZCLENBQUMsQ0F4SDF2dUNFLENBQU0sMkJBQTJCLFFBQVNmLEVBQVFFLFFBRXpGLENBTUFsVCxRQUFBQSxHQUNNTixLQUFLa1QsTUFBUWxULEtBQUtrVCxLQUFLNVMsVUFDekJOLEtBQUtrVCxLQUFLNVMsV0FHWk8sT0FBT3lULHVCQUFzQixLQUN2QnRVLEtBQUswTyxRQUFVMU8sS0FBSzBPLE9BQU9wTyxVQUM3Qk4sS0FBSzBPLE9BQU9wTyxVQUNkLEdBRUosQ0FPQXdILFdBQUFBLENBQVlOLEdBQ054SCxLQUFLME8sUUFBVTFPLEtBQUswTyxPQUFPNUcsYUFDN0I5SCxLQUFLME8sT0FBTzVHLFlBQVlOLEVBRTVCLENBTUFPLFdBQUFBLENBQVlQLEdBQ054SCxLQUFLME8sUUFBVTFPLEtBQUswTyxPQUFPM0csYUFDN0IvSCxLQUFLME8sT0FBTzNHLFlBQVlQLEVBRTVCLENBTUFVLFNBQUFBLENBQVVWLEdBQ0p4SCxLQUFLME8sUUFBVTFPLEtBQUswTyxPQUFPeEcsV0FDN0JsSSxLQUFLME8sT0FBT3hHLFVBQVVWLEVBRTFCLENBT0FuRCxPQUFBQSxDQUFRbUQsR0FDTixNQUFNK00sRUFBa0JDLElBQWVoTixHQUNuQ3hILEtBQUtrVCxNQUFRbFQsS0FBS2tULEtBQUs3TyxTQUN6QnJFLEtBQUtrVCxLQUFLN08sUUFBUWtRLEdBRWhCdlUsS0FBSzBPLFFBQVUxTyxLQUFLME8sT0FBT3JLLFNBQzdCckUsS0FBSzBPLE9BQU9ySyxRQUFRa1EsRUFFeEIsQ0FNQXpPLE1BQUFBLEdBQ005RixLQUFLa1QsTUFBUWxULEtBQUtrVCxLQUFLcE4sUUFDekI5RixLQUFLa1QsS0FBS3BOLFNBR1I5RixLQUFLME8sUUFBVTFPLEtBQUswTyxPQUFPNUksUUFHN0I5RixLQUFLME8sT0FBTzVJLE9BQU85RixLQUFLa1QsS0FBSzFPLFFBRy9CeEUsS0FBS3lVLE1BQVE1VCxPQUFPeVQsc0JBQXNCdFUsS0FBSzhGLE9BQU9yRCxLQUFLekMsTUFDN0QsQ0FNQXVDLGlCQUFBQSxHQUNFMUIsT0FBTzhCLGlCQUFpQixRQUFTM0MsS0FBS3FFLFFBQVE1QixLQUFLekMsT0FFbkRhLE9BQU84QixpQkFBaUIsWUFBYTNDLEtBQUs4SCxZQUFZckYsS0FBS3pDLE9BQzNEYSxPQUFPOEIsaUJBQWlCLFlBQWEzQyxLQUFLK0gsWUFBWXRGLEtBQUt6QyxPQUMzRGEsT0FBTzhCLGlCQUFpQixVQUFXM0MsS0FBS2tJLFVBQVV6RixLQUFLekMsT0FFdkRhLE9BQU84QixpQkFBaUIsYUFBYzNDLEtBQUs4SCxZQUFZckYsS0FBS3pDLE9BQzVEYSxPQUFPOEIsaUJBQWlCLFlBQWEzQyxLQUFLK0gsWUFBWXRGLEtBQUt6QyxPQUMzRGEsT0FBTzhCLGlCQUFpQixXQUFZM0MsS0FBS2tJLFVBQVV6RixLQUFLekMsT0FFeERhLE9BQU84QixpQkFBaUIsV0FBWTNDLEtBQUttVCxXQUFXMVEsS0FBS3pDLE9BQ3pEYSxPQUFPOEIsaUJBQWlCLFNBQVUzQyxLQUFLTSxTQUFTbUMsS0FBS3pDLE1BQ3ZELENBT0E0UyxnQkFBQUEsR0FDRSxNQUFNbEMsRUFBUXZOLFNBQVNTLGlCQUFpQixLQUN4Q0YsSUFBS2dOLEdBQVFnRSxJQUNYQSxFQUFLQyxRQUFXbk4sSUFDZEEsRUFBTW9OLGlCQUNOLE1BQU0sS0FBRUMsR0FBU0gsRUFDakIxVSxLQUFLMlEsU0FBUyxDQUFFOUMsSUFBS2dILEdBQU8sQ0FDN0IsR0FFTCx1SENqUmEsTUFBTXJLLFVBQWMzRyxFQUFBQSxRQUNqQ3BFLFdBQUFBLEdBQ0VHLE1BQU0sQ0FDSmtFLEdBQUksUUFDSnBFLFFBQVMsU0FDVEMsU0FBVSxDQUNSa1QsV0FBWTFQLFNBQVN4QixjQUFjLGVBQ25DZ0UsUUFBUyxvQkFHZiw2SENWYSxNQUFNd0YsVUFBb0J0SCxFQUFBQSxRQUN2Q3BFLFdBQUFBLEdBQ0VHLE1BQU0sQ0FDSmtFLEdBQUksY0FDSnBFLFFBQVMsZUFDVEMsU0FBVSxDQUNSa1QsV0FBWTFQLFNBQVN4QixjQUFjLGVBQ25DZ0UsUUFBUywwQkFHZiwyTENSYSxNQUFNNEcsVUFBZTFJLEVBQUFBLFFBQ2xDcEUsV0FBQUEsR0FDRUcsTUFBTSxDQUNKa0UsR0FBSSxTQUNKcEUsUUFBUyxVQUNUQyxTQUFVLENBQ1JrVCxXQUFZMVAsU0FBU3hCLGNBQWMsZUFDbkNtVCxPQUFRLG9CQUdkLENBRUF0UixNQUFBQSxHQUNFNUQsTUFBTTRELFNBQ054RCxLQUFLMFUsS0FBTyxJQUFJalQsRUFBQUEsUUFBTyxDQUNyQi9CLFFBQVNNLEtBQUtMLFNBQVNtVixRQUUzQixDQUVBN1AsSUFBQUEsR0FDRSxNQUFNbkQsRUFBV2hDLEVBQUFBLFFBQUtnQyxTQUFTLENBQUU1QixNQUFPLElBQ3hDNEIsRUFBUy9CLE9BQ1BDLEtBQUtOLFFBQ0wsQ0FDRU8sVUFBVyxHQUViLENBQUVBLFVBQVcsSUFHZkwsTUFBTXFGLEtBQUtuRCxFQUNiLENBRUEwRCxPQUFBQSxHQUNFNUYsTUFBTTRGLFVBQ054RixLQUFLMFUsS0FBSzlSLHNCQUNaLHFKQ3BDYSxNQUFNZ0ssVUFBYS9JLEVBQUFBLFFBQ2hDcEUsV0FBQUEsR0FDRUcsTUFBTSxDQUNKa0UsR0FBSSxPQUNKcEUsUUFBUyxRQUNUQyxTQUFVLENBQ1JrVCxXQUFZMVAsU0FBU3hCLGNBQWMsZUFDbkMrUyxLQUFNLGdCQUdaLENBRUFsUixNQUFBQSxHQUNFNUQsTUFBTTRELFNBQ054RCxLQUFLMFUsS0FBTyxJQUFJalQsRUFBQUEsUUFBTyxDQUNyQi9CLFFBQVNNLEtBQUtMLFNBQVMrVSxNQUUzQixDQUVBbFAsT0FBQUEsR0FDRTVGLE1BQU00RixVQUNOeEYsS0FBSzBVLEtBQUs5UixzQkFDWiw2SEN6QkssTUFBTWlPLEVBQThCLFVBQzlCRCxFQUFvQixzSkNDMUIsU0FBU00sR0FBTSxRQUFFeFIsRUFBTyxXQUFFeVIsRUFBYSxJQUFHLE9BQUU0RCxHQUFTLElBQzFELE1BQU1DLEVBbUVSLFNBQW1CbFksRUFBTXFVLEdBQ3ZCLE1BQU04RCxFQUFTblksRUFBS29VLE1BQU0sUUFDMUIsSUFBSThELEVBQVEsR0FzQ1osT0FwQ0F0UixJQUFLdVIsR0FBUSxDQUFDQyxFQUFNOU8sS0FDZEEsRUFBUSxHQUNWNE8sRUFBTXhYLEtBQUssUUFFYndYLEVBQVFBLEVBQU1HLE9BQU9ELEVBQUtoRSxNQUFNQyxJQUNoQyxJQUFJaUUsR0FBUyxFQUNUVixFQUFPLEdBRVgsTUFBTTVDLEVBQVksR0FFbEJwTyxJQUFLc1IsR0FBUUssSUFDTkQsSUFBV0MsRUFBS0MsU0FBUyxRQUFTRCxFQUFLQyxTQUFTLGFBQ25ERixHQUFTLEVBQ1RWLEVBQU8sSUFHTFUsSUFDRlYsR0FBUSxHQUFHVyxLQUdURCxJQUFXQyxFQUFLQyxTQUFTLFFBQVVELEVBQUtDLFNBQVMsZUFDbkR4RCxFQUFVdFUsS0FBSzZYLEdBQ2ZYLEVBQU8sSUFHSlUsR0FBbUIsS0FBVFYsR0FDYjVDLEVBQVV0VSxLQUFLNlgsR0FHYkQsSUFBV0MsRUFBS0MsU0FBUyxRQUFVRCxFQUFLQyxTQUFTLGVBQ25ERixHQUFTLEVBQ1gsSUFFRkosRUFBUWxELENBQVMsSUFHWmtELENBQ1QsQ0E1R2dCTyxDQUFVN1YsRUFBUW9TLFVBQVUzVCxXQUFXcVgsT0FBUXJFLEdBQzdELElBQUlXLEVBQVksR0FFaEJwTyxJQUFLc1IsR0FBUVMsSUFDWCxHQUFJQSxFQUFLblksUUFBUSxTQUFXLEVBQUcsQ0FDN0IsTUFBTW9ZLEVBQVFELEVBQUt2RSxNQUFNLFFBRXpCeE4sSUFBS2dTLEdBQU8sQ0FBQ0QsRUFBTXJQLEtBQ2pCMEwsR0FBYTFMLEVBQVEsRUFBSSxPQUFTdVAsRUFBVUYsR0FBUUUsRUFBVUYsRUFBSyxHQUV2RSxNQUNFM0QsR0FBYTZELEVBQVVGLEVBQ3pCLElBR0YvVixFQUFRb1MsVUFBWUEsRUFFcEIsTUFBTThELEVBQVFsVyxFQUFRa0UsaUJBQWlCLFFBb0J2QyxPQWxCSW1SLEdBQ0ZyUixJQUFLa1MsR0FBUUMsSUFDWCxNQUFNQyxFQUE2QyxJQUE1QkQsRUFBS0UsWUFBWXBZLE9BQ2xDcVksRUFBdUMsS0FBMUJILEVBQUsvRCxVQUFVMEQsT0FDNUJTLEVBQTJDLE1BQTFCSixFQUFLL0QsVUFBVTBELE9BQ2hDVSxFQUErQyxNQUExQkwsRUFBSy9ELFVBQVUwRCxPQUd4Q00sR0FDQUUsR0FDQUMsR0FDQUMsSUFFQUwsRUFBSy9ELFVBQVksR0FBRytELEVBQUtFLG9CQUMzQixJQUlHSCxDQUNULENBRU8sU0FBU08sRUFBVVAsR0FDeEIsTUFBTUYsRUFBUSxHQUNkLElBQUlWLEVBQVEsR0FFUnpNLEVBQVdxTixFQUFNLEdBQUdRLFVBb0J4QixPQWxCQTFTLElBQUtrUyxHQUFPLENBQUNDLEVBQU16UCxLQUNieVAsRUFBS08sWUFBYzdOLEdBQ3JCeU0sRUFBTXhYLEtBQUtxWSxHQUdUQSxFQUFLTyxZQUFjN04sSUFDckJtTixFQUFNbFksS0FBS3dYLEdBQ1hBLEVBQVEsR0FDUkEsRUFBTXhYLEtBQUtxWSxHQUVYdE4sRUFBV3NOLEVBQUtPLFdBR2RoUSxFQUFRLElBQU13UCxFQUFNalksUUFDdEIrWCxFQUFNbFksS0FBS3dYLEVBQ2IsSUFHS1UsQ0FDVCxDQTZDQSxTQUFTQyxFQUFVRixHQUVqQixNQUFhLE1BRGJBLEVBQU9BLEVBQUtELFNBQ2dCLE1BQVRDLEVBQ1ZBLEVBRVMsU0FBVEEsRUFDSCxPQUNBLFNBQVNBLFlBQWlCQSxFQUFLOVgsT0FBUyxFQUFJLElBQU0sR0FFMUQsc0RDbkdBLElBT0kwWSxFQVBBQyxFQUF1QixpQkFBWkMsUUFBdUJBLFFBQVUsS0FDNUNDLEVBQWVGLEdBQXdCLG1CQUFaQSxFQUFFRyxNQUM3QkgsRUFBRUcsTUFDRixTQUFzQi9SLEVBQVFnUyxFQUFVQyxHQUN4QyxPQUFPQyxTQUFTQyxVQUFVSixNQUFNcFIsS0FBS1gsRUFBUWdTLEVBQVVDLEVBQ3pELEVBSUFOLEVBREVDLEdBQTBCLG1CQUFkQSxFQUFFUSxRQUNDUixFQUFFUSxRQUNWNVgsT0FBTzZYLHNCQUNDLFNBQXdCclMsR0FDdkMsT0FBT3hGLE9BQU84WCxvQkFBb0J0UyxHQUMvQnlRLE9BQU9qVyxPQUFPNlgsc0JBQXNCclMsR0FDekMsRUFFaUIsU0FBd0JBLEdBQ3ZDLE9BQU94RixPQUFPOFgsb0JBQW9CdFMsRUFDcEMsRUFPRixJQUFJdVMsRUFBY0MsT0FBT0MsT0FBUyxTQUFxQjVOLEdBQ3JELE9BQU9BLEdBQVVBLENBQ25CLEVBRUEsU0FBU2xHLElBQ1BBLEVBQWErVCxLQUFLL1IsS0FBS3JGLEtBQ3pCLENBQ0FwRSxFQUFPQyxRQUFVd0gsRUFDakJ6SCxFQUFPQyxRQUFRa1gsS0F3WWYsU0FBY3NFLEVBQVNDLEdBQ3JCLE9BQU8sSUFBSW5TLFNBQVEsU0FBVUMsRUFBU21TLEdBQ3BDLFNBQVNDLEVBQWNDLEdBQ3JCSixFQUFRSyxlQUFlSixFQUFNSyxHQUM3QkosRUFBT0UsRUFDVCxDQUVBLFNBQVNFLElBQytCLG1CQUEzQk4sRUFBUUssZ0JBQ2pCTCxFQUFRSyxlQUFlLFFBQVNGLEdBRWxDcFMsRUFBUSxHQUFHcEcsTUFBTXFHLEtBQUt1UyxXQUN4QixDQUVBQyxFQUErQlIsRUFBU0MsRUFBTUssRUFBVSxDQUFFNUUsTUFBTSxJQUNuRCxVQUFUdUUsR0FNUixTQUF1Q0QsRUFBU1MsRUFBU0MsR0FDN0IsbUJBQWZWLEVBQVFXLElBQ2pCSCxFQUErQlIsRUFBUyxRQUFTUyxFQUFTQyxFQUU5RCxDQVRNRSxDQUE4QlosRUFBU0csRUFBZSxDQUFFekUsTUFBTSxHQUVsRSxHQUNGLEVBeFpBMVAsRUFBYUEsYUFBZUEsRUFFNUJBLEVBQWF3VCxVQUFVcUIsYUFBVUMsRUFDakM5VSxFQUFhd1QsVUFBVXVCLGFBQWUsRUFDdEMvVSxFQUFhd1QsVUFBVXdCLG1CQUFnQkYsRUFJdkMsSUFBSUcsRUFBc0IsR0FFMUIsU0FBU0MsRUFBY0MsR0FDckIsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJQyxVQUFVLDBFQUE0RUQsRUFFcEcsQ0FvQ0EsU0FBU0UsRUFBaUJDLEdBQ3hCLFlBQTJCUixJQUF2QlEsRUFBS04sY0FDQWhWLEVBQWFpVixvQkFDZkssRUFBS04sYUFDZCxDQWtEQSxTQUFTTyxFQUFhbFUsRUFBUW1VLEVBQU1MLEVBQVVNLEdBQzVDLElBQUlDLEVBQ0FDLEVBQ0FDLEVBMUhzQkMsRUFnSjFCLEdBcEJBWCxFQUFjQyxRQUdDTCxLQURmYSxFQUFTdFUsRUFBT3dULFVBRWRjLEVBQVN0VSxFQUFPd1QsUUFBVWhaLE9BQU9zRSxPQUFPLE1BQ3hDa0IsRUFBTzBULGFBQWUsU0FJS0QsSUFBdkJhLEVBQU9HLGNBQ1R6VSxFQUFPdU4sS0FBSyxjQUFlNEcsRUFDZkwsRUFBU0EsU0FBV0EsRUFBU0EsU0FBV0EsR0FJcERRLEVBQVN0VSxFQUFPd1QsU0FFbEJlLEVBQVdELEVBQU9ILFNBR0hWLElBQWJjLEVBRUZBLEVBQVdELEVBQU9ILEdBQVFMLElBQ3hCOVQsRUFBTzBULGtCQWVULEdBYndCLG1CQUFiYSxFQUVUQSxFQUFXRCxFQUFPSCxHQUNoQkMsRUFBVSxDQUFDTixFQUFVUyxHQUFZLENBQUNBLEVBQVVULEdBRXJDTSxFQUNURyxFQUFTRyxRQUFRWixHQUVqQlMsRUFBU3piLEtBQUtnYixJQUloQk8sRUFBSUwsRUFBaUJoVSxJQUNiLEdBQUt1VSxFQUFTdGIsT0FBU29iLElBQU1FLEVBQVNJLE9BQVEsQ0FDcERKLEVBQVNJLFFBQVMsRUFHbEIsSUFBSUMsRUFBSSxJQUFJL2EsTUFBTSwrQ0FDRTBhLEVBQVN0YixPQUFTLElBQU00YixPQUFPVixHQURqQyxxRUFJbEJTLEVBQUVoQyxLQUFPLDhCQUNUZ0MsRUFBRWpDLFFBQVUzUyxFQUNaNFUsRUFBRVQsS0FBT0EsRUFDVFMsRUFBRUUsTUFBUVAsRUFBU3RiLE9BN0tHdWIsRUE4S0hJLEVBN0tuQnRGLFNBQVdBLFFBQVF5RixNQUFNekYsUUFBUXlGLEtBQUtQLEVBOEt4QyxDQUdGLE9BQU94VSxDQUNULENBYUEsU0FBU2dWLElBQ1AsSUFBSzFaLEtBQUsyWixNQUdSLE9BRkEzWixLQUFLMEUsT0FBT2dULGVBQWUxWCxLQUFLNlksS0FBTTdZLEtBQUs0WixRQUMzQzVaLEtBQUsyWixPQUFRLEVBQ1ksSUFBckIvQixVQUFVamEsT0FDTHFDLEtBQUt3WSxTQUFTblQsS0FBS3JGLEtBQUswRSxRQUMxQjFFLEtBQUt3WSxTQUFTL0IsTUFBTXpXLEtBQUswRSxPQUFRa1QsVUFFNUMsQ0FFQSxTQUFTaUMsRUFBVW5WLEVBQVFtVSxFQUFNTCxHQUMvQixJQUFJc0IsRUFBUSxDQUFFSCxPQUFPLEVBQU9DLFlBQVF6QixFQUFXelQsT0FBUUEsRUFBUW1VLEtBQU1BLEVBQU1MLFNBQVVBLEdBQ2pGdUIsRUFBVUwsRUFBWWpYLEtBQUtxWCxHQUcvQixPQUZBQyxFQUFRdkIsU0FBV0EsRUFDbkJzQixFQUFNRixPQUFTRyxFQUNSQSxDQUNULENBeUhBLFNBQVNDLEVBQVd0VixFQUFRbVUsRUFBTW9CLEdBQ2hDLElBQUlqQixFQUFTdFUsRUFBT3dULFFBRXBCLFFBQWVDLElBQVhhLEVBQ0YsTUFBTyxHQUVULElBQUlrQixFQUFhbEIsRUFBT0gsR0FDeEIsWUFBbUJWLElBQWYrQixFQUNLLEdBRWlCLG1CQUFmQSxFQUNGRCxFQUFTLENBQUNDLEVBQVcxQixVQUFZMEIsR0FBYyxDQUFDQSxHQUVsREQsRUFzRFQsU0FBeUJFLEdBRXZCLElBREEsSUFBSWxkLEVBQU0sSUFBSVcsTUFBTXVjLEVBQUl4YyxRQUNmdVcsRUFBSSxFQUFHQSxFQUFJalgsRUFBSVUsU0FBVXVXLEVBQ2hDalgsRUFBSWlYLEdBQUtpRyxFQUFJakcsR0FBR3NFLFVBQVkyQixFQUFJakcsR0FFbEMsT0FBT2pYLENBQ1QsQ0EzREltZCxDQUFnQkYsR0FBY0csRUFBV0gsRUFBWUEsRUFBV3ZjLE9BQ3BFLENBbUJBLFNBQVMyYyxFQUFjekIsR0FDckIsSUFBSUcsRUFBU2haLEtBQUtrWSxRQUVsQixRQUFlQyxJQUFYYSxFQUFzQixDQUN4QixJQUFJa0IsRUFBYWxCLEVBQU9ILEdBRXhCLEdBQTBCLG1CQUFmcUIsRUFDVCxPQUFPLEVBQ0YsUUFBbUIvQixJQUFmK0IsRUFDVCxPQUFPQSxFQUFXdmMsTUFFdEIsQ0FFQSxPQUFPLENBQ1QsQ0FNQSxTQUFTMGMsRUFBV0YsRUFBSzliLEdBRXZCLElBREEsSUFBSWtjLEVBQU8sSUFBSTNjLE1BQU1TLEdBQ1o2VixFQUFJLEVBQUdBLEVBQUk3VixJQUFLNlYsRUFDdkJxRyxFQUFLckcsR0FBS2lHLEVBQUlqRyxHQUNoQixPQUFPcUcsQ0FDVCxDQTJDQSxTQUFTMUMsRUFBK0JSLEVBQVNDLEVBQU1rQixFQUFVVCxHQUMvRCxHQUEwQixtQkFBZlYsRUFBUVcsR0FDYkQsRUFBTWhGLEtBQ1JzRSxFQUFRdEUsS0FBS3VFLEVBQU1rQixHQUVuQm5CLEVBQVFXLEdBQUdWLEVBQU1rQixPQUVkLElBQXdDLG1CQUE3Qm5CLEVBQVExVSxpQkFZeEIsTUFBTSxJQUFJOFYsVUFBVSw2RUFBK0VwQixHQVRuR0EsRUFBUTFVLGlCQUFpQjJVLEdBQU0sU0FBU2tELEVBQWFDLEdBRy9DMUMsRUFBTWhGLE1BQ1JzRSxFQUFReFUsb0JBQW9CeVUsRUFBTWtELEdBRXBDaEMsRUFBU2lDLEVBQ1gsR0FHRixDQUNGLENBcmFBdmIsT0FBT0MsZUFBZWtFLEVBQWMsc0JBQXVCLENBQ3pEcVgsWUFBWSxFQUNadGIsSUFBSyxXQUNILE9BQU9rWixDQUNULEVBQ0FqWSxJQUFLLFNBQVNvYSxHQUNaLEdBQW1CLGlCQUFSQSxHQUFvQkEsRUFBTSxHQUFLeEQsRUFBWXdELEdBQ3BELE1BQU0sSUFBSUUsV0FBVyxrR0FBb0dGLEVBQU0sS0FFakluQyxFQUFzQm1DLENBQ3hCLElBR0ZwWCxFQUFhK1QsS0FBTyxnQkFFR2UsSUFBakJuWSxLQUFLa1ksU0FDTGxZLEtBQUtrWSxVQUFZaFosT0FBTzBiLGVBQWU1YSxNQUFNa1ksVUFDL0NsWSxLQUFLa1ksUUFBVWhaLE9BQU9zRSxPQUFPLE1BQzdCeEQsS0FBS29ZLGFBQWUsR0FHdEJwWSxLQUFLcVksY0FBZ0JyWSxLQUFLcVksb0JBQWlCRixDQUM3QyxFQUlBOVUsRUFBYXdULFVBQVVnRSxnQkFBa0IsU0FBeUJ4YyxHQUNoRSxHQUFpQixpQkFBTkEsR0FBa0JBLEVBQUksR0FBSzRZLEVBQVk1WSxHQUNoRCxNQUFNLElBQUlzYyxXQUFXLGdGQUFrRnRjLEVBQUksS0FHN0csT0FEQTJCLEtBQUtxWSxjQUFnQmhhLEVBQ2QyQixJQUNULEVBUUFxRCxFQUFhd1QsVUFBVWlFLGdCQUFrQixXQUN2QyxPQUFPcEMsRUFBaUIxWSxLQUMxQixFQUVBcUQsRUFBYXdULFVBQVU1RSxLQUFPLFNBQWM0RyxHQUUxQyxJQURBLElBQUlsQyxFQUFPLEdBQ0Z6QyxFQUFJLEVBQUdBLEVBQUkwRCxVQUFVamEsT0FBUXVXLElBQUt5QyxFQUFLblosS0FBS29hLFVBQVUxRCxJQUMvRCxJQUFJNkcsRUFBb0IsVUFBVGxDLEVBRVhHLEVBQVNoWixLQUFLa1ksUUFDbEIsUUFBZUMsSUFBWGEsRUFDRitCLEVBQVdBLFFBQTRCNUMsSUFBakJhLEVBQU9nQyxXQUMxQixJQUFLRCxFQUNSLE9BQU8sRUFHVCxHQUFJQSxFQUFTLENBQ1gsSUFBSUUsRUFHSixHQUZJdEUsRUFBS2haLE9BQVMsSUFDaEJzZCxFQUFLdEUsRUFBSyxJQUNSc0UsYUFBYzFjLE1BR2hCLE1BQU0wYyxFQUdSLElBQUl4RCxFQUFNLElBQUlsWixNQUFNLG9CQUFzQjBjLEVBQUssS0FBT0EsRUFBR0MsUUFBVSxJQUFNLEtBRXpFLE1BREF6RCxFQUFJMEQsUUFBVUYsRUFDUnhELENBQ1IsQ0FFQSxJQUFJSyxFQUFVa0IsRUFBT0gsR0FFckIsUUFBZ0JWLElBQVpMLEVBQ0YsT0FBTyxFQUVULEdBQXVCLG1CQUFaQSxFQUNUdEIsRUFBYXNCLEVBQVM5WCxLQUFNMlcsT0FFNUIsS0FBSXlFLEVBQU10RCxFQUFRbmEsT0FDZDBkLEVBQVloQixFQUFXdkMsRUFBU3NELEdBQ3BDLElBQVNsSCxFQUFJLEVBQUdBLEVBQUlrSCxJQUFPbEgsRUFDekJzQyxFQUFhNkUsRUFBVW5ILEdBQUlsVSxLQUFNMlcsRUFIWCxDQU0xQixPQUFPLENBQ1QsRUFnRUF0VCxFQUFhd1QsVUFBVXlFLFlBQWMsU0FBcUJ6QyxFQUFNTCxHQUM5RCxPQUFPSSxFQUFhNVksS0FBTTZZLEVBQU1MLEdBQVUsRUFDNUMsRUFFQW5WLEVBQWF3VCxVQUFVbUIsR0FBSzNVLEVBQWF3VCxVQUFVeUUsWUFFbkRqWSxFQUFhd1QsVUFBVTBFLGdCQUNuQixTQUF5QjFDLEVBQU1MLEdBQzdCLE9BQU9JLEVBQWE1WSxLQUFNNlksRUFBTUwsR0FBVSxFQUM1QyxFQW9CSm5WLEVBQWF3VCxVQUFVOUQsS0FBTyxTQUFjOEYsRUFBTUwsR0FHaEQsT0FGQUQsRUFBY0MsR0FDZHhZLEtBQUtnWSxHQUFHYSxFQUFNZ0IsRUFBVTdaLEtBQU02WSxFQUFNTCxJQUM3QnhZLElBQ1QsRUFFQXFELEVBQWF3VCxVQUFVMkUsb0JBQ25CLFNBQTZCM0MsRUFBTUwsR0FHakMsT0FGQUQsRUFBY0MsR0FDZHhZLEtBQUt1YixnQkFBZ0IxQyxFQUFNZ0IsRUFBVTdaLEtBQU02WSxFQUFNTCxJQUMxQ3hZLElBQ1QsRUFHSnFELEVBQWF3VCxVQUFVYSxlQUNuQixTQUF3Qm1CLEVBQU1MLEdBQzVCLElBQUlpRCxFQUFNekMsRUFBUXpRLEVBQVUyTCxFQUFHd0gsRUFLL0IsR0FIQW5ELEVBQWNDLFFBR0NMLEtBRGZhLEVBQVNoWixLQUFLa1ksU0FFWixPQUFPbFksS0FHVCxRQUFhbVksS0FEYnNELEVBQU96QyxFQUFPSCxJQUVaLE9BQU83WSxLQUVULEdBQUl5YixJQUFTakQsR0FBWWlELEVBQUtqRCxXQUFhQSxFQUNiLEtBQXRCeFksS0FBS29ZLGFBQ1RwWSxLQUFLa1ksUUFBVWhaLE9BQU9zRSxPQUFPLGNBRXRCd1YsRUFBT0gsR0FDVkcsRUFBT3RCLGdCQUNUMVgsS0FBS2lTLEtBQUssaUJBQWtCNEcsRUFBTTRDLEVBQUtqRCxVQUFZQSxTQUVsRCxHQUFvQixtQkFBVGlELEVBQXFCLENBR3JDLElBRkFsVCxHQUFZLEVBRVAyTCxFQUFJdUgsRUFBSzlkLE9BQVMsRUFBR3VXLEdBQUssRUFBR0EsSUFDaEMsR0FBSXVILEVBQUt2SCxLQUFPc0UsR0FBWWlELEVBQUt2SCxHQUFHc0UsV0FBYUEsRUFBVSxDQUN6RGtELEVBQW1CRCxFQUFLdkgsR0FBR3NFLFNBQzNCalEsRUFBVzJMLEVBQ1gsS0FDRixDQUdGLEdBQUkzTCxFQUFXLEVBQ2IsT0FBT3ZJLEtBRVEsSUFBYnVJLEVBQ0ZrVCxFQUFLRSxRQWlJZixTQUFtQkYsRUFBTXJWLEdBQ3ZCLEtBQU9BLEVBQVEsRUFBSXFWLEVBQUs5ZCxPQUFReUksSUFDOUJxVixFQUFLclYsR0FBU3FWLEVBQUtyVixFQUFRLEdBQzdCcVYsRUFBS2xlLEtBQ1AsQ0FuSVVxZSxDQUFVSCxFQUFNbFQsR0FHRSxJQUFoQmtULEVBQUs5ZCxTQUNQcWIsRUFBT0gsR0FBUTRDLEVBQUssU0FFUXRELElBQTFCYSxFQUFPdEIsZ0JBQ1QxWCxLQUFLaVMsS0FBSyxpQkFBa0I0RyxFQUFNNkMsR0FBb0JsRCxFQUMxRCxDQUVBLE9BQU94WSxJQUNULEVBRUpxRCxFQUFhd1QsVUFBVWdGLElBQU14WSxFQUFhd1QsVUFBVWEsZUFFcERyVSxFQUFhd1QsVUFBVWlGLG1CQUNuQixTQUE0QmpELEdBQzFCLElBQUl3QyxFQUFXckMsRUFBUTlFLEVBR3ZCLFFBQWVpRSxLQURmYSxFQUFTaFosS0FBS2tZLFNBRVosT0FBT2xZLEtBR1QsUUFBOEJtWSxJQUExQmEsRUFBT3RCLGVBVVQsT0FUeUIsSUFBckJFLFVBQVVqYSxRQUNacUMsS0FBS2tZLFFBQVVoWixPQUFPc0UsT0FBTyxNQUM3QnhELEtBQUtvWSxhQUFlLFFBQ01ELElBQWpCYSxFQUFPSCxLQUNZLEtBQXRCN1ksS0FBS29ZLGFBQ1RwWSxLQUFLa1ksUUFBVWhaLE9BQU9zRSxPQUFPLGFBRXRCd1YsRUFBT0gsSUFFWDdZLEtBSVQsR0FBeUIsSUFBckI0WCxVQUFVamEsT0FBYyxDQUMxQixJQUNJYyxFQURBc2QsRUFBTzdjLE9BQU82YyxLQUFLL0MsR0FFdkIsSUFBSzlFLEVBQUksRUFBR0EsRUFBSTZILEVBQUtwZSxTQUFVdVcsRUFFakIsb0JBRFp6VixFQUFNc2QsRUFBSzdILEtBRVhsVSxLQUFLOGIsbUJBQW1CcmQsR0FLMUIsT0FIQXVCLEtBQUs4YixtQkFBbUIsa0JBQ3hCOWIsS0FBS2tZLFFBQVVoWixPQUFPc0UsT0FBTyxNQUM3QnhELEtBQUtvWSxhQUFlLEVBQ2JwWSxJQUNULENBSUEsR0FBeUIsbUJBRnpCcWIsRUFBWXJDLEVBQU9ILElBR2pCN1ksS0FBSzBYLGVBQWVtQixFQUFNd0MsUUFDckIsUUFBa0JsRCxJQUFka0QsRUFFVCxJQUFLbkgsRUFBSW1ILEVBQVUxZCxPQUFTLEVBQUd1VyxHQUFLLEVBQUdBLElBQ3JDbFUsS0FBSzBYLGVBQWVtQixFQUFNd0MsRUFBVW5ILElBSXhDLE9BQU9sVSxJQUNULEVBbUJKcUQsRUFBYXdULFVBQVV3RSxVQUFZLFNBQW1CeEMsR0FDcEQsT0FBT21CLEVBQVdoYSxLQUFNNlksR0FBTSxFQUNoQyxFQUVBeFYsRUFBYXdULFVBQVVtRixhQUFlLFNBQXNCbkQsR0FDMUQsT0FBT21CLEVBQVdoYSxLQUFNNlksR0FBTSxFQUNoQyxFQUVBeFYsRUFBYWlYLGNBQWdCLFNBQVNqRCxFQUFTd0IsR0FDN0MsTUFBcUMsbUJBQTFCeEIsRUFBUWlELGNBQ1ZqRCxFQUFRaUQsY0FBY3pCLEdBRXRCeUIsRUFBY2pWLEtBQUtnUyxFQUFTd0IsRUFFdkMsRUFFQXhWLEVBQWF3VCxVQUFVeUQsY0FBZ0JBLEVBaUJ2Q2pYLEVBQWF3VCxVQUFVb0YsV0FBYSxXQUNsQyxPQUFPamMsS0FBS29ZLGFBQWUsRUFBSS9CLEVBQWVyVyxLQUFLa1ksU0FBVyxFQUNoRSx1S0MzWklnRSxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUVBQyxFQUNBQyxFQThKQUMsMENBMUpBQyxFQUFrQixDQUFDLEVBQ25CQyxFQUFXLElBQU14UyxLQUFLQyxHQUN0QndTLEVBQVd6UyxLQUFLQyxHQUFLLElBQ3JCeVMsRUFBUzFTLEtBQUsyUyxNQUVkQyxFQUFXLFdBQ1hDLEVBQWlCLHVDQUNqQkMsRUFBYyxZQUNkQyxFQUFtQixDQUNyQmpkLFVBQVcscUJBQ1hxSSxNQUFPLGdCQUNQZ0csTUFBTyxXQUVMNk8sRUFBaUIsU0FBd0JDLEVBQU9DLEdBQ2xELE9BQU9BLEVBQUtoZCxJQUFJZ2QsRUFBS0MsRUFBR0QsRUFBS0UsRUFBR3BULEtBQUs0SCxNQUFrQyxLQUEzQnNMLEVBQUtHLEVBQUlILEVBQUtJLEVBQUlMLElBQWtCLElBQVFDLEVBQUtLLEVBQUdMLEVBQ2xHLEVBQ0lNLEVBQXFCLFNBQTRCUCxFQUFPQyxHQUMxRCxPQUFPQSxFQUFLaGQsSUFBSWdkLEVBQUtDLEVBQUdELEVBQUtFLEVBQWEsSUFBVkgsRUFBY0MsRUFBSy9LLEVBQUluSSxLQUFLNEgsTUFBa0MsS0FBM0JzTCxFQUFLRyxFQUFJSCxFQUFLSSxFQUFJTCxJQUFrQixJQUFRQyxFQUFLSyxFQUFHTCxFQUN6SCxFQUNJTyxFQUE4QixTQUFxQ1IsRUFBT0MsR0FDNUUsT0FBT0EsRUFBS2hkLElBQUlnZCxFQUFLQyxFQUFHRCxFQUFLRSxFQUFHSCxFQUFRalQsS0FBSzRILE1BQWtDLEtBQTNCc0wsRUFBS0csRUFBSUgsRUFBS0ksRUFBSUwsSUFBa0IsSUFBUUMsRUFBS0ssRUFBSUwsRUFBS2hRLEVBQUdnUSxFQUNuSCxFQUVBUSxFQUF3QixTQUErQlQsRUFBT0MsR0FDNUQsSUFBSTlULEVBQVE4VCxFQUFLRyxFQUFJSCxFQUFLSSxFQUFJTCxFQUM5QkMsRUFBS2hkLElBQUlnZCxFQUFLQyxFQUFHRCxFQUFLRSxLQUFNaFUsR0FBU0EsRUFBUSxHQUFLLEdBQUssS0FBTzhULEVBQUtLLEVBQUdMLEVBQ3hFLEVBQ0lTLEVBQTBCLFNBQWlDVixFQUFPQyxHQUNwRSxPQUFPQSxFQUFLaGQsSUFBSWdkLEVBQUtDLEVBQUdELEVBQUtFLEVBQUdILEVBQVFDLEVBQUsvSyxFQUFJK0ssRUFBS2hRLEVBQUdnUSxFQUMzRCxFQUNJVSxFQUFtQyxTQUEwQ1gsRUFBT0MsR0FDdEYsT0FBT0EsRUFBS2hkLElBQUlnZCxFQUFLQyxFQUFHRCxFQUFLRSxFQUFhLElBQVZILEVBQWNDLEVBQUtoUSxFQUFJZ1EsRUFBSy9LLEVBQUcrSyxFQUNqRSxFQUNJVyxFQUFrQixTQUF5QnRaLEVBQVF1WixFQUFVMVUsR0FDL0QsT0FBTzdFLEVBQU93QixNQUFNK1gsR0FBWTFVLENBQ2xDLEVBQ0kyVSxFQUFpQixTQUF3QnhaLEVBQVF1WixFQUFVMVUsR0FDN0QsT0FBTzdFLEVBQU93QixNQUFNaVksWUFBWUYsRUFBVTFVLEVBQzVDLEVBQ0k2VSxFQUFtQixTQUEwQjFaLEVBQVF1WixFQUFVMVUsR0FDakUsT0FBTzdFLEVBQU8yWixNQUFNSixHQUFZMVUsQ0FDbEMsRUFDSStVLEVBQWUsU0FBc0I1WixFQUFRdVosRUFBVTFVLEdBQ3pELE9BQU83RSxFQUFPMlosTUFBTUUsT0FBUzdaLEVBQU8yWixNQUFNRyxPQUFTalYsQ0FDckQsRUFDSWtWLEVBQXlCLFNBQWdDL1osRUFBUXVaLEVBQVUxVSxFQUFPOFQsRUFBTUQsR0FDMUYsSUFBSXNCLEVBQVFoYSxFQUFPMlosTUFDbkJLLEVBQU1ILE9BQVNHLEVBQU1GLE9BQVNqVixFQUM5Qm1WLEVBQU1DLGdCQUFnQnZCLEVBQU9zQixFQUMvQixFQUNJRSxFQUE2QixTQUFvQ2xhLEVBQVF1WixFQUFVMVUsRUFBTzhULEVBQU1ELEdBQ2xHLElBQUlzQixFQUFRaGEsRUFBTzJaLE1BQ25CSyxFQUFNVCxHQUFZMVUsRUFDbEJtVixFQUFNQyxnQkFBZ0J2QixFQUFPc0IsRUFDL0IsRUFDSUcsRUFBaUIsWUFDakJDLEVBQXVCRCxFQUFpQixTQUN4Q0UsRUFBYSxTQUFTQSxFQUFXZCxFQUFVZSxHQUM3QyxJQUFJQyxFQUFRamYsS0FFUjBFLEVBQVMxRSxLQUFLMEUsT0FDZHdCLEVBQVF4QixFQUFPd0IsTUFDZndZLEVBQVFoYSxFQUFPMlosTUFFbkIsR0FBSUosS0FBWXZCLEdBQW1CeFcsRUFBTyxDQUd4QyxHQUZBbEcsS0FBS2tmLElBQU1sZixLQUFLa2YsS0FBTyxDQUFDLEVBRVAsY0FBYmpCLEVBUUYsT0FBT2YsRUFBaUJpQyxVQUFVak8sTUFBTSxLQUFLOVMsU0FBUSxTQUFVbWYsR0FDN0QsT0FBT3dCLEVBQVcxWixLQUFLNFosRUFBTzFCLEVBQUd5QixFQUNuQyxJQUdGLEtBWkVmLEVBQVdmLEVBQWlCZSxJQUFhQSxHQUMvQjNnQixRQUFRLEtBQU8yZ0IsRUFBUy9NLE1BQU0sS0FBSzlTLFNBQVEsU0FBVWdQLEdBQzdELE9BQU82UixFQUFNQyxJQUFJOVIsR0FBS2dTLEVBQUsxYSxFQUFRMEksRUFDckMsSUFBS3BOLEtBQUtrZixJQUFJakIsR0FBWVMsRUFBTTFYLEVBQUkwWCxFQUFNVCxHQUFZbUIsRUFBSzFhLEVBQVF1WixHQUVuRUEsSUFBYWEsSUFBeUI5ZSxLQUFLa2YsSUFBSUcsUUFBVVgsRUFBTVcsU0FPN0RyZixLQUFLc2YsTUFBTWhpQixRQUFRdWhCLElBQW1CLEVBQ3hDLE9BR0VILEVBQU1hLE1BQ1J2ZixLQUFLd2YsS0FBTzlhLEVBQU9uRCxhQUFhLG1CQUNoQ3ZCLEtBQUtzZixNQUFNOWhCLEtBQUtzaEIsRUFBc0JFLEVBQVUsS0FHbERmLEVBQVdZLENBQ2IsRUFFQzNZLEdBQVM4WSxJQUFhaGYsS0FBS3NmLE1BQU05aEIsS0FBS3lnQixFQUFVZSxFQUFVOVksRUFBTStYLEdBQ25FLEVBQ0l3QixFQUErQixTQUFzQ3ZaLEdBQ25FQSxFQUFNd1osWUFDUnhaLEVBQU15WixlQUFlLGFBQ3JCelosRUFBTXlaLGVBQWUsU0FDckJ6WixFQUFNeVosZUFBZSxVQUV6QixFQUNJQyxFQUFlLFdBQ2pCLElBSUkxTCxFQUNBcUosRUFMQStCLEVBQVF0ZixLQUFLc2YsTUFDYjVhLEVBQVMxRSxLQUFLMEUsT0FDZHdCLEVBQVF4QixFQUFPd0IsTUFDZndZLEVBQVFoYSxFQUFPMlosTUFJbkIsSUFBS25LLEVBQUksRUFBR0EsRUFBSW9MLEVBQU0zaEIsT0FBUXVXLEdBQUssRUFFakNvTCxFQUFNcEwsRUFBSSxHQUFLeFAsRUFBTzRhLEVBQU1wTCxJQUFNb0wsRUFBTXBMLEVBQUksR0FBS29MLEVBQU1wTCxFQUFJLEdBQUtoTyxFQUFNb1osRUFBTXBMLElBQU1vTCxFQUFNcEwsRUFBSSxHQUFLaE8sRUFBTXlaLGVBQXlDLE9BQTFCTCxFQUFNcEwsR0FBRzJMLE9BQU8sRUFBRyxHQUFjUCxFQUFNcEwsR0FBS29MLEVBQU1wTCxHQUFHaFgsUUFBUTZmLEVBQVUsT0FBTytDLGVBR3RNLEdBQUk5ZixLQUFLa2YsSUFBSyxDQUNaLElBQUszQixLQUFLdmQsS0FBS2tmLElBQ2JSLEVBQU1uQixHQUFLdmQsS0FBS2tmLElBQUkzQixHQUdsQm1CLEVBQU1hLE1BQ1JiLEVBQU1DLGtCQUNOamEsRUFBT3FQLGFBQWEsa0JBQW1CL1QsS0FBS3dmLE1BQVEsTUFHdER0TCxFQUFJc0ksTUFFUXRJLEVBQUU2TCxTQUFhN1osRUFBTTJZLEtBQy9CWSxFQUE2QnZaLEdBRXpCd1ksRUFBTVcsU0FBV25aLEVBQU00WSxLQUN6QjVZLEVBQU00WSxJQUF5QixJQUFNSixFQUFNVyxRQUFVLEtBRXJEWCxFQUFNVyxRQUFVLEVBQ2hCWCxFQUFNQyxtQkFHUkQsRUFBTXNCLFFBQVUsRUFFcEIsQ0FDRixFQUNJQyxFQUFpQixTQUF3QnZiLEVBQVF3YixHQUNuRCxJQUFJQyxFQUFRLENBQ1Z6YixPQUFRQSxFQUNSNGEsTUFBTyxHQUNQYyxPQUFRUixFQUNSUyxLQUFNdEIsR0FPUixPQUxBcmEsRUFBTzJaLE9BQVMsRUFBQXZlLEtBQUt3Z0IsS0FBS0MsU0FBUzdiLEdBRW5Dd2IsR0FBY0EsRUFBV2hQLE1BQU0sS0FBSzlTLFNBQVEsU0FBVW1mLEdBQ3BELE9BQU80QyxFQUFNRSxLQUFLOUMsRUFDcEIsSUFDTzRDLENBQ1QsRUFFSUssRUFBaUIsU0FBd0IzSCxFQUFNNEgsR0FDakQsSUFBSW5PLEVBQUk2SixFQUFLdUUsZ0JBQWtCdkUsRUFBS3VFLGlCQUFpQkQsR0FBTSxnQ0FBZ0N2akIsUUFBUSxTQUFVLFFBQVMyYixHQUFRc0QsRUFBS3hJLGNBQWNrRixHQUVqSixPQUFPdkcsR0FBS0EsRUFBRXBNLE1BQVFvTSxFQUFJNkosRUFBS3hJLGNBQWNrRixFQUMvQyxFQUNJOEgsRUFBdUIsU0FBU0EsRUFBcUJqYyxFQUFRdVosRUFBVTJDLEdBQ3pFLElBQUlDLEVBQUtDLGlCQUFpQnBjLEdBQzFCLE9BQU9tYyxFQUFHNUMsSUFBYTRDLEVBQUdFLGlCQUFpQjlDLEVBQVMvZ0IsUUFBUTZmLEVBQVUsT0FBTytDLGdCQUFrQmUsRUFBR0UsaUJBQWlCOUMsS0FBYzJDLEdBQXNCRCxFQUFxQmpjLEVBQVFzYyxFQUFpQi9DLElBQWFBLEVBQVUsSUFBTSxFQUNwTyxFQUNJZ0QsRUFBWSxxQkFBcUIvUCxNQUFNLEtBQ3ZDOFAsRUFBbUIsU0FBMEIvQyxFQUFVdmUsRUFBU3doQixHQUNsRSxJQUNJMUQsR0FESTlkLEdBQVc0YyxHQUNUcFcsTUFDTmdPLEVBQUksRUFFUixHQUFJK0osS0FBWVQsSUFBTTBELEVBQ3BCLE9BQU9qRCxFQUtULElBRkFBLEVBQVdBLEVBQVNrRCxPQUFPLEdBQUdDLGNBQWdCbkQsRUFBUzRCLE9BQU8sR0FFdkQzTCxPQUFTK00sRUFBVS9NLEdBQUsrSixLQUFZVCxLQUUzQyxPQUFPdEosRUFBSSxFQUFJLE1BQWMsSUFBTkEsRUFBVSxLQUFPQSxHQUFLLEVBQUkrTSxFQUFVL00sR0FBSyxJQUFNK0osQ0FDeEUsRUFDSW9ELEVBQVksV0F0TFcsb0JBQVh4Z0IsUUF1TFNBLE9BQU9zQyxXQUM1QitZLEVBQU9yYixPQUNQc2IsRUFBT0QsRUFBSy9ZLFNBQ1ppWixFQUFjRCxFQUFLL1ksZ0JBQ25Ca1osRUFBV2tFLEVBQWUsUUFBVSxDQUNsQ3RhLE1BQU8sQ0FBQyxHQUVPc2EsRUFBZSxPQUNoQzNCLEVBQWlCbUMsRUFBaUJuQyxHQUNsQ0MsRUFBdUJELEVBQWlCLFNBQ3hDdkMsRUFBU3BXLE1BQU1vYixRQUFVLDJEQUV6QjdFLElBQWdCdUUsRUFBaUIsZUFDakN4RSxFQUFhLEVBQUExYyxLQUFLd2dCLEtBQUtpQixVQUN2QmxGLEVBQWlCLEVBRXJCLEVBQ0ltRixFQUFlLFNBQVNBLEVBQWFDLEdBRXZDLElBSUlDLEVBSkFuQyxFQUFNaUIsRUFBZSxNQUFPeGdCLEtBQUsyaEIsaUJBQW1CM2hCLEtBQUsyaEIsZ0JBQWdCcGdCLGFBQWEsVUFBWSw4QkFDbEdxZ0IsRUFBWTVoQixLQUFLbVMsV0FDakIwUCxFQUFhN2hCLEtBQUs4aEIsWUFDbEJDLEVBQVMvaEIsS0FBS2tHLE1BQU1vYixRQVF4QixHQUxBbEYsRUFBWTNOLFlBQVk4USxHQUV4QkEsRUFBSTlRLFlBQVl6TyxNQUNoQkEsS0FBS2tHLE1BQU04YixRQUFVLFFBRWpCUCxFQUNGLElBQ0VDLEVBQU8xaEIsS0FBS2lpQixVQUNaamlCLEtBQUtraUIsVUFBWWxpQixLQUFLaWlCLFFBRXRCamlCLEtBQUtpaUIsUUFBVVQsQ0FDakIsQ0FBRSxNQUFPbFAsR0FBSSxNQUNKdFMsS0FBS2tpQixZQUNkUixFQUFPMWhCLEtBQUtraUIsYUFjZCxPQVhJTixJQUNFQyxFQUNGRCxFQUFVTyxhQUFhbmlCLEtBQU02aEIsR0FFN0JELEVBQVVuVCxZQUFZek8sT0FJMUJvYyxFQUFZM1QsWUFBWThXLEdBRXhCdmYsS0FBS2tHLE1BQU1vYixRQUFVUyxFQUNkTCxDQUNULEVBQ0lVLEVBQXlCLFNBQWdDMWQsRUFBUTJkLEdBR25FLElBRkEsSUFBSW5PLEVBQUltTyxFQUFnQjFrQixPQUVqQnVXLEtBQ0wsR0FBSXhQLEVBQU80ZCxhQUFhRCxFQUFnQm5PLElBQ3RDLE9BQU94UCxFQUFPbkQsYUFBYThnQixFQUFnQm5PLEdBR2pELEVBQ0lxTyxFQUFXLFNBQWtCN2QsR0FDL0IsSUFBSStDLEVBRUosSUFDRUEsRUFBUy9DLEVBQU91ZCxTQUNsQixDQUFFLE1BQU9qSCxHQUNQdlQsRUFBUytaLEVBQWFuYyxLQUFLWCxHQUFRLEVBQ3JDLENBSUEsT0FGQStDLElBQVdBLEVBQU9HLE9BQVNILEVBQU9lLFNBQVc5RCxFQUFPdWQsVUFBWVQsSUFBaUIvWixFQUFTK1osRUFBYW5jLEtBQUtYLEdBQVEsS0FFN0crQyxHQUFXQSxFQUFPRyxPQUFVSCxFQUFPVCxHQUFNUyxFQUFPUixFQUtuRFEsRUFMdUQsQ0FDekRULEdBQUlvYixFQUF1QjFkLEVBQVEsQ0FBQyxJQUFLLEtBQU0sUUFBVSxFQUN6RHVDLEdBQUltYixFQUF1QjFkLEVBQVEsQ0FBQyxJQUFLLEtBQU0sUUFBVSxFQUN6RGtELE1BQU8sRUFDUFksT0FBUSxFQUVaLEVBQ0lnYSxFQUFTLFNBQWdCbFEsR0FDM0IsU0FBVUEsRUFBRW1RLFFBQVluUSxFQUFFSCxhQUFjRyxFQUFFcVAsa0JBQW9CWSxFQUFTalEsR0FDekUsRUFFQW9RLEVBQWtCLFNBQXlCaGUsRUFBUXVaLEdBQ2pELEdBQUlBLEVBQVUsQ0FDWixJQUNJMEUsRUFEQXpjLEVBQVF4QixFQUFPd0IsTUFHZitYLEtBQVl2QixHQUFtQnVCLElBQWFhLElBQzlDYixFQUFXWSxHQUdUM1ksRUFBTXlaLGdCQUdZLFFBRnBCZ0QsRUFBYzFFLEVBQVM0QixPQUFPLEVBQUcsS0FFcUIsV0FBMUI1QixFQUFTNEIsT0FBTyxFQUFHLEtBRTdDNUIsRUFBVyxJQUFNQSxHQUduQi9YLEVBQU15WixlQUErQixPQUFoQmdELEVBQXVCMUUsRUFBV0EsRUFBUy9nQixRQUFRNmYsRUFBVSxPQUFPK0MsZ0JBR3pGNVosRUFBTTBjLGdCQUFnQjNFLEVBRTFCLENBQ0YsRUFDSTRFLEVBQW9CLFNBQTJCQyxFQUFRcGUsRUFBUXVaLEVBQVU4RSxFQUFXOWEsRUFBSythLEdBQzNGLElBQUlDLEVBQUssSUFBSSxFQUFBQyxVQUFVSixFQUFPSyxJQUFLemUsRUFBUXVaLEVBQVUsRUFBRyxFQUFHK0UsRUFBZWpGLEVBQW1DRCxHQU83RyxPQU5BZ0YsRUFBT0ssSUFBTUYsRUFDYkEsRUFBRzVWLEVBQUkwVixFQUNQRSxFQUFHM1EsRUFBSXJLLEVBRVA2YSxFQUFPTSxPQUFPNWxCLEtBQUt5Z0IsR0FFWmdGLENBQ1QsRUFDSUksRUFBdUIsQ0FDekJDLElBQUssRUFDTEMsSUFBSyxFQUNMQyxLQUFNLEdBRUpDLEVBQXNCLENBQ3hCQyxLQUFNLEVBQ05DLEtBQU0sR0FHUkMsRUFBaUIsU0FBU0EsRUFBZWxmLEVBQVF1WixFQUFVMVUsRUFBT3NhLEdBQ2hFLElBVUlDLEVBQ0FDLEVBQ0FyRixFQUNBc0YsRUFiQUMsRUFBV0MsV0FBVzNhLElBQVUsRUFDaEM0YSxHQUFXNWEsRUFBUSxJQUFJaU0sT0FBT3FLLFFBQVFvRSxFQUFXLElBQUl0bUIsU0FBVyxLQUVwRXVJLEVBQVFvVyxFQUFTcFcsTUFDYmtlLEVBQWFwSCxFQUFlamdCLEtBQUtraEIsR0FDakNvRyxFQUE2QyxRQUFqQzNmLEVBQU80ZixRQUFReEUsY0FDM0J5RSxHQUFtQkYsRUFBWSxTQUFXLFdBQWFELEVBQWEsUUFBVSxVQUM5RUksRUFBUyxJQUNUQyxFQUFvQixPQUFUWixFQUNYYSxFQUFxQixNQUFUYixFQU1oQixHQUFJQSxJQUFTTSxJQUFZRixHQUFZWixFQUFxQlEsSUFBU1IsRUFBcUJjLEdBQ3RGLE9BQU9GLEVBTVQsR0FIWSxPQUFaRSxJQUFxQk0sSUFBYVIsRUFBV0wsRUFBZWxmLEVBQVF1WixFQUFVMVUsRUFBTyxPQUNyRnlhLEVBQVF0ZixFQUFPK2QsUUFBVUQsRUFBTzlkLElBRTNCZ2dCLEdBQXlCLE1BQVpQLEtBQXFCekgsRUFBZ0J1QixLQUFjQSxFQUFTM2dCLFFBQVEsVUFFcEYsT0FEQXdtQixFQUFLRSxFQUFRdGYsRUFBT3VkLFVBQVVtQyxFQUFhLFFBQVUsVUFBWTFmLEVBQU82ZixJQUNqRSxJQUFBSSxRQUFPRCxFQUFZVCxFQUFXSCxFQUFLVSxFQUFTUCxFQUFXLElBQU1ILEdBZ0J0RSxHQWJBNWQsRUFBTWtlLEVBQWEsUUFBVSxVQUFZSSxHQUFVQyxFQUFXTixFQUFVTixHQUN4RUUsR0FBVTlGLEVBQVMzZ0IsUUFBUSxVQUFxQixPQUFUdW1CLEdBQWlCbmYsRUFBTytKLGNBQWdCNFYsRUFBWTNmLEVBQVNBLEVBQU95TixXQUV2RzZSLElBQ0ZELEdBQVVyZixFQUFPaWQsaUJBQW1CLENBQUMsR0FBR3hQLFlBR3JDNFIsR0FBVUEsSUFBVzVILEdBQVM0SCxFQUFPdFYsY0FDeENzVixFQUFTNUgsRUFBSzNOLE9BR2hCa1EsRUFBUXFGLEVBQU8xRixRQUVGcUcsR0FBYWhHLEVBQU05VyxPQUFTd2MsR0FBYzFGLEVBQU1rRyxPQUFTLEVBQUFDLFFBQVFELE9BQVNsRyxFQUFNc0IsUUFDM0YsT0FBTyxJQUFBMkUsUUFBT1YsRUFBV3ZGLEVBQU05VyxNQUFRNGMsR0FFdkMsSUFBSUUsR0FBMkIsV0FBYnpHLEdBQXNDLFVBQWJBLEdBT3hDeUcsR0FBeUIsTUFBWlAsS0FBcUJWLEVBQW9COUMsRUFBcUJvRCxFQUFRLGNBQWdCN2QsRUFBTXFDLFNBQVdvWSxFQUFxQmpjLEVBQVEsYUFDbEpxZixJQUFXcmYsSUFBV3dCLEVBQU1xQyxTQUFXLFVBRXZDd2IsRUFBT3RWLFlBQVk2TixHQUNuQndILEVBQUt4SCxFQUFTaUksR0FDZFIsRUFBT3RiLFlBQVk2VCxHQUNuQnBXLEVBQU1xQyxTQUFXLGVBYitDLENBRWhFLElBQUk0TCxFQUFJelAsRUFBT3dCLE1BQU0rWCxHQUNyQnZaLEVBQU93QixNQUFNK1gsR0FBWXVHLEVBQVNYLEVBQ2xDQyxFQUFLcGYsRUFBTzZmLEdBQ1pwUSxFQUFJelAsRUFBT3dCLE1BQU0rWCxHQUFZOUosRUFBSXVPLEVBQWdCaGUsRUFBUXVaLEVBQzNELENBaUJGLE9BUE1tRyxHQUFjTSxLQUNoQmhHLEdBQVEsSUFBQW9HLFdBQVVmLElBQ1phLEtBQU8sRUFBQUMsUUFBUUQsS0FDckJsRyxFQUFNOVcsTUFBUW1jLEVBQU9RLEtBSWxCLElBQUFJLFFBQU9GLEVBQVdYLEVBQUtHLEVBQVdPLEVBQVNWLEdBQU1HLEVBQVdPLEVBQVNWLEVBQUtHLEVBQVcsRUFDOUYsRUFDSTdFLEVBQU8sU0FBYzFhLEVBQVF1WixFQUFVNEYsRUFBTTdELEdBQy9DLElBQUl6VyxFQXNCSixPQXJCQThTLEdBQWtCZ0YsSUFFZHBELEtBQVlmLEdBQWlDLGNBQWJlLEtBQ2xDQSxFQUFXZixFQUFpQmUsSUFFZDNnQixRQUFRLE9BQ3BCMmdCLEVBQVdBLEVBQVMvTSxNQUFNLEtBQUssSUFJL0J3TCxFQUFnQnVCLElBQTBCLGNBQWJBLEdBQy9CMVUsRUFBUXdiLEdBQWdCcmdCLEVBQVFzYixHQUNoQ3pXLEVBQXFCLG9CQUFiMFUsRUFBaUMxVSxFQUFNMFUsR0FBWTFVLEVBQU1nVyxJQUFNaFcsRUFBTXliLE9BQVNDLEdBQWN0RSxFQUFxQmpjLEVBQVFvYSxJQUF5QixJQUFNdlYsRUFBTThWLFFBQVUsU0FFaEw5VixFQUFRN0UsRUFBT3dCLE1BQU0rWCxLQUVHLFNBQVYxVSxHQUFvQnlXLEtBQWF6VyxFQUFRLElBQUlqTSxRQUFRLFlBQ2pFaU0sRUFBUTJiLEdBQWNqSCxJQUFhaUgsR0FBY2pILEdBQVV2WixFQUFRdVosRUFBVTRGLElBQVNsRCxFQUFxQmpjLEVBQVF1WixLQUFhLElBQUFrSCxjQUFhemdCLEVBQVF1WixLQUEyQixZQUFiQSxFQUF5QixFQUFJLElBSTdMNEYsTUFBV3RhLEVBQVEsSUFBSWlNLE9BQU9sWSxRQUFRLEtBQU9zbUIsRUFBZWxmLEVBQVF1WixFQUFVMVUsRUFBT3NhLEdBQVFBLEVBQU90YSxDQUM3RyxFQUNJNmIsRUFBeUIsU0FBZ0MxZ0IsRUFBUTJnQixFQUFNemUsRUFBT3FCLEdBRWhGLElBQUtyQixHQUFtQixTQUFWQSxFQUFrQixDQUU5QixJQUFJMlcsRUFBSXlELEVBQWlCcUUsRUFBTTNnQixFQUFRLEdBQ25DOFksRUFBSUQsR0FBS29ELEVBQXFCamMsRUFBUTZZLEVBQUcsR0FFekNDLEdBQUtBLElBQU01VyxHQUNieWUsRUFBTzlILEVBQ1AzVyxFQUFRNFcsR0FDVSxnQkFBVDZILElBQ1R6ZSxFQUFRK1osRUFBcUJqYyxFQUFRLGtCQUV6QyxDQUVBLElBR0kwSSxFQUNBa1ksRUFDQUMsRUFDQUMsRUFDQXZpQixFQUNBd2lCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBYkE3QyxFQUFLLElBQUksRUFBQUMsVUFBVWxqQixLQUFLbWpCLElBQUt6ZSxFQUFPd0IsTUFBT21mLEVBQU0sRUFBRyxFQUFHLEVBQUFVLHNCQUN2RDNmLEVBQVEsRUFDUjRmLEVBQWEsRUFvQ2pCLEdBdkJBL0MsRUFBRzVWLEVBQUl6RyxFQUNQcWMsRUFBRzNRLEVBQUlySyxFQUNQckIsR0FBUyxHQUlHLFVBRlpxQixHQUFPLE1BR0x3ZCxFQUFhL2dCLEVBQU93QixNQUFNbWYsR0FDMUIzZ0IsRUFBT3dCLE1BQU1tZixHQUFRcGQsRUFDckJBLEVBQU0wWSxFQUFxQmpjLEVBQVEyZ0IsSUFBU3BkLEVBQzVDd2QsRUFBYS9nQixFQUFPd0IsTUFBTW1mLEdBQVFJLEVBQWEvQyxFQUFnQmhlLEVBQVEyZ0IsSUFHekVqWSxFQUFJLENBQUN4RyxFQUFPcUIsSUFFWixJQUFBZ2Usb0JBQW1CN1ksR0FJbkJuRixFQUFNbUYsRUFBRSxHQUNSbVksR0FGQTNlLEVBQVF3RyxFQUFFLElBRVVqUSxNQUFNLEVBQUErb0Isa0JBQW9CLElBQ2xDamUsRUFBSTlLLE1BQU0sRUFBQStvQixrQkFBb0IsSUFFNUJ2b0IsT0FBUSxDQUNwQixLQUFPMm5CLEVBQVMsRUFBQVksZ0JBQWdCQyxLQUFLbGUsSUFDbkN5ZCxFQUFXSixFQUFPLEdBQ2xCTSxFQUFRM2QsRUFBSW1lLFVBQVVoZ0IsRUFBT2tmLEVBQU9sZixPQUVoQ25ELEVBQ0ZBLEdBQVNBLEVBQVEsR0FBSyxFQUNRLFVBQXJCMmlCLEVBQU0vRixRQUFRLElBQXVDLFVBQXJCK0YsRUFBTS9GLFFBQVEsS0FDdkQ1YyxFQUFRLEdBR055aUIsS0FBY0QsRUFBYUYsRUFBWVMsTUFBaUIsTUFDMURSLEVBQVd0QixXQUFXdUIsSUFBZSxFQUNyQ0ssRUFBWUwsRUFBVzVGLFFBQVEyRixFQUFXLElBQUk3bkIsUUFDdkIsTUFBdkIrbkIsRUFBU3ZFLE9BQU8sS0FBZXVFLEdBQVcsSUFBQVcsZ0JBQWViLEVBQVVFLEdBQVlJLEdBQy9FSCxFQUFTekIsV0FBV3dCLEdBQ3BCRyxFQUFVSCxFQUFTN0YsUUFBUThGLEVBQVMsSUFBSWhvQixRQUN4Q3lJLEVBQVEsRUFBQThmLGdCQUFnQkksVUFBWVQsRUFBUWxvQixPQUV2Q2tvQixJQUVIQSxFQUFVQSxHQUFXLEVBQUFVLFFBQVFDLE1BQU1uQixJQUFTUyxFQUV4QzFmLElBQVU2QixFQUFJdEssU0FDaEJzSyxHQUFPNGQsRUFDUDVDLEVBQUczUSxHQUFLdVQsSUFJUkMsSUFBY0QsSUFDaEJMLEVBQVc1QixFQUFlbGYsRUFBUTJnQixFQUFNSSxFQUFZSSxJQUFZLEdBSWxFNUMsRUFBR0UsSUFBTSxDQUNQc0QsTUFBT3hELEVBQUdFLElBQ1Y1RixFQUFHcUksR0FBd0IsSUFBZkksRUFBbUJKLEVBQVEsSUFFdkNwSSxFQUFHZ0ksRUFDSC9ILEVBQUdrSSxFQUFTSCxFQUNaek0sRUFBRzlWLEdBQVNBLEVBQVEsR0FBYyxXQUFUb2lCLEVBQW9CbGIsS0FBSzRILE1BQVEsSUFLaEVrUixFQUFHeEYsRUFBSXJYLEVBQVE2QixFQUFJdEssT0FBU3NLLEVBQUltZSxVQUFVaGdCLEVBQU82QixFQUFJdEssUUFBVSxFQUNqRSxNQUNFc2xCLEVBQUd5RCxFQUFhLFlBQVRyQixHQUE4QixTQUFScGQsRUFBaUI4VixFQUFtQ0QsRUFPbkYsT0FKQSxFQUFBNkksUUFBUTVwQixLQUFLa0wsS0FBU2diLEVBQUczUSxFQUFJLEdBRTdCdFMsS0FBS21qQixJQUFNRixFQUVKQSxDQUNULEVBQ0kyRCxHQUFvQixDQUN0QnRjLElBQUssS0FDTHVjLE9BQVEsT0FDUnhjLEtBQU0sS0FDTnljLE1BQU8sT0FDUEMsT0FBUSxPQWtCTkMsR0FBb0IsU0FBMkI1SixFQUFPQyxHQUN4RCxHQUFJQSxFQUFLNEosT0FBUzVKLEVBQUs0SixNQUFNQyxRQUFVN0osRUFBSzRKLE1BQU1FLEtBQU0sQ0FDdEQsSUFJSTlCLEVBQ0ErQixFQUNBbFQsRUFOQXhQLEVBQVMyWSxFQUFLQyxFQUNkcFgsRUFBUXhCLEVBQU93QixNQUNmb1osRUFBUWpDLEVBQUtLLEVBQ2JnQixFQUFRaGEsRUFBTzJaLE1BS25CLEdBQWMsUUFBVmlCLElBQTZCLElBQVZBLEVBQ3JCcFosRUFBTW9iLFFBQVUsR0FDaEI4RixFQUFrQixPQUtsQixJQUZBbFQsR0FEQW9MLEVBQVFBLEVBQU1wTyxNQUFNLE1BQ1Z2VCxTQUVEdVcsR0FBSyxHQUNabVIsRUFBTy9GLEVBQU1wTCxHQUVUd0ksRUFBZ0IySSxLQUNsQitCLEVBQWtCLEVBQ2xCL0IsRUFBZ0Isb0JBQVRBLEVBQTZCdkcsRUFBdUJELEdBRzdENkQsRUFBZ0JoZSxFQUFRMmdCLEdBSXhCK0IsSUFDRjFFLEVBQWdCaGUsRUFBUW1hLEdBRXBCSCxJQUNGQSxFQUFNYSxLQUFPN2EsRUFBT2tlLGdCQUFnQixhQUVwQ21DLEdBQWdCcmdCLEVBQVEsR0FHeEJnYSxFQUFNc0IsUUFBVSxFQUVoQlAsRUFBNkJ2WixJQUduQyxDQUNGLEVBRUFnZixHQUFnQixDQUNkbUMsV0FBWSxTQUFvQnZFLEVBQVFwZSxFQUFRdVosRUFBVXlILEVBQVV1QixHQUNsRSxHQUFtQixnQkFBZkEsRUFBTTVKLEtBQXdCLENBQ2hDLElBQUk0RixFQUFLSCxFQUFPSyxJQUFNLElBQUksRUFBQUQsVUFBVUosRUFBT0ssSUFBS3plLEVBQVF1WixFQUFVLEVBQUcsRUFBRytJLElBT3hFLE9BTkEvRCxFQUFHdkYsRUFBSWdJLEVBQ1B6QyxFQUFHcUUsSUFBTSxHQUNUckUsRUFBR2dFLE1BQVFBLEVBRVhuRSxFQUFPTSxPQUFPNWxCLEtBQUt5Z0IsR0FFWixDQUNULENBQ0YsR0F3RUZzSixHQUFvQixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUNoQ0MsR0FBd0IsQ0FBQyxFQUN6QkMsR0FBbUIsU0FBMEJsZSxHQUMvQyxNQUFpQiw2QkFBVkEsR0FBa0QsU0FBVkEsSUFBcUJBLENBQ3RFLEVBQ0ltZSxHQUFxQyxTQUE0Q2hqQixHQUNuRixJQUFJaWpCLEVBQWVoSCxFQUFxQmpjLEVBQVFtYSxHQUVoRCxPQUFPNEksR0FBaUJFLEdBQWdCSixHQUFvQkksRUFBYTlILE9BQU8sR0FBRzFpQixNQUFNLEVBQUF5cUIsU0FBUzVpQixJQUFJLEVBQUEyZixPQUN4RyxFQUNJa0QsR0FBYSxTQUFvQm5qQixFQUFRb2pCLEdBQzNDLElBR0kvRCxFQUNBakMsRUFDQWlHLEVBQ0FDLEVBTkF0SixFQUFRaGEsRUFBTzJaLFFBQVMsSUFBQXlHLFdBQVVwZ0IsR0FDbEN3QixFQUFReEIsRUFBT3dCLE1BQ2YraEIsRUFBU1AsR0FBbUNoakIsR0FNaEQsT0FBSWdhLEVBQU1hLEtBQU83YSxFQUFPbkQsYUFBYSxhQUlQLGlCQUQ1QjBtQixFQUFTLEVBRlRGLEVBQU9yakIsRUFBT3lhLFVBQVUrSSxRQUFRQyxjQUFjRixRQUUvQjdhLEVBQUcyYSxFQUFLMWEsRUFBRzBhLEVBQUt0SyxFQUFHc0ssRUFBS0ssRUFBR0wsRUFBS3pWLEVBQUd5VixFQUFLTSxJQUN6Q3hxQixLQUFLLEtBQXlCMHBCLEdBQW9CVSxHQUN2REEsSUFBV1YsSUFBc0I3aUIsRUFBTzRqQixjQUFnQjVqQixJQUFXMFgsR0FBZ0JzQyxFQUFNYSxNQUdsR3dJLEVBQU83aEIsRUFBTThiLFFBQ2I5YixFQUFNOGIsUUFBVSxTQUNoQitCLEVBQVNyZixFQUFPeU4sYUFFQXpOLEVBQU80akIsZUFFckJOLEVBQWEsRUFFYmxHLEVBQWNwZCxFQUFPNmpCLG1CQUVyQm5NLEVBQVkzTixZQUFZL0osSUFJMUJ1akIsRUFBU1AsR0FBbUNoakIsR0FDNUNxakIsRUFBTzdoQixFQUFNOGIsUUFBVStGLEVBQU9yRixFQUFnQmhlLEVBQVEsV0FFbERzakIsSUFDRmxHLEVBQWNpQyxFQUFPNUIsYUFBYXpkLEVBQVFvZCxHQUFlaUMsRUFBU0EsRUFBT3RWLFlBQVkvSixHQUFVMFgsRUFBWTNULFlBQVkvRCxLQUlwSG9qQixHQUFXRyxFQUFPdHFCLE9BQVMsRUFBSSxDQUFDc3FCLEVBQU8sR0FBSUEsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxJQUFLQSxFQUFPLEtBQU9BLEVBQy9HLEVBQ0lPLEdBQWtCLFNBQXlCOWpCLEVBQVFzZ0IsRUFBUXlELEVBQWtCQyxFQUFRQyxFQUFhQyxHQUNwRyxJQWVJbmhCLEVBQ0FvaEIsRUFFQTVoQixFQWxCQXlYLEVBQVFoYSxFQUFPMlosTUFDZjRKLEVBQVNVLEdBQWVkLEdBQVduakIsR0FBUSxHQUMzQ29rQixFQUFhcEssRUFBTXFLLFNBQVcsRUFDOUJDLEVBQWF0SyxFQUFNdUssU0FBVyxFQUM5QkMsRUFBYXhLLEVBQU15SyxTQUFXLEVBQzlCQyxFQUFhMUssRUFBTTJLLFNBQVcsRUFDOUJqYyxFQUFJNmEsRUFBTyxHQUNYNWEsRUFBSTRhLEVBQU8sR0FDWHhLLEVBQUl3SyxFQUFPLEdBQ1hHLEVBQUlILEVBQU8sR0FDWHFCLEVBQUtyQixFQUFPLEdBQ1pzQixFQUFLdEIsRUFBTyxHQUNadUIsRUFBY3hFLEVBQU85VCxNQUFNLEtBQzNCNlgsRUFBVTdFLFdBQVdzRixFQUFZLEtBQU8sRUFDeENQLEVBQVUvRSxXQUFXc0YsRUFBWSxLQUFPLEVBTXZDZixFQU9NUixJQUFXVixLQUFzQnNCLEVBQWN6YixFQUFJZ2IsRUFBSS9hLEVBQUlvUSxLQUdwRXhXLEVBQUk4aEIsSUFBWTFiLEVBQUl3YixHQUFlSSxHQUFXN2IsRUFBSXliLElBQWdCemIsRUFBSW1jLEVBQUtsYyxFQUFJaWMsR0FBTVQsRUFDckZFLEVBRklBLEdBQVdYLEVBQUlTLEdBQWVJLElBQVl4TCxFQUFJb0wsSUFBZ0JwTCxFQUFJOEwsRUFBS25CLEVBQUlrQixHQUFNVCxFQUdyRkksRUFBVWhpQixJQVZWOGhCLEdBREF0aEIsRUFBUzhhLEVBQVM3ZCxJQUNEc0MsSUFBTXdpQixFQUFZLEdBQUdsc0IsUUFBUSxLQUFPeXJCLEVBQVUsSUFBTXRoQixFQUFPRyxNQUFRbWhCLEdBQ3BGRSxFQUFVeGhCLEVBQU9SLEtBQU91aUIsRUFBWSxJQUFNQSxFQUFZLElBQUlsc0IsUUFBUSxLQUFPMnJCLEVBQVUsSUFBTXhoQixFQUFPZSxPQUFTeWdCLElBWXZHUCxJQUFxQixJQUFYQSxHQUFvQmhLLEVBQU1nSyxRQUN0Q1ksRUFBS1AsRUFBVUQsRUFDZlMsRUFBS04sRUFBVUQsRUFDZnRLLEVBQU15SyxRQUFVRCxHQUFjSSxFQUFLbGMsRUFBSW1jLEVBQUs5TCxHQUFLNkwsRUFDakQ1SyxFQUFNMkssUUFBVUQsR0FBY0UsRUFBS2pjLEVBQUlrYyxFQUFLbkIsR0FBS21CLEdBRWpEN0ssRUFBTXlLLFFBQVV6SyxFQUFNMkssUUFBVSxFQUdsQzNLLEVBQU1xSyxRQUFVQSxFQUNoQnJLLEVBQU11SyxRQUFVQSxFQUNoQnZLLEVBQU1nSyxTQUFXQSxFQUNqQmhLLEVBQU1zRyxPQUFTQSxFQUNmdEcsRUFBTStKLG1CQUFxQkEsRUFDM0IvakIsRUFBT3dCLE1BQU00WSxHQUF3QixVQUVqQzhKLElBQ0YvRixFQUFrQitGLEVBQXlCbEssRUFBTyxVQUFXb0ssRUFBWUMsR0FFekVsRyxFQUFrQitGLEVBQXlCbEssRUFBTyxVQUFXc0ssRUFBWUMsR0FFekVwRyxFQUFrQitGLEVBQXlCbEssRUFBTyxVQUFXd0ssRUFBWXhLLEVBQU15SyxTQUUvRXRHLEVBQWtCK0YsRUFBeUJsSyxFQUFPLFVBQVcwSyxFQUFZMUssRUFBTTJLLFVBR2pGM2tCLEVBQU9xUCxhQUFhLGtCQUFtQmdWLEVBQVUsSUFBTUUsRUFDekQsRUFDSWxFLEdBQWtCLFNBQXlCcmdCLEVBQVFzYixHQUNyRCxJQUFJdEIsRUFBUWhhLEVBQU8yWixPQUFTLElBQUksRUFBQW9MLFFBQVEva0IsR0FFeEMsR0FBSSxNQUFPZ2EsSUFBVXNCLElBQVl0QixFQUFNc0IsUUFDckMsT0FBT3RCLEVBR1QsSUFNSTFYLEVBQ0FDLEVBQ0FnRCxFQUNBc1UsRUFDQUMsRUFDQXhVLEVBQ0EwZixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBL1osRUFDQWlaLEVBQ0FFLEVBQ0FoQixFQUNBNkIsRUFDQXZmLEVBQ0FXLEVBQ0FrQyxFQUNBQyxFQUNBb1EsRUFDQTJLLEVBQ0EyQixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQXJDQXZrQixFQUFReEIsRUFBT3dCLE1BQ2Z3a0IsRUFBaUJoTSxFQUFNSCxPQUFTLEVBQ2hDdUYsRUFBSyxLQUNMUixFQUFNLE1BQ056QyxFQUFLQyxpQkFBaUJwYyxHQUN0QnNnQixFQUFTckUsRUFBcUJqYyxFQUFRb2EsSUFBeUIsSUF5TW5FLE9BeEtBOVgsRUFBSUMsRUFBSWdELEVBQUlELEVBQVcwZixFQUFZQyxFQUFZQyxFQUFRQyxFQUFRL1osRUFBYyxFQUM3RXlPLEVBQVNDLEVBQVMsRUFDbEJFLEVBQU1hLE9BQVM3YSxFQUFPK2QsU0FBVUQsRUFBTzlkLElBRW5DbWMsRUFBR25CLFlBRWdCLFNBQWpCbUIsRUFBR25CLFdBQXFDLFNBQWJtQixFQUFHdlksT0FBa0MsU0FBZHVZLEVBQUc4SixTQUN2RHprQixFQUFNMlksSUFBb0MsU0FBakJnQyxFQUFHbkIsVUFBdUIsZ0JBQWtCbUIsRUFBR25CLFVBQVksUUFBUXhPLE1BQU0sS0FBS2xTLE1BQU0sRUFBRyxHQUFHbkIsS0FBSyxNQUFRLEtBQU8sS0FBcUIsU0FBZGdqQixFQUFHOEosT0FBb0IsVUFBWTlKLEVBQUc4SixPQUFTLEtBQU8sS0FBb0IsU0FBYjlKLEVBQUd2WSxNQUFtQixTQUFXdVksRUFBR3ZZLE1BQU00SSxNQUFNLEtBQUtyVCxLQUFLLEtBQU8sS0FBTyxLQUE4QixTQUF2QmdqQixFQUFHaEMsR0FBNkJnQyxFQUFHaEMsR0FBa0IsS0FHalYzWSxFQUFNb0MsTUFBUXBDLEVBQU15a0IsT0FBU3prQixFQUFNd1osVUFBWSxRQUdqRHVJLEVBQVNKLEdBQVduakIsRUFBUWdhLEVBQU1hLEtBRTlCYixFQUFNYSxNQUNKYixFQUFNc0IsU0FFUmtLLEVBQUt4bEIsRUFBT3VkLFVBQ1orQyxFQUFTdEcsRUFBTXFLLFFBQVVtQixFQUFHbGpCLEVBQUksT0FBUzBYLEVBQU11SyxRQUFVaUIsRUFBR2pqQixHQUFLLEtBQ2pFZ2pCLEVBQUssSUFFTEEsR0FBTWpLLEdBQVd0YixFQUFPbkQsYUFBYSxtQkFHdkNpbkIsR0FBZ0I5akIsRUFBUXVsQixHQUFNakYsSUFBVWlGLEdBQU12TCxFQUFNK0osa0JBQW1DLElBQWpCL0osRUFBTWdLLE9BQWtCVCxJQUdoR2MsRUFBVXJLLEVBQU1xSyxTQUFXLEVBQzNCRSxFQUFVdkssRUFBTXVLLFNBQVcsRUFFdkJoQixJQUFXVixLQUNibmEsRUFBSTZhLEVBQU8sR0FFWDVhLEVBQUk0YSxFQUFPLEdBRVh4SyxFQUFJd0ssRUFBTyxHQUVYRyxFQUFJSCxFQUFPLEdBRVhqaEIsRUFBSStpQixFQUFNOUIsRUFBTyxHQUNqQmhoQixFQUFJK2lCLEVBQU0vQixFQUFPLEdBRUssSUFBbEJBLEVBQU90cUIsUUFDVDRnQixFQUFTcFUsS0FBS21ELEtBQUtGLEVBQUlBLEVBQUlDLEVBQUlBLEdBQy9CbVIsRUFBU3JVLEtBQUttRCxLQUFLOGEsRUFBSUEsRUFBSTNLLEVBQUlBLEdBQy9CelQsRUFBV29ELEdBQUtDLEVBQUl3UCxFQUFPeFAsRUFBR0QsR0FBS3VQLEVBQVcsR0FFOUNpTixFQUFRbk0sR0FBSzJLLEVBQUl2TCxFQUFPWSxFQUFHMkssR0FBS3pMLEVBQVczUyxFQUFXLEtBQzVDd1UsR0FBVXJVLEtBQUttQyxJQUFJbkMsS0FBS0ksSUFBSXFmLEVBQVFoTixLQUUxQzhCLEVBQU1hLE1BQ1J2WSxHQUFLK2hCLEdBQVdBLEVBQVUzYixFQUFJNmIsRUFBVXhMLEdBQ3hDeFcsR0FBS2dpQixHQUFXRixFQUFVMWIsRUFBSTRiLEVBQVViLE1BSTFDcUMsRUFBTXhDLEVBQU8sR0FDYnNDLEVBQU10QyxFQUFPLEdBQ2JtQyxFQUFNbkMsRUFBTyxHQUNib0MsRUFBTXBDLEVBQU8sR0FDYnFDLEVBQU1yQyxFQUFPLElBQ2J1QyxFQUFNdkMsRUFBTyxJQUNiamhCLEVBQUlpaEIsRUFBTyxJQUNYaGhCLEVBQUlnaEIsRUFBTyxJQUNYaGUsRUFBSWdlLEVBQU8sSUFFWHlCLEdBREFJLEVBQVFqTixFQUFPNE4sRUFBS0gsSUFDQTNOLEVBRWhCbU4sSUFHRkcsRUFBS0YsR0FGTHhmLEVBQU1KLEtBQUtJLEtBQUt1ZixJQUVDTSxHQURqQmxmLEVBQU1mLEtBQUtlLEtBQUs0ZSxJQUVoQkksRUFBS0YsRUFBTXpmLEVBQU04ZixFQUFNbmYsRUFDdkJpZixFQUFLTSxFQUFNbGdCLEVBQU0rZixFQUFNcGYsRUFDdkJrZixFQUFNTCxHQUFPN2UsRUFBTWtmLEVBQU03ZixFQUN6QjhmLEVBQU1MLEdBQU85ZSxFQUFNbWYsRUFBTTlmLEVBQ3pCK2YsRUFBTUcsR0FBT3ZmLEVBQU1vZixFQUFNL2YsRUFDekJpZ0IsRUFBTUQsR0FBT3JmLEVBQU1zZixFQUFNamdCLEVBQ3pCd2YsRUFBTUUsRUFDTkQsRUFBTUUsRUFDTk8sRUFBTU4sR0FLUlIsR0FEQUcsRUFBUWpOLEdBQVFZLEVBQUc2TSxJQUNDM04sRUFFaEJtTixJQUNGdmYsRUFBTUosS0FBS0ksS0FBS3VmLEdBS2hCVSxFQUFNcEMsR0FKTmxkLEVBQU1mLEtBQUtlLEtBQUs0ZSxJQUlBVSxFQUFNamdCLEVBQ3RCNkMsRUFKQTZjLEVBQUs3YyxFQUFJN0MsRUFBTTZmLEVBQU1sZixFQUtyQm1DLEVBSkE2YyxFQUFLN2MsRUFBSTlDLEVBQU04ZixFQUFNbmYsRUFLckJ1UyxFQUpBME0sRUFBSzFNLEVBQUlsVCxFQUFNK2YsRUFBTXBmLEdBU3ZCbEIsR0FEQThmLEVBQVFqTixFQUFPeFAsRUFBR0QsSUFDQ3VQLEVBRWZtTixJQUdGRyxFQUFLN2MsR0FGTDdDLEVBQU1KLEtBQUtJLElBQUl1ZixJQUVBemMsR0FEZm5DLEVBQU1mLEtBQUtlLElBQUk0ZSxJQUVmSSxFQUFLSCxFQUFNeGYsRUFBTXlmLEVBQU05ZSxFQUN2Qm1DLEVBQUlBLEVBQUk5QyxFQUFNNkMsRUFBSWxDLEVBQ2xCOGUsRUFBTUEsRUFBTXpmLEVBQU13ZixFQUFNN2UsRUFDeEJrQyxFQUFJNmMsRUFDSkYsRUFBTUcsR0FHSlIsR0FBYXZmLEtBQUttQyxJQUFJb2QsR0FBYXZmLEtBQUttQyxJQUFJdEMsR0FBWSxRQUUxRDBmLEVBQVkxZixFQUFXLEVBQ3ZCMmYsRUFBWSxJQUFNQSxHQUdwQnBMLEdBQVMsSUFBQW9HLFFBQU94YSxLQUFLbUQsS0FBS0YsRUFBSUEsRUFBSUMsRUFBSUEsRUFBSW9RLEVBQUlBLElBQzlDZSxHQUFTLElBQUFtRyxRQUFPeGEsS0FBS21ELEtBQUswYyxFQUFNQSxFQUFNUyxFQUFNQSxJQUM1Q1gsRUFBUWpOLEVBQU9rTixFQUFLQyxHQUNwQkosRUFBUXpmLEtBQUttQyxJQUFJd2QsR0FBUyxLQUFTQSxFQUFRbk4sRUFBVyxFQUN0RDdNLEVBQWMwYSxFQUFNLEdBQUtBLEVBQU0sR0FBS0EsRUFBTUEsR0FBTyxHQUcvQzlMLEVBQU1hLE1BRVIwSyxFQUFLdmxCLEVBQU9uRCxhQUFhLGFBQ3pCbWQsRUFBTWtNLFNBQVdsbUIsRUFBT3FQLGFBQWEsWUFBYSxNQUFRMFQsR0FBaUI5RyxFQUFxQmpjLEVBQVFtYSxJQUN4R29MLEdBQU12bEIsRUFBT3FQLGFBQWEsWUFBYWtXLEtBSXZDOWYsS0FBS21DLElBQUlzZCxHQUFTLElBQU16ZixLQUFLbUMsSUFBSXNkLEdBQVMsTUFDeENjLEdBQ0ZuTSxJQUFXLEVBQ1hxTCxHQUFTNWYsR0FBWSxFQUFJLEtBQU8sSUFDaENBLEdBQVlBLEdBQVksRUFBSSxLQUFPLE1BRW5Dd1UsSUFBVyxFQUNYb0wsR0FBU0EsR0FBUyxFQUFJLEtBQU8sTUFJakM1SixFQUFVQSxHQUFXdEIsRUFBTXNCLFFBQzNCdEIsRUFBTTFYLEVBQUlBLElBQU0wWCxFQUFNbU0sU0FBVzdqQixLQUFPZ1osR0FBV3RCLEVBQU1tTSxXQUFhMWdCLEtBQUs0SCxNQUFNck4sRUFBT29tQixZQUFjLEtBQU8zZ0IsS0FBSzRILE9BQU8vSyxJQUFNLEdBQUssS0FBT3RDLEVBQU9vbUIsWUFBY3BNLEVBQU1tTSxTQUFXLElBQU0sR0FBSy9HLEVBQzVMcEYsRUFBTXpYLEVBQUlBLElBQU15WCxFQUFNcU0sU0FBVzlqQixLQUFPK1ksR0FBV3RCLEVBQU1xTSxXQUFhNWdCLEtBQUs0SCxNQUFNck4sRUFBT3NtQixhQUFlLEtBQU83Z0IsS0FBSzRILE9BQU85SyxJQUFNLEdBQUssS0FBT3ZDLEVBQU9zbUIsYUFBZXRNLEVBQU1xTSxTQUFXLElBQU0sR0FBS2pILEVBQzlMcEYsRUFBTXpVLEVBQUlBLEVBQUk2WixFQUNkcEYsRUFBTUgsUUFBUyxJQUFBb0csUUFBT3BHLEdBQ3RCRyxFQUFNRixRQUFTLElBQUFtRyxRQUFPbkcsR0FDdEJFLEVBQU0xVSxVQUFXLElBQUEyYSxRQUFPM2EsR0FBWXNaLEVBQ3BDNUUsRUFBTWdMLFdBQVksSUFBQS9FLFFBQU8rRSxHQUFhcEcsRUFDdEM1RSxFQUFNaUwsV0FBWSxJQUFBaEYsUUFBT2dGLEdBQWFyRyxFQUN0QzVFLEVBQU1rTCxNQUFRQSxFQUFRdEcsRUFDdEI1RSxFQUFNbUwsTUFBUUEsRUFBUXZHLEVBQ3RCNUUsRUFBTXVNLHFCQUF1Qm5iLEVBQWNnVSxHQUV2Q3BGLEVBQU1XLFFBQVU2RSxXQUFXYyxFQUFPOVQsTUFBTSxLQUFLLE1BQVE4TyxHQUFXdEIsRUFBTVcsU0FBVyxLQUNuRm5aLEVBQU00WSxHQUF3Qm1HLEdBQWNELElBRzlDdEcsRUFBTXlLLFFBQVV6SyxFQUFNMkssUUFBVSxFQUNoQzNLLEVBQU13TSxRQUFVLEVBQUEzRSxRQUFRMkUsUUFDeEJ4TSxFQUFNQyxnQkFBa0JELEVBQU1hLElBQU00TCxHQUF1QjFPLEVBQWMyTyxHQUF1QkMsR0FDaEczTSxFQUFNc0IsUUFBVSxFQUNUdEIsQ0FDVCxFQUNJdUcsR0FBZ0IsU0FBdUIxYixHQUN6QyxPQUFRQSxFQUFRQSxFQUFNMkgsTUFBTSxNQUFNLEdBQUssSUFBTTNILEVBQU0sRUFDckQsRUFFQStoQixHQUFrQixTQUF5QjVtQixFQUFRa0MsRUFBTzJDLEdBQ3hELElBQUlzYSxHQUFPLElBQUEwSCxTQUFRM2tCLEdBQ25CLE9BQU8sSUFBQStkLFFBQU9ULFdBQVd0ZCxHQUFTc2QsV0FBV04sRUFBZWxmLEVBQVEsSUFBSzZFLEVBQVEsS0FBTXNhLEtBQVVBLENBQ25HLEVBQ0l3SCxHQUF5QixTQUFnQ2pPLEVBQU9zQixHQUNsRUEsRUFBTXpVLEVBQUksTUFDVnlVLEVBQU1pTCxVQUFZakwsRUFBTWdMLFVBQVksT0FDcENoTCxFQUFNd00sUUFBVSxFQUVoQkUsR0FBcUJoTyxFQUFPc0IsRUFDOUIsRUFDSThNLEdBQVcsT0FDWEMsR0FBVSxNQUNWQyxHQUFrQixLQUNsQk4sR0FBdUIsU0FBOEJoTyxFQUFPc0IsR0FDOUQsSUFBSWlOLEVBQU9qTixHQUFTMWUsS0FDaEI2cUIsRUFBV2MsRUFBS2QsU0FDaEJFLEVBQVdZLEVBQUtaLFNBQ2hCL2pCLEVBQUkya0IsRUFBSzNrQixFQUNUQyxFQUFJMGtCLEVBQUsxa0IsRUFDVGdELEVBQUkwaEIsRUFBSzFoQixFQUNURCxFQUFXMmhCLEVBQUszaEIsU0FDaEIyZixFQUFZZ0MsRUFBS2hDLFVBQ2pCRCxFQUFZaUMsRUFBS2pDLFVBQ2pCRSxFQUFRK0IsRUFBSy9CLE1BQ2JDLEVBQVE4QixFQUFLOUIsTUFDYnRMLEVBQVNvTixFQUFLcE4sT0FDZEMsRUFBU21OLEVBQUtuTixPQUNkeU0sRUFBdUJVLEVBQUtWLHFCQUM1QkMsRUFBVVMsRUFBS1QsUUFDZnhtQixFQUFTaW5CLEVBQUtqbkIsT0FDZDJhLEVBQVVzTSxFQUFLdE0sUUFDZnVNLEVBQWEsR0FDYkMsRUFBb0IsU0FBWlgsR0FBc0I5TixHQUFtQixJQUFWQSxJQUEyQixJQUFaOE4sRUFHMUQsR0FBSTdMLElBQVlxSyxJQUFjOEIsSUFBWTdCLElBQWM2QixJQUFXLENBQ2pFLElBR0lqaEIsRUFIQXVmLEVBQVE1RixXQUFXeUYsR0FBYS9NLEVBQ2hDd04sRUFBTWpnQixLQUFLZSxJQUFJNGUsR0FDZlEsRUFBTW5nQixLQUFLSSxJQUFJdWYsR0FHbkJBLEVBQVE1RixXQUFXd0YsR0FBYTlNLEVBQ2hDclMsRUFBTUosS0FBS0ksSUFBSXVmLEdBQ2Y5aUIsRUFBSXNrQixHQUFnQjVtQixFQUFRc0MsRUFBR29qQixFQUFNN2YsR0FBTzhVLEdBQzVDcFksRUFBSXFrQixHQUFnQjVtQixFQUFRdUMsR0FBSWtELEtBQUtlLElBQUk0ZSxJQUFVekssR0FDbkRwVixFQUFJcWhCLEdBQWdCNW1CLEVBQVF1RixFQUFHcWdCLEVBQU0vZixHQUFPOFUsRUFBVUEsRUFDeEQsQ0FFSTRMLElBQXlCUSxLQUMzQkcsR0FBYyxlQUFpQlgsRUFBdUJTLEtBR3BEYixHQUFZRSxLQUNkYSxHQUFjLGFBQWVmLEVBQVcsTUFBUUUsRUFBVyxRQUd6RGMsR0FBUzdrQixJQUFNeWtCLElBQVd4a0IsSUFBTXdrQixJQUFXeGhCLElBQU13aEIsTUFDbkRHLEdBQWMzaEIsSUFBTXdoQixJQUFXSSxFQUFRLGVBQWlCN2tCLEVBQUksS0FBT0MsRUFBSSxLQUFPZ0QsRUFBSSxLQUFPLGFBQWVqRCxFQUFJLEtBQU9DLEVBQUl5a0IsSUFHckgxaEIsSUFBYXdoQixLQUNmSSxHQUFjLFVBQVk1aEIsRUFBVzBoQixJQUduQy9CLElBQWM2QixLQUNoQkksR0FBYyxXQUFhakMsRUFBWStCLElBR3JDaEMsSUFBYzhCLEtBQ2hCSSxHQUFjLFdBQWFsQyxFQUFZZ0MsSUFHckM5QixJQUFVNEIsSUFBWTNCLElBQVUyQixLQUNsQ0ksR0FBYyxRQUFVaEMsRUFBUSxLQUFPQyxFQUFRNkIsSUFHbEMsSUFBWG5OLEdBQTJCLElBQVhDLElBQ2xCb04sR0FBYyxTQUFXck4sRUFBUyxLQUFPQyxFQUFTa04sSUFHcERobkIsRUFBT3dCLE1BQU0yWSxHQUFrQitNLEdBQWMsaUJBQy9DLEVBQ0lULEdBQXVCLFNBQThCL04sRUFBT3NCLEdBQzlELElBa0JJb04sRUFDQUMsRUFDQWhDLEVBQ0FDLEVBQ0FqQyxFQXRCQWlFLEVBQVF0TixHQUFTMWUsS0FDakI2cUIsRUFBV21CLEVBQU1uQixTQUNqQkUsRUFBV2lCLEVBQU1qQixTQUNqQi9qQixFQUFJZ2xCLEVBQU1obEIsRUFDVkMsRUFBSStrQixFQUFNL2tCLEVBQ1YrQyxFQUFXZ2lCLEVBQU1oaUIsU0FDakI0ZixFQUFRb0MsRUFBTXBDLE1BQ2RDLEVBQVFtQyxFQUFNbkMsTUFDZHRMLEVBQVN5TixFQUFNek4sT0FDZkMsRUFBU3dOLEVBQU14TixPQUNmOVosRUFBU3NuQixFQUFNdG5CLE9BQ2Zxa0IsRUFBVWlELEVBQU1qRCxRQUNoQkUsRUFBVStDLEVBQU0vQyxRQUNoQkUsRUFBVTZDLEVBQU03QyxRQUNoQkUsRUFBVTJDLEVBQU0zQyxRQUNoQnVCLEVBQVdvQixFQUFNcEIsU0FDakJ0QixFQUFLcEYsV0FBV2xkLEdBQ2hCdWlCLEVBQUtyRixXQUFXamQsR0FPcEIrQyxFQUFXa2EsV0FBV2xhLEdBQ3RCNGYsRUFBUTFGLFdBQVcwRixJQUNuQkMsRUFBUTNGLFdBQVcyRixNQUtqQkQsR0FEQUMsRUFBUTNGLFdBQVcyRixHQUVuQjdmLEdBQVk2ZixHQUdWN2YsR0FBWTRmLEdBQ2Q1ZixHQUFZNFMsRUFDWmdOLEdBQVNoTixFQUNUa1AsRUFBTTNoQixLQUFLSSxJQUFJUCxHQUFZdVUsRUFDM0J3TixFQUFNNWhCLEtBQUtlLElBQUlsQixHQUFZdVUsRUFDM0J3TCxFQUFNNWYsS0FBS2UsSUFBSWxCLEVBQVc0ZixJQUFVcEwsRUFDcEN3TCxFQUFNN2YsS0FBS0ksSUFBSVAsRUFBVzRmLEdBQVNwTCxFQUUvQm9MLElBQ0ZDLEdBQVNqTixFQUNUbUwsRUFBTzVkLEtBQUs4RixJQUFJMlosRUFBUUMsR0FFeEJFLEdBREFoQyxFQUFPNWQsS0FBS21ELEtBQUssRUFBSXlhLEVBQU9BLEdBRTVCaUMsR0FBT2pDLEVBRUg4QixJQUNGOUIsRUFBTzVkLEtBQUs4RixJQUFJNFosR0FFaEJpQyxHQURBL0QsRUFBTzVkLEtBQUttRCxLQUFLLEVBQUl5YSxFQUFPQSxHQUU1QmdFLEdBQU9oRSxJQUlYK0QsR0FBTSxJQUFBbkgsUUFBT21ILEdBQ2JDLEdBQU0sSUFBQXBILFFBQU9vSCxHQUNiaEMsR0FBTSxJQUFBcEYsUUFBT29GLEdBQ2JDLEdBQU0sSUFBQXJGLFFBQU9xRixLQUViOEIsRUFBTXZOLEVBQ055TCxFQUFNeEwsRUFDTnVOLEVBQU1oQyxFQUFNLElBR1ZULE1BQVN0aUIsRUFBSSxJQUFJMUosUUFBUSxPQUFTaXNCLE1BQVN0aUIsRUFBSSxJQUFJM0osUUFBUSxTQUM3RGdzQixFQUFLMUYsRUFBZWxmLEVBQVEsSUFBS3NDLEVBQUcsTUFDcEN1aUIsRUFBSzNGLEVBQWVsZixFQUFRLElBQUt1QyxFQUFHLFFBR2xDOGhCLEdBQVdFLEdBQVdFLEdBQVdFLEtBQ25DQyxHQUFLLElBQUEzRSxRQUFPMkUsRUFBS1AsR0FBV0EsRUFBVStDLEVBQU03QyxFQUFVYyxHQUFPWixHQUM3REksR0FBSyxJQUFBNUUsUUFBTzRFLEVBQUtOLEdBQVdGLEVBQVVnRCxFQUFNOUMsRUFBVWUsR0FBT1gsS0FHM0R3QixHQUFZRSxLQUVkaEQsRUFBT3JqQixFQUFPdWQsVUFDZHFILEdBQUssSUFBQTNFLFFBQU8yRSxFQUFLdUIsRUFBVyxJQUFNOUMsRUFBS25nQixPQUN2QzJoQixHQUFLLElBQUE1RSxRQUFPNEUsRUFBS3dCLEVBQVcsSUFBTWhELEVBQUt2ZixTQUd6Q3VmLEVBQU8sVUFBWStELEVBQU0sSUFBTUMsRUFBTSxJQUFNaEMsRUFBTSxJQUFNQyxFQUFNLElBQU1WLEVBQUssSUFBTUMsRUFBSyxJQUNuRjdrQixFQUFPcVAsYUFBYSxZQUFhZ1UsR0FDakM2QyxJQUFhbG1CLEVBQU93QixNQUFNMlksR0FBa0JrSixFQUM5QyxFQUNJa0UsR0FBMEIsU0FBaUNuSixFQUFRcGUsRUFBUXVaLEVBQVV1SCxFQUFVRSxHQUNqRyxJQUtJdmQsRUFDQThhLEVBTkFpSixFQUFNLElBQ05DLEdBQVcsSUFBQUMsV0FBVTFHLEdBRXJCM2lCLEVBRFNtaEIsV0FBV3dCLElBQWF5RyxJQUFhekcsRUFBU3BvQixRQUFRLE9BQVNxZixFQUFXLEdBQ2pFNkksRUFDbEI2RyxFQUFhN0csRUFBV3ppQixFQUFTLE1BNEJyQyxPQXhCSW9wQixJQUdnQixXQUZsQmhrQixFQUFZdWQsRUFBU3hVLE1BQU0sS0FBSyxNQUc5Qm5PLEdBQVVtcEIsS0FFS25wQixFQUFTLE1BQ3RCQSxHQUFVQSxFQUFTLEVBQUltcEIsR0FBTSxLQUlmLE9BQWQvakIsR0FBc0JwRixFQUFTLEVBQ2pDQSxHQUFVQSxFQUFTbXBCLE1BQWlCQSxLQUFTbnBCLEVBQVNtcEIsR0FBT0EsRUFDdEMsUUFBZC9qQixHQUF1QnBGLEVBQVMsSUFDekNBLEdBQVVBLEVBQVNtcEIsTUFBaUJBLEtBQVNucEIsRUFBU21wQixHQUFPQSxJQUlqRXBKLEVBQU9LLElBQU1GLEVBQUssSUFBSSxFQUFBQyxVQUFVSixFQUFPSyxJQUFLemUsRUFBUXVaLEVBQVV1SCxFQUFVemlCLEVBQVE0YSxHQUNoRnNGLEVBQUczUSxFQUFJK1osRUFDUHBKLEVBQUd2RixFQUFJLE1BRVBvRixFQUFPTSxPQUFPNWxCLEtBQUt5Z0IsR0FFWmdGLENBQ1QsRUFDSXFKLEdBQVUsU0FBaUI1bkIsRUFBUTZuQixHQUVyQyxJQUFLLElBQUloUCxLQUFLZ1AsRUFDWjduQixFQUFPNlksR0FBS2dQLEVBQU9oUCxHQUdyQixPQUFPN1ksQ0FDVCxFQUNJOG5CLEdBQXNCLFNBQTZCMUosRUFBUThJLEVBQVlsbkIsR0FFekUsSUFHSStuQixFQUNBbFAsRUFDQWtJLEVBQ0FDLEVBQ0FGLEVBQ0FHLEVBRUFFLEVBVkE2RyxFQUFhSixHQUFRLENBQUMsRUFBRzVuQixFQUFPMlosT0FFaENuWSxFQUFReEIsRUFBT3dCLE1BMEJuQixJQUFLcVgsS0FoQkRtUCxFQUFXbk4sS0FDYmtHLEVBQWEvZ0IsRUFBT25ELGFBQWEsYUFDakNtRCxFQUFPcVAsYUFBYSxZQUFhLElBQ2pDN04sRUFBTTJZLEdBQWtCK00sRUFDeEJhLEVBQVcxSCxHQUFnQnJnQixFQUFRLEdBRW5DZ2UsRUFBZ0JoZSxFQUFRbWEsR0FFeEJuYSxFQUFPcVAsYUFBYSxZQUFhMFIsS0FFakNBLEVBQWEzRSxpQkFBaUJwYyxHQUFRbWEsR0FDdEMzWSxFQUFNMlksR0FBa0IrTSxFQUN4QmEsRUFBVzFILEdBQWdCcmdCLEVBQVEsR0FDbkN3QixFQUFNMlksR0FBa0I0RyxHQUdoQi9JLEdBQ1IrSSxFQUFhaUgsRUFBV25QLE9BQ3hCbUksRUFBVytHLEVBQVNsUCxLQTdCUixnREErQjJCamdCLFFBQVFpZ0IsR0FBSyxJQUlsRGlJLEdBRlksSUFBQStGLFNBQVE5RixNQUNwQkksR0FBVSxJQUFBMEYsU0FBUTdGLElBQ2lCOUIsRUFBZWxmLEVBQVE2WSxFQUFHa0ksRUFBWUksR0FBVzNCLFdBQVd1QixHQUMvRkUsRUFBU3pCLFdBQVd3QixHQUNwQjVDLEVBQU9LLElBQU0sSUFBSSxFQUFBRCxVQUFVSixFQUFPSyxJQUFLc0osRUFBVWxQLEVBQUdpSSxFQUFVRyxFQUFTSCxFQUFVckksR0FDakYyRixFQUFPSyxJQUFJekYsRUFBSW1JLEdBQVcsRUFFMUIvQyxFQUFPTSxPQUFPNWxCLEtBQUsrZixJQUl2QitPLEdBQVFHLEVBQVVDLEVBQ3BCLEdBR0EsSUFBQUMsY0FBYSwrQkFBK0IsU0FBVXJWLEVBQU1sUixHQUMxRCxJQUFJa1gsRUFBSSxNQUNKb0osRUFBSSxRQUNKclosRUFBSSxTQUNKM1AsRUFBSSxPQUNKNGhCLEdBQVNsWixFQUFRLEVBQUksQ0FBQ2tYLEVBQUdvSixFQUFHclosRUFBRzNQLEdBQUssQ0FBQzRmLEVBQUk1ZixFQUFHNGYsRUFBSW9KLEVBQUdyWixFQUFJcVosRUFBR3JaLEVBQUkzUCxJQUFJc0gsS0FBSSxTQUFVNG5CLEdBQ2xGLE9BQU94bUIsRUFBUSxFQUFJa1IsRUFBT3NWLEVBQU8sU0FBV0EsRUFBT3RWLENBQ3JELElBRUE0TixHQUFjOWUsRUFBUSxFQUFJLFNBQVdrUixFQUFPQSxHQUFRLFNBQVV3TCxFQUFRcGUsRUFBUXVaLEVBQVV5SCxFQUFVdUIsR0FDaEcsSUFBSTdaLEVBQUd5ZixFQUVQLEdBQUlqVixVQUFVamEsT0FBUyxFQU1yQixPQUpBeVAsRUFBSWtTLEVBQU10YSxLQUFJLFNBQVVxZ0IsR0FDdEIsT0FBT2pHLEVBQUswRCxFQUFRdUMsRUFBTXBILEVBQzVCLElBRW1DLEtBRG5DNE8sRUFBT3pmLEVBQUV2UCxLQUFLLE1BQ0ZxVCxNQUFNOUQsRUFBRSxJQUFJelAsT0FBZXlQLEVBQUUsR0FBS3lmLEVBR2hEemYsR0FBS3NZLEVBQVcsSUFBSXhVLE1BQU0sS0FDMUIyYixFQUFPLENBQUMsRUFDUnZOLEVBQU1saEIsU0FBUSxTQUFVaW5CLEVBQU1uUixHQUM1QixPQUFPMlksRUFBS3hILEdBQVFqWSxFQUFFOEcsR0FBSzlHLEVBQUU4RyxJQUFNOUcsR0FBRzhHLEVBQUksR0FBSyxFQUFJLEVBQ3JELElBQ0E0TyxFQUFPMUwsS0FBSzFTLEVBQVFtb0IsRUFBTTVGLEVBQzVCLENBQ0YsSUFFTyxJQXVPSTZGLEdBQWtCOWlCLEdBQ3ZCK2lCLEdBeE9LQyxHQUFZLENBQ3JCMVYsS0FBTSxNQUNOMlYsU0FBVTVMLEVBQ1Y2TCxXQUFZLFNBQW9CeG9CLEdBQzlCLE9BQU9BLEVBQU93QixPQUFTeEIsRUFBT3lvQixRQUNoQyxFQUNBL1YsS0FBTSxTQUFjMVMsRUFBUW1vQixFQUFNNUYsRUFBTzdnQixFQUFPZ25CLEdBQzlDLElBR0kzSCxFQUNBQyxFQUNBQyxFQUNBSCxFQUNBM00sRUFDQXdVLEVBQ0E5UCxFQUNBdUksRUFDQUQsRUFDQXlILEVBQ0FDLEVBQ0FDLEVBQ0E5TyxFQUNBZ0ssRUFDQStFLEVBQ0FDLEVBbHlCbUVua0IsRUFDckUySCxFQUNBbEssRUFDQUMsRUE2d0JFcVksRUFBUXRmLEtBQUtvakIsT0FDYmxkLEVBQVF4QixFQUFPd0IsTUFDZnluQixFQUFVMUcsRUFBTTRGLEtBQUtjLFFBdUJ6QixJQUFLcFEsS0FOTGxCLEdBQWtCZ0YsSUFFbEJyaEIsS0FBSzR0QixPQUFTNXRCLEtBQUs0dEIsUUFBVTNOLEVBQWV2YixHQUM1Q2dwQixFQUFjMXRCLEtBQUs0dEIsT0FBT3RPLE1BQzFCdGYsS0FBS2luQixNQUFRQSxFQUVINEYsRUFDUixHQUFVLGNBQU50UCxJQUlKbUksRUFBV21ILEVBQUt0UCxJQUVaLEVBQUFzUSxTQUFTdFEsTUFBTSxJQUFBdVEsY0FBYXZRLEVBQUdzUCxFQUFNNUYsRUFBTzdnQixFQUFPMUIsRUFBUTBvQixJQWlCL0QsR0FaQXZVLFNBQWM2TSxFQUNkMkgsRUFBY25JLEdBQWMzSCxHQUVmLGFBQVQxRSxJQUVGQSxTQURBNk0sRUFBV0EsRUFBU3JnQixLQUFLNGhCLEVBQU83Z0IsRUFBTzFCLEVBQVEwb0IsS0FJcEMsV0FBVHZVLElBQXNCNk0sRUFBU3BvQixRQUFRLGFBQ3pDb29CLEdBQVcsSUFBQXFJLGdCQUFlckksSUFHeEIySCxFQUNGQSxFQUFZcnRCLEtBQU0wRSxFQUFRNlksRUFBR21JLEVBQVV1QixLQUFXd0csRUFBYyxRQUMzRCxHQUF1QixPQUFuQmxRLEVBQUVzQyxPQUFPLEVBQUcsR0FFckI0RixHQUFjM0UsaUJBQWlCcGMsR0FBUXFjLGlCQUFpQnhELEdBQUssSUFBSS9ILE9BQ2pFa1EsR0FBWSxHQUNaLEVBQUFzSSxVQUFVMUgsVUFBWSxFQUVqQixFQUFBMEgsVUFBVWp4QixLQUFLMG9CLEtBRWxCSyxHQUFZLElBQUF5RixTQUFROUYsR0FDcEJJLEdBQVUsSUFBQTBGLFNBQVE3RixJQUdwQkcsRUFBVUMsSUFBY0QsSUFBWUosRUFBYTdCLEVBQWVsZixFQUFRNlksRUFBR2tJLEVBQVlJLEdBQVdBLEdBQVdDLElBQWNKLEdBQVlJLEdBQ3ZJOWxCLEtBQUtzQixJQUFJNEUsRUFBTyxjQUFldWYsRUFBWUMsRUFBVXRmLEVBQU9nbkIsRUFBUyxFQUFHLEVBQUc3UCxHQUMzRStCLEVBQU05aEIsS0FBSytmLEdBQ1htUSxFQUFZbHdCLEtBQUsrZixFQUFHLEVBQUdyWCxFQUFNcVgsU0FDeEIsR0FBYSxjQUFUMUUsRUFBc0IsQ0FzQy9CLEdBckNJOFUsR0FBV3BRLEtBQUtvUSxHQUVsQmxJLEVBQW1DLG1CQUFma0ksRUFBUXBRLEdBQW9Cb1EsRUFBUXBRLEdBQUdsWSxLQUFLNGhCLEVBQU83Z0IsRUFBTzFCLEVBQVEwb0IsR0FBV08sRUFBUXBRLElBQ3pHLElBQUE2TyxXQUFVM0csS0FBZ0JBLEVBQVdub0IsUUFBUSxhQUFlbW9CLEdBQWEsSUFBQXNJLGdCQUFldEksS0FDeEYsSUFBQThGLFNBQVE5RixFQUFhLEtBQXNCLFNBQWZBLElBQTBCQSxHQUFjLEVBQUFjLFFBQVFDLE1BQU1qSixLQUFNLElBQUFnTyxTQUFRbk0sRUFBSzFhLEVBQVE2WSxLQUFPLElBRXBGLE9BQS9Ca0ksRUFBYSxJQUFJdEUsT0FBTyxLQUFlc0UsRUFBYXJHLEVBQUsxYSxFQUFRNlksS0FFbEVrSSxFQUFhckcsRUFBSzFhLEVBQVE2WSxHQUc1QmlJLEVBQVd0QixXQUFXdUIsSUFDdEI2SCxFQUFvQixXQUFUelUsR0FBNEMsTUFBdkI2TSxFQUFTdkUsT0FBTyxJQUFjdUUsRUFBUzdGLE9BQU8sRUFBRyxNQUNwRTZGLEVBQVdBLEVBQVM3RixPQUFPLElBQ3hDOEYsRUFBU3pCLFdBQVd3QixHQUVoQm5JLEtBQUtMLElBQ0csY0FBTkssSUFFZSxJQUFiaUksR0FBaUQsV0FBL0JwRyxFQUFLMWEsRUFBUSxlQUE4QmloQixJQUUvREgsRUFBVyxHQUdia0ksRUFBWWx3QixLQUFLLGFBQWMsRUFBRzBJLEVBQU0rbkIsWUFFeENwTCxFQUFrQjdpQixLQUFNa0csRUFBTyxhQUFjc2YsRUFBVyxVQUFZLFNBQVVHLEVBQVMsVUFBWSxVQUFXQSxJQUd0RyxVQUFOcEksR0FBdUIsY0FBTkEsS0FDbkJBLEVBQUlMLEVBQWlCSyxJQUNsQmpnQixRQUFRLE9BQVNpZ0IsRUFBSUEsRUFBRXJNLE1BQU0sS0FBSyxLQUl6Q3FjLEVBQXFCaFEsS0FBS2IsRUFleEIsR0FaQTFjLEtBQUs0dEIsT0FBT3ZOLEtBQUs5QyxHQUVaaVEsS0FDSDlPLEVBQVFoYSxFQUFPMlosT0FDVE0sa0JBQW9Ca08sRUFBS3FCLGdCQUFrQm5KLEdBQWdCcmdCLEVBQVFtb0IsRUFBS3FCLGdCQUU5RXhGLEdBQStCLElBQXRCbUUsRUFBS3NCLGNBQTBCelAsRUFBTWdLLFFBQzlDOEUsRUFBcUJ4dEIsS0FBS21qQixJQUFNLElBQUksRUFBQUQsVUFBVWxqQixLQUFLbWpCLElBQUtqZCxFQUFPMlksRUFBZ0IsRUFBRyxFQUFHSCxFQUFNQyxnQkFBaUJELEVBQU8sR0FBSSxJQUVwRzBQLElBQU0sR0FHakIsVUFBTjdRLEVBQ0Z2ZCxLQUFLbWpCLElBQU0sSUFBSSxFQUFBRCxVQUFVbGpCLEtBQUttakIsSUFBS3pFLEVBQU8sU0FBVUEsRUFBTUYsUUFBUzhPLEdBQVcsSUFBQWpILGdCQUFlM0gsRUFBTUYsT0FBUThPLEVBQVczSCxHQUFVQSxHQUFVakgsRUFBTUYsUUFBVSxFQUFHckIsR0FDN0puZCxLQUFLbWpCLElBQUl6RixFQUFJLEVBQ2I0QixFQUFNOWhCLEtBQUssU0FBVStmLEdBQ3JCQSxHQUFLLFFBQ0EsSUFBVSxvQkFBTkEsRUFBeUIsQ0FDbENtUSxFQUFZbHdCLEtBQUtzaEIsRUFBc0IsRUFBRzVZLEVBQU00WSxJQTM0QnRENU4sU0FDQWxLLFNBQ0FDLFNBRkFpSyxHQURxRTNILEVBNjRCdEJtYyxHQTU0QmpDeFUsTUFBTSxLQUNwQmxLLEVBQUlrSyxFQUFNLEdBQ1ZqSyxFQUFJaUssRUFBTSxJQUFNLE1BRVYsUUFBTmxLLEdBQXFCLFdBQU5BLEdBQXdCLFNBQU5DLEdBQXNCLFVBQU5BLElBRW5Ec0MsRUFBUXZDLEVBQ1JBLEVBQUlDLEVBQ0pBLEVBQUlzQyxHQUdOMkgsRUFBTSxHQUFLMFYsR0FBa0I1ZixJQUFNQSxFQUNuQ2tLLEVBQU0sR0FBSzBWLEdBQWtCM2YsSUFBTUEsRUFnNEJ6QnllLEVBLzNCSHhVLEVBQU1yVCxLQUFLLEtBaTRCSjZnQixFQUFNYSxJQUNSaUosR0FBZ0I5akIsRUFBUWdoQixFQUFVLEVBQUdnRCxFQUFRLEVBQUcxb0IsUUFFaEQ2bEIsRUFBVTNCLFdBQVd3QixFQUFTeFUsTUFBTSxLQUFLLEtBQU8sS0FFcEN3TixFQUFNVyxTQUFXd0QsRUFBa0I3aUIsS0FBTTBlLEVBQU8sVUFBV0EsRUFBTVcsUUFBU3dHLEdBRXRGaEQsRUFBa0I3aUIsS0FBTWtHLEVBQU9xWCxFQUFHMEgsR0FBY1EsR0FBYVIsR0FBY1MsS0FHN0UsUUFDRixDQUFPLEdBQVUsY0FBTm5JLEVBQW1CLENBQzVCaUwsR0FBZ0I5akIsRUFBUWdoQixFQUFVLEVBQUdnRCxFQUFRLEVBQUcxb0IsTUFFaEQsUUFDRixDQUFPLEdBQUl1ZCxLQUFLaUssR0FBdUIsQ0FDckN5RSxHQUF3QmpzQixLQUFNMGUsRUFBT25CLEVBQUdpSSxFQUFVOEgsR0FBVyxJQUFBakgsZ0JBQWViLEVBQVU4SCxFQUFXNUgsR0FBWUEsR0FFN0csUUFDRixDQUFPLEdBQVUsaUJBQU5uSSxFQUFzQixDQUMvQnNGLEVBQWtCN2lCLEtBQU0wZSxFQUFPLFNBQVVBLEVBQU1nSyxPQUFRaEQsR0FFdkQsUUFDRixDQUFPLEdBQVUsWUFBTm5JLEVBQWlCLENBQzFCbUIsRUFBTW5CLEdBQUttSSxFQUNYLFFBQ0YsQ0FBTyxHQUFVLGNBQU5uSSxFQUFtQixDQUM1QmlQLEdBQW9CeHNCLEtBQU0wbEIsRUFBVWhoQixHQUVwQyxRQUNGLE9BQ1c2WSxLQUFLclgsSUFDaEJxWCxFQUFJeUQsRUFBaUJ6RCxJQUFNQSxHQUc3QixHQUFJZ1EsSUFBdUI1SCxHQUFxQixJQUFYQSxLQUFrQkgsR0FBeUIsSUFBYkEsS0FBb0J2SSxFQUFZbGdCLEtBQUsyb0IsSUFBYW5JLEtBQUtyWCxFQUV4SHlmLElBQVdBLEVBQVMsSUFEcEJHLEdBQWFMLEVBQWEsSUFBSTVGLFFBQVEyRixFQUFXLElBQUk3bkIsWUFHckRrb0IsR0FBVSxJQUFBMEYsU0FBUTdGLEtBQWNuSSxLQUFLLEVBQUFnSixRQUFRQyxNQUFRLEVBQUFELFFBQVFDLE1BQU1qSixHQUFLdUksTUFDOUNOLEVBQVc1QixFQUFlbGYsRUFBUTZZLEVBQUdrSSxFQUFZSSxJQUMzRTdsQixLQUFLbWpCLElBQU0sSUFBSSxFQUFBRCxVQUFVbGpCLEtBQUttakIsSUFBS29LLEVBQXFCN08sRUFBUXhZLEVBQU9xWCxFQUFHaUksR0FBVzhILEdBQVcsSUFBQWpILGdCQUFlYixFQUFVOEgsRUFBVzNILEdBQVVBLEdBQVVILEVBQVcrSCxHQUFtQyxPQUFaMUgsR0FBMEIsV0FBTnRJLElBQXNDLElBQW5Cc1AsRUFBS3dCLFVBQThDbFIsRUFBeEJVLEdBQzVQN2QsS0FBS21qQixJQUFJekYsRUFBSW1JLEdBQVcsRUFFcEJDLElBQWNELEdBQXVCLE1BQVpBLElBRTNCN2xCLEtBQUttakIsSUFBSTlWLEVBQUlvWSxFQUNiemxCLEtBQUttakIsSUFBSXVELEVBQUk5SSxRQUVWLEdBQU1MLEtBQUtyWCxFQVVoQmtmLEVBQXVCL2YsS0FBS3JGLEtBQU0wRSxFQUFRNlksRUFBR2tJLEVBQVk2SCxFQUFXQSxFQUFXNUgsRUFBV0EsUUFUMUYsR0FBSW5JLEtBQUs3WSxFQUVQMUUsS0FBS3NCLElBQUlvRCxFQUFRNlksRUFBR2tJLEdBQWMvZ0IsRUFBTzZZLEdBQUkrUCxFQUFXQSxFQUFXNUgsRUFBV0EsRUFBVXRmLEVBQU9nbkIsUUFDMUYsR0FBVSxtQkFBTjdQLEVBQXdCLEVBQ2pDLElBQUErUSxnQkFBZS9RLEVBQUdtSSxHQUVsQixRQUNGLENBS0Y2SCxJQUF1QmhRLEtBQUtyWCxFQUFRd25CLEVBQVlsd0IsS0FBSytmLEVBQUcsRUFBR3JYLEVBQU1xWCxJQUFNbVEsRUFBWWx3QixLQUFLK2YsRUFBRyxFQUFHa0ksR0FBYy9nQixFQUFPNlksS0FDbkgrQixFQUFNOWhCLEtBQUsrZixFQUNiLENBR0ZrUSxJQUFlLElBQUFjLDJCQUEwQnZ1QixLQUMzQyxFQUNBdVEsT0FBUSxTQUFnQjZNLEVBQU9DLEdBQzdCLEdBQUlBLEVBQUs0SixNQUFNQyxRQUFVMUssSUFHdkIsSUFGQSxJQUFJeUcsRUFBSzVGLEVBQUs4RixJQUVQRixHQUNMQSxFQUFHeUQsRUFBRXRKLEVBQU82RixFQUFHbUYsR0FDZm5GLEVBQUtBLEVBQUd3RCxXQUdWcEosRUFBS3VRLE9BQU94TixRQUVoQixFQUNBaGhCLElBQUtnZ0IsRUFDTG9QLFFBQVN0UixFQUNUdVIsVUFBVyxTQUFtQi9wQixFQUFRdVosRUFBVTZFLEdBRTlDLElBQUl2RixFQUFJTCxFQUFpQmUsR0FFekIsT0FEQVYsR0FBS0EsRUFBRWpnQixRQUFRLEtBQU8sSUFBTTJnQixFQUFXVixHQUNoQ1UsS0FBWXZCLEdBQW1CdUIsSUFBYWEsSUFBeUJwYSxFQUFPMlosTUFBTXJYLEdBQUtvWSxFQUFLMWEsRUFBUSxNQUFRb2UsR0FBVXZHLElBQXdCdUcsRUFBc0IsVUFBYjdFLEVBQXVCSyxFQUFlRixHQUFvQjdCLEVBQXNCdUcsR0FBVSxDQUFDLEtBQW9CLFVBQWI3RSxFQUF1QlEsRUFBeUJHLEdBQThCbGEsRUFBT3dCLFNBQVUsSUFBQXdvQixjQUFhaHFCLEVBQU93QixNQUFNK1gsSUFBYUQsR0FBbUJDLEVBQVMzZ0IsUUFBUSxLQUFPNGdCLEdBQWlCLElBQUF5USxZQUFXanFCLEVBQVF1WixFQUN2ZCxFQUNBcUMsS0FBTSxDQUNKb0MsZ0JBQWlCQSxFQUNqQm1GLFdBQVlBLEtBR2hCLEVBQUEvbkIsS0FBS2lHLE1BQU02b0IsWUFBYzVOLEVBQ3pCLEVBQUFsaEIsS0FBS3dnQixLQUFLdU8sY0FBZ0I1TyxFQUVmNk0sR0FnQlIsOENBaEIwQjlpQixHQWdCcUIsMkNBZjVDK2lCLElBQU0sSUFBQUosY0FBYUcsR0FBbUIsSUFBTTlpQixHQUF6QjhpQixrRkFBa0QsU0FBVXhWLEdBQ2pGb0YsRUFBZ0JwRixHQUFRLENBQzFCLEtBRUEsSUFBQXFWLGNBQWEzaUIsSUFBVSxTQUFVc04sR0FDL0IsRUFBQWlQLFFBQVFDLE1BQU1sUCxHQUFRLE1BQ3RCa1EsR0FBc0JsUSxHQUFRLENBQ2hDLElBRUE0RixFQUFpQjZQLEdBQUksS0FBT0QsR0FBbUIsSUFBTTlpQixJQUVyRCxJQUFBMmlCLGNBSTZLLDhGQUp2SixTQUFVclYsR0FDOUIsSUFBSXBHLEVBQVFvRyxFQUFLcEcsTUFBTSxLQUN2QmdNLEVBQWlCaE0sRUFBTSxJQUFNNmIsR0FBSTdiLEVBQU0sR0FDekMsS0FHRixJQUFBeWIsY0FBYSxnRkFBZ0YsU0FBVXJWLEdBQ3JHLEVBQUFpUCxRQUFRQyxNQUFNbFAsR0FBUSxJQUN4QixJQUVBLEVBQUF4WCxLQUFLZ3ZCLGVBQWU5QiwrREN2aURwQixTQUFTK0IsRUFBdUJDLEdBQVEsUUFBYSxJQUFUQSxFQUFtQixNQUFNLElBQUlDLGVBQWUsNkRBQWdFLE9BQU9ELENBQU0sQ0FFckssU0FBU0UsRUFBZUMsRUFBVUMsR0FBY0QsRUFBU3RZLFVBQVkzWCxPQUFPc0UsT0FBTzRyQixFQUFXdlksV0FBWXNZLEVBQVN0WSxVQUFVcFgsWUFBYzB2QixFQUFVQSxFQUFTRSxVQUFZRCxDQUFZLHlvQ0FhdEwsSUFhSUUsRUFDQTlTLEVBQ0ErUyxFQStDQUMsRUFDQXRULEVBQ0F1VCxFQUNBdFQsRUFHQXVULEVBK0JBQyxFQXMzQkFDLEVBaVJKQyxFQTJTV3h4QixFQUFHb2YsRUFDUnFTLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBemhERjFKLEVBQVUsQ0FDWjJKLFVBQVcsSUFDWGhGLFFBQVMsT0FDVGlGLGVBQWdCLEVBQ2hCM0osTUFBTyxDQUNMNEosV0FBWSxLQUdaQyxFQUFZLENBQ2Rsd0IsU0FBVSxHQUNWbXdCLFdBQVcsRUFDWHB3QixNQUFPLEdBS0xxd0IsRUFBVSxJQUNWQyxFQUFXLEtBQ1hDLEVBQWlCLEVBQVZ0bUIsS0FBS0MsR0FDWnNtQixFQUFXRCxFQUFPLEVBQ2xCRSxFQUFRLEVBQ1JDLEVBQVF6bUIsS0FBS21ELEtBQ2J1akIsRUFBTzFtQixLQUFLSSxJQUNadW1CLEVBQU8zbUIsS0FBS2UsSUFDWmtoQixFQUFZLFNBQW1CN2lCLEdBQ2pDLE1BQXdCLGlCQUFWQSxDQUNoQixFQUNJd25CLEVBQWMsU0FBcUJ4bkIsR0FDckMsTUFBd0IsbUJBQVZBLENBQ2hCLEVBQ0l5bkIsRUFBWSxTQUFtQnpuQixHQUNqQyxNQUF3QixpQkFBVkEsQ0FDaEIsRUFDSW1sQixFQUFlLFNBQXNCbmxCLEdBQ3ZDLFlBQXdCLElBQVZBLENBQ2hCLEVBQ0kwbkIsRUFBWSxTQUFtQjFuQixHQUNqQyxNQUF3QixpQkFBVkEsQ0FDaEIsRUFDSTJuQixFQUFjLFNBQXFCM25CLEdBQ3JDLE9BQWlCLElBQVZBLENBQ1QsRUFDSTRuQixFQUFnQixXQUNsQixNQUF5QixvQkFBWHR3QixNQUNoQixFQUNJdXdCLEVBQWtCLFNBQXlCN25CLEdBQzdDLE9BQU93bkIsRUFBWXhuQixJQUFVNmlCLEVBQVU3aUIsRUFDekMsRUFDSThuQixFQUF1QyxtQkFBaEJDLGFBQThCQSxZQUFZQyxRQUFVLFdBQWEsRUFFNUZDLEVBQVc1ekIsTUFBTWdCLFFBQ2I2eUIsRUFBZ0Isb0JBRXBCN0osRUFBVSxtQ0FFVjFCLEVBQWtCLDhCQUNkd0wsRUFBdUIsbUNBRTNCL0ssRUFBVSxnQkFDTmdMLEVBQXFCLGtCQUV6QkMsRUFBVyx3Q0FLUEMsRUFBVyxDQUFDLEVBQ1pDLEVBQWdCLENBQUMsRUFFakJDLEVBQVcsU0FBa0JDLEdBQy9CLE9BQVFGLEVBQWdCRyxHQUFPRCxFQUFPSCxLQUFjL3hCLEVBQ3RELEVBQ0l3dUIsRUFBaUIsU0FBd0JyUSxFQUFVMVUsR0FDckQsT0FBT3lLLFFBQVF5RixLQUFLLG1CQUFvQndFLEVBQVUsU0FBVTFVLEVBQU8sd0NBQ3JFLEVBQ0kyb0IsRUFBUSxTQUFlaFgsRUFBU2lYLEdBQ2xDLE9BQVFBLEdBQVluZSxRQUFReUYsS0FBS3lCLEVBQ25DLEVBQ0lrWCxHQUFhLFNBQW9COWEsRUFBTSthLEdBQ3pDLE9BQU8vYSxJQUFTdWEsRUFBU3ZhLEdBQVErYSxJQUFRUCxJQUFrQkEsRUFBY3hhLEdBQVErYSxJQUFRUixDQUMzRixFQUNJUyxHQUFhLFdBQ2YsT0FBTyxDQUNULEVBQ0lDLEdBQXVCLENBQ3pCQyxnQkFBZ0IsRUFDaEJ6UyxTQUFTLEVBQ1QwUyxNQUFNLEdBRUpDLEdBQXNCLENBQ3hCRixnQkFBZ0IsRUFDaEJDLE1BQU0sR0FFSkUsR0FBZ0IsQ0FDbEJILGdCQUFnQixHQUVkSSxHQUFpQixDQUFDLEVBQ2xCQyxHQUFjLEdBQ2RDLEdBQWMsQ0FBQyxFQUVmakYsR0FBVyxDQUFDLEVBQ1prRixHQUFXLENBQUMsRUFDWkMsR0FBZSxHQUNmQyxHQUFrQixHQUNsQkMsR0FBaUIsR0FDakJDLEdBQVcsU0FBa0IvRixHQUMvQixJQUNJZ0csRUFDQWxmLEVBRkF4UCxFQUFTMG9CLEVBQVEsR0FLckIsR0FGQTZELEVBQVV2c0IsSUFBV3FzQixFQUFZcnNCLEtBQVkwb0IsRUFBVSxDQUFDQSxNQUVsRGdHLEdBQWlCMXVCLEVBQU8yWixPQUFTLENBQUMsR0FBR2dWLFNBQVUsQ0FJbkQsSUFGQW5mLEVBQUkrZSxHQUFnQnQxQixPQUVidVcsTUFBUStlLEdBQWdCL2UsR0FBR2daLFdBQVd4b0IsS0FFN0MwdUIsRUFBZ0JILEdBQWdCL2UsRUFDbEMsQ0FJQSxJQUZBQSxFQUFJa1osRUFBUXp2QixPQUVMdVcsS0FDTGtaLEVBQVFsWixLQUFPa1osRUFBUWxaLEdBQUdtSyxRQUFVK08sRUFBUWxaLEdBQUdtSyxNQUFRLElBQUlvTCxHQUFRMkQsRUFBUWxaLEdBQUlrZixNQUFvQmhHLEVBQVFrRyxPQUFPcGYsRUFBRyxHQUd2SCxPQUFPa1osQ0FDVCxFQUNJdEksR0FBWSxTQUFtQnBnQixHQUNqQyxPQUFPQSxFQUFPMlosT0FBUzhVLEdBQVNJLEdBQVE3dUIsSUFBUyxHQUFHMlosS0FDdEQsRUFDSThHLEdBQWUsU0FBc0J6Z0IsRUFBUXVaLEVBQVU5SixHQUN6RCxPQUFRQSxFQUFJelAsRUFBT3VaLEtBQWM4UyxFQUFZNWMsR0FBS3pQLEVBQU91WixLQUFjeVEsRUFBYXZhLElBQU16UCxFQUFPbkQsY0FBZ0JtRCxFQUFPbkQsYUFBYTBjLElBQWE5SixDQUNwSixFQUNJd1ksR0FBZSxTQUFzQjZHLEVBQU9DLEdBQzlDLE9BQVFELEVBQVFBLEVBQU10aUIsTUFBTSxNQUFNOVMsUUFBUXExQixJQUFTRCxDQUNyRCxFQUVBN08sR0FBUyxTQUFnQnBiLEdBQ3ZCLE9BQU9ZLEtBQUs0SCxNQUFjLElBQVJ4SSxHQUFrQixLQUFVLENBQ2hELEVBQ0ltcUIsR0FBZ0IsU0FBdUJucUIsR0FDekMsT0FBT1ksS0FBSzRILE1BQWMsSUFBUnhJLEdBQW9CLEtBQVksQ0FDcEQsRUFFQThjLEdBQWlCLFNBQXdCemYsRUFBTzJDLEdBQzlDLElBQUlvcUIsRUFBV3BxQixFQUFNNFgsT0FBTyxHQUN4QmxaLEVBQU1pYyxXQUFXM2EsRUFBTXNXLE9BQU8sSUFFbEMsT0FEQWpaLEVBQVFzZCxXQUFXdGQsR0FDQyxNQUFiK3NCLEVBQW1CL3NCLEVBQVFxQixFQUFtQixNQUFiMHJCLEVBQW1CL3NCLEVBQVFxQixFQUFtQixNQUFiMHJCLEVBQW1CL3NCLEVBQVFxQixFQUFNckIsRUFBUXFCLENBQ3BILEVBQ0kyckIsR0FBb0IsU0FBMkJDLEVBQVVDLEdBSzNELElBSEEsSUFBSXAyQixFQUFJbzJCLEVBQU9uMkIsT0FDWHVXLEVBQUksRUFFRDJmLEVBQVN2MkIsUUFBUXcyQixFQUFPNWYsSUFBTSxLQUFPQSxFQUFJeFcsSUFFaEQsT0FBT3dXLEVBQUl4VyxDQUNiLEVBQ0lxMkIsR0FBYyxXQUNoQixJQUVJN2YsRUFDQStTLEVBSEF2cEIsRUFBSW0xQixHQUFZbDFCLE9BQ2hCeVAsRUFBSXlsQixHQUFZN3pCLE1BQU0sR0FPMUIsSUFIQTh6QixHQUFjLENBQUMsRUFDZkQsR0FBWWwxQixPQUFTLEVBRWhCdVcsRUFBSSxFQUFHQSxFQUFJeFcsRUFBR3dXLEtBQ2pCK1MsRUFBUTdaLEVBQUU4RyxLQUNEK1MsRUFBTStNLFFBQVUvTSxFQUFNMVcsT0FBTzBXLEVBQU0rTSxNQUFNLEdBQUkvTSxFQUFNK00sTUFBTSxJQUFJLEdBQU1BLE1BQVEsRUFFeEYsRUFDSUMsR0FBa0IsU0FBeUIvdUIsRUFBVzBmLEVBQU00TixFQUFnQjBCLEdBQzlFckIsR0FBWWwxQixTQUFXNmUsR0FBY3VYLEtBQ3JDN3VCLEVBQVVxTCxPQUFPcVUsRUFBTTROLEVBQWdCMEIsR0FBUzFYLEdBQWNvSSxFQUFPLElBQU0xZixFQUFVaXZCLFVBQVlqdkIsRUFBVWt2QixXQUMzR3ZCLEdBQVlsMUIsU0FBVzZlLEdBQWN1WCxJQUN2QyxFQUNJTSxHQUFxQixTQUE0QjlxQixHQUNuRCxJQUFJbEwsRUFBSTZsQixXQUFXM2EsR0FDbkIsT0FBUWxMLEdBQVcsSUFBTkEsS0FBYWtMLEVBQVEsSUFBSXBNLE1BQU13MEIsR0FBb0JoMEIsT0FBUyxFQUFJVSxFQUFJK3RCLEVBQVU3aUIsR0FBU0EsRUFBTWlNLE9BQVNqTSxDQUNySCxFQUNJK3FCLEdBQWUsU0FBc0IvVyxHQUN2QyxPQUFPQSxDQUNULEVBQ0lnWCxHQUFlLFNBQXNCbEMsRUFBS21DLEdBQzVDLElBQUssSUFBSWpYLEtBQUtpWCxFQUNaalgsS0FBSzhVLElBQVFBLEVBQUk5VSxHQUFLaVgsRUFBU2pYLElBR2pDLE9BQU84VSxDQUNULEVBUUlKLEdBQVMsU0FBZ0J3QyxFQUFNQyxHQUNqQyxJQUFLLElBQUluWCxLQUFLbVgsRUFDWkQsRUFBS2xYLEdBQUttWCxFQUFRblgsR0FHcEIsT0FBT2tYLENBQ1QsRUFDSUUsR0FBYSxTQUFTQSxFQUFXRixFQUFNQyxHQUN6QyxJQUFLLElBQUluWCxLQUFLbVgsRUFDTixjQUFOblgsR0FBMkIsZ0JBQU5BLEdBQTZCLGNBQU5BLElBQXNCa1gsRUFBS2xYLEdBQUswVCxFQUFVeUQsRUFBUW5YLElBQU1vWCxFQUFXRixFQUFLbFgsS0FBT2tYLEVBQUtsWCxHQUFLLENBQUMsR0FBSW1YLEVBQVFuWCxJQUFNbVgsRUFBUW5YLElBR2xLLE9BQU9rWCxDQUNULEVBQ0lHLEdBQWlCLFNBQXdCdkMsRUFBS3dDLEdBQ2hELElBQ0l0WCxFQURBaEQsRUFBTyxDQUFDLEVBR1osSUFBS2dELEtBQUs4VSxFQUNSOVUsS0FBS3NYLElBQWN0YSxFQUFLZ0QsR0FBSzhVLEVBQUk5VSxJQUduQyxPQUFPaEQsQ0FDVCxFQUNJdWEsR0FBbUIsU0FBMEJqSSxHQUMvQyxJQWhDdURrSSxFQWdDbkRoUixFQUFTOEksRUFBSzlJLFFBQVV5TCxFQUN4QmlFLEVBQU81RyxFQUFLbUksV0FqQ3VDRCxFQWlDTnZELEVBQVMzRSxFQUFLbUksV0FoQ3hELFNBQVUzQyxFQUFLbUMsR0FDcEIsSUFBSyxJQUFJalgsS0FBS2lYLEVBQ1pqWCxLQUFLOFUsR0FBYSxhQUFOOVUsR0FBb0J3WCxHQUF5QixTQUFOeFgsSUFBaUI4VSxFQUFJOVUsR0FBS2lYLEVBQVNqWCxHQUUxRixHQTRCNkVnWCxHQUU3RSxHQUFJckQsRUFBWXJFLEVBQUtvSSxTQUNuQixLQUFPbFIsR0FDTDBQLEVBQUs1RyxFQUFNOUksRUFBTzhJLEtBQUsySCxVQUN2QnpRLEVBQVNBLEVBQU9BLFFBQVVBLEVBQU9tUixJQUlyQyxPQUFPckksQ0FDVCxFQVNJc0ksR0FBcUIsU0FBNEJwUixFQUFRcVIsRUFBT0MsRUFBV0MsRUFBVUMsUUFDckUsSUFBZEYsSUFDRkEsRUFBWSxlQUdHLElBQWJDLElBQ0ZBLEVBQVcsU0FHYixJQUNJaFksRUFEQWtZLEVBQU96UixFQUFPdVIsR0FHbEIsR0FBSUMsRUFHRixJQUZBalksRUFBSThYLEVBQU1HLEdBRUhDLEdBQVFBLEVBQUtELEdBQVVqWSxHQUM1QmtZLEVBQU9BLEVBQUtDLE1Bb0JoQixPQWhCSUQsR0FDRkosRUFBTTNPLE1BQVErTyxFQUFLL08sTUFDbkIrTyxFQUFLL08sTUFBUTJPLElBRWJBLEVBQU0zTyxNQUFRMUMsRUFBT3NSLEdBQ3JCdFIsRUFBT3NSLEdBQWFELEdBR2xCQSxFQUFNM08sTUFDUjJPLEVBQU0zTyxNQUFNZ1AsTUFBUUwsRUFFcEJyUixFQUFPdVIsR0FBWUYsRUFHckJBLEVBQU1LLE1BQVFELEVBQ2RKLEVBQU1yUixPQUFTcVIsRUFBTUYsSUFBTW5SLEVBQ3BCcVIsQ0FDVCxFQUNJTSxHQUF3QixTQUErQjNSLEVBQVFxUixFQUFPQyxFQUFXQyxRQUNqRSxJQUFkRCxJQUNGQSxFQUFZLGVBR0csSUFBYkMsSUFDRkEsRUFBVyxTQUdiLElBQUlFLEVBQU9KLEVBQU1LLE1BQ2JFLEVBQU9QLEVBQU0zTyxNQUViK08sRUFDRkEsRUFBSy9PLE1BQVFrUCxFQUNKNVIsRUFBT3NSLEtBQWVELElBQy9CclIsRUFBT3NSLEdBQWFNLEdBR2xCQSxFQUNGQSxFQUFLRixNQUFRRCxFQUNKelIsRUFBT3VSLEtBQWNGLElBQzlCclIsRUFBT3VSLEdBQVlFLEdBR3JCSixFQUFNM08sTUFBUTJPLEVBQU1LLE1BQVFMLEVBQU1yUixPQUFTLElBQzdDLEVBQ0k2UixHQUFvQixTQUEyQlIsRUFBT1MsR0FDeERULEVBQU1yUixVQUFZOFIsR0FBNkJULEVBQU1yUixPQUFPK1IscUJBQXVCVixFQUFNclIsT0FBTzVYLFFBQVVpcEIsRUFBTXJSLE9BQU81WCxPQUFPaXBCLEdBQzlIQSxFQUFNVyxLQUFPLENBQ2YsRUFDSUMsR0FBVyxTQUFrQjl3QixFQUFXa3dCLEdBQzFDLEdBQUlsd0IsS0FBZWt3QixHQUFTQSxFQUFNYSxLQUFPL3dCLEVBQVVpaUIsTUFBUWlPLEVBQU1jLE9BQVMsR0FJeEUsSUFGQSxJQUFJOW9CLEVBQUlsSSxFQUVEa0ksR0FDTEEsRUFBRStvQixPQUFTLEVBQ1gvb0IsRUFBSUEsRUFBRTJXLE9BSVYsT0FBTzdlLENBQ1QsRUFhSWt4QixHQUFpQixTQUF3Qm5QLEVBQU9vUCxFQUFXN0QsRUFBZ0IwQixHQUM3RSxPQUFPak4sRUFBTW1OLFdBQWE1WCxFQUFheUssRUFBTW1OLFNBQVNoVSxPQUFPc1MsSUFBdUJ6TCxFQUFNNEYsS0FBS3lKLGtCQUFvQnJQLEVBQU00RixLQUFLMEosWUFBY3RQLEVBQU1tTixTQUFTN2pCLE9BQU84bEIsR0FBVyxFQUFNbkMsR0FDckwsRUFDSXNDLEdBQXdCLFNBQVNBLEVBQXNCdHhCLEdBQ3pELE9BQVFBLEdBQWFBLEVBQVV1eEIsS0FBT0QsRUFBc0J0eEIsRUFBVTZlLE9BQ3hFLEVBQ0kyUyxHQUF3QixTQUErQnh4QixHQUN6RCxPQUFPQSxFQUFVeXhCLFFBQVVDLEdBQWdCMXhCLEVBQVUyeEIsT0FBUTN4QixFQUFZQSxFQUFVL0UsV0FBYStFLEVBQVU0eEIsU0FBVzV4QixFQUFZLENBQ25JLEVBRUEweEIsR0FBa0IsU0FBeUJHLEVBQU9DLEdBQ2hELElBQUlDLEVBQVE5c0IsS0FBS2tDLE1BQU0wcUIsR0FBU0MsR0FDaEMsT0FBT0QsR0FBU0UsSUFBVUYsRUFBUUUsRUFBUSxFQUFJQSxDQUNoRCxFQUNJQyxHQUEwQixTQUFpQ0MsRUFBWS9CLEdBQ3pFLE9BQVErQixFQUFhL0IsRUFBTWMsUUFBVWQsRUFBTXFCLEtBQU9yQixFQUFNcUIsS0FBTyxFQUFJLEVBQUlyQixFQUFNZSxPQUFTZixFQUFNZ0MsZ0JBQWtCaEMsRUFBTWlDLE1BQ3RILEVBQ0lDLEdBQVUsU0FBaUJweUIsR0FDN0IsT0FBT0EsRUFBVSt3QixLQUFPdkMsR0FBY3h1QixFQUFVZ3hCLFFBQVVoeEIsRUFBVW15QixNQUFRbHRCLEtBQUttQyxJQUFJcEgsRUFBVXV4QixLQUFPdnhCLEVBQVVxeUIsTUFBUS9HLElBQWEsR0FDdkksRUFDSWdILEdBQWlCLFNBQXdCdHlCLEVBQVdteEIsR0FFdEQsSUFBSXRTLEVBQVM3ZSxFQUFVZ3dCLElBVXZCLE9BUkluUixHQUFVQSxFQUFPMFQsbUJBQXFCdnlCLEVBQVV1eEIsTUFDbER2eEIsRUFBVWd4QixPQUFTeEMsR0FBYzNQLEVBQU9tRCxPQUFTaGlCLEVBQVV1eEIsSUFBTSxFQUFJSixFQUFZbnhCLEVBQVV1eEIsTUFBUXZ4QixFQUFVaXhCLE9BQVNqeEIsRUFBVWt5QixnQkFBa0JseUIsRUFBVW15QixPQUFTaEIsSUFBY254QixFQUFVdXhCLE1BRTdMYSxHQUFRcHlCLEdBRVI2ZSxFQUFPb1MsUUFBVUgsR0FBU2pTLEVBQVE3ZSxJQUc3QkEsQ0FDVCxFQVlBd3lCLEdBQWlCLFNBQXdCNTFCLEVBQVVzekIsR0FDakQsSUFBSTlYLEVBWUosSUFWSThYLEVBQU1sTyxRQUFVa08sRUFBTWpPLE1BQVFpTyxFQUFNakIsVUFBWWlCLEVBQU1jLE9BQVNwMEIsRUFBU29sQixRQUFVa08sRUFBTWpPLE9BQVNpTyxFQUFNOXpCLFFBRXpHZ2MsRUFBSTRaLEdBQXdCcDFCLEVBQVM2MUIsVUFBV3ZDLEtBRTNDQSxFQUFNak8sTUFBUXlRLEdBQU8sRUFBR3hDLEVBQU1nQyxnQkFBaUI5WixHQUFLOFgsRUFBTXlCLE9BQVNyRyxJQUN0RTRFLEVBQU03a0IsT0FBTytNLEdBQUcsSUFLaEIwWSxHQUFTbDBCLEVBQVVzekIsR0FBT0YsS0FBT3B6QixFQUFTcXlCLFVBQVlyeUIsRUFBU29sQixPQUFTcGxCLEVBQVNxbEIsTUFBUXJsQixFQUFTMjBCLElBQUssQ0FFekcsR0FBSTMwQixFQUFTcWxCLEtBQU9ybEIsRUFBUzNCLFdBRzNCLElBRkFtZCxFQUFJeGIsRUFFR3diLEVBQUU0WCxLQUNQNVgsRUFBRXFhLFdBQWEsR0FBS3JhLEVBQUUrWSxVQUFVL1ksRUFBRXVaLFFBRWxDdlosRUFBSUEsRUFBRTRYLElBSVZwekIsRUFBUysxQixRQUFTLElBQ3BCLENBQ0YsRUFDSUMsR0FBaUIsU0FBd0JoMkIsRUFBVXN6QixFQUFPN3NCLEVBQVV3dkIsR0FXdEUsT0FWQTNDLEVBQU1yUixRQUFVNlIsR0FBa0JSLEdBQ2xDQSxFQUFNYyxPQUFTeEMsSUFBZTFDLEVBQVV6b0IsR0FBWUEsRUFBV0EsR0FBWXpHLElBQWEwdEIsRUFBa0J3SSxHQUFlbDJCLEVBQVV5RyxFQUFVNnNCLEdBQVN0ekIsRUFBU29sQixPQUFTa08sRUFBTTZDLFFBQzlLN0MsRUFBTWEsS0FBT3ZDLEdBQWMwQixFQUFNYyxRQUFVZCxFQUFNZ0MsZ0JBQWtCanRCLEtBQUttQyxJQUFJOG9CLEVBQU04QyxjQUFnQixJQUVsRy9DLEdBQW1CcnpCLEVBQVVzekIsRUFBTyxTQUFVLFFBQVN0ekIsRUFBU3EyQixNQUFRLFNBQVcsR0FFbkZDLEdBQW1CaEQsS0FBV3R6QixFQUFTdTJCLFFBQVVqRCxHQUNqRDJDLEdBQWNMLEdBQWU1MUIsRUFBVXN6QixHQUN2Q3R6QixFQUFTMjBCLElBQU0sR0FBS2UsR0FBZTExQixFQUFVQSxFQUFTKzBCLFFBRS9DLzBCLENBQ1QsRUFDSXcyQixHQUFpQixTQUF3QnB6QixFQUFXcXpCLEdBQ3RELE9BQVExRyxFQUFTMkcsZUFBaUJsSyxFQUFlLGdCQUFpQmlLLEtBQWExRyxFQUFTMkcsY0FBY2gxQixPQUFPKzBCLEVBQVNyekIsRUFDeEgsRUFDSXV6QixHQUFvQixTQUEyQnhSLEVBQU9yQyxFQUFNc1AsRUFBTzFCLEVBQWdCdUUsR0FHckYsT0FGQTJCLEdBQVd6UixFQUFPckMsRUFBTW1TLEdBRW5COVAsRUFBTWtOLFVBSU5ELEdBQVNqTixFQUFNOUQsTUFBUTNHLElBQWV5SyxFQUFNRSxPQUE0QixJQUFwQkYsRUFBTTRGLEtBQUs4TCxPQUFtQjFSLEVBQU1FLE1BQVFGLEVBQU00RixLQUFLOEwsT0FBU2hKLElBQXVCOUssR0FBUXBRLE9BQ3RKb2UsR0FBWXIxQixLQUFLeXBCLEdBRWpCQSxFQUFNK00sTUFBUSxDQUFDK0MsRUFBT3ZFLEdBQ2YsUUFKVCxFQUhTLENBU1gsRUFDSW9HLEdBQStCLFNBQVNBLEVBQTZCak4sR0FDdkUsSUFBSTVILEVBQVM0SCxFQUFLNUgsT0FDbEIsT0FBT0EsR0FBVUEsRUFBTzBTLEtBQU8xUyxFQUFPb1EsV0FBYXBRLEVBQU84VSxRQUFVOVUsRUFBTzRULFVBQVksR0FBS2lCLEVBQTZCN1UsR0FDM0gsRUFFQXFVLEdBQXFCLFNBQTRCcE0sR0FDL0MsSUFBSTNPLEVBQU8yTyxFQUFNM08sS0FDakIsTUFBZ0IsZ0JBQVRBLEdBQW1DLFlBQVRBLENBQ25DLEVBd0ZJeWIsR0FBZSxTQUFzQjV6QixFQUFXL0UsRUFBVTQ0QixFQUFhQyxHQUN6RSxJQUFJQyxFQUFTL3pCLEVBQVV5eEIsUUFDbkJ1QyxFQUFNeEYsR0FBY3Z6QixJQUFhLEVBQ2pDZzVCLEVBQWdCajBCLEVBQVUyeEIsT0FBUzN4QixFQUFVbXlCLE1BT2pELE9BTkE4QixJQUFrQkgsSUFBa0I5ekIsRUFBVWdpQixPQUFTZ1MsRUFBTWgwQixFQUFVaWlCLE1BQ3ZFamlCLEVBQVVpaUIsS0FBTytSLEVBQ2pCaDBCLEVBQVVteUIsTUFBUzRCLEVBQWVBLEVBQVMsRUFBSSxLQUFPdkYsR0FBY3dGLEdBQU9ELEVBQVMsR0FBSy96QixFQUFVNHhCLFFBQVVtQyxHQUFqRkMsRUFDNUJDLEVBQWdCLElBQU1ILEdBQWlCeEIsR0FBZXR5QixFQUFXQSxFQUFVMnhCLE9BQVMzeEIsRUFBVW15QixNQUFROEIsR0FDdEdqMEIsRUFBVTZlLFFBQVV1VCxHQUFRcHlCLEdBQzVCNnpCLEdBQWUvQyxHQUFTOXdCLEVBQVU2ZSxPQUFRN2UsR0FDbkNBLENBQ1QsRUFDSWswQixHQUF5QixTQUFnQ2wwQixHQUMzRCxPQUFPQSxhQUFxQm0wQixHQUFXckQsR0FBUzl3QixHQUFhNHpCLEdBQWE1ekIsRUFBV0EsRUFBVWlpQixLQUNqRyxFQUNJbVMsR0FBZ0IsQ0FDbEJwRCxPQUFRLEVBQ1JxRCxRQUFTakgsR0FDVDhFLGNBQWU5RSxJQUViMEYsR0FBaUIsU0FBU0EsRUFBZTl5QixFQUFXcUQsRUFBVWl4QixHQUNoRSxJQUlBdGxCLEVBQ0l1bEIsRUFDQUMsRUFOQUMsRUFBU3owQixFQUFVeTBCLE9BQ25CQyxFQUFTMTBCLEVBQVVtekIsU0FBV2lCLEdBQzlCTyxFQUFrQjMwQixFQUFVL0UsWUFBY293QixFQUFVcUosRUFBT0wsU0FBUSxHQUFTcjBCLEVBQVVpaUIsS0FNMUYsT0FBSWlGLEVBQVU3akIsS0FBYzRPLE1BQU01TyxJQUFhQSxLQUFZb3hCLElBRXpERixFQUFTbHhCLEVBQVM0WSxPQUFPLEdBQ3pCdVksRUFBb0MsTUFBeEJueEIsRUFBU3NYLFFBQVEsR0FDN0IzTCxFQUFJM0wsRUFBU2pMLFFBQVEsS0FFTixNQUFYbThCLEdBQTZCLE1BQVhBLEdBQ3BCdmxCLEdBQUssSUFBTTNMLEVBQVdBLEVBQVNyTCxRQUFRLElBQUssTUFDekIsTUFBWHU4QixFQUFpQkcsRUFBTzFELE9BQVMwRCxFQUFPTCxRQUFRSyxFQUFPakQsU0FBVyxLQUFPelMsV0FBVzNiLEVBQVNzWCxPQUFPLEtBQU8sSUFBTTZaLEdBQWF4bEIsRUFBSSxFQUFJMGxCLEVBQVNKLEdBQWtCcEMsZ0JBQWtCLElBQU0sSUFHL0xsakIsRUFBSSxHQUNOM0wsS0FBWW94QixJQUFXQSxFQUFPcHhCLEdBQVlzeEIsR0FDbkNGLEVBQU9weEIsS0FHaEJreEIsRUFBU3ZWLFdBQVczYixFQUFTNFksT0FBT2pOLEVBQUksR0FBSzNMLEVBQVNzWCxPQUFPM0wsRUFBSSxJQUU3RHdsQixHQUFhRixJQUNmQyxFQUFTQSxFQUFTLEtBQU9qSSxFQUFTZ0ksR0FBb0JBLEVBQWlCLEdBQUtBLEdBQWtCcEMsaUJBR3pGbGpCLEVBQUksRUFBSThqQixFQUFlOXlCLEVBQVdxRCxFQUFTc1gsT0FBTyxFQUFHM0wsRUFBSSxHQUFJc2xCLEdBQW9CQyxFQUFTSSxFQUFrQkosSUFHbEcsTUFBWmx4QixFQUFtQnN4QixHQUFtQnR4QixDQUMvQyxFQUNJdXhCLEdBQW1CLFNBQTBCamhCLEVBQU1raEIsRUFBUWo0QixHQUM3RCxJQUdJazRCLEVBQ0FqVyxFQUpBa1csRUFBV2pKLEVBQVUrSSxFQUFPLElBQzVCRyxHQUFhRCxFQUFXLEVBQUksSUFBTXBoQixFQUFPLEVBQUksRUFBSSxHQUNqRGdVLEVBQU9rTixFQUFPRyxHQU9sQixHQUhBRCxJQUFhcE4sRUFBSzFzQixTQUFXNDVCLEVBQU8sSUFDcENsTixFQUFLOUksT0FBU2ppQixFQUVWK1csRUFBTSxDQUlSLElBSEFtaEIsRUFBU25OLEVBQ1Q5SSxFQUFTamlCLEVBRUZpaUIsS0FBWSxvQkFBcUJpVyxJQUV0Q0EsRUFBU2pXLEVBQU84SSxLQUFLMkgsVUFBWSxDQUFDLEVBQ2xDelEsRUFBU21OLEVBQVluTixFQUFPOEksS0FBS29JLFVBQVlsUixFQUFPQSxPQUd0RDhJLEVBQUt5SixnQkFBa0JwRixFQUFZOEksRUFBTzFELGlCQUMxQ3pkLEVBQU8sRUFBSWdVLEVBQUtzTixhQUFlLEVBQUl0TixFQUFLYyxRQUFVb00sRUFBT0csRUFBWSxFQUN2RSxDQUVBLE9BQU8sSUFBSUUsR0FBTUwsRUFBTyxHQUFJbE4sRUFBTWtOLEVBQU9HLEVBQVksR0FDdkQsRUFDSUcsR0FBcUIsU0FBNEI5d0IsRUFBT2txQixHQUMxRCxPQUFPbHFCLEdBQW1CLElBQVZBLEVBQWNrcUIsRUFBS2xxQixHQUFTa3FCLENBQzlDLEVBQ0ltRSxHQUFTLFNBQWdCMEMsRUFBS0MsRUFBS2h4QixHQUNyQyxPQUFPQSxFQUFRK3dCLEVBQU1BLEVBQU0vd0IsRUFBUWd4QixFQUFNQSxFQUFNaHhCLENBQ2pELEVBQ0lnaUIsR0FBVSxTQUFpQmhpQixFQUFPNEssR0FDcEMsT0FBUWlZLEVBQVU3aUIsS0FBWTRLLEVBQUl5ZCxFQUFTekwsS0FBSzVjLElBQWU0SyxFQUFFLEdBQVAsRUFDNUQsRUFFQW5PLEdBQVEsU0FBZXMwQixFQUFLQyxFQUFLaHhCLEdBQy9CLE9BQU84d0IsR0FBbUI5d0IsR0FBTyxTQUFVNEssR0FDekMsT0FBT3lqQixHQUFPMEMsRUFBS0MsRUFBS3BtQixFQUMxQixHQUNGLEVBQ0lxbUIsR0FBUyxHQUFHeDdCLE1BQ1p5N0IsR0FBZSxTQUFzQmx4QixFQUFPbXhCLEdBQzlDLE9BQU9ueEIsR0FBUzBuQixFQUFVMW5CLElBQVUsV0FBWUEsS0FBV214QixJQUFhbnhCLEVBQU01TCxRQUFVNEwsRUFBTTVMLE9BQVMsS0FBSzRMLEdBQVMwbkIsRUFBVTFuQixFQUFNLE9BQVNBLEVBQU00akIsVUFBWTVqQixJQUFVMlMsQ0FDNUssRUFDSXllLEdBQVcsU0FBa0JDLEVBQUlDLEVBQWNDLEdBS2pELFlBSm9CLElBQWhCQSxJQUNGQSxFQUFjLElBR1RGLEVBQUd4OEIsU0FBUSxTQUFVbUwsR0FDMUIsSUFBSXd4QixFQUVKLE9BQU8zTyxFQUFVN2lCLEtBQVdzeEIsR0FBZ0JKLEdBQWFseEIsRUFBTyxJQUFNd3hCLEVBQWVELEdBQWF0OUIsS0FBS2laLE1BQU1za0IsRUFBY3hILEdBQVFocUIsSUFBVXV4QixFQUFZdDlCLEtBQUsrTCxFQUNoSyxLQUFNdXhCLENBQ1IsRUFFQXZILEdBQVUsU0FBaUJocUIsRUFBT3lvQixFQUFPNkksR0FDdkMsT0FBT3RMLElBQWF5QyxHQUFTekMsRUFBU2pzQixTQUFXaXNCLEVBQVNqc0IsU0FBU2lHLElBQVM2aUIsRUFBVTdpQixJQUFXc3hCLElBQWlCcEwsR0FBaUJ1TCxLQUFxRXhKLEVBQVNqb0IsR0FBU294QixHQUFTcHhCLEVBQU9zeEIsR0FBZ0JKLEdBQWFseEIsR0FBU2l4QixHQUFPbjFCLEtBQUtrRSxFQUFPLEdBQUtBLEVBQVEsQ0FBQ0EsR0FBUyxHQUE1S2l4QixHQUFPbjFCLE1BQU0yc0IsR0FBUzdWLEdBQU12WSxpQkFBaUIyRixHQUFRLEVBQ3JNLEVBQ0lqRyxHQUFXLFNBQWtCaUcsR0FFL0IsT0FEQUEsRUFBUWdxQixHQUFRaHFCLEdBQU8sSUFBTTJvQixFQUFNLGtCQUFvQixDQUFDLEVBQ2pELFNBQVUvZCxHQUNmLElBQUk4bUIsRUFBSzF4QixFQUFNOUUsU0FBVzhFLEVBQU0yeEIsZUFBaUIzeEIsRUFDakQsT0FBT2dxQixHQUFRcGYsRUFBRzhtQixFQUFHcjNCLGlCQUFtQnEzQixFQUFLQSxJQUFPMXhCLEVBQVEyb0IsRUFBTSxrQkFBb0IvVixFQUFLeEksY0FBYyxPQUFTcEssRUFDcEgsQ0FDRixFQUNJNHhCLEdBQVUsU0FBaUIvdEIsR0FDN0IsT0FBT0EsRUFBRWd1QixNQUFLLFdBQ1osTUFBTyxHQUFLanhCLEtBQUt1QyxRQUNuQixHQUNGLEVBR0EydUIsR0FBYSxTQUFvQmxuQixHQUMvQixHQUFJNGMsRUFBWTVjLEdBQ2QsT0FBT0EsRUFHVCxJQUFJMFksRUFBT29FLEVBQVU5YyxHQUFLQSxFQUFJLENBQzVCelEsS0FBTXlRLEdBR1JuUyxFQUFPczVCLEdBQVd6TyxFQUFLN3FCLE1BQ25CdTVCLEVBQU8xTyxFQUFLME8sTUFBUSxFQUNwQjlHLEVBQU92USxXQUFXMkksRUFBSzRILE9BQVMsRUFDaEMvVixFQUFRLENBQUMsRUFDVDhjLEVBQVlELEVBQU8sR0FBS0EsRUFBTyxFQUMvQkUsRUFBU3RrQixNQUFNb2tCLElBQVNDLEVBQ3hCRSxFQUFPN08sRUFBSzZPLEtBQ1pDLEVBQVNKLEVBQ1RLLEVBQVNMLEVBYWIsT0FYSW5QLEVBQVVtUCxHQUNaSSxFQUFTQyxFQUFTLENBQ2hCN1UsT0FBUSxHQUNSOFUsTUFBTyxHQUNQNXpCLElBQUssR0FDTHN6QixJQUFTLEdBQ0RDLEdBQWFDLElBQ3ZCRSxFQUFTSixFQUFLLEdBQ2RLLEVBQVNMLEVBQUssSUFHVCxTQUFVcm5CLEVBQUd4UCxFQUFRMEksR0FDMUIsSUFFSTB1QixFQUNBQyxFQUNBLzBCLEVBQ0FDLEVBQ0FtaEIsRUFDQTRULEVBQ0F6QixFQUNBRCxFQUNBMkIsRUFWQXYrQixHQUFLMFAsR0FBS3lmLEdBQU1sdkIsT0FDaEJ1K0IsRUFBWXhkLEVBQU1oaEIsR0FXdEIsSUFBS3crQixFQUFXLENBR2QsS0FGQUQsRUFBdUIsU0FBZHBQLEVBQUtuSixLQUFrQixHQUFLbUosRUFBS25KLE1BQVEsQ0FBQyxFQUFHNk0sSUFBVSxJQUVuRCxDQUdYLElBRkFnSyxHQUFPaEssRUFFQWdLLEdBQU9BLEVBQU1udEIsRUFBRTZ1QixLQUFVdjBCLHdCQUF3QjJDLE9BQVM0eEIsRUFBU3YrQixJQUUxRXUrQixFQUFTditCLEdBQUt1K0IsR0FDaEIsQ0FRQSxJQU5BQyxFQUFZeGQsRUFBTWhoQixHQUFLLEdBQ3ZCbytCLEVBQVVMLEVBQVN0eEIsS0FBS213QixJQUFJMkIsRUFBUXYrQixHQUFLaStCLEVBQVMsR0FBS0osRUFBT1UsRUFDOURGLEVBQVVFLElBQVcxTCxFQUFVLEVBQUlrTCxFQUFTLzlCLEVBQUlrK0IsRUFBU0ssRUFBUyxHQUFLVixFQUFPVSxFQUFTLEVBQ3ZGMUIsRUFBTSxFQUNORCxFQUFNL0osRUFFRHlMLEVBQUksRUFBR0EsRUFBSXQrQixFQUFHcytCLElBQ2pCaDFCLEVBQUlnMUIsRUFBSUMsRUFBU0gsRUFDakI3MEIsRUFBSTgwQixHQUFXQyxFQUFJQyxFQUFTLEdBQzVCQyxFQUFVRixHQUFLNVQsRUFBS3NULEVBQThCdnhCLEtBQUttQyxJQUFhLE1BQVRvdkIsRUFBZXowQixFQUFJRCxHQUFuRDRwQixFQUFNNXBCLEVBQUlBLEVBQUlDLEVBQUlBLEdBQzdDbWhCLEVBQUltUyxJQUFRQSxFQUFNblMsR0FDbEJBLEVBQUlrUyxJQUFRQSxFQUFNbFMsR0FHWCxXQUFUbVQsR0FBcUJKLEdBQVFlLEdBQzdCQSxFQUFVM0IsSUFBTUEsRUFBTUQsRUFDdEI0QixFQUFVNUIsSUFBTUEsRUFDaEI0QixFQUFVL25CLEVBQUl6VyxHQUFLd21CLFdBQVcySSxFQUFLckksU0FBV04sV0FBVzJJLEVBQUtucEIsT0FBU3U0QixFQUFTditCLEVBQUlBLEVBQUksRUFBS2crQixFQUErQyxNQUFUQSxFQUFlaCtCLEVBQUl1K0IsRUFBU0EsRUFBM0Q5eEIsS0FBS293QixJQUFJMEIsRUFBUXYrQixFQUFJdStCLEtBQWlELElBQWUsVUFBVFYsR0FBb0IsRUFBSSxHQUN4TVcsRUFBVTd1QixFQUFJM1AsRUFBSSxFQUFJKzJCLEVBQU8vMkIsRUFBSSsyQixFQUNqQ3lILEVBQVV4ZSxFQUFJNk4sR0FBUXNCLEVBQUtySSxRQUFVcUksRUFBS25wQixPQUFTLEVBRW5EMUIsRUFBT0EsR0FBUXRFLEVBQUksRUFBSXkrQixHQUFZbjZCLEdBQVFBLENBQzdDLENBR0EsT0FEQXRFLEdBQUt3K0IsRUFBVWhvQixHQUFLZ29CLEVBQVU1QixLQUFPNEIsRUFBVTNCLEtBQU8sRUFDL0M3RyxHQUFjd0ksRUFBVTd1QixHQUFLckwsRUFBT0EsRUFBS3RFLEdBQUtBLEdBQUt3K0IsRUFBVS9uQixHQUFLK25CLEVBQVV4ZSxDQUNyRixDQUNGLEVBQ0kwZSxHQUFpQixTQUF3QmpvQixHQUUzQyxJQUFJb0osRUFBSXBULEtBQUtreUIsSUFBSSxLQUFNbG9CLEVBQUksSUFBSWpELE1BQU0sS0FBSyxJQUFNLElBQUl2VCxRQUVwRCxPQUFPLFNBQVUyK0IsR0FDZixJQUFJaitCLEVBQUlxMUIsR0FBY3ZwQixLQUFLNEgsTUFBTW1TLFdBQVdvWSxHQUFPbm9CLEdBQUtBLEVBQUlvSixHQUU1RCxPQUFRbGYsRUFBSUEsRUFBSSxHQUFLa2YsR0FBS3lULEVBQVVzTCxHQUFPLEVBQUkvUSxHQUFRK1EsR0FDekQsQ0FDRixFQUNJQyxHQUFPLFNBQWNDLEVBQVFqekIsR0FDL0IsSUFDSWt6QixFQUNBQyxFQUZBOTlCLEVBQVU0eUIsRUFBU2dMLEdBa0J2QixPQWRLNTlCLEdBQVdxeUIsRUFBVXVMLEtBQ3hCQyxFQUFTNzlCLEVBQVU0OUIsRUFBT0MsUUFBVWxNLEVBRWhDaU0sRUFBT0csUUFDVEgsRUFBU2pKLEdBQVFpSixFQUFPRyxTQUVwQkQsR0FBUTFMLEVBQVV3TCxFQUFPLE9BQzNCQyxHQUFVQSxJQUdaRCxFQUFTSixHQUFlSSxFQUFPSSxZQUk1QnZDLEdBQW1COXdCLEVBQVEzSyxFQUFtQ215QixFQUFZeUwsR0FBVSxTQUFVRixHQUVuRyxPQURBSSxFQUFPRixFQUFPRixHQUNQbnlCLEtBQUttQyxJQUFJb3dCLEVBQU9KLElBQVFHLEVBQVNDLEVBQU9KLENBQ2pELEVBQUksU0FBVUEsR0FTWixJQVJBLElBS0lPLEVBQ0FDLEVBTkE5MUIsRUFBSWtkLFdBQVd3WSxFQUFPSixFQUFJdDFCLEVBQUlzMUIsR0FDOUJyMUIsRUFBSWlkLFdBQVd3WSxFQUFPSixFQUFJcjFCLEVBQUksR0FDOUJxekIsRUFBTS9KLEVBQ053TSxFQUFVLEVBQ1Y3b0IsRUFBSXNvQixFQUFPNytCLE9BSVJ1VyxNQUlIMm9CLEVBSEVILEdBQ0ZHLEVBQUtMLEVBQU90b0IsR0FBR2xOLEVBQUlBLEdBRVQ2MUIsR0FEVkMsRUFBS04sRUFBT3RvQixHQUFHak4sRUFBSUEsR0FDQzYxQixFQUVmM3lCLEtBQUttQyxJQUFJa3dCLEVBQU90b0IsR0FBS2xOLElBR25Cc3pCLElBQ1BBLEVBQU11QyxFQUNORSxFQUFVN29CLEdBS2QsT0FEQTZvQixHQUFXTixHQUFVbkMsR0FBT21DLEVBQVNELEVBQU9PLEdBQVdULEVBQ2hESSxHQUFRSyxJQUFZVCxHQUFPdEwsRUFBVXNMLEdBQU9TLEVBQVVBLEVBQVV4UixHQUFRK1EsRUFDakYsRUE3QjRDRixHQUFlSSxHQThCN0QsRUFDSTl2QixHQUFTLFNBQWdCNHRCLEVBQUtDLEVBQUt5QyxFQUFtQkMsR0FDeEQsT0FBTzVDLEdBQW1CN0ksRUFBUzhJLElBQVFDLEdBQTRCLElBQXRCeUMsS0FBZ0NBLEVBQW9CLElBQU1DLEdBQWdCLFdBQ3pILE9BQU96TCxFQUFTOEksR0FBT0EsS0FBT253QixLQUFLdUMsU0FBVzR0QixFQUFJMzhCLFVBQVlxL0IsRUFBb0JBLEdBQXFCLFFBQVVDLEVBQWlCRCxFQUFvQixFQUFJN3lCLEtBQUtreUIsSUFBSSxJQUFLVyxFQUFvQixJQUFJci9CLE9BQVMsR0FBSyxJQUFNd00sS0FBS2tDLE1BQU1sQyxLQUFLNEgsT0FBT3VvQixFQUFNMEMsRUFBb0IsRUFBSTd5QixLQUFLdUMsVUFBWTZ0QixFQUFNRCxFQUEwQixJQUFwQjBDLElBQTRCQSxHQUFxQkEsRUFBb0JDLEdBQWtCQSxDQUMvWCxHQUNGLEVBQ0lDLEdBQU8sV0FDVCxJQUFLLElBQUlDLEVBQU92bEIsVUFBVWphLE9BQVF5L0IsRUFBWSxJQUFJeC9CLE1BQU11L0IsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNwRkQsRUFBVUMsR0FBUXpsQixVQUFVeWxCLEdBRzlCLE9BQU8sU0FBVTl6QixHQUNmLE9BQU82ekIsRUFBVUUsUUFBTyxTQUFVbnBCLEVBQUdrVSxHQUNuQyxPQUFPQSxFQUFFbFUsRUFDWCxHQUFHNUssRUFDTCxDQUNGLEVBQ0lnMEIsR0FBVSxTQUFpQjlKLEVBQU01UCxHQUNuQyxPQUFPLFNBQVV0YSxHQUNmLE9BQU9rcUIsRUFBS3ZQLFdBQVczYSxLQUFXc2EsR0FBUTBILEdBQVFoaUIsR0FDcEQsQ0FDRixFQUNJaTBCLEdBQVksU0FBbUJsRCxFQUFLQyxFQUFLaHhCLEdBQzNDLE9BQU9XLEdBQVNvd0IsRUFBS0MsRUFBSyxFQUFHLEVBQUdoeEIsRUFDbEMsRUFDSWswQixHQUFhLFNBQW9CcndCLEVBQUd6SCxFQUFTNEQsR0FDL0MsT0FBTzh3QixHQUFtQjl3QixHQUFPLFNBQVVuRCxHQUN6QyxPQUFPZ0gsSUFBSXpILEVBQVFTLEdBQ3JCLEdBQ0YsRUFDSXMzQixHQUFPLFNBQVNBLEVBQUtwRCxFQUFLQyxFQUFLaHhCLEdBRWpDLElBQUlvMEIsRUFBUXBELEVBQU1ELEVBQ2xCLE9BQU85SSxFQUFTOEksR0FBT21ELEdBQVduRCxFQUFLb0QsRUFBSyxFQUFHcEQsRUFBSTM4QixRQUFTNDhCLEdBQU9GLEdBQW1COXdCLEdBQU8sU0FBVUEsR0FDckcsT0FBUW8wQixHQUFTcDBCLEVBQVErd0IsR0FBT3FELEdBQVNBLEVBQVFyRCxDQUNuRCxHQUNGLEVBQ0lzRCxHQUFXLFNBQVNBLEVBQVN0RCxFQUFLQyxFQUFLaHhCLEdBQ3pDLElBQUlvMEIsRUFBUXBELEVBQU1ELEVBQ2R1RCxFQUFnQixFQUFSRixFQUNaLE9BQU9uTSxFQUFTOEksR0FBT21ELEdBQVduRCxFQUFLc0QsRUFBUyxFQUFHdEQsRUFBSTM4QixPQUFTLEdBQUk0OEIsR0FBT0YsR0FBbUI5d0IsR0FBTyxTQUFVQSxHQUU3RyxPQUFPK3dCLElBRFAvd0IsR0FBU3MwQixHQUFTdDBCLEVBQVErd0IsR0FBT3VELEdBQVNBLEdBQVMsR0FDN0JGLEVBQVFFLEVBQVF0MEIsRUFBUUEsRUFDaEQsR0FDRixFQUNJd2tCLEdBQWlCLFNBQXdCeGtCLEdBUzNDLElBUEEsSUFFSTJLLEVBQ0E0cEIsRUFDQTcxQixFQUNBckosRUFMQTQyQixFQUFPLEVBQ1BoWSxFQUFJLEtBTUN0SixFQUFJM0ssRUFBTWpNLFFBQVEsVUFBV2s0QixLQUNwQ3Z0QixFQUFNc0IsRUFBTWpNLFFBQVEsSUFBSzRXLEdBQ3pCdFYsRUFBa0MsTUFBeEIySyxFQUFNNFgsT0FBT2pOLEVBQUksR0FDM0I0cEIsRUFBT3YwQixFQUFNc1csT0FBTzNMLEVBQUksRUFBR2pNLEVBQU1pTSxFQUFJLEdBQUcvVyxNQUFNeUIsRUFBVSt5QixFQUFxQkYsR0FDN0VqVSxHQUFLalUsRUFBTXNXLE9BQU8yVixFQUFNdGhCLEVBQUlzaEIsR0FBUTlvQixHQUFPOU4sRUFBVWsvQixHQUFRQSxFQUFLLEdBQUlsL0IsRUFBVSxHQUFLay9CLEVBQUssSUFBS0EsRUFBSyxJQUFNLE1BQzFHdEksRUFBT3Z0QixFQUFNLEVBR2YsT0FBT3VWLEVBQUlqVSxFQUFNc1csT0FBTzJWLEVBQU1qc0IsRUFBTTVMLE9BQVM2M0IsRUFDL0MsRUFDSXRyQixHQUFXLFNBQWtCNnpCLEVBQU9DLEVBQU9DLEVBQVFDLEVBQVEzMEIsR0FDN0QsSUFBSTQwQixFQUFVSCxFQUFRRCxFQUNsQkssRUFBV0YsRUFBU0QsRUFDeEIsT0FBTzVELEdBQW1COXdCLEdBQU8sU0FBVUEsR0FDekMsT0FBTzAwQixJQUFXMTBCLEVBQVF3MEIsR0FBU0ksRUFBVUMsR0FBWSxFQUMzRCxHQUNGLEVBQ0luNEIsR0FBYyxTQUFTQSxFQUFZVyxFQUFPcUIsRUFBS28yQixFQUFVQyxHQUMzRCxJQUFJN0ssRUFBT3RjLE1BQU12USxFQUFRcUIsR0FBTyxFQUFJLFNBQVVzVixHQUM1QyxPQUFRLEVBQUlBLEdBQUszVyxFQUFRMlcsRUFBSXRWLENBQy9CLEVBRUEsSUFBS3dyQixFQUFNLENBQ1QsSUFFSWxXLEVBQ0FySixFQUNBcXFCLEVBQ0E3Z0MsRUFDQThnQyxFQU5BclMsRUFBV0MsRUFBVXhsQixHQUNyQjYzQixFQUFTLENBQUMsRUFTZCxJQUZhLElBQWJKLElBQXNCQyxFQUFTLEtBQU9ELEVBQVcsTUFFN0NsUyxFQUNGdmxCLEVBQVEsQ0FDTjJXLEVBQUczVyxHQUVMcUIsRUFBTSxDQUNKc1YsRUFBR3RWLFFBRUEsR0FBSXVwQixFQUFTNXFCLEtBQVc0cUIsRUFBU3ZwQixHQUFNLENBSzVDLElBSkFzMkIsRUFBZ0IsR0FDaEI3Z0MsRUFBSWtKLEVBQU1qSixPQUNWNmdDLEVBQUs5Z0MsRUFBSSxFQUVKd1csRUFBSSxFQUFHQSxFQUFJeFcsRUFBR3dXLElBQ2pCcXFCLEVBQWMvZ0MsS0FBS3lJLEVBQVlXLEVBQU1zTixFQUFJLEdBQUl0TixFQUFNc04sS0FHckR4VyxJQUVBKzFCLEVBQU8sU0FBY2xXLEdBQ25CQSxHQUFLN2YsRUFDTCxJQUFJd1csRUFBSS9KLEtBQUttd0IsSUFBSWtFLElBQU1qaEIsR0FDdkIsT0FBT2doQixFQUFjcnFCLEdBQUdxSixFQUFJckosRUFDOUIsRUFFQW1xQixFQUFXcDJCLENBQ2IsTUFBWXEyQixJQUNWMTNCLEVBQVFxckIsR0FBT1QsRUFBUzVxQixHQUFTLEdBQUssQ0FBQyxFQUFHQSxJQUc1QyxJQUFLMjNCLEVBQWUsQ0FDbEIsSUFBS2hoQixLQUFLdFYsRUFDUnkyQixHQUFjcjVCLEtBQUtvNUIsRUFBUTczQixFQUFPMlcsRUFBRyxNQUFPdFYsRUFBSXNWLElBR2xEa1csRUFBTyxTQUFjbFcsR0FDbkIsT0FBT29oQixHQUFrQnBoQixFQUFHa2hCLEtBQVl0UyxFQUFXdmxCLEVBQU0yVyxFQUFJM1csRUFDL0QsQ0FDRixDQUNGLENBRUEsT0FBT3l6QixHQUFtQmdFLEVBQVU1SyxFQUN0QyxFQUNJbUwsR0FBdUIsU0FBOEI5OEIsRUFBVSs4QixFQUFVQyxHQUUzRSxJQUVJdmhCLEVBQ0F2VixFQUNBKzJCLEVBSkFwRixFQUFTNzNCLEVBQVM2M0IsT0FDbEJXLEVBQU0vSixFQUtWLElBQUtoVCxLQUFLb2MsR0FDUjN4QixFQUFXMnhCLEVBQU9wYyxHQUFLc2hCLEdBRVIsS0FBUUMsR0FBWTkyQixHQUFZc3lCLEdBQU90eUIsRUFBV21DLEtBQUttQyxJQUFJdEUsTUFDeEUrMkIsRUFBUXhoQixFQUNSK2MsRUFBTXR5QixHQUlWLE9BQU8rMkIsQ0FDVCxFQUNJQyxHQUFZLFNBQW1COTVCLEVBQVcyVCxFQUFNb21CLEdBQ2xELElBSUlsRixFQUNBL0gsRUFDQTFNLEVBTkFuUixFQUFJalAsRUFBVTJuQixLQUNkcVMsRUFBVy9xQixFQUFFMEUsR0FDYnNtQixFQUFjNVAsRUFDZHBVLEVBQVVqVyxFQUFVazZCLEtBS3hCLEdBQUtGLEVBV0wsT0FQQW5GLEVBQVM1bEIsRUFBRTBFLEVBQU8sVUFDbEJtWixFQUFRN2QsRUFBRWtyQixlQUFpQm42QixFQUMzQis1QixHQUFvQnBNLEdBQVlsMUIsUUFBVW8yQixLQUUxQzVZLElBQVlvVSxFQUFXcFUsR0FDdkJtSyxFQUFTeVUsRUFBU21GLEVBQVN6b0IsTUFBTXViLEVBQU8rSCxHQUFVbUYsRUFBUzc1QixLQUFLMnNCLEdBQ2hFekMsRUFBVzRQLEVBQ0o3WixDQUNULEVBQ0lnYSxHQUFhLFNBQW9CcDZCLEdBS25DLE9BSkEwd0IsR0FBa0Ixd0IsR0FFbEJBLEVBQVVxNkIsZUFBaUJyNkIsRUFBVXE2QixjQUFjOU0sT0FBT2pXLEdBQzFEdFgsRUFBVW01QixXQUFhLEdBQUtXLEdBQVU5NUIsRUFBVyxlQUMxQ0EsQ0FDVCxFQUVJczZCLEdBQXVCLEdBQ3ZCQyxHQUFnQixTQUF1QkMsR0FDekMsR0FBS0EsRUFHTCxHQUZBQSxHQUFVQSxFQUFPcG9CLE1BQVFvb0IsRUFBZ0IsU0FBS0EsRUFFMUN2TyxLQUFtQnVPLEVBQU9DLFNBQVUsQ0FFdEMsSUFBSXJvQixFQUFPb29CLEVBQU9wb0IsS0FDZHNvQixFQUFTN08sRUFBWTJPLEdBQ3JCRyxFQUFTdm9CLElBQVNzb0IsR0FBVUYsRUFBT3RvQixLQUFPLFdBQzVDcFgsS0FBS29qQixPQUFTLEVBQ2hCLEVBQUlzYyxFQUVKSSxFQUFtQixDQUNqQjFvQixLQUFNa2IsR0FDTi9oQixPQUFRb3VCLEdBQ1JyOUIsSUFBS285QixHQUNMak0sS0FBTXNOLEdBQ05DLFNBQVVDLEdBQ1ZDLFFBQVMsR0FFUEMsRUFBVSxDQUNaalQsV0FBWSxFQUNaOXRCLElBQUssRUFDTHF2QixVQUFXRSxHQUNYSCxRQUFTLENBQUMsRUFDVnZCLFNBQVUsR0FLWixHQUZBK04sS0FFSTBFLElBQVdHLEVBQVEsQ0FDckIsR0FBSWhTLEdBQVN2VyxHQUNYLE9BR0ZpZCxHQUFhc0wsRUFBUXRMLEdBQWFLLEdBQWU4SyxFQUFRSSxHQUFtQkssSUFHNUVsTyxHQUFPNE4sRUFBT2hwQixVQUFXb2IsR0FBTzZOLEVBQWtCbEwsR0FBZThLLEVBQVFTLEtBR3pFdFMsR0FBU2dTLEVBQU94YSxLQUFPL04sR0FBUXVvQixFQUUzQkgsRUFBT3hTLGFBQ1QrRixHQUFnQnoxQixLQUFLcWlDLEdBRXJCak4sR0FBZXRiLEdBQVEsR0FHekJBLEdBQWlCLFFBQVRBLEVBQWlCLE1BQVFBLEVBQUs2SixPQUFPLEdBQUdDLGNBQWdCOUosRUFBS3VJLE9BQU8sSUFBTSxRQUNwRixDQUVBdVMsR0FBVzlhLEVBQU11b0IsR0FFakJILEVBQU96UyxVQUFZeVMsRUFBT3pTLFNBQVNudEIsR0FBTSsvQixFQUFRM2MsR0FDbkQsTUFDRXNjLEdBQXFCaGlDLEtBQUtraUMsRUFFOUIsRUFPQVUsR0FBTyxJQUNIQyxHQUFlLENBQ2pCQyxLQUFNLENBQUMsRUFBR0YsR0FBTUEsSUFDaEJHLEtBQU0sQ0FBQyxFQUFHSCxHQUFNLEdBQ2hCSSxPQUFRLENBQUMsSUFBSyxJQUFLLEtBQ25CdGtDLE1BQU8sQ0FBQyxFQUFHLEVBQUcsR0FDZHVrQyxPQUFRLENBQUMsSUFBSyxFQUFHLEdBQ2pCQyxLQUFNLENBQUMsRUFBRyxJQUFLLEtBQ2Zwa0MsS0FBTSxDQUFDLEVBQUcsRUFBRzhqQyxJQUNiTyxLQUFNLENBQUMsRUFBRyxFQUFHLEtBQ2JDLE1BQU8sQ0FBQ1IsR0FBTUEsR0FBTUEsSUFDcEJTLE1BQU8sQ0FBQyxJQUFLLElBQUssR0FDbEJ4a0MsT0FBUSxDQUFDK2pDLEdBQU1BLEdBQU0sR0FDckJVLE9BQVEsQ0FBQ1YsR0FBTSxJQUFLLEdBQ3BCVyxLQUFNLENBQUMsSUFBSyxJQUFLLEtBQ2pCQyxPQUFRLENBQUMsSUFBSyxFQUFHLEtBQ2pCNWtDLE1BQU8sQ0FBQyxFQUFHLElBQUssR0FDaEJELElBQUssQ0FBQ2lrQyxHQUFNLEVBQUcsR0FDZmEsS0FBTSxDQUFDYixHQUFNLElBQUssS0FDbEI1akMsS0FBTSxDQUFDLEVBQUc0akMsR0FBTUEsSUFDaEJjLFlBQWEsQ0FBQ2QsR0FBTUEsR0FBTUEsR0FBTSxJQUtsQ2UsR0FBTyxTQUFjcmlDLEVBQUdzaUMsRUFBSUMsR0FFMUIsT0FBWSxHQURadmlDLEdBQUtBLEVBQUksRUFBSSxFQUFJQSxFQUFJLEdBQUssRUFBSSxHQUNkLEVBQUlzaUMsR0FBTUMsRUFBS0QsR0FBTXRpQyxFQUFJLEVBQUlBLEVBQUksR0FBS3VpQyxFQUFTLEVBQUp2aUMsRUFBUSxFQUFJc2lDLEdBQU1DLEVBQUtELElBQU8sRUFBSSxFQUFJdGlDLEdBQUssRUFBSXNpQyxHQUFNaEIsR0FBTyxHQUFLLENBQzlILEVBQ0lrQixHQUFhLFNBQW9CbnRCLEVBQUdvdEIsRUFBT0MsR0FDN0MsSUFDSTlhLEVBQ0ErYSxFQUNBcDBCLEVBQ0F2TyxFQUNBMGUsRUFDQTlmLEVBQ0E2OEIsRUFDQUQsRUFDQWxTLEVBQ0FzWixFQVZBdDBCLEVBQUsrRyxFQUF5QjZjLEVBQVU3YyxHQUFLLENBQUNBLEdBQUssR0FBSUEsR0FBSyxFQUFJaXNCLEdBQU1qc0IsRUFBSWlzQixJQUFRLEVBQXpFQyxHQUFhbmtDLE1BWTFCLElBQUtrUixFQUFHLENBTU4sR0FMcUIsTUFBakIrRyxFQUFFMEwsUUFBUSxLQUVaMUwsRUFBSUEsRUFBRTBMLE9BQU8sRUFBRzFMLEVBQUV4VyxPQUFTLElBR3pCMGlDLEdBQWFsc0IsR0FDZi9HLEVBQUlpekIsR0FBYWxzQixRQUNaLEdBQW9CLE1BQWhCQSxFQUFFZ04sT0FBTyxHQUFZLENBUzlCLEdBUkloTixFQUFFeFcsT0FBUyxJQUViK29CLEVBQUl2UyxFQUFFZ04sT0FBTyxHQUNic2dCLEVBQUl0dEIsRUFBRWdOLE9BQU8sR0FDYjlULEVBQUk4RyxFQUFFZ04sT0FBTyxHQUNiaE4sRUFBSSxJQUFNdVMsRUFBSUEsRUFBSSthLEVBQUlBLEVBQUlwMEIsRUFBSUEsR0FBa0IsSUFBYjhHLEVBQUV4VyxPQUFld1csRUFBRWdOLE9BQU8sR0FBS2hOLEVBQUVnTixPQUFPLEdBQUssS0FHakUsSUFBYmhOLEVBQUV4VyxPQUdKLE1BQU8sRUFEUHlQLEVBQUlsUCxTQUFTaVcsRUFBRTBMLE9BQU8sRUFBRyxHQUFJLE1BQ2hCLEdBQUl6UyxHQUFLLEVBQUlnekIsR0FBTWh6QixFQUFJZ3pCLEdBQU1saUMsU0FBU2lXLEVBQUUwTCxPQUFPLEdBQUksSUFBTSxLQUl4RXpTLEVBQUksRUFESitHLEVBQUlqVyxTQUFTaVcsRUFBRTBMLE9BQU8sR0FBSSxNQUNoQixHQUFJMUwsR0FBSyxFQUFJaXNCLEdBQU1qc0IsRUFBSWlzQixHQUNuQyxNQUFPLEdBQXVCLFFBQW5CanNCLEVBQUUwTCxPQUFPLEVBQUcsR0FHckIsR0FGQXpTLEVBQUlzMEIsRUFBU3Z0QixFQUFFaFgsTUFBTXMwQixHQUVoQjhQLEdBV0UsSUFBS3B0QixFQUFFN1csUUFBUSxLQUlwQixPQUZBOFAsRUFBSStHLEVBQUVoWCxNQUFNeXFCLEdBQ1o0WixHQUFjcDBCLEVBQUV6UCxPQUFTLElBQU15UCxFQUFFLEdBQUssR0FDL0JBLE9BZFB0TyxHQUFLc08sRUFBRSxHQUFLLElBQU0sSUFDbEJvUSxHQUFLcFEsRUFBRSxHQUFLLElBR1pzWixFQUFRLEdBRlJocEIsR0FBSzBQLEVBQUUsR0FBSyxNQUNacTBCLEVBQUkvakMsR0FBSyxHQUFLQSxHQUFLOGYsRUFBSSxHQUFLOWYsRUFBSThmLEVBQUk5ZixFQUFJOGYsR0FFeENwUSxFQUFFelAsT0FBUyxJQUFNeVAsRUFBRSxJQUFNLEdBRXpCQSxFQUFFLEdBQUsrekIsR0FBS3JpQyxFQUFJLEVBQUksRUFBRzRuQixFQUFHK2EsR0FDMUJyMEIsRUFBRSxHQUFLK3pCLEdBQUtyaUMsRUFBRzRuQixFQUFHK2EsR0FDbEJyMEIsRUFBRSxHQUFLK3pCLEdBQUtyaUMsRUFBSSxFQUFJLEVBQUc0bkIsRUFBRythLFFBUTVCcjBCLEVBQUkrRyxFQUFFaFgsTUFBTXMwQixJQUFrQjRPLEdBQWFhLFlBRzdDOXpCLEVBQUlBLEVBQUVwSSxJQUFJa1MsT0FDWixDQXlCQSxPQXZCSXFxQixJQUFVRyxJQUNaaGIsRUFBSXRaLEVBQUUsR0FBS2d6QixHQUNYcUIsRUFBSXIwQixFQUFFLEdBQUtnekIsR0FDWC95QixFQUFJRCxFQUFFLEdBQUtnekIsR0FHWDFpQyxJQUZBNjhCLEVBQU1wd0IsS0FBS293QixJQUFJN1QsRUFBRythLEVBQUdwMEIsS0FDckJpdEIsRUFBTW53QixLQUFLbXdCLElBQUk1VCxFQUFHK2EsRUFBR3AwQixLQUNILEVBRWRrdEIsSUFBUUQsRUFDVng3QixFQUFJMGUsRUFBSSxHQUVSNEssRUFBSW1TLEVBQU1ELEVBQ1Y5YyxFQUFJOWYsRUFBSSxHQUFNMHFCLEdBQUssRUFBSW1TLEVBQU1ELEdBQU9sUyxHQUFLbVMsRUFBTUQsR0FDL0N4N0IsRUFBSXk3QixJQUFRN1QsR0FBSythLEVBQUlwMEIsR0FBSythLEdBQUtxWixFQUFJcDBCLEVBQUksRUFBSSxHQUFLa3RCLElBQVFrSCxHQUFLcDBCLEVBQUlxWixHQUFLMEIsRUFBSSxHQUFLMUIsRUFBSSthLEdBQUtyWixFQUFJLEVBQzVGdHBCLEdBQUssSUFHUHNPLEVBQUUsTUFBUXRPLEVBQUksSUFDZHNPLEVBQUUsTUFBWSxJQUFKb1EsRUFBVSxJQUNwQnBRLEVBQUUsTUFBWSxJQUFKMVAsRUFBVSxLQUd0QjhqQyxHQUFjcDBCLEVBQUV6UCxPQUFTLElBQU15UCxFQUFFLEdBQUssR0FDL0JBLENBQ1QsRUFDSXUwQixHQUFrQixTQUF5Qnh0QixHQUU3QyxJQUFJd29CLEVBQVMsR0FDVGxmLEVBQUksR0FDSnZKLEdBQUssRUFPVCxPQU5BQyxFQUFFakQsTUFBTThjLElBQVc1dkIsU0FBUSxTQUFVK1YsR0FDbkMsSUFBSS9HLEVBQUkrRyxFQUFFaFgsTUFBTStvQixJQUFvQixHQUNwQ3lXLEVBQU9uL0IsS0FBS2laLE1BQU1rbUIsRUFBUXZ2QixHQUMxQnFRLEVBQUVqZ0IsS0FBSzBXLEdBQUs5RyxFQUFFelAsT0FBUyxFQUN6QixJQUNBZy9CLEVBQU9sZixFQUFJQSxFQUNKa2YsQ0FDVCxFQUNJaUYsR0FBZ0IsU0FBdUJwa0IsRUFBRytqQixFQUFPTSxHQUNuRCxJQUlJcGtCLEVBQ0Fxa0IsRUFDQTFaLEVBQ0ExcUIsRUFQQTRuQixFQUFTLEdBQ1R2bkIsR0FBVXlmLEVBQUk4SCxHQUFRbm9CLE1BQU02d0IsSUFDNUJuVixFQUFPMG9CLEVBQVEsUUFBVSxRQUN6QnJ0QixFQUFJLEVBTVIsSUFBS25XLEVBQ0gsT0FBT3lmLEVBT1QsR0FKQXpmLEVBQVNBLEVBQU9pSCxLQUFJLFNBQVUvQixHQUM1QixPQUFRQSxFQUFRcStCLEdBQVdyK0IsRUFBT3MrQixFQUFPLEtBQU8xb0IsR0FBUTBvQixFQUFRdCtCLEVBQU0sR0FBSyxJQUFNQSxFQUFNLEdBQUssS0FBT0EsRUFBTSxHQUFLLEtBQU9BLEVBQU0sR0FBS0EsRUFBTXBGLEtBQUssTUFBUSxHQUNySixJQUVJZ2tDLElBQ0Z6WixFQUFJdVosR0FBZ0Jua0IsSUFDcEJDLEVBQUlva0IsRUFBZXBrQixHQUViNWYsS0FBS3luQixLQUFZOEMsRUFBRTNLLEVBQUU1ZixLQUFLeW5CLElBSTlCLElBRkE1bkIsR0FEQW9rQyxFQUFRdGtCLEVBQUV0Z0IsUUFBUTh3QixHQUFXLEtBQUs5YyxNQUFNZ1YsSUFDOUJ2b0IsT0FBUyxFQUVadVcsRUFBSXhXLEVBQUd3VyxJQUNab1IsR0FBVXdjLEVBQU01dEIsS0FBT3VKLEVBQUVuZ0IsUUFBUTRXLEdBQUtuVyxFQUFPNGQsU0FBVzlDLEVBQU8sWUFBY3VQLEVBQUV6cUIsT0FBU3lxQixFQUFJcnFCLEVBQU9KLE9BQVNJLEVBQVM4akMsR0FBZ0JsbUIsU0FLM0ksSUFBS21tQixFQUlILElBRkFwa0MsR0FEQW9rQyxFQUFRdGtCLEVBQUV0TSxNQUFNOGMsS0FDTnJ3QixPQUFTLEVBRVp1VyxFQUFJeFcsRUFBR3dXLElBQ1pvUixHQUFVd2MsRUFBTTV0QixHQUFLblcsRUFBT21XLEdBSWhDLE9BQU9vUixFQUFTd2MsRUFBTXBrQyxFQUN4QixFQUNJc3dCLEdBQVksV0FDZCxJQUVBelEsRUFGSUMsRUFBSSx5RUFJUixJQUFLRCxLQUFLOGlCLEdBQ1I3aUIsR0FBSyxJQUFNRCxFQUFJLE1BR2pCLE9BQU8sSUFBSXdrQixPQUFPdmtCLEVBQUksSUFBSyxLQUM3QixDQVZnQixHQVdad2tCLEdBQVUsWUFDVi9iLEdBQXFCLFNBQTRCN1ksR0FDbkQsSUFDSW0wQixFQURBVSxFQUFXNzBCLEVBQUV2UCxLQUFLLEtBSXRCLEdBRkFtd0IsR0FBVTFILFVBQVksRUFFbEIwSCxHQUFVanhCLEtBQUtrbEMsR0FLakIsT0FKQVYsRUFBUVMsR0FBUWpsQyxLQUFLa2xDLEdBQ3JCNzBCLEVBQUUsR0FBS3cwQixHQUFjeDBCLEVBQUUsR0FBSW0wQixHQUMzQm4wQixFQUFFLEdBQUt3MEIsR0FBY3gwQixFQUFFLEdBQUltMEIsRUFBT0ksR0FBZ0J2MEIsRUFBRSxNQUU3QyxDQUVYLEVBUUl5WCxHQUFVLFdBQ1osSUFRSXFkLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBYkFDLEVBQVdDLEtBQUtDLElBQ2hCQyxFQUFnQixJQUNoQkMsRUFBZSxHQUNmQyxFQUFhTCxJQUNiTSxFQUFjRCxFQUNkRSxFQUFPLElBQU8sSUFDZEMsRUFBWUQsRUFDWi9vQixFQUFhLEdBT2JpcEIsRUFBUSxTQUFTQSxFQUFNOXVCLEdBQ3pCLElBRUkrdUIsRUFDQUMsRUFDQXZlLEVBQ0FuUSxFQUxBMnVCLEVBQVVaLElBQWFNLEVBQ3ZCTyxHQUFlLElBQU5sdkIsRUFxQmIsSUFmQ2l2QixFQUFVVCxHQUFpQlMsRUFBVSxLQUFPUCxHQUFjTyxFQUFVUixLQUdyRU0sR0FEQXRlLEdBREFrZSxHQUFlTSxHQUNNUCxHQUNKRyxHQUVILEdBQUtLLEtBQ2pCNXVCLElBQVU0dEIsRUFBTTV0QixNQUNoQjZ0QixFQUFTMWQsRUFBb0IsSUFBYnlkLEVBQU16ZCxLQUN0QnlkLEVBQU16ZCxLQUFPQSxHQUFjLElBQzNCb2UsR0FBYUUsR0FBV0EsR0FBV0gsRUFBTyxFQUFJQSxFQUFPRyxHQUNyREMsRUFBVyxHQUdiRSxJQUFXbkIsRUFBTUMsRUFBS2MsSUFFbEJFLEVBQ0YsSUFBS1osRUFBSyxFQUFHQSxFQUFLdm9CLEVBQVdyYyxPQUFRNGtDLElBRW5Ddm9CLEVBQVd1b0IsR0FBSTNkLEVBQU0wZCxFQUFRN3RCLEVBQU9OLEVBRzFDLEVBc0VBLE9BcEVBa3VCLEVBQVEsQ0FDTnpkLEtBQU0sRUFDTm5RLE1BQU8sRUFDUDZ1QixLQUFNLFdBQ0pMLEdBQU0sRUFDUixFQUNBTSxXQUFZLFNBQW9CQyxHQUM5QixPQUFPbEIsR0FBVSxLQUFRa0IsR0FBTyxJQUNsQyxFQUNBQyxLQUFNLFdBQ0EvVCxLQUNHRCxHQUFnQjBCLE1BQ25CalYsRUFBT3VULEVBQWU1dUIsT0FDdEJzYixFQUFPRCxFQUFLL1ksVUFBWSxDQUFDLEVBQ3pCMHVCLEVBQVMveEIsS0FBT0EsSUFDZm9jLEVBQUt3bkIsZUFBaUJ4bkIsRUFBS3duQixhQUFlLEtBQUtsbUMsS0FBS3NDLEdBQUs2akMsU0FFMUQ1UixFQUFTRCxHQUFpQjVWLEVBQUswbkIsbUJBQXFCMW5CLEVBQUtwYyxNQUFRb2MsR0FBUSxDQUFDLEdBRTFFc2pCLEdBQXFCcGhDLFFBQVFxaEMsS0FHL0IyQyxFQUF3QyxvQkFBMUI5dEIsdUJBQXlDQSxzQkFDdkQ0dEIsR0FBT0csRUFBTXdCLFFBRWIxQixFQUFPQyxHQUFRLFNBQVUvWixHQUN2QixPQUFPeWIsV0FBV3piLEVBQUcyYSxFQUF5QixJQUFiWCxFQUFNemQsS0FBYyxFQUFJLEVBQzNELEVBRUFpTCxFQUFnQixFQUVoQm9ULEVBQU0sR0FFVixFQUNBWSxNQUFPLFlBQ0p6QixFQUFPMkIscUJBQXVCQyxjQUFjOUIsR0FDN0NyUyxFQUFnQixFQUNoQnNTLEVBQU83UCxFQUNULEVBQ0EyUixhQUFjLFNBQXNCQyxFQUFXQyxHQUM3Q3hCLEVBQWdCdUIsR0FBYUUsSUFFN0J4QixFQUFlejRCLEtBQUttd0IsSUFBSTZKLEdBQWUsR0FBSXhCLEVBQzdDLEVBQ0FhLElBQUssU0FBYWEsR0FDaEJ0QixFQUFPLEtBQVFzQixHQUFRLEtBQ3ZCckIsRUFBeUIsSUFBYlgsRUFBTXpkLEtBQWNtZSxDQUNsQyxFQUNBemhDLElBQUssU0FBYTQ5QixFQUFVbnNCLEVBQU11eEIsR0FDaEMsSUFBSTdRLEVBQU8xZ0IsRUFBTyxTQUFVdUssRUFBRzhLLEVBQUdDLEVBQUdsVSxHQUNuQytxQixFQUFTNWhCLEVBQUc4SyxFQUFHQyxFQUFHbFUsR0FFbEJrdUIsRUFBTWwyQixPQUFPc25CLEVBQ2YsRUFBSXlMLEVBUUosT0FOQW1ELEVBQU1sMkIsT0FBTyt5QixHQUVibGxCLEVBQVdzcUIsRUFBYSxVQUFZLFFBQVE3USxHQUU1Q3VILEtBRU92SCxDQUNULEVBQ0F0bkIsT0FBUSxTQUFnQit5QixFQUFVaHJCLEtBQzlCQSxFQUFJOEYsRUFBVzFjLFFBQVE0aEMsS0FBY2xsQixFQUFXc1osT0FBT3BmLEVBQUcsSUFBTXF1QixHQUFNcnVCLEdBQUtxdUIsR0FDL0UsRUFDQXZvQixXQUFZQSxFQUdoQixDQW5IYyxHQW9IVmdoQixHQUFRLFdBQ1YsT0FBUW5MLEdBQWlCaEwsR0FBUTRlLE1BQ25DLEVBUUFjLEdBQVcsQ0FBQyxFQUNSQyxHQUFpQixzQkFDakJDLEdBQWEsUUFDYkMsR0FBdUIsU0FBOEJuN0IsR0FXdkQsSUFUQSxJQUtJbkQsRUFDQXUrQixFQUNBQyxFQVBBdlMsRUFBTSxDQUFDLEVBQ1BuaEIsRUFBUTNILEVBQU1zVyxPQUFPLEVBQUd0VyxFQUFNNUwsT0FBUyxHQUFHdVQsTUFBTSxLQUNoRHpTLEVBQU15UyxFQUFNLEdBQ1pnRCxFQUFJLEVBQ0p4VyxFQUFJd1QsRUFBTXZULE9BS1B1VyxFQUFJeFcsRUFBR3dXLElBQ1p5d0IsRUFBTXp6QixFQUFNZ0QsR0FDWjlOLEVBQVE4TixJQUFNeFcsRUFBSSxFQUFJaW5DLEVBQUlFLFlBQVksS0FBT0YsRUFBSWhuQyxPQUNqRGluQyxFQUFZRCxFQUFJOWtCLE9BQU8sRUFBR3paLEdBQzFCaXNCLEVBQUk1ekIsR0FBTzBZLE1BQU15dEIsR0FBYUEsRUFBVTFuQyxRQUFRdW5DLEdBQVksSUFBSWp2QixRQUFVb3ZCLEVBQzFFbm1DLEVBQU1rbUMsRUFBSTlrQixPQUFPelosRUFBUSxHQUFHb1AsT0FHOUIsT0FBTzZjLENBQ1QsRUFhSThKLEdBQWMsU0FBcUJuNkIsR0FDckMsT0FBTyxTQUFVdWIsR0FDZixPQUFPLEVBQUl2YixFQUFLLEVBQUl1YixFQUN0QixDQUNGLEVBRUF1bkIsR0FBcUIsU0FBU0EsRUFBbUJoakMsRUFBVWlqQyxHQUl6RCxJQUhBLElBQ0kvaUMsRUFEQW96QixFQUFRdHpCLEVBQVNrakMsT0FHZDVQLEdBQ0RBLGFBQWlCaUUsR0FDbkJ5TCxFQUFtQjFQLEVBQU8yUCxJQUNqQjNQLEVBQU12SSxLQUFLb1ksVUFBYzdQLEVBQU04UCxPQUFVOVAsRUFBTXVCLFNBQVl2QixFQUFNOFAsUUFBVUgsSUFDaEYzUCxFQUFNdHpCLFNBQ1JnakMsRUFBbUIxUCxFQUFNdHpCLFNBQVVpakMsSUFFbkMvaUMsRUFBT296QixFQUFNK1AsTUFDYi9QLEVBQU0rUCxNQUFRL1AsRUFBTWdRLE9BQ3BCaFEsRUFBTWdRLE9BQVNwakMsRUFDZm96QixFQUFNOFAsTUFBUUgsSUFJbEIzUCxFQUFRQSxFQUFNM08sS0FFbEIsRUFDSTZVLEdBQWEsU0FBb0J0NUIsRUFBTXFqQyxHQUN6QyxPQUFRcmpDLElBQXNCK3VCLEVBQVkvdUIsR0FBUUEsRUFBT3VpQyxHQUFTdmlDLElBbEN4QyxTQUErQnNWLEdBRXpELElBUnFEL04sRUFDakRsSyxFQUNBQyxFQUNBZ21DLEVBS0FwMEIsR0FBU29HLEVBQU8sSUFBSXBHLE1BQU0sS0FDMUJsUCxFQUFPdWlDLEdBQVNyekIsRUFBTSxJQUMxQixPQUFPbFAsR0FBUWtQLEVBQU12VCxPQUFTLEdBQUtxRSxFQUFLMDlCLE9BQVMxOUIsRUFBSzA5QixPQUFPanBCLE1BQU0sTUFBT2EsRUFBS2hhLFFBQVEsS0FBTyxDQUFDb25DLEdBQXFCeHpCLEVBQU0sTUFWckUzSCxFQVVnRytOLEVBVGpKalksRUFBT2tLLEVBQU1qTSxRQUFRLEtBQU8sRUFDNUJnQyxFQUFRaUssRUFBTWpNLFFBQVEsS0FDdEJnb0MsRUFBUy83QixFQUFNak0sUUFBUSxJQUFLK0IsR0FDekJrSyxFQUFNNmMsVUFBVS9tQixHQUFPaW1DLEdBQVVBLEVBQVNobUMsRUFBUWlLLEVBQU1qTSxRQUFRLElBQUtnQyxFQUFRLEdBQUtBLElBTWtFNFIsTUFBTSxLQUFLbE0sSUFBSXF2QixLQUF1QmtRLEdBQVNnQixLQUFPZixHQUFlem5DLEtBQUt1YSxHQUFRaXRCLEdBQVNnQixJQUFJLEdBQUlqdUIsR0FBUXRWLENBQ3hRLENBNkI2RXdqQyxDQUFzQnhqQyxLQUFsRnFqQyxDQUNqQixFQUNJSSxHQUFjLFNBQXFCalMsRUFBT2tTLEVBQVF6VixFQUFTMFYsUUFDN0MsSUFBWjFWLElBQ0ZBLEVBQVUsU0FBaUIxUyxHQUN6QixPQUFPLEVBQUltb0IsRUFBTyxFQUFJbm9CLEVBQ3hCLFFBR2dCLElBQWRvb0IsSUFDRkEsRUFBWSxTQUFtQnBvQixHQUM3QixPQUFPQSxFQUFJLEdBQUttb0IsRUFBVyxFQUFKbm9CLEdBQVMsRUFBSSxFQUFJbW9CLEVBQWlCLEdBQVQsRUFBSW5vQixJQUFVLENBQ2hFLEdBR0YsSUFLSXFvQixFQUxBNWpDLEVBQU8sQ0FDVDBqQyxPQUFRQSxFQUNSelYsUUFBU0EsRUFDVDBWLFVBQVdBLEdBYWIsT0FUQWhaLEdBQWE2RyxHQUFPLFNBQVVsYyxHQUk1QixJQUFLLElBQUlpRyxLQUhUZ25CLEdBQVNqdEIsR0FBUXVhLEVBQVN2YSxHQUFRdFYsRUFDbEN1aUMsR0FBU3FCLEVBQWdCdHVCLEVBQUt3SSxlQUFpQm1RLEVBRWpDanVCLEVBQ1p1aUMsR0FBU3FCLEdBQXVCLFdBQU5yb0IsRUFBaUIsTUFBYyxZQUFOQSxFQUFrQixPQUFTLFdBQWFnbkIsR0FBU2p0QixFQUFPLElBQU1pRyxHQUFLdmIsRUFBS3ViLEVBRS9ILElBRU92YixDQUNULEVBQ0k2akMsR0FBb0IsU0FBMkI1VixHQUNqRCxPQUFPLFNBQVUxUyxHQUNmLE9BQU9BLEVBQUksSUFBTSxFQUFJMFMsRUFBUSxFQUFRLEVBQUoxUyxJQUFVLEVBQUksR0FBSzBTLEVBQW1CLEdBQVYxUyxFQUFJLEtBQVcsQ0FDOUUsQ0FDRixFQUNJdW9CLEdBQWlCLFNBQVNBLEVBQWVqdEIsRUFBTWt0QixFQUFXQyxHQUM1RCxJQUFJQyxFQUFLRixHQUFhLEVBQUlBLEVBQVksRUFFdENHLEdBQU1GLElBQVdudEIsRUFBTyxHQUFLLE9BQVNrdEIsRUFBWSxFQUFJQSxFQUFZLEdBQzlESSxFQUFLRCxFQUFLelYsR0FBUXRtQixLQUFLaThCLEtBQUssRUFBSUgsSUFBTyxHQUN2Q2hXLEVBQVUsU0FBaUIxUyxHQUM3QixPQUFhLElBQU5BLEVBQVUsRUFBSTBvQixFQUFLOTdCLEtBQUtreUIsSUFBSSxHQUFJLEdBQUs5ZSxHQUFLdVQsR0FBTXZULEVBQUk0b0IsR0FBTUQsR0FBTSxDQUN6RSxFQUNJbGtDLEVBQWdCLFFBQVQ2VyxFQUFpQm9YLEVBQW1CLE9BQVRwWCxFQUFnQixTQUFVMEUsR0FDOUQsT0FBTyxFQUFJMFMsRUFBUSxFQUFJMVMsRUFDekIsRUFBSXNvQixHQUFrQjVWLEdBUXRCLE9BTkFpVyxFQUFLelYsRUFBT3lWLEVBRVpsa0MsRUFBSzA5QixPQUFTLFNBQVVxRyxFQUFXQyxHQUNqQyxPQUFPRixFQUFlanRCLEVBQU1rdEIsRUFBV0MsRUFDekMsRUFFT2hrQyxDQUNULEVBQ0lxa0MsR0FBYyxTQUFTQSxFQUFZeHRCLEVBQU15dEIsUUFDekIsSUFBZEEsSUFDRkEsRUFBWSxTQUdkLElBQUlyVyxFQUFVLFNBQWlCMVMsR0FDN0IsT0FBT0EsSUFBTUEsRUFBSUEsSUFBTStvQixFQUFZLEdBQUsvb0IsRUFBSStvQixHQUFhLEVBQUksQ0FDL0QsRUFDSXRrQyxFQUFnQixRQUFUNlcsRUFBaUJvWCxFQUFtQixPQUFUcFgsRUFBZ0IsU0FBVTBFLEdBQzlELE9BQU8sRUFBSTBTLEVBQVEsRUFBSTFTLEVBQ3pCLEVBQUlzb0IsR0FBa0I1VixHQU10QixPQUpBanVCLEVBQUswOUIsT0FBUyxTQUFVNEcsR0FDdEIsT0FBT0QsRUFBWXh0QixFQUFNeXRCLEVBQzNCLEVBRU90a0MsQ0FDVCxFQWVBMnFCLEdBQWEsd0NBQXdDLFNBQVVyVixFQUFNcEQsR0FDbkUsSUFBSXF5QixFQUFRcnlCLEVBQUksRUFBSUEsRUFBSSxFQUFJQSxFQUU1QnV4QixHQUFZbnVCLEVBQU8sVUFBWWl2QixFQUFRLEdBQUlyeUIsRUFBSSxTQUFVcUosR0FDdkQsT0FBT3BULEtBQUtreUIsSUFBSTllLEVBQUdncEIsRUFDckIsRUFBSSxTQUFVaHBCLEdBQ1osT0FBT0EsQ0FDVCxHQUFHLFNBQVVBLEdBQ1gsT0FBTyxFQUFJcFQsS0FBS2t5QixJQUFJLEVBQUk5ZSxFQUFHZ3BCLEVBQzdCLElBQUcsU0FBVWhwQixHQUNYLE9BQU9BLEVBQUksR0FBS3BULEtBQUtreUIsSUFBUSxFQUFKOWUsRUFBT2dwQixHQUFTLEVBQUksRUFBSXA4QixLQUFLa3lCLElBQWMsR0FBVCxFQUFJOWUsR0FBUWdwQixHQUFTLENBQ2xGLEdBQ0YsSUFFQWhDLEdBQVNpQyxPQUFPQyxTQUFXbEMsR0FBU21DLEtBQU9uQyxHQUFTaUMsT0FBT2QsT0FFM0RELEdBQVksVUFBV0ssR0FBZSxNQUFPQSxHQUFlLE9BQVFBLE1BRXpEem5DLEVBV1IsT0FURzB4QixFQUFLLEdBRExELEVBQUssR0FER3JTLEVBV0gsT0FSTHVTLEVBQUssSUFBTUYsRUFLZjJWLEdBQVksVUFBVSxTQUFVbG9CLEdBQzlCLE9BQU8sRUFBSTBTLEVBQVEsRUFBSTFTLEVBQ3pCLEdBTkkwUyxFQUFVLFNBQWlCMVMsR0FDN0IsT0FBT0EsRUFBSXVTLEVBQUt6eEIsRUFBSWtmLEVBQUlBLEVBQUlBLEVBQUl3UyxFQUFLMXhCLEVBQUk4TCxLQUFLa3lCLElBQUk5ZSxFQUFJLElBQU1FLEVBQUcsR0FBSyxJQUFNRixFQUFJeVMsRUFBSzN4QixHQUFLa2YsR0FBSyxLQUFPRSxHQUFLRixFQUFJLE1BQVFsZixFQUFJOEwsS0FBS2t5QixJQUFJOWUsRUFBSSxNQUFRRSxFQUFHLEdBQUssT0FDeEosR0FPRmdvQixHQUFZLFFBQVEsU0FBVWxvQixHQUM1QixPQUFPQSxFQUFJcFQsS0FBS2t5QixJQUFJLEVBQUcsSUFBTTllLEVBQUksSUFBTSxDQUN6QyxJQUVBa29CLEdBQVksUUFBUSxTQUFVbG9CLEdBQzVCLFFBQVNxVCxFQUFNLEVBQUlyVCxFQUFJQSxHQUFLLEVBQzlCLElBRUFrb0IsR0FBWSxRQUFRLFNBQVVsb0IsR0FDNUIsT0FBYSxJQUFOQSxFQUFVLEVBQTBCLEVBQXJCc1QsRUFBS3RULEVBQUltVCxFQUNqQyxJQUVBK1UsR0FBWSxPQUFRWSxHQUFZLE1BQU9BLEdBQVksT0FBUUEsTUFFM0Q5QixHQUFTb0MsWUFBY3BDLEdBQVNxQyxNQUFRL1UsRUFBUzhVLFlBQWMsQ0FDN0RqSCxPQUFRLFNBQWdCa0gsRUFBT0MsUUFDZixJQUFWRCxJQUNGQSxFQUFRLEdBR1YsSUFBSVgsRUFBSyxFQUFJVyxFQUNUVixFQUFLVSxHQUFTQyxFQUFpQixFQUFJLEdBQ25DVixFQUFLVSxFQUFpQixFQUFJLEVBRTlCLE9BQU8sU0FBVXRwQixHQUNmLFFBQVMyb0IsRUFBS3RPLEdBQU8sRUFGYixVQUVxQnJhLEdBQUssR0FBSzRvQixHQUFNRixDQUMvQyxDQUNGLEdBRUY1VixFQUFVcnVCLEtBQU91aUMsR0FBUyxZQUUxQjVYLEdBQWEsc0VBQXNFLFNBQVVyVixHQUMzRixPQUFPNGIsSUFBa0I1YixFQUFPLElBQU1BLEVBQU8sU0FDL0MsSUFRTyxJQUFJbVMsR0FBVSxTQUFpQi9rQixFQUFRMnVCLEdBQzVDcnpCLEtBQUs4RCxHQUFLNnNCLElBQ1Zqc0IsRUFBTzJaLE1BQVFyZSxLQUNmQSxLQUFLMEUsT0FBU0EsRUFDZDFFLEtBQUtxekIsUUFBVUEsRUFDZnJ6QixLQUFLWixJQUFNaTBCLEVBQVVBLEVBQVFqMEIsSUFBTStsQixHQUNuQ25sQixLQUFLSyxJQUFNZ3pCLEVBQVVBLEVBQVE1RSxVQUFZRSxFQUMzQyxFQU9XbnZCLEdBQXlCLFdBQ2xDLFNBQVNBLEVBQVVxdEIsR0FDakI3c0IsS0FBSzZzQixLQUFPQSxFQUNaN3NCLEtBQUtpNEIsUUFBVXBMLEVBQUszc0IsT0FBUyxHQUV6QkYsS0FBSzIyQixRQUFVOUosRUFBS29NLFNBQVdtTCxLQUFZLEVBQUl2WCxFQUFLb00sUUFBVSxLQUVoRWo1QixLQUFLODJCLFFBQVVqSyxFQUFLaWEsYUFBZSxFQUNuQzltQyxLQUFLa2xDLFFBQVVyWSxFQUFLa2EsUUFBVWxhLEVBQUtvWSxVQUdyQ2psQyxLQUFLeTJCLElBQU0sRUFFWHFDLEdBQWE5NEIsTUFBTzZzQixFQUFLMXNCLFNBQVUsRUFBRyxHQUV0Q0gsS0FBS3FkLEtBQU93UCxFQUFLeFAsS0FFYmtTLElBQ0Z2dkIsS0FBS28vQixLQUFPN1AsRUFFWkEsRUFBU2xTLEtBQUs3ZixLQUFLd0MsT0FHckI2dkIsR0FBaUJoTCxHQUFRNGUsTUFDM0IsQ0FFQSxJQUFJdUQsRUFBU3huQyxFQUFVcVgsVUFnVXZCLE9BOVRBbXdCLEVBQU85bUMsTUFBUSxTQUFlcUosR0FDNUIsT0FBSUEsR0FBbUIsSUFBVkEsR0FDWHZKLEtBQUsrakIsUUFBVS9qQixLQUFLK2pCLE9BQU8wVCxtQkFBcUJ6M0IsS0FBS2luQyxVQUFVam5DLEtBQUtrMkIsT0FBUzNzQixFQUFRdkosS0FBS2k0QixRQUMxRmo0QixLQUFLaTRCLE9BQVMxdUIsRUFDUHZKLE1BR0ZBLEtBQUtpNEIsTUFDZCxFQUVBK08sRUFBTzdtQyxTQUFXLFNBQWtCb0osR0FDbEMsT0FBT3FPLFVBQVVqYSxPQUFTcUMsS0FBS28zQixjQUFjcDNCLEtBQUsyMkIsUUFBVSxFQUFJcHRCLEdBQVNBLEVBQVF2SixLQUFLODJCLFNBQVc5MkIsS0FBSzIyQixRQUFVcHRCLEdBQVN2SixLQUFLbzNCLGlCQUFtQnAzQixLQUFLbW5CLElBQ3hKLEVBRUE2ZixFQUFPNVAsY0FBZ0IsU0FBdUI3dEIsR0FDNUMsT0FBS3FPLFVBQVVqYSxRQUlmcUMsS0FBS20yQixPQUFTLEVBQ1AyQyxHQUFhOTRCLEtBQU1BLEtBQUsyMkIsUUFBVSxFQUFJcHRCLEdBQVNBLEVBQVF2SixLQUFLMjJCLFFBQVUzMkIsS0FBSzgyQixVQUFZOTJCLEtBQUsyMkIsUUFBVSxLQUpwRzMyQixLQUFLcTNCLEtBS2hCLEVBRUEyUCxFQUFPM1EsVUFBWSxTQUFtQjZRLEVBQVkxVSxHQUdoRCxHQUZBd0ksTUFFS3BqQixVQUFVamEsT0FDYixPQUFPcUMsS0FBSzYyQixPQUdkLElBQUk5UyxFQUFTL2pCLEtBQUtrMUIsSUFFbEIsR0FBSW5SLEdBQVVBLEVBQU8wVCxtQkFBcUJ6M0IsS0FBS3kyQixJQUFLLENBTWxELElBTEFlLEdBQWV4M0IsS0FBTWtuQyxJQUVwQm5qQixFQUFPbVIsS0FBT25SLEVBQU9BLFFBQVUyVCxHQUFlM1QsRUFBUS9qQixNQUdoRCtqQixHQUFVQSxFQUFPQSxRQUNsQkEsRUFBT0EsT0FBT21ELFFBQVVuRCxFQUFPbVMsUUFBVW5TLEVBQU8wUyxLQUFPLEVBQUkxUyxFQUFPOFMsT0FBUzlTLEVBQU8wUyxLQUFPMVMsRUFBT3FULGdCQUFrQnJULEVBQU84UyxTQUFXOVMsRUFBTzBTLE1BQzdJMVMsRUFBT3NTLFVBQVV0UyxFQUFPOFMsUUFBUSxHQUdsQzlTLEVBQVNBLEVBQU9BLFFBR2IvakIsS0FBSytqQixRQUFVL2pCLEtBQUtrMUIsSUFBSVkscUJBQXVCOTFCLEtBQUt5MkIsSUFBTSxHQUFLeVEsRUFBYWxuQyxLQUFLcTNCLE9BQVNyM0IsS0FBS3kyQixJQUFNLEdBQUt5USxFQUFhLElBQU1sbkMsS0FBS3EzQixRQUFVNlAsSUFFL0lwUCxHQUFlOTNCLEtBQUtrMUIsSUFBS2wxQixLQUFNQSxLQUFLazJCLE9BQVNsMkIsS0FBS2k0QixPQUV0RCxDQWFBLE9BWElqNEIsS0FBSzYyQixTQUFXcVEsSUFBZWxuQyxLQUFLbW5CLE9BQVNxTCxHQUFrQnh5QixLQUFLbTBCLFVBQVlocUIsS0FBS21DLElBQUl0TSxLQUFLNjNCLFVBQVlySCxJQUFhMFcsSUFBZWxuQyxLQUFLbTBCLFdBQWFuMEIsS0FBS3NCLEtBQU90QixLQUFLbW5DLGNBRTNLbm5DLEtBQUt5MkIsTUFBUXoyQixLQUFLb25DLE9BQVNGLEdBSTNCalQsR0FBZ0JqMEIsS0FBTWtuQyxFQUFZMVUsSUFLN0J4eUIsSUFDVCxFQUVBZ25DLEVBQU9waUIsS0FBTyxTQUFjcmIsRUFBT2lwQixHQUNqQyxPQUFPNWEsVUFBVWphLE9BQVNxQyxLQUFLcTJCLFVBQVVsc0IsS0FBS213QixJQUFJdDZCLEtBQUtvM0IsZ0JBQWlCN3RCLEVBQVFtdEIsR0FBc0IxMkIsUUFBVUEsS0FBS21uQixLQUFPbm5CLEtBQUs4MkIsV0FBYXZ0QixFQUFRdkosS0FBS21uQixLQUFPLEdBQUlxTCxHQUFrQnh5QixLQUFLa25CLEtBQy9MLEVBRUE4ZixFQUFPN04sY0FBZ0IsU0FBdUI1dkIsRUFBT2lwQixHQUNuRCxPQUFPNWEsVUFBVWphLE9BQVNxQyxLQUFLcTJCLFVBQVVyMkIsS0FBS28zQixnQkFBa0I3dEIsRUFBT2lwQixHQUFrQnh5QixLQUFLbzNCLGdCQUFrQmp0QixLQUFLbXdCLElBQUksRUFBR3Q2QixLQUFLNjJCLE9BQVM3MkIsS0FBS3EzQixPQUFTcjNCLEtBQUsyM0IsVUFBWSxFQUFJLEVBQUksQ0FDbkwsRUFFQXFQLEVBQU8zSSxTQUFXLFNBQWtCOTBCLEVBQU9pcEIsR0FDekMsT0FBTzVhLFVBQVVqYSxPQUFTcUMsS0FBS3EyQixVQUFVcjJCLEtBQUtHLGFBQWNILEtBQUtrbEMsT0FBOEIsRUFBbkJsbEMsS0FBS3FuQyxZQUErQjk5QixFQUFaLEVBQUlBLEdBQWlCbXRCLEdBQXNCMTJCLE1BQU93eUIsR0FBa0J4eUIsS0FBS0csV0FBYWdLLEtBQUttd0IsSUFBSSxFQUFHdDZCLEtBQUtrbkIsTUFBUWxuQixLQUFLbW5CLE1BQVFubkIsS0FBSzIzQixVQUFZLEVBQUksRUFBSSxDQUMzUCxFQUVBcVAsRUFBT0ssVUFBWSxTQUFtQjk5QixFQUFPaXBCLEdBQzNDLElBQUl3RSxFQUFnQmgzQixLQUFLRyxXQUFhSCxLQUFLODJCLFFBRTNDLE9BQU9sZixVQUFVamEsT0FBU3FDLEtBQUtxMkIsVUFBVXIyQixLQUFLa25CLE9BQVMzZCxFQUFRLEdBQUt5dEIsRUFBZXhFLEdBQWtCeHlCLEtBQUsyMkIsUUFBVUMsR0FBZ0I1MkIsS0FBSzYyQixPQUFRRyxHQUFpQixFQUFJLENBQ3hLLEVBWUFnUSxFQUFPOU8sVUFBWSxTQUFtQjN1QixFQUFPaXBCLEdBQzNDLElBQUs1YSxVQUFVamEsT0FDYixPQUFxQixPQUFkcUMsS0FBS3UzQixLQUFxQixFQUFJdjNCLEtBQUt1M0IsS0FHNUMsR0FBSXYzQixLQUFLdTNCLE9BQVNodUIsRUFDaEIsT0FBT3ZKLEtBR1QsSUFBSSsyQixFQUFRLzJCLEtBQUsrakIsUUFBVS9qQixLQUFLeTJCLElBQU1TLEdBQXdCbDNCLEtBQUsrakIsT0FBT21ELE1BQU9sbkIsTUFBUUEsS0FBSzYyQixPQWE5RixPQVJBNzJCLEtBQUt1M0IsTUFBUWh1QixHQUFTLEVBQ3RCdkosS0FBS3kyQixJQUFNejJCLEtBQUtzbkMsTUFBaUIsT0FBVi85QixFQUFzQixFQUFJdkosS0FBS3UzQixLQUV0RHYzQixLQUFLcTJCLFVBQVV1QixJQUFRenRCLEtBQUttQyxJQUFJdE0sS0FBS2k0QixRQUFTajRCLEtBQUtxM0IsTUFBT04sSUFBMkIsSUFBbkJ2RSxHQUVsRThFLEdBQVF0M0IsTUFoNkNZLFNBQTJCa0YsR0FHakQsSUFGQSxJQUFJNmUsRUFBUzdlLEVBQVU2ZSxPQUVoQkEsR0FBVUEsRUFBT0EsUUFFdEJBLEVBQU9vUyxPQUFTLEVBQ2hCcFMsRUFBT3FULGdCQUNQclQsRUFBU0EsRUFBT0EsT0FHbEIsT0FBTzdlLENBQ1QsQ0F3NUNXcWlDLENBQWtCdm5DLEtBQzNCLEVBRUFnbkMsRUFBT2psQyxPQUFTLFNBQWdCd0gsR0FDOUIsT0FBS3FPLFVBQVVqYSxRQUlYcUMsS0FBS3NuQyxNQUFRLzlCLElBQ2Z2SixLQUFLc25DLElBQU0vOUIsRUFFUEEsR0FDRnZKLEtBQUtvbkMsT0FBU3BuQyxLQUFLNjJCLFFBQVUxc0IsS0FBS293QixLQUFLdjZCLEtBQUtpNEIsT0FBUWo0QixLQUFLMjNCLFdBRXpEMzNCLEtBQUt5MkIsSUFBTXoyQixLQUFLKzFCLEtBQU8sSUFFdkJpRixLQUVBaDdCLEtBQUt5MkIsSUFBTXoyQixLQUFLdTNCLEtBRWhCdjNCLEtBQUtxMkIsVUFBVXIyQixLQUFLK2pCLFNBQVcvakIsS0FBSytqQixPQUFPMFQsa0JBQW9CejNCLEtBQUsyM0IsVUFBWTMzQixLQUFLNjJCLFFBQVU3MkIsS0FBS29uQyxPQUE0QixJQUFwQnBuQyxLQUFLcStCLFlBQW9CbDBCLEtBQUttQyxJQUFJdE0sS0FBSzYzQixVQUFZckgsSUFBYXh3QixLQUFLNjJCLFFBQVVyRyxNQUl4THh3QixNQW5CRUEsS0FBS3NuQyxHQW9CaEIsRUFFQU4sRUFBT0MsVUFBWSxTQUFtQjE5QixHQUNwQyxHQUFJcU8sVUFBVWphLE9BQVEsQ0FDcEJxQyxLQUFLazJCLE9BQVMzc0IsRUFDZCxJQUFJd2EsRUFBUy9qQixLQUFLK2pCLFFBQVUvakIsS0FBS2sxQixJQUVqQyxPQURBblIsSUFBV0EsRUFBT29VLFFBQVVuNEIsS0FBSytqQixTQUFXK1QsR0FBZS9ULEVBQVEvakIsS0FBTXVKLEVBQVF2SixLQUFLaTRCLFFBQy9FajRCLElBQ1QsQ0FFQSxPQUFPQSxLQUFLazJCLE1BQ2QsRUFFQThRLEVBQU96TixRQUFVLFNBQWlCaU8sR0FDaEMsT0FBT3huQyxLQUFLazJCLFFBQVVoRixFQUFZc1csR0FBa0J4bkMsS0FBS28zQixnQkFBa0JwM0IsS0FBS0csWUFBY2dLLEtBQUttQyxJQUFJdE0sS0FBS3kyQixLQUFPLEVBQ3JILEVBRUF1USxFQUFPclAsUUFBVSxTQUFpQjhQLEdBQ2hDLElBQUkxakIsRUFBUy9qQixLQUFLK2pCLFFBQVUvakIsS0FBS2sxQixJQUVqQyxPQUFRblIsRUFBdUIwakIsS0FBaUJ6bkMsS0FBS3kyQixLQUFPejJCLEtBQUsyMkIsU0FBVzMyQixLQUFLa25CLE9BQVNsbkIsS0FBS201QixnQkFBa0IsR0FBS241QixLQUFLNjJCLFFBQVU3MkIsS0FBS21uQixLQUFPbm5CLEtBQUs4MkIsU0FBWTkyQixLQUFLeTJCLElBQW9CUyxHQUF3Qm5ULEVBQU80VCxRQUFROFAsR0FBY3puQyxNQUFuRUEsS0FBSzYyQixPQUFqSzcyQixLQUFLNjJCLE1BQ3hCLEVBRUFtUSxFQUFPNW1CLE9BQVMsU0FBZ0JzZixRQUNmLElBQVhBLElBQ0ZBLEVBQVMvTSxJQUdYLElBQUkrVSxFQUFrQmxyQixFQVV0QixPQVRBQSxFQUFha2pCLEdBRVQxL0IsS0FBS20wQixVQUFZbjBCLEtBQUtvMEIsWUFDeEJwMEIsS0FBSzhCLFVBQVk5QixLQUFLOEIsU0FBU3NlLE9BQU9zZixHQUN0QzEvQixLQUFLcTJCLFdBQVcsSUFBTXFKLEVBQU9sTixpQkFHakIsV0FBZHh5QixLQUFLcWQsT0FBcUMsSUFBaEJxaUIsRUFBT2pOLE1BQWtCenlCLEtBQUt5eUIsT0FDeERqVyxFQUFha3JCLEVBQ04xbkMsSUFDVCxFQUVBZ25DLEVBQU9XLFdBQWEsU0FBb0JoUSxHQUl0QyxJQUhBLElBQUl6eUIsRUFBWWxGLEtBQ1o0a0IsRUFBT2hOLFVBQVVqYSxPQUFTZzZCLEVBQVV6eUIsRUFBVXl5QixVQUUzQ3p5QixHQUNMMGYsRUFBTzFmLEVBQVVneEIsT0FBU3RSLEdBQVF6YSxLQUFLbUMsSUFBSXBILEVBQVV1eEIsTUFBUSxHQUM3RHZ4QixFQUFZQSxFQUFVZ3dCLElBR3hCLE9BQVFsMUIsS0FBSytqQixRQUFVL2pCLEtBQUs0bkMsS0FBTzVuQyxLQUFLNG5DLEtBQUtELFdBQVdoUSxHQUFXL1MsQ0FDckUsRUFFQW9pQixFQUFPL04sT0FBUyxTQUFnQjF2QixHQUM5QixPQUFJcU8sVUFBVWphLFFBQ1pxQyxLQUFLMjJCLFFBQVVwdEIsSUFBVTY2QixLQUFZLEVBQUk3NkIsRUFDbEM2dkIsR0FBdUJwNUIsUUFHUCxJQUFsQkEsS0FBSzIyQixRQUFpQnlOLElBQVdwa0MsS0FBSzIyQixPQUMvQyxFQUVBcVEsRUFBT0YsWUFBYyxTQUFxQnY5QixHQUN4QyxHQUFJcU8sVUFBVWphLE9BQVEsQ0FDcEIsSUFBSWluQixFQUFPNWtCLEtBQUtrbkIsTUFLaEIsT0FKQWxuQixLQUFLODJCLFFBQVV2dEIsRUFFZjZ2QixHQUF1QnA1QixNQUVoQjRrQixFQUFPNWtCLEtBQUs0a0IsS0FBS0EsR0FBUTVrQixJQUNsQyxDQUVBLE9BQU9BLEtBQUs4MkIsT0FDZCxFQUVBa1EsRUFBT0QsS0FBTyxTQUFjeDlCLEdBQzFCLE9BQUlxTyxVQUFVamEsUUFDWnFDLEtBQUtrbEMsTUFBUTM3QixFQUNOdkosTUFHRkEsS0FBS2tsQyxLQUNkLEVBRUE4QixFQUFPYSxLQUFPLFNBQWN0L0IsRUFBVWlxQixHQUNwQyxPQUFPeHlCLEtBQUtxMkIsVUFBVTJCLEdBQWVoNEIsS0FBTXVJLEdBQVcyb0IsRUFBWXNCLEdBQ3BFLEVBRUF3VSxFQUFPYyxRQUFVLFNBQWlCQyxFQUFjdlYsR0FDOUMsT0FBT3h5QixLQUFLb0MsT0FBT2kwQixVQUFVMFIsR0FBZ0IvbkMsS0FBS2k0QixPQUFTLEVBQUcvRyxFQUFZc0IsR0FDNUUsRUFFQXdVLEVBQU81a0MsS0FBTyxTQUFjbTVCLEVBQU0vSSxHQUVoQyxPQURRLE1BQVIrSSxHQUFnQnY3QixLQUFLNm5DLEtBQUt0TSxFQUFNL0ksR0FDekJ4eUIsS0FBS2dvQyxVQUFTLEdBQU9qbUMsUUFBTyxFQUNyQyxFQUVBaWxDLEVBQU8xa0MsUUFBVSxTQUFpQmk1QixFQUFNL0ksR0FFdEMsT0FEUSxNQUFSK0ksR0FBZ0J2N0IsS0FBSzZuQyxLQUFLdE0sR0FBUXY3QixLQUFLbzNCLGdCQUFpQjVFLEdBQ2pEeHlCLEtBQUtnb0MsVUFBUyxHQUFNam1DLFFBQU8sRUFDcEMsRUFFQWlsQyxFQUFPaUIsTUFBUSxTQUFlQyxFQUFRMVYsR0FFcEMsT0FEVSxNQUFWMFYsR0FBa0Jsb0MsS0FBSzZuQyxLQUFLSyxFQUFRMVYsR0FDN0J4eUIsS0FBSytCLFFBQU8sRUFDckIsRUFFQWlsQyxFQUFPbUIsT0FBUyxXQUNkLE9BQU9ub0MsS0FBSytCLFFBQU8sRUFDckIsRUFFQWlsQyxFQUFPZ0IsU0FBVyxTQUFrQnorQixHQUNsQyxPQUFJcU8sVUFBVWphLFVBQ1Y0TCxJQUFVdkosS0FBS2dvQyxZQUFjaG9DLEtBQUtrNEIsV0FBV2w0QixLQUFLdTNCLE9BQVNodUIsR0FBUSxLQUFZLElBRTFFdkosTUFHRkEsS0FBS3UzQixLQUFPLENBQ3JCLEVBRUF5UCxFQUFPb0IsV0FBYSxXQUdsQixPQUZBcG9DLEtBQUttMEIsU0FBV24wQixLQUFLKzFCLEtBQU8sRUFDNUIvMUIsS0FBSzYzQixRQUFTLEtBQ1A3M0IsSUFDVCxFQUVBZ25DLEVBQU9xQixTQUFXLFdBQ2hCLElBRUkxUSxFQUZBNVQsRUFBUy9qQixLQUFLK2pCLFFBQVUvakIsS0FBS2sxQixJQUM3QnR1QixFQUFRNUcsS0FBS2syQixPQUVqQixRQUFXblMsS0FBVS9qQixLQUFLeTJCLEtBQU96MkIsS0FBS20wQixVQUFZcFEsRUFBT3NrQixhQUFlMVEsRUFBVTVULEVBQU80VCxTQUFRLEtBQVUvd0IsR0FBUyt3QixFQUFVMzNCLEtBQUt1NUIsU0FBUSxHQUFRL0ksR0FDckosRUFFQXdXLEVBQU9zQixjQUFnQixTQUF1Qnp2QixFQUFNcW1CLEVBQVVuRixHQUM1RCxJQUFJbE4sRUFBTzdzQixLQUFLNnNCLEtBRWhCLE9BQUlqVixVQUFVamEsT0FBUyxHQUNoQnVoQyxHQUdIclMsRUFBS2hVLEdBQVFxbUIsRUFDYm5GLElBQVdsTixFQUFLaFUsRUFBTyxVQUFZa2hCLEdBQzFCLGFBQVRsaEIsSUFBd0I3WSxLQUFLdW9DLFVBQVlySixXQUpsQ3JTLEVBQUtoVSxHQU9QN1ksTUFHRjZzQixFQUFLaFUsRUFDZCxFQUVBbXVCLEVBQU93QixLQUFPLFNBQWNDLEdBQzFCLElBQUl6WixFQUFPaHZCLEtBQ1gsT0FBTyxJQUFJbUYsU0FBUSxTQUFVQyxHQUMzQixJQUFJaWpCLEVBQUkwSSxFQUFZMFgsR0FBZUEsRUFBY25VLEdBQzdDb1UsRUFBVyxXQUNiLElBQUlDLEVBQVEzWixFQUFLd1osS0FDakJ4WixFQUFLd1osS0FBTyxLQUVaelgsRUFBWTFJLEtBQU9BLEVBQUlBLEVBQUUyRyxNQUFXM0csRUFBRW1nQixNQUFRbmdCLElBQU0yRyxLQUFVQSxFQUFLd1osS0FBT0csR0FDMUV2akMsRUFBUWlqQixHQUNSMkcsRUFBS3daLEtBQU9HLENBQ2QsRUFFSTNaLEVBQUttRixVQUFxQyxJQUF6Qm5GLEVBQUttSyxpQkFBeUJuSyxFQUFLeUgsS0FBTyxJQUFNekgsRUFBSzZILFFBQVU3SCxFQUFLeUgsSUFBTSxFQUM3RmlTLElBRUExWixFQUFLNFosTUFBUUYsQ0FFakIsR0FDRixFQUVBMUIsRUFBT3ZVLEtBQU8sV0FDWjZNLEdBQVd0L0IsS0FDYixFQUVPUixDQUNULENBM1ZvQyxHQTZWcEMrMEIsR0FBYS8wQixHQUFVcVgsVUFBVyxDQUNoQ3FRLE1BQU8sRUFDUGdQLE9BQVEsRUFDUkQsS0FBTSxFQUNOWSxPQUFRLEVBQ1JRLE1BQU8sRUFDUGxCLE9BQVEsRUFDUlEsUUFBUyxFQUNUdU8sT0FBTyxFQUNQbmhCLE9BQVEsS0FDUm9RLFVBQVUsRUFDVjJDLFFBQVMsRUFDVEwsSUFBSyxFQUNMdkIsSUFBSyxFQUNMOVgsTUFBTyxFQUNQeWEsUUFBUSxLQUNSK1EsTUFBTyxFQUNQdEIsS0FBSyxFQUNML1AsS0FBTSxJQVNELElBQUk4QixHQUF3QixTQUFVd1AsR0FHM0MsU0FBU3hQLEVBQVN4TSxFQUFNdGtCLEdBQ3RCLElBQUkwVyxFQWVKLFlBYmEsSUFBVDROLElBQ0ZBLEVBQU8sQ0FBQyxJQUdWNU4sRUFBUTRwQixFQUFXeGpDLEtBQUtyRixLQUFNNnNCLElBQVM3c0IsTUFDakMyNUIsT0FBUyxDQUFDLEVBQ2hCMWEsRUFBTXdZLG9CQUFzQjVLLEVBQUs0SyxrQkFDakN4WSxFQUFNNlcscUJBQXVCakosRUFBS2lKLG1CQUNsQzdXLEVBQU1rWixNQUFRakgsRUFBWXJFLEVBQUtpYyxjQUMvQnRaLEdBQW1Cc0ksR0FBZWpMLEVBQUs5SSxRQUFVeUwsRUFBaUJULEVBQXVCOVAsR0FBUTFXLEdBQ2pHc2tCLEVBQUttYixVQUFZL29CLEVBQU0zYyxVQUN2QnVxQixFQUFLOXFCLFFBQVVrZCxFQUFNbGQsUUFBTyxHQUM1QjhxQixFQUFLMFMsZUFBaUJqSCxHQUFldkosRUFBdUI5UCxHQUFRNE4sRUFBSzBTLGVBQ2xFdGdCLENBQ1QsQ0FuQkFpUSxFQUFlbUssRUFBVXdQLEdBcUJ6QixJQUFJRSxFQUFVMVAsRUFBU3hpQixVQWtxQnZCLE9BaHFCQWt5QixFQUFRN2xDLEdBQUssU0FBWWtxQixFQUFTUCxFQUFNdGtCLEdBR3RDLE9BRkF1eEIsR0FBaUIsRUFBR2xpQixVQUFXNVgsTUFFeEJBLElBQ1QsRUFFQStvQyxFQUFReE4sS0FBTyxTQUFjbk8sRUFBU1AsRUFBTXRrQixHQUcxQyxPQUZBdXhCLEdBQWlCLEVBQUdsaUIsVUFBVzVYLE1BRXhCQSxJQUNULEVBRUErb0MsRUFBUWhwQyxPQUFTLFNBQWdCcXRCLEVBQVM0YixFQUFVQyxFQUFRMWdDLEdBRzFELE9BRkF1eEIsR0FBaUIsRUFBR2xpQixVQUFXNVgsTUFFeEJBLElBQ1QsRUFFQStvQyxFQUFRMW9DLElBQU0sU0FBYStzQixFQUFTUCxFQUFNdGtCLEdBTXhDLE9BTEFza0IsRUFBSzFzQixTQUFXLEVBQ2hCMHNCLEVBQUs5SSxPQUFTL2pCLEtBQ2Q4MEIsR0FBaUJqSSxHQUFNaWEsY0FBZ0JqYSxFQUFLb00sT0FBUyxHQUNyRHBNLEVBQUt5SixrQkFBb0J6SixFQUFLeUosZ0JBQzlCLElBQUk4RCxHQUFNaE4sRUFBU1AsRUFBTW1MLEdBQWVoNEIsS0FBTXVJLEdBQVcsR0FDbER2SSxJQUNULEVBRUErb0MsRUFBUTFqQyxLQUFPLFNBQWM2NUIsRUFBVW5GLEVBQVF4eEIsR0FDN0MsT0FBT3V2QixHQUFlOTNCLEtBQU1vNkIsR0FBTThPLFlBQVksRUFBR2hLLEVBQVVuRixHQUFTeHhCLEVBQ3RFLEVBR0F3Z0MsRUFBUUksVUFBWSxTQUFtQi9iLEVBQVNqdEIsRUFBVTBzQixFQUFNM2EsRUFBUzNKLEVBQVU2Z0MsRUFBZUMsR0FPaEcsT0FOQXhjLEVBQUsxc0IsU0FBV0EsRUFDaEIwc0IsRUFBSzNhLFFBQVUyYSxFQUFLM2EsU0FBV0EsRUFDL0IyYSxFQUFLcG5CLFdBQWEyakMsRUFDbEJ2YyxFQUFLeWMsaUJBQW1CRCxFQUN4QnhjLEVBQUs5SSxPQUFTL2pCLEtBQ2QsSUFBSW82QixHQUFNaE4sRUFBU1AsRUFBTW1MLEdBQWVoNEIsS0FBTXVJLElBQ3ZDdkksSUFDVCxFQUVBK29DLEVBQVFRLFlBQWMsU0FBcUJuYyxFQUFTanRCLEVBQVUwc0IsRUFBTTNhLEVBQVMzSixFQUFVNmdDLEVBQWVDLEdBR3BHLE9BRkF4YyxFQUFLc04sYUFBZSxFQUNwQnJGLEdBQWlCakksR0FBTXlKLGdCQUFrQnBGLEVBQVlyRSxFQUFLeUosaUJBQ25EdDJCLEtBQUttcEMsVUFBVS9iLEVBQVNqdEIsRUFBVTBzQixFQUFNM2EsRUFBUzNKLEVBQVU2Z0MsRUFBZUMsRUFDbkYsRUFFQU4sRUFBUVMsY0FBZ0IsU0FBdUJwYyxFQUFTanRCLEVBQVU2b0MsRUFBVUMsRUFBUS8yQixFQUFTM0osRUFBVTZnQyxFQUFlQyxHQUdwSCxPQUZBSixFQUFPdGIsUUFBVXFiLEVBQ2pCbFUsR0FBaUJtVSxHQUFRM1MsZ0JBQWtCcEYsRUFBWStYLEVBQU8zUyxpQkFDdkR0MkIsS0FBS21wQyxVQUFVL2IsRUFBU2p0QixFQUFVOG9DLEVBQVEvMkIsRUFBUzNKLEVBQVU2Z0MsRUFBZUMsRUFDckYsRUFFQU4sRUFBUXg0QixPQUFTLFNBQWdCOGxCLEVBQVc3RCxFQUFnQjBCLEdBQzFELElBTUl0UCxFQUNBd1EsRUFDQU8sRUFDQTBSLEVBQ0FyUSxFQUNBeVMsRUFDQUMsRUFDQXhSLEVBQ0F5UixFQUNBQyxFQUNBN0MsRUFDQWhDLEVBakJBOEUsRUFBVzdwQyxLQUFLa25CLE1BQ2hCNGlCLEVBQU85cEMsS0FBS20yQixPQUFTbjJCLEtBQUtvM0IsZ0JBQWtCcDNCLEtBQUtxM0IsTUFDakQ2QixFQUFNbDVCLEtBQUttbkIsS0FDWDRQLEVBQVFWLEdBQWEsRUFBSSxFQUFJM0MsR0FBYzJDLEdBRS9DMFQsRUFBZ0IvcEMsS0FBSzYzQixPQUFTLEdBQU14QixFQUFZLElBQU1yMkIsS0FBS20wQixXQUFhK0UsR0FleEUsR0FGQWw1QixPQUFTd3ZCLEdBQW1CdUgsRUFBUStTLEdBQVF6VCxHQUFhLElBQU1VLEVBQVErUyxHQUVuRS9TLElBQVUvMkIsS0FBSzYyQixRQUFVM0MsR0FBUzZWLEVBQWUsQ0FrQm5ELEdBakJJRixJQUFhN3BDLEtBQUtrbkIsT0FBU2dTLElBRTdCbkMsR0FBUy8yQixLQUFLa25CLE1BQVEyaUIsRUFDdEJ4VCxHQUFhcjJCLEtBQUtrbkIsTUFBUTJpQixHQUc1QmpsQixFQUFPbVMsRUFDUDRTLEVBQVkzcEMsS0FBS2syQixPQUVqQnVULElBREF2UixFQUFZbDRCLEtBQUt5MkIsS0FHYnNULElBQ0Y3USxJQUFRMlEsRUFBVzdwQyxLQUFLNjNCLFNBRXZCeEIsSUFBYzdELEtBQW9CeHlCLEtBQUs2M0IsT0FBU3hCLElBRy9DcjJCLEtBQUsyMkIsUUFBUyxDQUtoQixHQUhBb1EsRUFBTy9tQyxLQUFLa2xDLE1BQ1psTyxFQUFnQmtDLEVBQU1sNUIsS0FBSzgyQixRQUV2QjkyQixLQUFLMjJCLFNBQVcsR0FBS04sRUFBWSxFQUNuQyxPQUFPcjJCLEtBQUtxMkIsVUFBMEIsSUFBaEJXLEVBQXNCWCxFQUFXN0QsRUFBZ0IwQixHQXFDekUsR0FsQ0F0UCxFQUFPOE8sR0FBY3FELEVBQVFDLEdBRXpCRCxJQUFVK1MsR0FFWnpDLEVBQVlybkMsS0FBSzIyQixRQUNqQi9SLEVBQU9zVSxLQUVQbU8sS0FBZXRRLEVBQVFDLEtBRU5xUSxJQUFjdFEsRUFBUUMsSUFDckNwUyxFQUFPc1UsRUFDUG1PLEtBR0Z6aUIsRUFBT3NVLElBQVF0VSxFQUFPc1UsSUFHeEIwUSxFQUFnQmhULEdBQWdCNTJCLEtBQUs2MkIsT0FBUUcsSUFDNUM2UyxHQUFZN3BDLEtBQUs2MkIsUUFBVStTLElBQWtCdkMsR0FBYXJuQyxLQUFLNjJCLE9BQVMrUyxFQUFnQjVTLEVBQWdCaDNCLEtBQUttbkIsTUFBUSxJQUFNeWlCLEVBQWdCdkMsR0FFeElOLEdBQW9CLEVBQVpNLElBQ1Z6aUIsRUFBT3NVLEVBQU10VSxFQUNibWdCLEVBQVMsR0FZUHNDLElBQWN1QyxJQUFrQjVwQyxLQUFLNjRCLE1BQU8sQ0FDOUMsSUFBSW1SLEVBQVlqRCxHQUF3QixFQUFoQjZDLEVBQ3BCSyxFQUFXRCxLQUFlakQsR0FBb0IsRUFBWk0sR0FXdEMsR0FWQUEsRUFBWXVDLElBQWtCSSxHQUFhQSxHQUMzQ0gsRUFBV0csRUFBWSxFQUFJalQsRUFBUW1DLEVBQU1BLEVBQU1uQyxFQUUvQy8yQixLQUFLNjRCLE1BQVEsRUFDYjc0QixLQUFLdVEsT0FBT3M1QixJQUFhOUUsRUFBUyxFQUFJclIsR0FBYzJULEVBQVlyUSxJQUFpQnhFLEdBQWlCMEcsR0FBS0wsTUFBUSxFQUMvRzc0QixLQUFLNjJCLE9BQVNFLEdBRWJ2RSxHQUFrQnh5QixLQUFLK2pCLFFBQVVpYixHQUFVaC9CLEtBQU0sWUFDbERBLEtBQUs2c0IsS0FBS3FkLGdCQUFrQm5GLElBQVcva0MsS0FBS29vQyxhQUFhdlAsTUFBUSxHQUU3RGdSLEdBQVlBLElBQWE3cEMsS0FBS2tuQixPQUFTdWlCLEtBQWdCenBDLEtBQUt5MkIsS0FBT3oyQixLQUFLNnNCLEtBQUtzZCxXQUFhbnFDLEtBQUsrakIsU0FBVy9qQixLQUFLKzFCLEtBRWpILE9BQU8vMUIsS0FnQlQsR0FiQWs1QixFQUFNbDVCLEtBQUttbkIsS0FFWDJpQixFQUFPOXBDLEtBQUtxM0IsTUFFUjRTLElBQ0ZqcUMsS0FBSzY0QixNQUFRLEVBQ2JnUixFQUFXRyxFQUFZOVEsR0FBTyxLQUM5Qmw1QixLQUFLdVEsT0FBT3M1QixHQUFVLEdBQ3RCN3BDLEtBQUs2c0IsS0FBS3FkLGdCQUFrQm5GLEdBQVUva0MsS0FBS29vQyxjQUc3Q3BvQyxLQUFLNjRCLE1BQVEsR0FFUjc0QixLQUFLeTJCLE1BQVFnVCxFQUNoQixPQUFPenBDLEtBSVQ4a0MsR0FBbUI5a0MsS0FBTStrQyxFQUMzQixDQUNGLENBcUJBLEdBbkJJL2tDLEtBQUtvcUMsWUFBY3BxQyxLQUFLcXFDLFVBQVlycUMsS0FBSzY0QixNQUFRLElBQ25ENlEsRUExcERrQixTQUE2QnhrQyxFQUFXMmtDLEVBQVVqbEIsR0FDMUUsSUFBSXdRLEVBRUosR0FBSXhRLEVBQU9pbEIsRUFHVCxJQUZBelUsRUFBUWx3QixFQUFVOC9CLE9BRVg1UCxHQUFTQSxFQUFNYyxRQUFVdFIsR0FBTSxDQUNwQyxHQUFtQixZQUFmd1EsRUFBTS9YLE1BQXNCK1gsRUFBTWMsT0FBUzJULEVBQzdDLE9BQU96VSxFQUdUQSxFQUFRQSxFQUFNM08sS0FDaEIsTUFJQSxJQUZBMk8sRUFBUWx3QixFQUFVb2xDLE1BRVhsVixHQUFTQSxFQUFNYyxRQUFVdFIsR0FBTSxDQUNwQyxHQUFtQixZQUFmd1EsRUFBTS9YLE1BQXNCK1gsRUFBTWMsT0FBUzJULEVBQzdDLE9BQU96VSxFQUdUQSxFQUFRQSxFQUFNSyxLQUNoQixDQUVKLENBa29EcUI4VSxDQUFvQnZxQyxLQUFNMHpCLEdBQWNtVyxHQUFXblcsR0FBYzlPLElBRTFFOGtCLElBQ0YzUyxHQUFTblMsR0FBUUEsRUFBTzhrQixFQUFXeFQsVUFJdkNsMkIsS0FBSzYyQixPQUFTRSxFQUNkLzJCLEtBQUtrbkIsTUFBUXRDLEVBQ2I1a0IsS0FBSysxQixNQUFRbUMsRUFFUmw0QixLQUFLbTBCLFdBQ1JuMEIsS0FBS3VvQyxVQUFZdm9DLEtBQUs2c0IsS0FBSzJkLFNBQzNCeHFDLEtBQUttMEIsU0FBVyxFQUNoQm4wQixLQUFLNjNCLE9BQVN4QixFQUNkd1QsRUFBVyxJQUdSQSxHQUFZamxCLElBQVM0TixJQUFtQjZVLElBQzNDckksR0FBVWgvQixLQUFNLFdBRVpBLEtBQUs2MkIsU0FBV0UsR0FFbEIsT0FBTy8yQixLQUlYLEdBQUk0a0IsR0FBUWlsQixHQUFZeFQsR0FBYSxFQUduQyxJQUZBakIsRUFBUXAxQixLQUFLZ2xDLE9BRU41UCxHQUFPLENBR1osR0FGQU8sRUFBT1AsRUFBTTNPLE9BRVIyTyxFQUFNVyxNQUFRblIsR0FBUXdRLEVBQU1jLFNBQVdkLEVBQU1xQixLQUFPaVQsSUFBZXRVLEVBQU8sQ0FDN0UsR0FBSUEsRUFBTXJSLFNBQVcvakIsS0FFbkIsT0FBT0EsS0FBS3VRLE9BQU84bEIsRUFBVzdELEVBQWdCMEIsR0FLaEQsR0FGQWtCLEVBQU03a0IsT0FBTzZrQixFQUFNcUIsSUFBTSxHQUFLN1IsRUFBT3dRLEVBQU1jLFFBQVVkLEVBQU1xQixLQUFPckIsRUFBTWUsT0FBU2YsRUFBTWdDLGdCQUFrQmhDLEVBQU1pQyxRQUFVelMsRUFBT3dRLEVBQU1jLFFBQVVkLEVBQU1xQixJQUFLakUsRUFBZ0IwQixHQUV2S3RQLElBQVM1a0IsS0FBS2tuQixRQUFVbG5CLEtBQUt5MkIsTUFBUWdULEVBQVksQ0FFbkRDLEVBQWEsRUFDYi9ULElBQVNvQixHQUFTLzJCLEtBQUs2M0IsUUFBUyxNQUVoQyxLQUNGLENBQ0YsQ0FFQXpDLEVBQVFPLENBQ1YsS0FDSyxDQUNMUCxFQUFRcDFCLEtBQUtzcUMsTUFHYixJQUZBLElBQUlHLEVBQWVwVSxFQUFZLEVBQUlBLEVBQVl6UixFQUV4Q3dRLEdBQU8sQ0FHWixHQUZBTyxFQUFPUCxFQUFNSyxPQUVSTCxFQUFNVyxNQUFRMFUsR0FBZ0JyVixFQUFNYSxPQUFTYixFQUFNcUIsS0FBT2lULElBQWV0VSxFQUFPLENBQ25GLEdBQUlBLEVBQU1yUixTQUFXL2pCLEtBRW5CLE9BQU9BLEtBQUt1USxPQUFPOGxCLEVBQVc3RCxFQUFnQjBCLEdBS2hELEdBRkFrQixFQUFNN2tCLE9BQU82a0IsRUFBTXFCLElBQU0sR0FBS2dVLEVBQWVyVixFQUFNYyxRQUFVZCxFQUFNcUIsS0FBT3JCLEVBQU1lLE9BQVNmLEVBQU1nQyxnQkFBa0JoQyxFQUFNaUMsUUFBVW9ULEVBQWVyVixFQUFNYyxRQUFVZCxFQUFNcUIsSUFBS2pFLEVBQWdCMEIsR0FBUzFYLElBQWU0WSxFQUFNakIsVUFBWWlCLEVBQU1oQixXQUV2T3hQLElBQVM1a0IsS0FBS2tuQixRQUFVbG5CLEtBQUt5MkIsTUFBUWdULEVBQVksQ0FFbkRDLEVBQWEsRUFDYi9ULElBQVNvQixHQUFTLzJCLEtBQUs2M0IsT0FBUzRTLEdBQWUsS0FBWWphLEdBRTNELEtBQ0YsQ0FDRixDQUVBNEUsRUFBUU8sQ0FDVixDQUNGLENBRUEsR0FBSStULElBQWVsWCxJQUNqQnh5QixLQUFLaW9DLFFBQ0x5QixFQUFXbjVCLE9BQU9xVSxHQUFRaWxCLEVBQVcsR0FBSSxNQUFXaFMsT0FBU2pULEdBQVFpbEIsRUFBVyxHQUFLLEVBRWpGN3BDLEtBQUt5MkIsS0FNUCxPQUpBejJCLEtBQUtrMkIsT0FBU3lULEVBRWRyUyxHQUFRdDNCLE1BRURBLEtBQUt1USxPQUFPOGxCLEVBQVc3RCxFQUFnQjBCLEdBSWxEbDBCLEtBQUt1b0MsWUFBYy9WLEdBQWtCd00sR0FBVWgvQixLQUFNLFlBQVksSUFDN0QrMkIsSUFBVStTLEdBQVE5cEMsS0FBSzYyQixRQUFVNzJCLEtBQUtvM0Isa0JBQW9CTCxHQUFTOFMsS0FBY0YsSUFBYzNwQyxLQUFLazJCLFFBQVUvckIsS0FBS21DLElBQUk0ckIsS0FBZS90QixLQUFLbUMsSUFBSXRNLEtBQUt5MkIsTUFBV3oyQixLQUFLNjRCLFNBRXJLeEMsSUFBYzZDLEtBQVNuQyxJQUFVK1MsR0FBUTlwQyxLQUFLeTJCLElBQU0sSUFBTU0sR0FBUy8yQixLQUFLeTJCLElBQU0sSUFBTWIsR0FBa0I1MUIsS0FBTSxHQUV4R3d5QixHQUFvQjZELEVBQVksSUFBTXdULElBQWM5UyxJQUFTOFMsR0FBYUMsSUFDN0U5SyxHQUFVaC9CLEtBQU0rMkIsSUFBVStTLEdBQVF6VCxHQUFhLEVBQUksYUFBZSxxQkFBcUIsR0FFdkZyMkIsS0FBSzRvQyxTQUFXN1IsRUFBUStTLEdBQVE5cEMsS0FBS2s0QixZQUFjLElBQU1sNEIsS0FBSzRvQyxVQUdwRSxDQUVBLE9BQU81b0MsSUFDVCxFQUVBK29DLEVBQVF6bkMsSUFBTSxTQUFhOHpCLEVBQU83c0IsR0FDaEMsSUFBSW1pQyxFQUFTMXFDLEtBSWIsR0FGQWd4QixFQUFVem9CLEtBQWNBLEVBQVd5dkIsR0FBZWg0QixLQUFNdUksRUFBVTZzQixNQUU1REEsYUFBaUI1MUIsSUFBWSxDQUNqQyxHQUFJZ3lCLEVBQVM0RCxHQUlYLE9BSEFBLEVBQU1oM0IsU0FBUSxTQUFVaTBCLEdBQ3RCLE9BQU9xWSxFQUFPcHBDLElBQUkrd0IsRUFBSzlwQixFQUN6QixJQUNPdkksS0FHVCxHQUFJb3NCLEVBQVVnSixHQUNaLE9BQU9wMUIsS0FBSzJxQyxTQUFTdlYsRUFBTzdzQixHQUc5QixJQUFJd29CLEVBQVlxRSxHQUdkLE9BQU9wMUIsS0FGUG8xQixFQUFRZ0YsR0FBTThPLFlBQVksRUFBRzlULEVBSWpDLENBRUEsT0FBT3AxQixPQUFTbzFCLEVBQVEwQyxHQUFlOTNCLEtBQU1vMUIsRUFBTzdzQixHQUFZdkksSUFDbEUsRUFFQStvQyxFQUFRNkIsWUFBYyxTQUFxQnRGLEVBQVF1RixFQUFRQyxFQUFXQyxRQUNyRCxJQUFYekYsSUFDRkEsR0FBUyxRQUdJLElBQVh1RixJQUNGQSxHQUFTLFFBR08sSUFBZEMsSUFDRkEsR0FBWSxRQUdXLElBQXJCQyxJQUNGQSxHQUFvQnhhLEdBTXRCLElBSEEsSUFBSW5qQixFQUFJLEdBQ0pnb0IsRUFBUXAxQixLQUFLZ2xDLE9BRVY1UCxHQUNEQSxFQUFNYyxRQUFVNlUsSUFDZDNWLGFBQWlCZ0YsR0FDbkJ5USxHQUFVejlCLEVBQUU1UCxLQUFLNDNCLElBRWpCMFYsR0FBYTE5QixFQUFFNVAsS0FBSzQzQixHQUNwQmtRLEdBQVVsNEIsRUFBRTVQLEtBQUtpWixNQUFNckosRUFBR2dvQixFQUFNd1YsYUFBWSxFQUFNQyxFQUFRQyxNQUk5RDFWLEVBQVFBLEVBQU0zTyxNQUdoQixPQUFPclosQ0FDVCxFQUVBMjdCLEVBQVFpQyxRQUFVLFNBQWlCbG5DLEdBSWpDLElBSEEsSUFBSWlCLEVBQWEvRSxLQUFLNHFDLFlBQVksRUFBRyxFQUFHLEdBQ3BDMTJCLEVBQUluUCxFQUFXcEgsT0FFWnVXLEtBQ0wsR0FBSW5QLEVBQVdtUCxHQUFHMlksS0FBSy9vQixLQUFPQSxFQUM1QixPQUFPaUIsRUFBV21QLEVBR3hCLEVBRUE2MEIsRUFBUTU4QixPQUFTLFNBQWdCaXBCLEdBQy9CLE9BQUloSixFQUFVZ0osR0FDTHAxQixLQUFLaXJDLFlBQVk3VixHQUd0QnJFLEVBQVlxRSxHQUNQcDFCLEtBQUtrckMsYUFBYTlWLElBRzNCTSxHQUFzQjExQixLQUFNbzFCLEdBRXhCQSxJQUFVcDFCLEtBQUtxNEIsVUFDakJyNEIsS0FBS3E0QixRQUFVcjRCLEtBQUtzcUMsT0FHZnRVLEdBQVNoMkIsTUFDbEIsRUFFQStvQyxFQUFRMVMsVUFBWSxTQUFtQjhVLEVBQWEzWSxHQUNsRCxPQUFLNWEsVUFBVWphLFFBSWZxQyxLQUFLcXFDLFNBQVcsR0FFWHJxQyxLQUFLazFCLEtBQU9sMUIsS0FBS3kyQixNQUVwQnoyQixLQUFLazJCLE9BQVN4QyxHQUFjN08sR0FBUUQsTUFBUTVrQixLQUFLeTJCLElBQU0sRUFBSTBVLEVBQWNuckMsS0FBS3kyQixLQUFPejJCLEtBQUtvM0IsZ0JBQWtCK1QsSUFBZ0JuckMsS0FBS3kyQixPQUduSW9TLEVBQVdoeUIsVUFBVXdmLFVBQVVoeEIsS0FBS3JGLEtBQU1tckMsRUFBYTNZLEdBRXZEeHlCLEtBQUtxcUMsU0FBVyxFQUNUcnFDLE1BYkVBLEtBQUs2MkIsTUFjaEIsRUFFQWtTLEVBQVE0QixTQUFXLFNBQWtCNUwsRUFBT3gyQixHQUUxQyxPQURBdkksS0FBSzI1QixPQUFPb0YsR0FBUy9HLEdBQWVoNEIsS0FBTXVJLEdBQ25DdkksSUFDVCxFQUVBK29DLEVBQVFrQyxZQUFjLFNBQXFCbE0sR0FFekMsY0FETy8rQixLQUFLMjVCLE9BQU9vRixHQUNaLytCLElBQ1QsRUFFQStvQyxFQUFRcUMsU0FBVyxTQUFrQjdpQyxFQUFVMjJCLEVBQVVuRixHQUN2RCxJQUFJemMsRUFBSThjLEdBQU04TyxZQUFZLEVBQUdoSyxHQUFZNU0sR0FBWXlILEdBR3JELE9BRkF6YyxFQUFFRCxLQUFPLFVBQ1RyZCxLQUFLb3FDLFVBQVksRUFDVnRTLEdBQWU5M0IsS0FBTXNkLEVBQUcwYSxHQUFlaDRCLEtBQU11SSxHQUN0RCxFQUVBd2dDLEVBQVFzQyxZQUFjLFNBQXFCOWlDLEdBQ3pDLElBQUk2c0IsRUFBUXAxQixLQUFLZ2xDLE9BR2pCLElBRkF6OEIsRUFBV3l2QixHQUFlaDRCLEtBQU11SSxHQUV6QjZzQixHQUNEQSxFQUFNYyxTQUFXM3RCLEdBQTJCLFlBQWY2c0IsRUFBTS9YLE1BQ3JDdVksR0FBa0JSLEdBR3BCQSxFQUFRQSxFQUFNM08sS0FFbEIsRUFFQXNpQixFQUFRbUMsYUFBZSxTQUFzQjlkLEVBQVM5TixFQUFPZ3NCLEdBSTNELElBSEEsSUFBSVQsRUFBUzdxQyxLQUFLdXJDLFlBQVluZSxFQUFTa2UsR0FDbkNwM0IsRUFBSTIyQixFQUFPbHRDLE9BRVJ1VyxLQUNMczNCLEtBQXNCWCxFQUFPMzJCLElBQU0yMkIsRUFBTzMyQixHQUFHdWUsS0FBS3JGLEVBQVM5TixHQUc3RCxPQUFPdGYsSUFDVCxFQUVBK29DLEVBQVF3QyxZQUFjLFNBQXFCbmUsRUFBU2tlLEdBUWxELElBUEEsSUFLQUcsRUFMSXIrQixFQUFJLEdBQ0pzK0IsRUFBZ0JuWSxHQUFRbkcsR0FDeEJnSSxFQUFRcDFCLEtBQUtnbEMsT0FDYjJHLEVBQWUzYSxFQUFVc2EsR0FJdEJsVyxHQUNEQSxhQUFpQmdGLEdBQ2Z4RyxHQUFrQndCLEVBQU13VyxTQUFVRixLQUFtQkMsSUFBaUJILElBQXFCcFcsRUFBTWpCLFVBQVlpQixFQUFNcUIsTUFBUXJCLEVBQU11UyxXQUFXLElBQU0yRCxHQUFjbFcsRUFBTXVTLFdBQVd2UyxFQUFNZ0MsaUJBQW1Ca1UsR0FBY0EsR0FBY2xXLEVBQU1pVCxhQUU5T2o3QixFQUFFNVAsS0FBSzQzQixJQUVDcVcsRUFBV3JXLEVBQU1tVyxZQUFZRyxFQUFlSixJQUFhM3RDLFFBQ25FeVAsRUFBRTVQLEtBQUtpWixNQUFNckosRUFBR3ErQixHQUdsQnJXLEVBQVFBLEVBQU0zTyxNQUdoQixPQUFPclosQ0FDVCxFQVFBMjdCLEVBQVE4QyxRQUFVLFNBQWlCdGpDLEVBQVVza0IsR0FDM0NBLEVBQU9BLEdBQVEsQ0FBQyxFQUVoQixJQU9JaWYsRUFQQUMsRUFBSy9yQyxLQUNMdTVCLEVBQVV2QixHQUFlK1QsRUFBSXhqQyxHQUM3QnlqQyxFQUFRbmYsRUFDUmMsRUFBVXFlLEVBQU1yZSxRQUNoQnNlLEVBQVdELEVBQU1FLFFBQ2pCQyxFQUFnQkgsRUFBTUcsY0FDdEI3VixFQUFrQjBWLEVBQU0xVixnQkFFeEJyUCxFQUFRbVQsR0FBTWwzQixHQUFHNm9DLEVBQUl4WCxHQUFhLENBQ3BDdnlCLEtBQU02cUIsRUFBSzdxQixNQUFRLE9BQ25CMjJCLE1BQU0sRUFDTnJDLGlCQUFpQixFQUNqQjFSLEtBQU0yVSxFQUNOakosVUFBVyxPQUNYbndCLFNBQVUwc0IsRUFBSzFzQixVQUFZZ0ssS0FBS21DLEtBQUtpdEIsR0FBVzVMLEdBQVcsU0FBVUEsRUFBVUEsRUFBUS9JLEtBQU9tbkIsRUFBRzdrQixRQUFVNmtCLEVBQUc3VCxjQUFnQjFILEVBQzlIMGIsUUFBUyxXQUdQLEdBRkFILEVBQUc5RCxTQUVFNkQsRUFBUyxDQUNaLElBQUkzckMsRUFBVzBzQixFQUFLMXNCLFVBQVlnSyxLQUFLbUMsS0FBS2l0QixHQUFXNUwsR0FBVyxTQUFVQSxFQUFVQSxFQUFRL0ksS0FBT21uQixFQUFHN2tCLFFBQVU2a0IsRUFBRzdULGFBQ25IalIsRUFBTUUsT0FBU2huQixHQUFZMjRCLEdBQWE3UixFQUFPOW1CLEVBQVUsRUFBRyxHQUFHb1EsT0FBTzBXLEVBQU1DLE9BQU8sR0FBTSxHQUN6RjRrQixFQUFVLENBQ1osQ0FFQUcsR0FBWUEsRUFBU3gxQixNQUFNd1EsRUFBT2tsQixHQUFpQixHQUNyRCxHQUNDdGYsSUFFSCxPQUFPeUosRUFBa0JyUCxFQUFNMVcsT0FBTyxHQUFLMFcsQ0FDN0MsRUFFQThoQixFQUFRcUQsWUFBYyxTQUFxQkMsRUFBY0MsRUFBWXpmLEdBQ25FLE9BQU83c0IsS0FBSzZyQyxRQUFRUyxFQUFZL1gsR0FBYSxDQUMzQzVHLFFBQVMsQ0FDUC9JLEtBQU1vVCxHQUFlaDRCLEtBQU1xc0MsS0FFNUJ4ZixHQUNMLEVBRUFrYyxFQUFRblAsT0FBUyxXQUNmLE9BQU81NUIsS0FBS3E0QixPQUNkLEVBRUEwUSxFQUFRd0QsVUFBWSxTQUFtQkMsR0FLckMsWUFKa0IsSUFBZEEsSUFDRkEsRUFBWXhzQyxLQUFLa25CLE9BR1owWCxHQUFxQjUrQixLQUFNZzRCLEdBQWVoNEIsS0FBTXdzQyxHQUN6RCxFQUVBekQsRUFBUTBELGNBQWdCLFNBQXVCQyxHQUs3QyxZQUptQixJQUFmQSxJQUNGQSxFQUFhMXNDLEtBQUtrbkIsT0FHYjBYLEdBQXFCNStCLEtBQU1nNEIsR0FBZWg0QixLQUFNMHNDLEdBQWEsRUFDdEUsRUFFQTNELEVBQVE0RCxhQUFlLFNBQXNCcGpDLEdBQzNDLE9BQU9xTyxVQUFVamEsT0FBU3FDLEtBQUs2bkMsS0FBS3QrQixHQUFPLEdBQVF2SixLQUFLeXNDLGNBQWN6c0MsS0FBS2tuQixNQUFRc0osRUFDckYsRUFFQXVZLEVBQVE2RCxjQUFnQixTQUF1QnBvQixFQUFRcW9CLEVBQWM5QixRQUMxQyxJQUFyQkEsSUFDRkEsRUFBbUIsR0FPckIsSUFKQSxJQUVJeHRCLEVBRkE2WCxFQUFRcDFCLEtBQUtnbEMsT0FDYnJMLEVBQVMzNUIsS0FBSzI1QixPQUdYdkUsR0FDREEsRUFBTWMsUUFBVTZVLElBQ2xCM1YsRUFBTWMsUUFBVTFSLEVBQ2hCNFEsRUFBTWEsTUFBUXpSLEdBR2hCNFEsRUFBUUEsRUFBTTNPLE1BR2hCLEdBQUlvbUIsRUFDRixJQUFLdHZCLEtBQUtvYyxFQUNKQSxFQUFPcGMsSUFBTXd0QixJQUNmcFIsRUFBT3BjLElBQU1pSCxHQUtuQixPQUFPd1IsR0FBU2gyQixLQUNsQixFQUVBK29DLEVBQVFYLFdBQWEsU0FBb0IwRSxHQUN2QyxJQUFJMVgsRUFBUXAxQixLQUFLZ2xDLE9BR2pCLElBRkFobEMsS0FBSzY0QixNQUFRLEVBRU56RCxHQUNMQSxFQUFNZ1QsV0FBVzBFLEdBQ2pCMVgsRUFBUUEsRUFBTTNPLE1BR2hCLE9BQU9vaUIsRUFBV2h5QixVQUFVdXhCLFdBQVcvaUMsS0FBS3JGLEtBQU04c0MsRUFDcEQsRUFFQS9ELEVBQVFnRSxNQUFRLFNBQWVDLFFBQ1AsSUFBbEJBLElBQ0ZBLEdBQWdCLEdBTWxCLElBSEEsSUFDSXJYLEVBREFQLEVBQVFwMUIsS0FBS2dsQyxPQUdWNVAsR0FDTE8sRUFBT1AsRUFBTTNPLE1BQ2J6bUIsS0FBS21NLE9BQU9pcEIsR0FDWkEsRUFBUU8sRUFLVixPQUZBMzFCLEtBQUtrMUIsTUFBUWwxQixLQUFLa25CLE1BQVFsbkIsS0FBSzYyQixPQUFTNzJCLEtBQUtvbkMsT0FBUyxHQUN0RDRGLElBQWtCaHRDLEtBQUsyNUIsT0FBUyxDQUFDLEdBQzFCM0QsR0FBU2gyQixLQUNsQixFQUVBK29DLEVBQVEzUixjQUFnQixTQUF1Qjd0QixHQUM3QyxJQUlJaXNCLEVBQ0E1dUIsRUFDQW1kLEVBTkF3VyxFQUFNLEVBQ052TCxFQUFPaHZCLEtBQ1BvMUIsRUFBUXBHLEVBQUtzYixNQUNiWCxFQUFZcFosRUFLaEIsR0FBSTNZLFVBQVVqYSxPQUNaLE9BQU9xeEIsRUFBS2tKLFdBQVdsSixFQUFLMkgsUUFBVSxFQUFJM0gsRUFBSzd1QixXQUFhNnVCLEVBQUtvSSxrQkFBb0JwSSxFQUFLZ1osWUFBY3orQixFQUFRQSxJQUdsSCxHQUFJeWxCLEVBQUttSCxPQUFRLENBR2YsSUFGQXBTLEVBQVNpTCxFQUFLakwsT0FFUHFSLEdBQ0xJLEVBQU9KLEVBQU1LLE1BRWJMLEVBQU1lLFFBQVVmLEVBQU1nQyxpQkFFdEJ4d0IsRUFBUXd1QixFQUFNYyxRQUVGeVQsR0FBYTNhLEVBQUttSixPQUFTL0MsRUFBTXFCLE1BQVF6SCxFQUFLNkosT0FFeEQ3SixFQUFLNkosTUFBUSxFQUViZixHQUFlOUksRUFBTW9HLEVBQU94dUIsRUFBUXd1QixFQUFNNkMsT0FBUSxHQUFHWSxNQUFRLEdBRTdEOFEsRUFBWS9pQyxFQUdWQSxFQUFRLEdBQUt3dUIsRUFBTXFCLE1BRXJCOEQsR0FBTzN6QixJQUVGbWQsSUFBV2lMLEVBQUtrRyxLQUFPblIsR0FBVUEsRUFBTzBULHFCQUMzQ3pJLEVBQUtrSCxRQUFVdHZCLEVBQVFvb0IsRUFBS3lILElBQzVCekgsRUFBSzlILE9BQVN0Z0IsRUFDZG9vQixFQUFLNkgsUUFBVWp3QixHQUdqQm9vQixFQUFLNGQsZUFBZWhtQyxHQUFPLEdBQVEsVUFDbkMraUMsRUFBWSxHQUdkdlUsRUFBTWEsS0FBT3NFLEdBQU9uRixFQUFNcUIsTUFBUThELEVBQU1uRixFQUFNYSxNQUM5Q2IsRUFBUUksRUFHVnNELEdBQWE5SixFQUFNQSxJQUFTUSxHQUFtQlIsRUFBSzlILE1BQVFxVCxFQUFNdkwsRUFBSzlILE1BQVFxVCxFQUFLLEVBQUcsR0FFdkZ2TCxFQUFLbUgsT0FBUyxDQUNoQixDQUVBLE9BQU9uSCxFQUFLcUksS0FDZCxFQUVBZ0MsRUFBUzRULFdBQWEsU0FBb0Jyb0IsR0FPeEMsR0FOSTRLLEVBQWdCaUgsTUFDbEJ4QyxHQUFnQnpFLEVBQWlCMEgsR0FBd0J0UyxFQUFNNEssSUFFL0RHLEVBQXFCOUssR0FBUXBRLE9BRzNCb1EsR0FBUXBRLE9BQVN1ZSxHQUFjLENBQ2pDQSxJQUFnQnpNLEVBQVEySixXQUFhLElBQ3JDLElBQUlrRixFQUFRNUYsRUFBZ0J3VixPQUM1QixLQUFLNVAsSUFBVUEsRUFBTXFCLE1BQVNsUSxFQUFRMkosV0FBYXJMLEdBQVE3SyxXQUFXcmMsT0FBUyxFQUFHLENBQ2hGLEtBQU95M0IsSUFBVUEsRUFBTXFCLEtBQ3JCckIsRUFBUUEsRUFBTTNPLE1BR2hCMk8sR0FBU3ZRLEdBQVFnZixPQUNuQixDQUNGLENBQ0YsRUFFT3hLLENBQ1QsQ0F6ckJtQyxDQXlyQmpDNzVCLElBRUYrMEIsR0FBYThFLEdBQVN4aUIsVUFBVyxDQUMvQmdpQixNQUFPLEVBQ1B1UixVQUFXLEVBQ1hDLFNBQVUsSUFHWixJQTZJSW1CLEdBRUowQixHQS9JSUMsR0FBNkIsU0FBb0N6b0MsRUFBUTJnQixFQUFNemUsRUFBT3FCLEVBQUttbEMsRUFBUUMsRUFBY0MsR0FFbkgsSUFHSWhvQixFQUNBaW9CLEVBQ0F0cUMsRUFDQTBpQixFQUNBQyxFQUNBSixFQUNBZ29CLEVBQ0FwZ0MsRUFWQTZWLEVBQUssSUFBSUMsR0FBVWxqQixLQUFLbWpCLElBQUt6ZSxFQUFRMmdCLEVBQU0sRUFBRyxFQUFHVSxHQUFzQixLQUFNcW5CLEdBQzdFaG5DLEVBQVEsRUFDUjRmLEVBQWEsRUE2QmpCLElBcEJBL0MsRUFBRzVWLEVBQUl6RyxFQUNQcWMsRUFBRzNRLEVBQUlySyxFQUNQckIsR0FBUyxJQUlMNG1DLElBRkp2bEMsR0FBTyxJQUVjM0ssUUFBUSxjQUMzQjJLLEVBQU04bEIsR0FBZTlsQixJQUduQm9sQyxJQUVGQSxFQURBamdDLEVBQUksQ0FBQ3hHLEVBQU9xQixHQUNJdkQsRUFBUTJnQixHQUV4QnplLEVBQVF3RyxFQUFFLEdBQ1ZuRixFQUFNbUYsRUFBRSxJQUdWbWdDLEVBQVkzbUMsRUFBTXpKLE1BQU11MEIsSUFBeUIsR0FFMUNwTSxFQUFTb00sRUFBcUJ2TCxLQUFLbGUsSUFDeEMwZCxFQUFTTCxFQUFPLEdBQ2hCTSxFQUFRM2QsRUFBSW1lLFVBQVVoZ0IsRUFBT2tmLEVBQU9sZixPQUVoQ25ELEVBQ0ZBLEdBQVNBLEVBQVEsR0FBSyxFQUNRLFVBQXJCMmlCLEVBQU0vRixRQUFRLEtBQ3ZCNWMsRUFBUSxHQUdOMGlCLElBQVc0bkIsRUFBVXZuQixPQUN2QlIsRUFBV3RCLFdBQVdxcEIsRUFBVXZuQixFQUFhLEtBQU8sRUFFcEQvQyxFQUFHRSxJQUFNLENBQ1BzRCxNQUFPeEQsRUFBR0UsSUFDVjVGLEVBQUdxSSxHQUF3QixJQUFmSSxFQUFtQkosRUFBUSxJQUV2Q3BJLEVBQUdnSSxFQUNIL0gsRUFBd0IsTUFBckJrSSxFQUFPeEUsT0FBTyxHQUFha0YsR0FBZWIsRUFBVUcsR0FBVUgsRUFBV3RCLFdBQVd5QixHQUFVSCxFQUNqR3pNLEVBQUc5VixHQUFTQSxFQUFRLEVBQUlrSCxLQUFLNEgsTUFBUSxHQUV2QzNMLEVBQVFzckIsRUFBcUJwTCxXQWNqQyxPQVZBckQsRUFBR3hGLEVBQUlyWCxFQUFRNkIsRUFBSXRLLE9BQVNzSyxFQUFJbWUsVUFBVWhnQixFQUFPNkIsRUFBSXRLLFFBQVUsR0FFL0RzbEIsRUFBR3dxQixHQUFLSCxHQUVKM21CLEVBQVE1cEIsS0FBS2tMLElBQVF1bEMsS0FDdkJ2cUIsRUFBRzNRLEVBQUksR0FHVHRTLEtBQUttakIsSUFBTUYsRUFFSkEsQ0FDVCxFQUNJeWIsR0FBZ0IsU0FBdUJoNkIsRUFBUTJnQixFQUFNemUsRUFBT3FCLEVBQUs3QixFQUFPZ25CLEVBQVM0UyxFQUFVcU4sRUFBY0MsRUFBV0ksR0FDdEgzYyxFQUFZOW9CLEtBQVNBLEVBQU1BLEVBQUk3QixHQUFTLEVBQUcxQixFQUFRMG9CLElBQ25ELElBR0luSyxFQUhBMHFCLEVBQWVqcEMsRUFBTzJnQixHQUN0QnVvQixFQUF3QixRQUFWaG5DLEVBQWtCQSxFQUFTbXFCLEVBQVk0YyxHQUErQkwsRUFBWTVvQyxFQUFPMmdCLEVBQUsvbkIsUUFBUSxTQUFXeXpCLEVBQVlyc0IsRUFBTyxNQUFRMmdCLEVBQUt4RixPQUFPLEtBQU93RixFQUFPLE1BQVFBLEVBQUt4RixPQUFPLElBQUl5dEIsR0FBYTVvQyxFQUFPMmdCLEtBQTNKc29CLEVBQ3JFUCxFQUFVcmMsRUFBWTRjLEdBQStCTCxFQUFZTyxHQUF1QkMsR0FBbERDLEdBa0IxQyxHQWZJM2hCLEVBQVVua0IsTUFDUEEsRUFBSTNLLFFBQVEsYUFDZjJLLEVBQU04bEIsR0FBZTlsQixJQUdELE1BQWxCQSxFQUFJa1osT0FBTyxNQUNiOEIsRUFBS29ELEdBQWV1bkIsRUFBYTNsQyxJQUFRc2pCLEdBQVFxaUIsSUFBZ0IsS0FFaEQsSUFBUDNxQixLQUVSaGIsRUFBTWdiLEtBS1B5cUIsR0FBWUUsSUFBZ0IzbEMsR0FBT2lsQyxHQUN0QyxPQUFLLzFCLE1BQU15MkIsRUFBYzNsQyxJQUFnQixLQUFSQSxJQVFoQzBsQyxLQUFrQnRvQixLQUFRM2dCLElBQVc0cEIsRUFBZWpKLEVBQU1wZCxHQUNwRGtsQyxHQUEyQjluQyxLQUFLckYsS0FBTTBFLEVBQVEyZ0IsRUFBTXVvQixFQUFhM2xDLEVBQUttbEMsRUFBUUMsR0FBZ0I5bUIsRUFBUThtQixhQUFjQyxLQVB6SHJxQixFQUFLLElBQUlDLEdBQVVsakIsS0FBS21qQixJQUFLemUsRUFBUTJnQixHQUFPdW9CLEdBQWUsRUFBRzNsQyxHQUFPMmxDLEdBQWUsR0FBNEIsa0JBQWpCRCxFQUE2QkssR0FBaUJDLEdBQWMsRUFBR2IsR0FDOUpFLElBQWNycUIsRUFBR3dxQixHQUFLSCxHQUN0QnROLEdBQVkvYyxFQUFHK2MsU0FBU0EsRUFBVWhnQyxLQUFNMEUsR0FDakMxRSxLQUFLbWpCLElBQU1GLEVBTXhCLEVBa0JJNkssR0FBZSxTQUFzQjdQLEVBQVU0TyxFQUFNNUYsRUFBTzdnQixFQUFPMUIsRUFBUTBvQixHQUM3RSxJQUFJdEssRUFBUUcsRUFBSWlyQixFQUFVaDZCLEVBRTFCLEdBQUkyWixHQUFTNVAsS0FBd0wsS0FBMUs2RSxFQUFTLElBQUkrSyxHQUFTNVAsSUFBYTdHLEtBQUsxUyxFQUFRb2UsRUFBT29kLFFBQVVyVCxFQUFLNU8sR0FuQnBGLFNBQXNCNE8sRUFBTXptQixFQUFPMUIsRUFBUTBvQixFQUFTbkcsR0FHakUsR0FGQThKLEVBQVlsRSxLQUFVQSxFQUFPc2hCLEdBQW1CdGhCLEVBQU01RixFQUFPN2dCLEVBQU8xQixFQUFRMG9CLEtBRXZFNkQsRUFBVXBFLElBQVNBLEVBQUszbUIsT0FBUzJtQixFQUFLTSxVQUFZcUUsRUFBUzNFLElBQVN3RSxFQUFjeEUsR0FDckYsT0FBT1QsRUFBVVMsR0FBUXNoQixHQUFtQnRoQixFQUFNNUYsRUFBTzdnQixFQUFPMUIsRUFBUTBvQixHQUFXUCxFQUdyRixJQUNJdFAsRUFEQWhELEVBQU8sQ0FBQyxFQUdaLElBQUtnRCxLQUFLc1AsRUFDUnRTLEVBQUtnRCxHQUFLNHdCLEdBQW1CdGhCLEVBQUt0UCxHQUFJMEosRUFBTzdnQixFQUFPMUIsRUFBUTBvQixHQUc5RCxPQUFPN1MsQ0FDVCxDQUkrRzZ6QixDQUFhdmhCLEVBQUs1TyxHQUFXN1gsRUFBTzFCLEVBQVEwb0IsRUFBU25HLEdBQVFBLEVBQU83Z0IsRUFBT2duQixLQUN0TG5HLEVBQU05RCxJQUFNRixFQUFLLElBQUlDLEdBQVUrRCxFQUFNOUQsSUFBS3plLEVBQVF1WixFQUFVLEVBQUcsRUFBRzZFLEVBQU92UyxPQUFRdVMsRUFBUSxFQUFHQSxFQUFPdXJCLFVBRS9GcG5CLElBQVUySSxHQUtaLElBSkFzZSxFQUFXam5CLEVBQU1rZ0IsVUFBVWxnQixFQUFNMmtCLFNBQVN0dUMsUUFBUW9ILElBRWxEd1AsRUFBSTRPLEVBQU9NLE9BQU96bEIsT0FFWHVXLEtBQ0xnNkIsRUFBU3ByQixFQUFPTSxPQUFPbFAsSUFBTStPLEVBS25DLE9BQU9ILENBQ1QsRUFJSTRWLEdBQWEsU0FBU0EsRUFBV3pSLEVBQU9yQyxFQUFNbVMsR0FDaEQsSUFpQkl1WCxFQUNBcDZCLEVBQ0FxSixFQUNBMEYsRUFDQXZlLEVBQ0Erb0IsRUFDQThnQixFQUNBbGIsRUFDQXZRLEVBQ0FvckIsRUFDQTluQyxFQUNBb29DLEVBQ0FDLEVBN0JBNWhCLEVBQU81RixFQUFNNEYsS0FDYjdxQixFQUFPNnFCLEVBQUs3cUIsS0FDWjJyQixFQUFVZCxFQUFLYyxRQUNmMkksRUFBa0J6SixFQUFLeUosZ0JBQ3ZCcUMsRUFBTzlMLEVBQUs4TCxLQUNaNlIsRUFBVzNkLEVBQUsyZCxTQUNoQnJRLEVBQWV0TixFQUFLc04sYUFDcEI4SyxFQUFXcFksRUFBS29ZLFNBQ2hCalEsRUFBWW5JLEVBQUttSSxVQUNqQnVCLEVBQWExSixFQUFLMEosV0FDbEIyQyxFQUFNalMsRUFBTUUsS0FDWnVuQixFQUFjem5CLEVBQU1tTixTQUNwQmhILEVBQVVuRyxFQUFNMmtCLFNBQ2hCN25CLEVBQVNrRCxFQUFNbEQsT0FDZjRxQixFQUFjNXFCLEdBQTBCLFdBQWhCQSxFQUFPMUcsS0FBb0IwRyxFQUFPOEksS0FBS08sUUFBVUEsRUFDekV3aEIsRUFBcUMsU0FBckIzbkIsRUFBTTRuQixhQUEwQnZmLEVBQ2hEeWMsRUFBSzlrQixFQUFNbmxCLFNBMkJmLEdBYkFpcUMsS0FBUS9XLElBQWNoekIsS0FBVUEsRUFBTyxRQUN2Q2lsQixFQUFNa2UsTUFBUTdKLEdBQVd0NUIsRUFBTXF1QixFQUFVcnVCLE1BQ3pDaWxCLEVBQU1tZSxPQUFTSCxFQUFXOUksR0FBWWIsSUFBd0IsSUFBYjJKLEVBQW9CampDLEVBQU9pakMsRUFBVTVVLEVBQVVydUIsT0FBUyxFQUVyR2lqQyxHQUFZaGUsRUFBTWllLFFBQVVqZSxFQUFNMFAsVUFFcENzTyxFQUFXaGUsRUFBTW1lLE9BQ2pCbmUsRUFBTW1lLE9BQVNuZSxFQUFNa2UsTUFDckJsZSxFQUFNa2UsTUFBUUYsR0FHaEJoZSxFQUFNNm5CLE9BQVMvQyxLQUFRbGYsRUFBS3NOLGNBRXZCNFIsR0FBTS9XLElBQWNuSSxFQUFLM2EsUUFBUyxDQWdCckMsR0FiQXM4QixHQURBbmIsRUFBVWpHLEVBQVEsR0FBS3RJLEdBQVVzSSxFQUFRLElBQUlpRyxRQUFVLElBQzlCeEcsRUFBS3dHLEVBQVFoTyxNQUV0Q2lwQixFQUFZMVosR0FBZS9ILEVBQU0rRixJQUU3QjhiLElBQ0ZBLEVBQVk3VyxPQUFTLEdBQUs2VyxFQUFZclEsU0FBUyxHQUUvQ3paLEVBQU8sR0FBS3VWLEdBQWdCN0QsSUFBb0JDLEVBQWFtWSxFQUFZbitCLFFBQVEsR0FBRyxHQUFRbStCLEVBQVl0dUIsT0FBTytaLEdBQWdCakIsRUFBTXhHLEdBQXNCSCxJQUczSm1jLEVBQVkxYSxNQUFRLEdBR2xCckcsR0FzQkYsR0FyQkFpSSxHQUFrQjNPLEVBQU1tTixTQUFXZ0csR0FBTS81QixJQUFJK3NCLEVBQVNtSCxHQUFhLENBQ2pFbFgsS0FBTSxVQUNOaVQsV0FBVyxFQUNYdk0sT0FBUUEsRUFDUnVTLGlCQUFpQixFQUNqQnFDLE1BQU8rVixHQUFleGQsRUFBWXlILEdBQ2xDaEwsUUFBUyxLQUNUenRCLE1BQU8sRUFDUHNxQyxTQUFVQSxHQUFZLFdBQ3BCLE9BQU94TCxHQUFVL1gsRUFBTyxXQUMxQixFQUNBL1UsUUFBUyxHQUNSeWIsS0FHSDFHLEVBQU1tTixTQUFTYyxJQUFNLEVBRXJCak8sRUFBTW1OLFNBQVN3VCxLQUFPM2dCLEVBRXRCckMsRUFBTyxJQUFNcEksSUFBZThaLElBQW9CQyxJQUFldFAsRUFBTW1OLFNBQVNoVSxPQUFPc1MsSUFFakY0RCxHQUNFNEMsR0FBT3RVLEdBQVEsR0FBS21TLEdBQVMsRUFHL0IsWUFEQW5TLElBQVNxQyxFQUFNNFEsT0FBU2pULFNBSXZCLEdBQUl1VixHQUFnQmpCLElBRXBCd1YsRUF5QkgsR0F4QkE5cEIsSUFBUzBSLEdBQWtCLEdBRTNCL1ksRUFBSWdYLEdBQWEsQ0FDZmpFLFdBQVcsRUFDWGpULEtBQU0sY0FFTnNiLEtBQU1yQyxJQUFvQm9ZLEdBQWV4ZCxFQUFZeUgsR0FDckRyQyxnQkFBaUJBLEVBRWpCcGtCLFFBQVMsRUFDVDZSLE9BQVFBLEdBRVB1cUIsR0FDSEUsSUFBZ0JqeEIsRUFBRThWLEVBQVFoTyxNQUFRbXBCLEdBRWxDNVksR0FBa0IzTyxFQUFNbU4sU0FBV2dHLEdBQU0vNUIsSUFBSStzQixFQUFTN1AsSUFFdEQwSixFQUFNbU4sU0FBU2MsSUFBTSxFQUVyQmpPLEVBQU1tTixTQUFTd1QsS0FBTzNnQixFQUV0QnJDLEVBQU8sSUFBTXBJLEVBQWF5SyxFQUFNbU4sU0FBU2hVLE9BQU9zUyxJQUF1QnpMLEVBQU1tTixTQUFTN2pCLFFBQVEsR0FBRyxJQUNqRzBXLEVBQU00USxPQUFTalQsRUFFVjBSLEdBR0UsSUFBSzFSLEVBQ1YsWUFIQThULEVBQVd6UixFQUFNbU4sU0FBVTVELEVBQVVBLEdBVzNDLElBSEF2SixFQUFNOUQsSUFBTThELEVBQU04bkIsU0FBVyxFQUM3QnBXLEVBQU9PLEdBQU9oSSxFQUFZeUgsSUFBU0EsSUFBU08sRUFFdkNobEIsRUFBSSxFQUFHQSxFQUFJa1osRUFBUXp2QixPQUFRdVcsSUFBSyxDQWtCbkMsR0FoQkFxNkIsR0FEQTdwQyxFQUFTMG9CLEVBQVFsWixJQUNEbUssT0FBUzhVLEdBQVMvRixHQUFTbFosR0FBR21LLE1BQzlDNEksRUFBTWtnQixVQUFVanpCLEdBQUtnNkIsRUFBVyxDQUFDLEVBQ2pDcGIsR0FBWXliLEVBQU96cUMsS0FBTyt1QixHQUFZbDFCLFFBQVVvMkIsS0FFaEQzdEIsRUFBUXVvQyxJQUFnQnZoQixFQUFVbFosRUFBSXk2QixFQUFZcnhDLFFBQVFvSCxHQUV0RDJ1QixJQUEwRyxLQUE5RnZRLEVBQVMsSUFBSXVRLEdBQVdqYyxLQUFLMVMsRUFBUThwQyxHQUFlRixFQUFXcm5CLEVBQU83Z0IsRUFBT3VvQyxLQUMzRjFuQixFQUFNOUQsSUFBTUYsRUFBSyxJQUFJQyxHQUFVK0QsRUFBTTlELElBQUt6ZSxFQUFRb2UsRUFBT3hMLEtBQU0sRUFBRyxFQUFHd0wsRUFBT3ZTLE9BQVF1UyxFQUFRLEVBQUdBLEVBQU91ckIsVUFFdEd2ckIsRUFBT00sT0FBT2hsQixTQUFRLFNBQVVrWixHQUM5QjQyQixFQUFTNTJCLEdBQVEyTCxDQUNuQixJQUVBSCxFQUFPdXJCLFdBQWE1Z0IsRUFBYyxLQUcvQjRGLEdBQVdtYixFQUNkLElBQUtqeEIsS0FBSyt3QixFQUNKemdCLEdBQVN0USxLQUFPdUYsRUFBU2dMLEdBQWF2USxFQUFHK3dCLEVBQVdybkIsRUFBTzdnQixFQUFPMUIsRUFBUWlxQyxJQUM1RTdyQixFQUFPdXJCLFdBQWE1Z0IsRUFBYyxHQUVsQ3lnQixFQUFTM3dCLEdBQUswRixFQUFLeWIsR0FBY3I1QixLQUFLNGhCLEVBQU92aUIsRUFBUTZZLEVBQUcsTUFBTyt3QixFQUFVL3dCLEdBQUluWCxFQUFPdW9DLEVBQWEsRUFBRzloQixFQUFLd2dCLGNBSy9HcG1CLEVBQU0rbkIsS0FBTy9uQixFQUFNK25CLElBQUk5NkIsSUFBTStTLEVBQU13TCxLQUFLL3RCLEVBQVF1aUIsRUFBTStuQixJQUFJOTZCLElBRXREMDZCLEdBQWlCM25CLEVBQU05RCxNQUN6QnFvQixHQUFvQnZrQixFQUVwQnVJLEVBQWdCMGIsYUFBYXhtQyxFQUFRd3BDLEVBQVVqbkIsRUFBTTBnQixXQUFXL2lCLElBR2hFNnBCLEdBQWV4bkIsRUFBTWxELE9BQ3JCeW5CLEdBQW9CLEdBR3RCdmtCLEVBQU05RCxLQUFPd1YsSUFBUzdGLEdBQVl5YixFQUFPenFDLElBQU0sRUFDakQsQ0FFQTJwQixHQUFlYyxHQUEwQnRILEdBQ3pDQSxFQUFNZ29CLFNBQVdob0IsRUFBTWdvQixRQUFRaG9CLEVBQ2pDLENBRUFBLEVBQU1zaEIsVUFBWWlDLEVBQ2xCdmpCLEVBQU1rTixXQUFhbE4sRUFBTStuQixLQUFPL25CLEVBQU05RCxPQUFTc3JCLEVBRS9DelosR0FBYXBRLEdBQVEsR0FBS21uQixFQUFHeDdCLE9BQU9nZ0IsR0FBUyxHQUFNLEVBQ3JELEVBb0ZBMmUsR0FBaUIsU0FBd0I3cEIsRUFBTWdOLEVBQUs4YyxFQUFVQyxHQUM1RCxJQUNJN3hCLEVBQ0FuUSxFQUZBcEwsRUFBT3F3QixFQUFJcndCLE1BQVFvdEMsR0FBWSxlQUluQyxHQUFJNWQsRUFBU2EsR0FDWGpsQixFQUFJK2hDLEVBQVM5cEIsS0FBVThwQixFQUFTOXBCLEdBQVEsSUFFeENnTixFQUFJajBCLFNBQVEsU0FBVW1MLEVBQU8ySyxHQUMzQixPQUFPOUcsRUFBRTVQLEtBQUssQ0FDWjhmLEVBQUdwSixHQUFLbWUsRUFBSTEwQixPQUFTLEdBQUssSUFDMUJ3VyxFQUFHNUssRUFDSCtJLEVBQUd0USxHQUVQLFNBRUEsSUFBS3ViLEtBQUs4VSxFQUNSamxCLEVBQUkraEMsRUFBUzV4QixLQUFPNHhCLEVBQVM1eEIsR0FBSyxJQUM1QixTQUFOQSxHQUFnQm5RLEVBQUU1UCxLQUFLLENBQ3JCOGYsRUFBRzRHLFdBQVdtQixHQUNkbFIsRUFBR2tlLEVBQUk5VSxHQUNQakwsRUFBR3RRLEdBSVgsRUFDSW1zQyxHQUFxQixTQUE0QjVrQyxFQUFPMGQsRUFBTy9TLEVBQUd4UCxFQUFRMG9CLEdBQzVFLE9BQU8yRCxFQUFZeG5CLEdBQVNBLEVBQU1sRSxLQUFLNGhCLEVBQU8vUyxFQUFHeFAsRUFBUTBvQixHQUFXaEIsRUFBVTdpQixLQUFXQSxFQUFNak0sUUFBUSxXQUFheXdCLEdBQWV4a0IsR0FBU0EsQ0FDOUksRUFDSThsQyxHQUFxQm5jLEdBQWlCLDREQUN0Q29jLEdBQXNCLENBQUMsRUFFM0IzaUIsR0FBYTBpQixHQUFxQixtREFBbUQsU0FBVS8zQixHQUM3RixPQUFPZzRCLEdBQW9CaDRCLEdBQVEsQ0FDckMsSUFRTyxJQUFJOGlCLEdBQXFCLFNBQVVtVixHQUd4QyxTQUFTblYsRUFBTWhOLEVBQVNQLEVBQU10a0IsRUFBVWluQyxHQUN0QyxJQUFJQyxFQUVnQixpQkFBVDVpQixJQUNUdGtCLEVBQVNwSSxTQUFXMHNCLEVBQ3BCQSxFQUFPdGtCLEVBQ1BBLEVBQVcsTUFJYixJQVlJd2pDLEVBQ0E3M0IsRUFDQXFHLEVBQ0E3YyxFQUNBNmYsRUFDQW15QixFQUNBQyxFQUNBQyxFQW5CQUMsR0FESkosRUFBU0YsRUFBWWxxQyxLQUFLckYsS0FBTXd2QyxFQUFjM2lCLEVBQU9pSSxHQUFpQmpJLEtBQVU3c0IsTUFDdkQ2c0IsS0FDckIxc0IsRUFBVzB2QyxFQUFZMXZDLFNBQ3ZCRCxFQUFRMnZDLEVBQVkzdkMsTUFDcEJvMkIsRUFBa0J1WixFQUFZdlosZ0JBQzlCcGtCLEVBQVUyOUIsRUFBWTM5QixRQUN0Qm9lLEVBQVl1ZixFQUFZdmYsVUFDeEIwRSxFQUFZNmEsRUFBWTdhLFVBQ3hCUixFQUFXcWIsRUFBWXJiLFNBQ3ZCK0ssRUFBZ0JzUSxFQUFZdFEsY0FDNUIwRixFQUFXNEssRUFBWTVLLFNBQ3ZCbGhCLEVBQVM4SSxFQUFLOUksUUFBVXlMLEVBQ3hCa2MsR0FBaUJsYSxFQUFTcEUsSUFBWWlFLEVBQWNqRSxHQUFXNEQsRUFBVTVELEVBQVEsSUFBTSxXQUFZUCxHQUFRLENBQUNPLEdBQVdtRyxHQUFRbkcsR0FjbkksR0FMQXFpQixFQUFPN0QsU0FBV0YsRUFBYy90QyxPQUFTdzFCLEdBQVN1WSxHQUFpQnhaLEVBQU0sZUFBaUI5RSxFQUFVLGdDQUFpQzdHLEVBQVE0SixpQkFBbUIsR0FDaEtzZixFQUFPdEksVUFBWSxHQUVuQnNJLEVBQU9aLFdBQWF2ZSxFQUVoQjBFLEdBQWE5aUIsR0FBV2tmLEVBQWdCanhCLElBQWFpeEIsRUFBZ0JseEIsR0FBUSxDQVkvRSxHQVhBMnNCLEVBQU80aUIsRUFBTzVpQixNQUNka2YsRUFBSzBELEVBQU8zdEMsU0FBVyxJQUFJdTNCLEdBQVMsQ0FDbENoYyxLQUFNLFNBQ05tWCxTQUFVQSxHQUFZLENBQUMsRUFDdkJwSCxRQUFTckosR0FBMEIsV0FBaEJBLEVBQU8xRyxLQUFvQjBHLEVBQU84SSxLQUFLTyxRQUFVc2UsS0FHbkVqWixPQUNIc1osRUFBR2hvQixPQUFTZ29CLEVBQUc3VyxJQUFNbkcsRUFBdUIwZ0IsR0FDNUMxRCxFQUFHN1YsT0FBUyxFQUVSaGtCLEdBQVdrZixFQUFnQmp4QixJQUFhaXhCLEVBQWdCbHhCLEdBQVEsQ0FJbEUsR0FIQXhDLEVBQUlndUMsRUFBYy90QyxPQUNsQmd5QyxFQUFjejlCLEdBQVdtcEIsR0FBV25wQixHQUVoQytlLEVBQVUvZSxHQUVaLElBQUtxTCxLQUFLckwsR0FDSG05QixHQUFtQi94QyxRQUFRaWdCLEtBQzlCcXlCLElBQXVCQSxFQUFxQixDQUFDLEdBQzdDQSxFQUFtQnJ5QixHQUFLckwsRUFBUXFMLElBS3RDLElBQUtySixFQUFJLEVBQUdBLEVBQUl4VyxFQUFHd1csS0FDakJxRyxFQUFPcWEsR0FBZS9ILEVBQU15aUIsS0FDdkJwOUIsUUFBVSxFQUNmK3lCLElBQWExcUIsRUFBSzBxQixTQUFXQSxHQUM3QjJLLEdBQXNCM2QsR0FBTzFYLEVBQU1xMUIsR0FDbkNGLEVBQVloRSxFQUFjeDNCLEdBRTFCcUcsRUFBS3BhLFVBQVlndUMsR0FBbUJodUMsRUFBVTR1QixFQUF1QjBnQixHQUFTdjdCLEVBQUd3N0IsRUFBV2hFLEdBQzVGbnhCLEVBQUtyYSxRQUFVaXVDLEdBQW1CanVDLEVBQU82dUIsRUFBdUIwZ0IsR0FBU3Y3QixFQUFHdzdCLEVBQVdoRSxJQUFrQixHQUFLK0QsRUFBT3hYLFFBRWhIL2xCLEdBQWlCLElBQU54VSxHQUFXNmMsRUFBS3JhLFFBRTlCdXZDLEVBQU94WCxPQUFTLzNCLEVBQVFxYSxFQUFLcmEsTUFDN0J1dkMsRUFBT3ZaLFFBQVVoMkIsRUFDakJxYSxFQUFLcmEsTUFBUSxHQUdmNnJDLEVBQUc3b0MsR0FBR3dzQyxFQUFXbjFCLEVBQU1vMUIsRUFBY0EsRUFBWXo3QixFQUFHdzdCLEVBQVdoRSxHQUFpQixHQUNoRkssRUFBRzVHLE1BQVFaLEdBQVNtQyxLQUd0QnFGLEVBQUc1ckMsV0FBYUEsRUFBV0QsRUFBUSxFQUFJdXZDLEVBQU8zdEMsU0FBVyxDQUMzRCxNQUFPLEdBQUlrekIsRUFBVyxDQUNwQkYsR0FBaUJQLEdBQWF3WCxFQUFHbGYsS0FBSzJILFNBQVUsQ0FDOUN4eUIsS0FBTSxVQUdSK3BDLEVBQUc1RyxNQUFRN0osR0FBV3RHLEVBQVVoekIsTUFBUTZxQixFQUFLN3FCLE1BQVEsUUFDckQsSUFDSW9MLEVBQ0EwaUMsRUFDQTM3QixFQUhBeVEsRUFBTyxFQUtYLEdBQUk0TSxFQUFTd0QsR0FDWEEsRUFBVTUyQixTQUFRLFNBQVVxVyxHQUMxQixPQUFPczNCLEVBQUc3b0MsR0FBR3dvQyxFQUFlajNCLEVBQU8sSUFDckMsSUFDQXMzQixFQUFHNXJDLGVBQ0UsQ0FHTCxJQUFLb2QsS0FGTGhELEVBQU8sQ0FBQyxFQUVFeWEsRUFDRixTQUFOelgsR0FBc0IsYUFBTkEsR0FBb0IyeEIsR0FBZTN4QixFQUFHeVgsRUFBVXpYLEdBQUloRCxFQUFNeWEsRUFBVW9hLFVBR3RGLElBQUs3eEIsS0FBS2hELEVBTVIsSUFMQW5OLEVBQUltTixFQUFLZ0QsR0FBRzZkLE1BQUssU0FBVWh1QixFQUFHQyxHQUM1QixPQUFPRCxFQUFFa1EsRUFBSWpRLEVBQUVpUSxDQUNqQixJQUNBc0gsRUFBTyxFQUVGMVEsRUFBSSxFQUFHQSxFQUFJOUcsRUFBRXpQLE9BQVF1VyxLQUV4QkMsRUFBSSxDQUNGblMsTUFGRjh0QyxFQUFLMWlDLEVBQUU4RyxJQUVJNUIsRUFDVG5TLFVBQVcydkMsRUFBR3h5QixHQUFLcEosRUFBSTlHLEVBQUU4RyxFQUFJLEdBQUdvSixFQUFJLElBQU0sSUFBTW5kLElBRWhEb2QsR0FBS3V5QixFQUFHMzdCLEVBQ1Y0M0IsRUFBRzdvQyxHQUFHd29DLEVBQWV2M0IsRUFBR3lRLEdBQ3hCQSxHQUFRelEsRUFBRWhVLFNBSWQ0ckMsRUFBRzVyQyxXQUFhQSxHQUFZNHJDLEVBQUc3b0MsR0FBRyxDQUFDLEVBQUcsQ0FDcEMvQyxTQUFVQSxFQUFXNHJDLEVBQUc1ckMsWUFFNUIsQ0FDRixDQUVBQSxHQUFZc3ZDLEVBQU90dkMsU0FBU0EsRUFBVzRyQyxFQUFHNXJDLFdBQzVDLE1BQ0VzdkMsRUFBTzN0QyxTQUFXLEVBd0JwQixPQXJCa0IsSUFBZHd1QixHQUF1QmhCLElBQ3pCa2MsR0FBb0J6YyxFQUF1QjBnQixHQUUzQ2pnQixFQUFnQjBiLGFBQWFRLEdBRTdCRixHQUFvQixHQUd0QjFULEdBQWUvVCxFQUFRZ0wsRUFBdUIwZ0IsR0FBU2xuQyxHQUV2RHNrQixFQUFLbWIsVUFBWXlILEVBQU9udEMsVUFDeEJ1cUIsRUFBSzlxQixRQUFVMHRDLEVBQU8xdEMsUUFBTyxJQUV6QnUwQixJQUFvQm4yQixJQUFhNjBCLEdBQWF5YSxFQUFPdlosU0FBV3hDLEdBQWMzUCxFQUFPbUQsUUFBVWdLLEVBQVlvRixJQUFvQkUsR0FBc0J6SCxFQUF1QjBnQixLQUE0QixXQUFoQjFyQixFQUFPMUcsUUFDak1veUIsRUFBTzVZLFFBQVMsS0FFaEI0WSxFQUFPbC9CLE9BQU9wRyxLQUFLb3dCLElBQUksR0FBSXI2QixJQUFVLElBSXZDcS9CLEdBQWlCakgsR0FBZXZKLEVBQXVCMGdCLEdBQVNsUSxHQUN6RGtRLENBQ1QsQ0EvSkF2Z0IsRUFBZWtMLEVBQU9tVixHQWlLdEIsSUFBSVEsRUFBVTNWLEVBQU12akIsVUErVHBCLE9BN1RBazVCLEVBQVF4L0IsT0FBUyxTQUFnQjhsQixFQUFXN0QsRUFBZ0IwQixHQUMxRCxJQUtJdFAsRUFDQTNCLEVBQ0Fva0IsRUFDQXJRLEVBQ0E0UyxFQUNBN0UsRUFDQTNuQixFQUNBdGIsRUFDQW1qQyxFQWJBNEUsRUFBVzdwQyxLQUFLa25CLE1BQ2hCNGlCLEVBQU85cEMsS0FBS3EzQixNQUNaNkIsRUFBTWw1QixLQUFLbW5CLEtBQ1g2b0IsRUFBYTNaLEVBQVksRUFDekJVLEVBQVFWLEVBQVl5VCxFQUFPdFosSUFBYXdmLEVBQWFsRyxFQUFPelQsRUFBWTdGLEVBQVcsRUFBSTZGLEVBVzNGLEdBQUs2QyxHQUVFLEdBQUluQyxJQUFVLzJCLEtBQUs2MkIsU0FBV1IsR0FBYW5DLElBQVVsMEIsS0FBS20wQixVQUFZbjBCLEtBQUs2MkIsUUFBVTcyQixLQUFLbzBCLFVBQVlwMEIsS0FBSzYzQixPQUFTLElBQU1tWSxFQUFZLENBSzNJLEdBSEFwckIsRUFBT21TLEVBQ1BqMUIsRUFBVzlCLEtBQUs4QixTQUVaOUIsS0FBSzIyQixRQUFTLENBSWhCLEdBRkFLLEVBQWdCa0MsRUFBTWw1QixLQUFLODJCLFFBRXZCOTJCLEtBQUsyMkIsU0FBVyxHQUFLcVosRUFDdkIsT0FBT2h3QyxLQUFLcTJCLFVBQTBCLElBQWhCVyxFQUFzQlgsRUFBVzdELEVBQWdCMEIsR0E2QnpFLEdBMUJBdFAsRUFBTzhPLEdBQWNxRCxFQUFRQyxHQUV6QkQsSUFBVStTLEdBRVp6QyxFQUFZcm5DLEtBQUsyMkIsUUFDakIvUixFQUFPc1UsS0FFUG1PLEtBQWV0USxFQUFRQyxLQUVOcVEsSUFBYzNULEdBQWNxRCxFQUFRQyxLQUNuRHBTLEVBQU9zVSxFQUNQbU8sS0FHRnppQixFQUFPc1UsSUFBUXRVLEVBQU9zVSxLQUd4QjZMLEVBQVMva0MsS0FBS2tsQyxPQUFxQixFQUFabUMsS0FHckJwQyxFQUFXamxDLEtBQUtvbEMsT0FDaEJ4Z0IsRUFBT3NVLEVBQU10VSxHQUdmZ2xCLEVBQWdCaFQsR0FBZ0I1MkIsS0FBSzYyQixPQUFRRyxHQUV6Q3BTLElBQVNpbEIsSUFBYTNWLEdBQVNsMEIsS0FBS20wQixVQUFZa1QsSUFBY3VDLEVBR2hFLE9BREE1cEMsS0FBSzYyQixPQUFTRSxFQUNQLzJCLEtBR0xxbkMsSUFBY3VDLElBQ2hCOW5DLEdBQVk5QixLQUFLb2xDLFFBQVVOLEdBQW1CaGpDLEVBQVVpakMsR0FFcEQva0MsS0FBSzZzQixLQUFLcWQsZ0JBQWtCbkYsSUFBVy9rQyxLQUFLNjRCLE9BQVM3NEIsS0FBS2tuQixRQUFVOFAsR0FBaUJoM0IsS0FBS20wQixXQUU1Rm4wQixLQUFLNjRCLE1BQVEzRSxFQUFRLEVBRXJCbDBCLEtBQUt1USxPQUFPbWpCLEdBQWNzRCxFQUFnQnFRLElBQVksR0FBTWUsYUFBYXZQLE1BQVEsR0FHdkYsQ0FFQSxJQUFLNzRCLEtBQUttMEIsU0FBVSxDQUNsQixHQUFJc0UsR0FBa0J6NEIsS0FBTWd3QyxFQUFhM1osRUFBWXpSLEVBQU1zUCxFQUFPMUIsRUFBZ0J1RSxHQUdoRixPQUZBLzJCLEtBQUs2MkIsT0FBUyxFQUVQNzJCLEtBR1QsS0FBSTZwQyxJQUFhN3BDLEtBQUtrbkIsT0FBV2dOLEdBQVNsMEIsS0FBSzZzQixLQUFLcWQsZUFBaUI3QyxJQUFjdUMsR0FFakYsT0FBTzVwQyxLQUdULEdBQUlrNUIsSUFBUWw1QixLQUFLbW5CLEtBRWYsT0FBT25uQixLQUFLdVEsT0FBTzhsQixFQUFXN0QsRUFBZ0IwQixFQUVsRCxDQWlCQSxHQWZBbDBCLEtBQUs2MkIsT0FBU0UsRUFDZC8yQixLQUFLa25CLE1BQVF0QyxHQUVSNWtCLEtBQUsrMUIsTUFBUS8xQixLQUFLeTJCLE1BQ3JCejJCLEtBQUsrMUIsS0FBTyxFQUVaLzFCLEtBQUtnMEIsTUFBUSxHQUdmaDBCLEtBQUtvZCxNQUFRQSxHQUFTNm5CLEdBQVlqbEMsS0FBS21sQyxPQUFPdmdCLEVBQU9zVSxHQUVqRGw1QixLQUFLOHVDLFFBQ1A5dUMsS0FBS29kLE1BQVFBLEVBQVEsRUFBSUEsR0FHdkJ3SCxJQUFTaWxCLElBQWFyWCxJQUFtQjZVLElBQzNDckksR0FBVWgvQixLQUFNLFdBRVpBLEtBQUs2MkIsU0FBV0UsR0FFbEIsT0FBTy8yQixLQU1YLElBRkFpakIsRUFBS2pqQixLQUFLbWpCLElBRUhGLEdBQ0xBLEVBQUd5RCxFQUFFdEosRUFBTzZGLEVBQUdtRixHQUNmbkYsRUFBS0EsRUFBR3dELE1BR1Yza0IsR0FBWUEsRUFBU3lPLE9BQU84bEIsRUFBWSxFQUFJQSxFQUFZdjBCLEVBQVNxbEIsS0FBT3JsQixFQUFTcWpDLE1BQU12Z0IsRUFBTzVrQixLQUFLbW5CLE1BQU9xTCxFQUFnQjBCLElBQVVsMEIsS0FBS28wQixXQUFhcDBCLEtBQUs2M0IsT0FBU3hCLEdBRWhLcjJCLEtBQUt1b0MsWUFBYy9WLElBQ3JCd2QsR0FBYzVaLEdBQWVwMkIsS0FBTXEyQixFQUFXN0QsRUFBZ0IwQixHQUU5RDhLLEdBQVVoL0IsS0FBTSxhQUdsQkEsS0FBSzIyQixTQUFXMFEsSUFBY3VDLEdBQWlCNXBDLEtBQUs2c0IsS0FBS3NkLFdBQWEzWCxHQUFrQnh5QixLQUFLK2pCLFFBQVVpYixHQUFVaC9CLEtBQU0sWUFFbEgrMkIsSUFBVS8yQixLQUFLcTNCLE9BQVVOLEdBQVUvMkIsS0FBSzYyQixTQUFXRSxJQUN0RGlaLElBQWVod0MsS0FBS3VvQyxXQUFhblMsR0FBZXAyQixLQUFNcTJCLEVBQVcsR0FBTSxJQUN0RUEsSUFBYzZDLEtBQVNuQyxJQUFVLzJCLEtBQUtxM0IsT0FBU3IzQixLQUFLeTJCLElBQU0sSUFBTU0sR0FBUy8yQixLQUFLeTJCLElBQU0sSUFBTWIsR0FBa0I1MUIsS0FBTSxHQUU5R3d5QixHQUFvQndkLElBQWVuRyxLQUFjOVMsR0FBUzhTLEdBQVk5RSxLQUV6RS9GLEdBQVVoL0IsS0FBTSsyQixJQUFVK1MsRUFBTyxhQUFlLHFCQUFxQixHQUVyRTlwQyxLQUFLNG9DLFNBQVc3UixFQUFRK1MsR0FBUTlwQyxLQUFLazRCLFlBQWMsSUFBTWw0QixLQUFLNG9DLFNBR3BFLE9BdDhGMkIsU0FBa0MzaEIsRUFBT29QLEVBQVc3RCxFQUFnQjBCLEdBQ2pHLElBS0lqUixFQUNBb2tCLEVBQ0F1QyxFQVBBcUcsRUFBWWhwQixFQUFNN0osTUFDbEJBLEVBQVFpWixFQUFZLElBQU1BLEtBQWVwUCxFQUFNaVAsUUFBVTBDLEdBQTZCM1IsS0FBYUEsRUFBTWtOLFdBQVlpRSxHQUFtQm5SLE1BQVlBLEVBQU13UCxJQUFNLEdBQUt4UCxFQUFNaU8sSUFBSXVCLElBQU0sS0FBTzJCLEdBQW1CblIsSUFBVSxFQUFJLEVBRWpPNmYsRUFBYzdmLEVBQU02UCxRQUNoQkMsRUFBUSxFQWtCWixHQWJJK1AsR0FBZTdmLEVBQU0wUCxVQUV2QkksRUFBUWEsR0FBTyxFQUFHM1EsRUFBTW9RLE1BQU9oQixHQUMvQmdSLEVBQVl6USxHQUFnQkcsRUFBTytQLEdBQ25DN2YsRUFBTWllLE9BQXFCLEVBQVptQyxJQUFrQmpxQixFQUFRLEVBQUlBLEdBRXpDaXFCLElBQWN6USxHQUFnQjNQLEVBQU00UCxPQUFRaVEsS0FFOUNtSixFQUFZLEVBQUk3eUIsRUFDaEI2SixFQUFNNEYsS0FBS3FkLGVBQWlCampCLEVBQU1rTixVQUFZbE4sRUFBTW1oQixlQUlwRGhyQixJQUFVNnlCLEdBQWF6ekIsR0FBYzBYLEdBQVNqTixFQUFNNFEsU0FBV3JILElBQWE2RixHQUFhcFAsRUFBTTRRLE9BQVEsQ0FDekcsSUFBSzVRLEVBQU1rTixVQUFZc0UsR0FBa0J4UixFQUFPb1AsRUFBV25DLEVBQU8xQixFQUFnQnVFLEdBRWhGLE9BY0YsSUFYQTZTLEVBQWdCM2lCLEVBQU00USxPQUN0QjVRLEVBQU00USxPQUFTeEIsSUFBYzdELEVBQWlCaEMsRUFBVyxHQUV6RGdDLElBQW1CQSxFQUFpQjZELElBQWN1VCxHQUVsRDNpQixFQUFNN0osTUFBUUEsRUFDZDZKLEVBQU02bkIsUUFBVTF4QixFQUFRLEVBQUlBLEdBQzVCNkosRUFBTUMsTUFBUSxFQUNkRCxFQUFNNFAsT0FBU0UsRUFDZjlULEVBQUtnRSxFQUFNOUQsSUFFSkYsR0FDTEEsRUFBR3lELEVBQUV0SixFQUFPNkYsRUFBR21GLEdBQ2ZuRixFQUFLQSxFQUFHd0QsTUFHVjRQLEVBQVksR0FBS0QsR0FBZW5QLEVBQU9vUCxFQUFXN0QsR0FBZ0IsR0FDbEV2TCxFQUFNc2hCLFlBQWMvVixHQUFrQndNLEdBQVUvWCxFQUFPLFlBQ3ZEOFAsR0FBUzlQLEVBQU0wUCxVQUFZbkUsR0FBa0J2TCxFQUFNbEQsUUFBVWliLEdBQVUvWCxFQUFPLGFBRXpFb1AsR0FBYXBQLEVBQU1vUSxPQUFTaEIsRUFBWSxJQUFNcFAsRUFBTTdKLFFBQVVBLElBQ2pFQSxHQUFTd1ksR0FBa0IzTyxFQUFPLEdBRTdCdUwsR0FBbUJoVyxJQUN0QndpQixHQUFVL1gsRUFBTzdKLEVBQVEsYUFBZSxxQkFBcUIsR0FFN0Q2SixFQUFNMmhCLE9BQVMzaEIsRUFBTTJoQixTQUczQixNQUFZM2hCLEVBQU00USxTQUNoQjVRLEVBQU00USxPQUFTeEIsRUFFbkIsQ0F5d0ZNNlosQ0FBeUJsd0MsS0FBTXEyQixFQUFXN0QsRUFBZ0IwQixHQWtJNUQsT0FBT2wwQixJQUNULEVBRUErdkMsRUFBUTNpQixRQUFVLFdBQ2hCLE9BQU9wdEIsS0FBSzRyQyxRQUNkLEVBRUFtRSxFQUFRM0gsV0FBYSxTQUFvQjBFLEdBTXZDLFFBSkVBLElBQVM5c0MsS0FBSzZzQixLQUFLc04sZ0JBQWtCbjZCLEtBQUtvMEIsU0FBVyxHQUN2RHAwQixLQUFLbWpCLElBQU1uakIsS0FBS2d2QyxJQUFNaHZDLEtBQUt1b0MsVUFBWXZvQyxLQUFLZzBCLE1BQVFoMEIsS0FBS29kLE1BQVEsRUFDakVwZCxLQUFLbW5DLFVBQVksR0FDakJubkMsS0FBSzhCLFVBQVk5QixLQUFLOEIsU0FBU3NtQyxXQUFXMEUsR0FDbkN5QyxFQUFZMTRCLFVBQVV1eEIsV0FBVy9pQyxLQUFLckYsS0FBTThzQyxFQUNyRCxFQUVBaUQsRUFBUUksUUFBVSxTQUFpQmx5QixFQUFVMVUsRUFBTzNDLEVBQU93cEMsRUFBaUJDLEdBQzFFeGdCLEdBQWlCaEwsR0FBUTRlLE9BQ3pCempDLEtBQUt5MkIsS0FBT3oyQixLQUFLb0MsT0FDakIsSUFBSXdpQixFQUFPemEsS0FBS213QixJQUFJdDZCLEtBQUttbkIsTUFBT25uQixLQUFLazFCLElBQUloTyxNQUFRbG5CLEtBQUtrMkIsUUFBVWwyQixLQUFLeTJCLEtBYXJFLE9BWEF6MkIsS0FBS20wQixVQUFZdUUsR0FBVzE0QixLQUFNNGtCLEdBemNkLFNBQTJCcUMsRUFBT2hKLEVBQVUxVSxFQUFPM0MsRUFBT3dwQyxFQUFpQmh6QixFQUFPd0gsRUFBTXlyQixHQUM5RyxJQUNJcHRCLEVBQ0FxdEIsRUFDQUMsRUFDQXI4QixFQUpBczhCLEdBQVd2cEIsRUFBTTlELEtBQU84RCxFQUFNOG5CLFdBQWE5bkIsRUFBTThuQixTQUFXLENBQUMsSUFBSTl3QixHQU1yRSxJQUFLdXlCLEVBS0gsSUFKQUEsRUFBVXZwQixFQUFNOG5CLFNBQVM5d0IsR0FBWSxHQUNyQ3N5QixFQUFTdHBCLEVBQU1rZ0IsVUFDZmp6QixFQUFJK1MsRUFBTTJrQixTQUFTanVDLE9BRVp1VyxLQUFLLENBR1YsSUFGQStPLEVBQUtzdEIsRUFBT3I4QixHQUFHK0osS0FFTGdGLEVBQUdtRixHQUFLbkYsRUFBR21GLEVBQUVqRixJQUlyQixJQUZBRixFQUFLQSxFQUFHbUYsRUFBRWpGLElBRUhGLEdBQU1BLEVBQUcxRixJQUFNVSxHQUFZZ0YsRUFBR3dxQixLQUFPeHZCLEdBRTFDZ0YsRUFBS0EsRUFBR3dELE1BSVosSUFBS3hELEVBVUgsT0FQQWlxQixHQUFzQixFQUV0QmptQixFQUFNNEYsS0FBSzVPLEdBQVksTUFFdkJ5YSxHQUFXelIsRUFBT3JDLEdBRWxCc29CLEdBQXNCLEVBQ2ZtRCxFQUFnQm5lLEVBQU1qVSxFQUFXLDJCQUE2QixFQUd2RXV5QixFQUFRaHpDLEtBQUt5bEIsRUFDZixDQUtGLElBRkEvTyxFQUFJczhCLEVBQVE3eUMsT0FFTHVXLE1BRUwrTyxHQURBcXRCLEVBQVNFLEVBQVF0OEIsSUFDTGlQLEtBQU9tdEIsR0FFaEI5eUIsR0FBSzVXLEdBQW1CLElBQVZBLEdBQWlCd3BDLEVBQTBCbnRCLEVBQUd6RixHQUFLNVcsR0FBUyxHQUFLd1csRUFBUTZGLEVBQUd4RixFQUF6QzdXLEVBQ3BEcWMsRUFBR3hGLEVBQUlsVSxFQUFRMFosRUFBR3pGLEVBQ2xCOHlCLEVBQU9oK0IsSUFBTWcrQixFQUFPaCtCLEVBQUlxUyxHQUFPcGIsR0FBU2dpQixHQUFRK2tCLEVBQU9oK0IsSUFFdkRnK0IsRUFBT2pqQyxJQUFNaWpDLEVBQU9qakMsRUFBSTRWLEVBQUd6RixFQUFJK04sR0FBUStrQixFQUFPampDLEdBRWxELENBOFpRb2pDLENBQWtCendDLEtBQU1pZSxFQUFVMVUsRUFBTzNDLEVBQU93cEMsRUFWNUNwd0MsS0FBS21sQyxNQUFNdmdCLEVBQU81a0IsS0FBS21uQixNQVU2Q3ZDLEVBQU15ckIsR0FDekVyd0MsS0FBS213QyxRQUFRbHlCLEVBQVUxVSxFQUFPM0MsRUFBT3dwQyxFQUFpQixJQUkvRDVZLEdBQWV4M0IsS0FBTSxHQUVyQkEsS0FBSytqQixRQUFVb1IsR0FBbUJuMUIsS0FBS2sxQixJQUFLbDFCLEtBQU0sU0FBVSxRQUFTQSxLQUFLazFCLElBQUlpRCxNQUFRLFNBQVcsR0FDMUZuNEIsS0FBS3VRLE9BQU8sR0FDckIsRUFFQXcvQixFQUFRdGQsS0FBTyxTQUFjckYsRUFBU1AsR0FLcEMsUUFKYSxJQUFUQSxJQUNGQSxFQUFPLFNBR0pPLEdBQWFQLEdBQWlCLFFBQVRBLEdBRXhCLE9BREE3c0IsS0FBS2cwQixNQUFRaDBCLEtBQUttakIsSUFBTSxFQUNqQm5qQixLQUFLK2pCLE9BQVN1YixHQUFXdC9CLE1BQVFBLEtBRzFDLEdBQUlBLEtBQUs4QixTQUFVLENBQ2pCLElBQUlnb0MsRUFBTzlwQyxLQUFLOEIsU0FBU3MxQixnQkFLekIsT0FKQXAzQixLQUFLOEIsU0FBU29wQyxhQUFhOWQsRUFBU1AsRUFBTTJlLEtBQTBELElBQXJDQSxHQUFrQjNlLEtBQUt5RCxXQUFvQjBVLFFBQVUxRixHQUFXdC9CLE1BRS9IQSxLQUFLK2pCLFFBQVUrbEIsSUFBUzlwQyxLQUFLOEIsU0FBU3MxQixpQkFBbUIwQixHQUFhOTRCLEtBQU1BLEtBQUttbkIsS0FBT25uQixLQUFLOEIsU0FBU3UxQixNQUFReVMsRUFBTSxFQUFHLEdBRWhIOXBDLElBQ1QsQ0FFQSxJQUlJMHdDLEVBQ0FDLEVBQ0FDLEVBQ0F0eEIsRUFDQS9CLEVBQ0EwRixFQUNBL08sRUFWQXczQixFQUFnQjFyQyxLQUFLNHJDLFNBQ3JCaUYsRUFBaUJ6akIsRUFBVW1HLEdBQVFuRyxHQUFXc2UsRUFDOUNvRixFQUFrQjl3QyxLQUFLbW5DLFVBQ3ZCNEosRUFBVS93QyxLQUFLbWpCLElBU25CLEtBQU0wSixHQUFpQixRQUFUQSxJQXZ1R0MsU0FBc0Jta0IsRUFBSUMsR0FJM0MsSUFIQSxJQUFJLzhCLEVBQUk4OEIsRUFBR3J6QyxPQUNQUixFQUFRK1csSUFBTSs4QixFQUFHdHpDLE9BRWRSLEdBQVMrVyxLQUFPODhCLEVBQUc5OEIsS0FBTys4QixFQUFHLzhCLEtBRXBDLE9BQU9BLEVBQUksQ0FDYixDQWd1R3FDZzlCLENBQWF4RixFQUFlbUYsR0FFM0QsTUFEUyxRQUFUaGtCLElBQW1CN3NCLEtBQUttakIsSUFBTSxHQUN2Qm1jLEdBQVd0L0IsTUFzQnBCLElBbkJBMHdDLEVBQW1CMXdDLEtBQUtndkMsSUFBTWh2QyxLQUFLZ3ZDLEtBQU8sR0FFN0IsUUFBVG5pQixJQUVFVCxFQUFVUyxLQUNadFAsRUFBSSxDQUFDLEVBRUxvUCxHQUFhRSxHQUFNLFNBQVV2VixHQUMzQixPQUFPaUcsRUFBRWpHLEdBQVEsQ0FDbkIsSUFFQXVWLEVBQU90UCxHQUdUc1AsRUExZGtCLFNBQTJCTyxFQUFTUCxHQUMxRCxJQUVJdFMsRUFDQWdELEVBQ0FySixFQUNBc2EsRUFMQTZFLEVBQVVqRyxFQUFRLEdBQUt0SSxHQUFVc0ksRUFBUSxJQUFJaUcsUUFBVSxFQUN2RDhkLEVBQWtCOWQsR0FBV0EsRUFBUTdFLFFBTXpDLElBQUsyaUIsRUFDSCxPQUFPdGtCLEVBS1QsSUFBS3RQLEtBRkxoRCxFQUFPMFgsR0FBTyxDQUFDLEVBQUdwRixHQUVSc2tCLEVBQ1IsR0FBSTV6QixLQUFLaEQsRUFJUCxJQUZBckcsR0FEQXNhLEVBQVUyaUIsRUFBZ0I1ekIsR0FBR3JNLE1BQU0sTUFDdkJ2VCxPQUVMdVcsS0FDTHFHLEVBQUtpVSxFQUFRdGEsSUFBTXFHLEVBQUtnRCxHQUs5QixPQUFPaEQsQ0FDVCxDQWdjYTYyQixDQUFrQjFGLEVBQWU3ZSxJQUcxQzNZLEVBQUl3M0IsRUFBYy90QyxPQUVYdVcsS0FDTCxJQUFLMjhCLEVBQWV2ekMsUUFBUW91QyxFQUFjeDNCLElBWXhDLElBQUtxSixLQVhMb3pCLEVBQVlHLEVBQWdCNThCLEdBRWYsUUFBVDJZLEdBQ0Y2akIsRUFBaUJ4OEIsR0FBSzJZLEVBQ3RCdk4sRUFBUXF4QixFQUNSQyxFQUFvQixDQUFDLElBRXJCQSxFQUFvQkYsRUFBaUJ4OEIsR0FBS3c4QixFQUFpQng4QixJQUFNLENBQUMsRUFDbEVvTCxFQUFRdU4sR0FHQXZOLEdBQ1IyRCxFQUFLMHRCLEdBQWFBLEVBQVVwekIsTUFHcEIsU0FBVTBGLEVBQUdtRixJQUF1QixJQUFqQm5GLEVBQUdtRixFQUFFcUssS0FBS2xWLElBQ2pDbVksR0FBc0IxMUIsS0FBTWlqQixFQUFJLGNBRzNCMHRCLEVBQVVwekIsSUFHTyxRQUF0QnF6QixJQUNGQSxFQUFrQnJ6QixHQUFLLEdBUS9CLE9BRkF2ZCxLQUFLbTBCLFdBQWFuMEIsS0FBS21qQixLQUFPNHRCLEdBQVd6UixHQUFXdC9CLE1BRTdDQSxJQUNULEVBRUFvNkIsRUFBTWwzQixHQUFLLFNBQVlrcUIsRUFBU1AsR0FDOUIsT0FBTyxJQUFJdU4sRUFBTWhOLEVBQVNQLEVBQU1qVixVQUFVLEdBQzVDLEVBRUF3aUIsRUFBTW1CLEtBQU8sU0FBY25PLEVBQVNQLEdBQ2xDLE9BQU9pTixHQUFpQixFQUFHbGlCLFVBQzdCLEVBRUF3aUIsRUFBTThPLFlBQWMsU0FBcUJocEMsRUFBT2cvQixFQUFVbkYsRUFBUS9ILEdBQ2hFLE9BQU8sSUFBSW9JLEVBQU04RSxFQUFVLEVBQUcsQ0FDNUI1SSxpQkFBaUIsRUFDakJxQyxNQUFNLEVBQ05ySSxXQUFXLEVBQ1hwd0IsTUFBT0EsRUFDUHVGLFdBQVl5NUIsRUFDWm1TLGtCQUFtQm5TLEVBQ25Cb0ssaUJBQWtCdlAsRUFDbEJ1WCx3QkFBeUJ2WCxFQUN6QnNGLGNBQWVyTixHQUVuQixFQUVBb0ksRUFBTXI2QixPQUFTLFNBQWdCcXRCLEVBQVM0YixFQUFVQyxHQUNoRCxPQUFPblAsR0FBaUIsRUFBR2xpQixVQUM3QixFQUVBd2lCLEVBQU0vNUIsSUFBTSxTQUFhK3NCLEVBQVNQLEdBR2hDLE9BRkFBLEVBQUsxc0IsU0FBVyxFQUNoQjBzQixFQUFLaWEsY0FBZ0JqYSxFQUFLb00sT0FBUyxHQUM1QixJQUFJbUIsRUFBTWhOLEVBQVNQLEVBQzVCLEVBRUF1TixFQUFNOFEsYUFBZSxTQUFzQjlkLEVBQVM5TixFQUFPZ3NCLEdBQ3pELE9BQU85YixFQUFnQjBiLGFBQWE5ZCxFQUFTOU4sRUFBT2dzQixFQUN0RCxFQUVPbFIsQ0FDVCxDQWxlZ0MsQ0FrZTlCNTZCLElBRUYrMEIsR0FBYTZGLEdBQU12akIsVUFBVyxDQUM1QiswQixTQUFVLEdBQ1Y1WCxNQUFPLEVBQ1BJLFNBQVUsRUFDVjRhLElBQUssRUFDTEMsUUFBUyxJQVdYdGlCLEdBQWEsdUNBQXVDLFNBQVVyVixHQUM1RDhpQixHQUFNOWlCLEdBQVEsV0FDWixJQUFJeTBCLEVBQUssSUFBSTFTLEdBQ1RVLEVBQVNTLEdBQU9uMUIsS0FBS3VTLFVBQVcsR0FHcEMsT0FEQW1pQixFQUFPekcsT0FBZ0Isa0JBQVRoYyxFQUEyQixFQUFJLEVBQUcsRUFBRyxHQUM1Q3kwQixFQUFHejBCLEdBQU1iLE1BQU1zMUIsRUFBSWhTLEVBQzVCLENBQ0YsSUFRQSxJQUFJZ1UsR0FBZSxTQUFzQnJwQyxFQUFRdVosRUFBVTFVLEdBQ3pELE9BQU83RSxFQUFPdVosR0FBWTFVLENBQzVCLEVBQ0l1a0MsR0FBYyxTQUFxQnBwQyxFQUFRdVosRUFBVTFVLEdBQ3ZELE9BQU83RSxFQUFPdVosR0FBVTFVLEVBQzFCLEVBQ0lza0MsR0FBdUIsU0FBOEJucEMsRUFBUXVaLEVBQVUxVSxFQUFPOFQsR0FDaEYsT0FBTzNZLEVBQU91WixHQUFVWixFQUFLb3dCLEdBQUlsa0MsRUFDbkMsRUFDSWdvQyxHQUFtQixTQUEwQjdzQyxFQUFRdVosRUFBVTFVLEdBQ2pFLE9BQU83RSxFQUFPcVAsYUFBYWtLLEVBQVUxVSxFQUN2QyxFQUNJb2xCLEdBQWEsU0FBb0JqcUIsRUFBUXVaLEdBQzNDLE9BQU84UyxFQUFZcnNCLEVBQU91WixJQUFhNnZCLEdBQWNwZixFQUFhaHFCLEVBQU91WixLQUFjdlosRUFBT3FQLGFBQWV3OUIsR0FBbUJ4RCxFQUNsSSxFQUNJRSxHQUFlLFNBQXNCN3dCLEVBQU9DLEdBQzlDLE9BQU9BLEVBQUtoZCxJQUFJZ2QsRUFBS0MsRUFBR0QsRUFBS0UsRUFBR3BULEtBQUs0SCxNQUFrQyxLQUEzQnNMLEVBQUtHLEVBQUlILEVBQUtJLEVBQUlMLElBQW9CLElBQVNDLEVBQzdGLEVBQ0kyd0IsR0FBaUIsU0FBd0I1d0IsRUFBT0MsR0FDbEQsT0FBT0EsRUFBS2hkLElBQUlnZCxFQUFLQyxFQUFHRCxFQUFLRSxLQUFNRixFQUFLRyxFQUFJSCxFQUFLSSxFQUFJTCxHQUFRQyxFQUMvRCxFQUNJMEksR0FBdUIsU0FBOEIzSSxFQUFPQyxHQUM5RCxJQUFJNEYsRUFBSzVGLEVBQUs4RixJQUNWM0YsRUFBSSxHQUVSLElBQUtKLEdBQVNDLEVBQUtoUSxFQUVqQm1RLEVBQUlILEVBQUtoUSxPQUNKLEdBQWMsSUFBVitQLEdBQWVDLEVBQUsvSyxFQUU3QmtMLEVBQUlILEVBQUsvSyxNQUNKLENBQ0wsS0FBTzJRLEdBQ0x6RixFQUFJeUYsRUFBRzFGLEdBQUswRixFQUFHbEssRUFBSWtLLEVBQUdsSyxFQUFFa0ssRUFBR3pGLEVBQUl5RixFQUFHeEYsRUFBSUwsR0FBU2pULEtBQUs0SCxNQUE4QixLQUF2QmtSLEVBQUd6RixFQUFJeUYsRUFBR3hGLEVBQUlMLElBQWtCLEtBQVNJLEVBRXBHeUYsRUFBS0EsRUFBR3dELE1BR1ZqSixHQUFLSCxFQUFLSSxDQUNaLENBRUFKLEVBQUtoZCxJQUFJZ2QsRUFBS0MsRUFBR0QsRUFBS0UsRUFBR0MsRUFBR0gsRUFDOUIsRUFDSXNoQixHQUFvQixTQUEyQnZoQixFQUFPQyxHQUd4RCxJQUZBLElBQUk0RixFQUFLNUYsRUFBSzhGLElBRVBGLEdBQ0xBLEVBQUd5RCxFQUFFdEosRUFBTzZGLEVBQUdtRixHQUNmbkYsRUFBS0EsRUFBR3dELEtBRVosRUFDSXdaLEdBQXFCLFNBQTRCRCxFQUFVL1ksRUFBT3ZpQixFQUFRdVosR0FJNUUsSUFIQSxJQUNJMFgsRUFEQTFTLEVBQUtqakIsS0FBS21qQixJQUdQRixHQUNMMFMsRUFBTzFTLEVBQUd3RCxNQUNWeEQsRUFBRzFGLElBQU1VLEdBQVlnRixFQUFHK2MsU0FBU0EsRUFBVS9ZLEVBQU92aUIsR0FDbER1ZSxFQUFLMFMsQ0FFVCxFQUNJb0ssR0FBb0IsU0FBMkI5aEIsR0FLakQsSUFKQSxJQUNJdXpCLEVBQ0E3YixFQUZBMVMsRUFBS2pqQixLQUFLbWpCLElBSVBGLEdBQ0wwUyxFQUFPMVMsRUFBR3dELE1BRU54RCxFQUFHMUYsSUFBTVUsSUFBYWdGLEVBQUd3dUIsSUFBTXh1QixFQUFHd3VCLEtBQU94ekIsRUFDM0N5WCxHQUFzQjExQixLQUFNaWpCLEVBQUksT0FDdEJBLEVBQUdtTCxNQUNib2pCLEVBQTJCLEdBRzdCdnVCLEVBQUswUyxFQUdQLE9BQVE2YixDQUNWLEVBQ0lFLEdBQXNCLFNBQTZCaHRDLEVBQVF1WixFQUFVMVUsRUFBTzhULEdBQzlFQSxFQUFLczBCLEtBQUtqdEMsRUFBUXVaLEVBQVVaLEVBQUt0RSxFQUFFMVQsS0FBS2dZLEVBQUs0SixNQUFPMWQsRUFBTzhULEVBQUt1MEIsSUFBS3YwQixFQUN2RSxFQUNJa1IsR0FBNEIsU0FBbUN4SyxHQU9qRSxJQU5BLElBQ0k0UixFQUNBa2MsRUFDQUMsRUFDQW50QyxFQUpBc2UsRUFBS2MsRUFBT1osSUFNVEYsR0FBSSxDQUlULElBSEEwUyxFQUFPMVMsRUFBR3dELE1BQ1ZvckIsRUFBTUMsRUFFQ0QsR0FBT0EsRUFBSXZxQixHQUFLckUsRUFBR3FFLElBQ3hCdXFCLEVBQU1BLEVBQUlwckIsT0FHUnhELEVBQUd3UyxNQUFRb2MsRUFBTUEsRUFBSXBjLE1BQVE5d0IsR0FDL0JzZSxFQUFHd1MsTUFBTWhQLE1BQVF4RCxFQUVqQjZ1QixFQUFRN3VCLEdBR05BLEVBQUd3RCxNQUFRb3JCLEdBQ2JBLEVBQUlwYyxNQUFReFMsRUFFWnRlLEVBQU9zZSxFQUdUQSxFQUFLMFMsQ0FDUCxDQUVBNVIsRUFBT1osSUFBTTJ1QixDQUNmLEVBR1c1dUIsR0FBeUIsV0FDbEMsU0FBU0EsRUFBVXlTLEVBQU1qeEIsRUFBUTJnQixFQUFNemUsRUFBTzdELEVBQVFxTCxFQUFVaVAsRUFBTSt2QixFQUFRaUIsR0FDNUVydUMsS0FBS3NkLEVBQUk1WSxFQUNUMUUsS0FBS3dkLEVBQUk1VyxFQUNUNUcsS0FBS3lkLEVBQUkxYSxFQUNUL0MsS0FBS3VkLEVBQUk4SCxFQUNUcmxCLEtBQUswbUIsRUFBSXRZLEdBQVk2L0IsR0FDckJqdUMsS0FBS29vQixFQUFJL0ssR0FBUXJkLEtBQ2pCQSxLQUFLSyxJQUFNK3NDLEdBQVVXLEdBQ3JCL3RDLEtBQUtzbkIsR0FBSyttQixHQUFZLEVBQ3RCcnVDLEtBQUt5bUIsTUFBUWtQLEVBRVRBLElBQ0ZBLEVBQUtGLE1BQVF6MUIsS0FFakIsQ0FjQSxPQVpja2pCLEVBQVVyTSxVQUVoQm1wQixTQUFXLFNBQWtCdk0sRUFBTXhNLEVBQU92aUIsR0FDaEQxRSxLQUFLMnhDLEtBQU8zeEMsS0FBSzJ4QyxNQUFRM3hDLEtBQUtLLElBRTlCTCxLQUFLSyxJQUFNcXhDLEdBQ1gxeEMsS0FBSytZLEVBQUkwYSxFQUNUenpCLEtBQUs0eEMsR0FBS2x0QyxFQUVWMUUsS0FBS2luQixNQUFRQSxDQUNmLEVBRU8vRCxDQUNULENBOUJvQyxHQWdDcEN5SixHQUFhdUcsR0FBaUIsdU9BQXVPLFNBQVU1YixHQUM3USxPQUFPc2IsR0FBZXRiLEdBQVEsQ0FDaEMsSUFFQXVhLEVBQVNrZ0IsU0FBV2xnQixFQUFTbWdCLFVBQVk1WCxHQUN6Q3ZJLEVBQVNvZ0IsYUFBZXBnQixFQUFTcWdCLFlBQWM3WSxHQUMvQzdKLEVBQWtCLElBQUk2SixHQUFTLENBQzdCeVAsY0FBYyxFQUNkdFUsU0FBVW5FLEVBQ1Z5RixvQkFBb0IsRUFDcEJoeUIsR0FBSSxPQUNKMnpCLG1CQUFtQixJQUVyQmxSLEVBQVE4bUIsYUFBZXBuQixHQUV2QixJQUFJa3NCLEdBQVMsR0FDVG40QixHQUFhLENBQUMsRUFDZG80QixHQUFjLEdBQ2RDLEdBQWlCLEVBQ2pCQyxHQUFhLEVBQ2JDLEdBQVksU0FBbUIxNUIsR0FDakMsT0FBUW1CLEdBQVduQixJQUFTdTVCLElBQWFwdEMsS0FBSSxTQUFVcWpCLEdBQ3JELE9BQU9BLEdBQ1QsR0FDRixFQUNJbXFCLEdBQWlCLFdBQ25CLElBQUk1dEIsRUFBTzZkLEtBQUtDLE1BQ1orUCxFQUFVLEdBRVY3dEIsRUFBT3l0QixHQUFpQixJQUMxQkUsR0FBVSxrQkFFVkosR0FBTy96QyxTQUFRLFNBQVVxZixHQUN2QixJQUVJdGdCLEVBQ0FvZ0IsRUFDQW0xQixFQUNBQyxFQUxBQyxFQUFVbjFCLEVBQUVtMUIsUUFDWkMsRUFBYXAxQixFQUFFbzFCLFdBTW5CLElBQUt0MUIsS0FBS3ExQixHQUNSejFDLEVBQVErZSxFQUFLNDJCLFdBQVdGLEVBQVFyMUIsSUFBSWsxQixXQUUxQkMsRUFBVyxHQUVqQnYxQyxJQUFVMDFDLEVBQVd0MUIsS0FDdkJzMUIsRUFBV3QxQixHQUFLcGdCLEVBQ2hCdzFDLEVBQVUsR0FJVkEsSUFDRmwxQixFQUFFMkMsU0FDRnN5QixHQUFZRCxFQUFRajFDLEtBQUtpZ0IsR0FFN0IsSUFFQTgwQixHQUFVLG9CQUVWRSxFQUFRcjBDLFNBQVEsU0FBVXFmLEdBQ3hCLE9BQU9BLEVBQUVzMUIsUUFBUXQxQixHQUFHLFNBQVVnVyxHQUM1QixPQUFPaFcsRUFBRW5jLElBQUksS0FBTW15QixFQUNyQixHQUNGLElBQ0E0ZSxHQUFpQnp0QixFQUVqQjJ0QixHQUFVLGNBRWQsRUFFSVMsR0FBdUIsV0FDekIsU0FBU0EsRUFBUXZmLEVBQU16QixHQUNyQmh5QixLQUFLc0QsU0FBVzB1QixHQUFTMXVCLEdBQVMwdUIsR0FDbENoeUIsS0FBS3FkLEtBQU8sR0FDWnJkLEtBQUtpekMsR0FBSyxHQUVWanpDLEtBQUtrekMsWUFBYSxFQUNsQmx6QyxLQUFLOEQsR0FBS3d1QyxLQUVWN2UsR0FBUXp6QixLQUFLc0IsSUFBSW15QixFQUNuQixDQUVBLElBQUkwZixFQUFVSCxFQUFRbjhCLFVBb0l0QixPQWxJQXM4QixFQUFRN3hDLElBQU0sU0FBYWdXLEVBQU1tYyxFQUFNekIsR0FNakNqQixFQUFZelosS0FDZDBhLEVBQVF5QixFQUNSQSxFQUFPbmMsRUFDUEEsRUFBT3laLEdBR1QsSUFBSS9CLEVBQU9odkIsS0FDUHFvQixFQUFJLFdBQ04sSUFFSS9DLEVBRkFrUSxFQUFPakcsRUFDUDZqQixFQUFlcGtCLEVBQUsxckIsU0FVeEIsT0FSQWt5QixHQUFRQSxJQUFTeEcsR0FBUXdHLEVBQUtuWSxLQUFLN2YsS0FBS3d4QixHQUN4Q2dELElBQVVoRCxFQUFLMXJCLFNBQVdBLEdBQVMwdUIsSUFDbkN6QyxFQUFXUCxFQUNYMUosRUFBU21PLEVBQUtoZCxNQUFNdVksRUFBTXBYLFdBQzFCbVosRUFBWXpMLElBQVcwSixFQUFLaWtCLEdBQUd6MUMsS0FBSzhuQixHQUNwQ2lLLEVBQVdpRyxFQUNYeEcsRUFBSzFyQixTQUFXOHZDLEVBQ2hCcGtCLEVBQUtra0IsWUFBYSxFQUNYNXRCLENBQ1QsRUFHQSxPQURBMEosRUFBS3JxQixLQUFPMGpCLEVBQ0wvUSxJQUFTeVosRUFBYzFJLEVBQUUyRyxHQUFNLFNBQVV5RSxHQUM5QyxPQUFPekUsRUFBSzF0QixJQUFJLEtBQU1teUIsRUFDeEIsSUFBS25jLEVBQU8wWCxFQUFLMVgsR0FBUStRLEVBQUlBLENBQy9CLEVBRUE4cUIsRUFBUUUsT0FBUyxTQUFnQjVmLEdBQy9CLElBQUkrQixFQUFPakcsRUFDWEEsRUFBVyxLQUNYa0UsRUFBS3p6QixNQUNMdXZCLEVBQVdpRyxDQUNiLEVBRUEyZCxFQUFRRyxVQUFZLFdBQ2xCLElBQUlsbUMsRUFBSSxHQUlSLE9BSEFwTixLQUFLcWQsS0FBS2pmLFNBQVEsU0FBVWtVLEdBQzFCLE9BQU9BLGFBQWEwZ0MsRUFBVTVsQyxFQUFFNVAsS0FBS2laLE1BQU1ySixFQUFHa0YsRUFBRWdoQyxhQUFlaGhDLGFBQWE4bkIsTUFBVzluQixFQUFFeVIsUUFBNEIsV0FBbEJ6UixFQUFFeVIsT0FBTzFHLE9BQXNCalEsRUFBRTVQLEtBQUs4VSxFQUMzSSxJQUNPbEYsQ0FDVCxFQUVBK2xDLEVBQVFwRyxNQUFRLFdBQ2Qvc0MsS0FBS2l6QyxHQUFHdDFDLE9BQVNxQyxLQUFLcWQsS0FBSzFmLE9BQVMsQ0FDdEMsRUFFQXcxQyxFQUFRMWdCLEtBQU8sU0FBY3JTLEVBQVEweUIsR0FDbkMsSUFBSVMsRUFBU3Z6QyxLQThEYixHQTVESW9nQixFQUNGLFdBS0UsSUFKQSxJQUVJOUMsRUFGQXV0QixFQUFTMEksRUFBT0QsWUFDaEJwL0IsRUFBSXEvQixFQUFPbDJCLEtBQUsxZixPQUdidVcsS0FJVSxZQUZmb0osRUFBSWkyQixFQUFPbDJCLEtBQUtuSixJQUVWbUosT0FDSkMsRUFBRThDLFNBQ0Y5QyxFQUFFc3RCLGFBQVksR0FBTSxHQUFNLEdBQU94c0MsU0FBUSxTQUFVNm9CLEdBQ2pELE9BQU80akIsRUFBT3ZYLE9BQU91WCxFQUFPdnRDLFFBQVEycEIsR0FBUSxFQUM5QyxLQWtCSixJQWJBNGpCLEVBQU83bEMsS0FBSSxTQUFVc1ksR0FDbkIsTUFBTyxDQUNMbWtCLEVBQUdua0IsRUFBRTZKLE1BQVE3SixFQUFFMmEsUUFBVTNhLEVBQUVzcUIsT0FBU3RxQixFQUFFc3FCLEtBQUsvYSxLQUFLeUosZ0JBQWtCaFosRUFBRXFxQixXQUFXLElBQU12RCxJQUNyRjltQixFQUFHQSxFQUVQLElBQUc4ZCxNQUFLLFNBQVVodUIsRUFBR0MsR0FDbkIsT0FBT0EsRUFBRW8wQixFQUFJcjBCLEVBQUVxMEIsSUFBTTJDLEdBQ3ZCLElBQUdobUMsU0FBUSxTQUFVbzFDLEdBQ25CLE9BQU9BLEVBQUVsMkIsRUFBRThDLE9BQU9BLEVBQ3BCLElBRUFsTSxFQUFJcS9CLEVBQU9sMkIsS0FBSzFmLE9BRVR1VyxNQUVMb0osRUFBSWkyQixFQUFPbDJCLEtBQUtuSixjQUVDbWxCLEdBQ0EsV0FBWC9iLEVBQUVELE9BQ0pDLEVBQUVpaUIsZUFBaUJqaUIsRUFBRWlpQixjQUFjbmYsU0FDbkM5QyxFQUFFbVYsVUFHRm5WLGFBQWE4YyxLQUFVOWMsRUFBRThDLFFBQVU5QyxFQUFFOEMsT0FBT0EsR0FJbERtekIsRUFBT04sR0FBRzcwQyxTQUFRLFNBQVVpcUIsR0FDMUIsT0FBT0EsRUFBRWpJLEVBQVFtekIsRUFDbkIsSUFFQUEsRUFBT0wsWUFBYSxDQUNyQixDQWxERCxHQW9EQWx6QyxLQUFLcWQsS0FBS2pmLFNBQVEsU0FBVWtVLEdBQzFCLE9BQU9BLEVBQUVtZ0IsTUFBUW5nQixFQUFFbWdCLE1BQ3JCLElBR0Z6eUIsS0FBSytzQyxRQUVEK0YsRUFHRixJQUZBLElBQUk1K0IsRUFBSWkrQixHQUFPeDBDLE9BRVJ1VyxLQUVMaStCLEdBQU9qK0IsR0FBR3BRLEtBQU85RCxLQUFLOEQsSUFBTXF1QyxHQUFPN2UsT0FBT3BmLEVBQUcsRUFHbkQsRUFFQWkvQixFQUFRL3lCLE9BQVMsU0FBZ0JzZixHQUMvQjEvQixLQUFLeXlCLEtBQUtpTixHQUFVLENBQUMsRUFDdkIsRUFFT3NULENBQ1QsQ0FqSjJCLEdBbUp2QlMsR0FBMEIsV0FDNUIsU0FBU0EsRUFBV3poQixHQUNsQmh5QixLQUFLMHpDLFNBQVcsR0FDaEIxekMsS0FBS2d5QixNQUFRQSxFQUNiekMsR0FBWUEsRUFBU2xTLEtBQUs3ZixLQUFLd0MsS0FDakMsQ0FFQSxJQUFJMnpDLEVBQVVGLEVBQVc1OEIsVUF3RHpCLE9BdERBODhCLEVBQVFyeUMsSUFBTSxTQUFhdXhDLEVBQVlwZixFQUFNekIsR0FDM0NmLEVBQVU0aEIsS0FBZ0JBLEVBQWEsQ0FDckNKLFFBQVNJLElBRVgsSUFFSWUsRUFDQXIyQixFQUNBczJCLEVBSkExNEIsRUFBVSxJQUFJNjNCLEdBQVEsRUFBR2hoQixHQUFTaHlCLEtBQUtneUIsT0FDdkM4aEIsRUFBTzM0QixFQUFRMDNCLFdBQWEsQ0FBQyxFQVVqQyxJQUFLdDFCLEtBTkxnUyxJQUFhcFUsRUFBUTdYLFdBQWE2WCxFQUFRN1gsU0FBV2lzQixFQUFTanNCLFVBRTlEdEQsS0FBSzB6QyxTQUFTbDJDLEtBQUsyZCxHQUNuQnNZLEVBQU90WSxFQUFRN1osSUFBSSxVQUFXbXlCLEdBQzlCdFksRUFBUXkzQixRQUFVQyxFQUVSQSxFQUNFLFFBQU50MUIsRUFDRnMyQixFQUFTLEdBRVRELEVBQUsxM0IsRUFBSzQyQixXQUFXRCxFQUFXdDFCLE9BRzlCNDBCLEdBQU83MEMsUUFBUTZkLEdBQVcsR0FBS2czQixHQUFPMzBDLEtBQUsyZCxJQUMxQzI0QixFQUFLdjJCLEdBQUtxMkIsRUFBR25CLFdBQWFvQixFQUFTLEdBQ3BDRCxFQUFHdDRCLFlBQWNzNEIsRUFBR3Q0QixZQUFZazNCLElBQWtCb0IsRUFBR2p4QyxpQkFBaUIsU0FBVTZ2QyxLQVF0RixPQUhBcUIsR0FBVXBnQixFQUFLdFksR0FBUyxTQUFVa04sR0FDaEMsT0FBT2xOLEVBQVE3WixJQUFJLEtBQU0rbUIsRUFDM0IsSUFDT3JvQixJQUNULEVBV0EyekMsRUFBUXZ6QixPQUFTLFNBQWdCc2YsR0FDL0IxL0IsS0FBS3l5QixLQUFLaU4sR0FBVSxDQUFDLEVBQ3ZCLEVBRUFpVSxFQUFRbGhCLEtBQU8sU0FBY3JTLEdBQzNCcGdCLEtBQUswekMsU0FBU3QxQyxTQUFRLFNBQVVxZixHQUM5QixPQUFPQSxFQUFFZ1YsS0FBS3JTLEdBQVEsRUFDeEIsR0FDRixFQUVPcXpCLENBQ1QsQ0FoRThCLEdBd0UxQnAxQixHQUFRLENBQ1Z5USxlQUFnQixXQUNkLElBQUssSUFBSWlsQixFQUFRbjhCLFVBQVVqYSxPQUFRZ1osRUFBTyxJQUFJL1ksTUFBTW0yQyxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGcjlCLEVBQUtxOUIsR0FBU3A4QixVQUFVbzhCLEdBRzFCcjlCLEVBQUt2WSxTQUFRLFNBQVVzaEMsR0FDckIsT0FBT0QsR0FBY0MsRUFDdkIsR0FDRixFQUNBNTlCLFNBQVUsU0FBa0IrcUIsR0FDMUIsT0FBTyxJQUFJd00sR0FBU3hNLEVBQ3RCLEVBQ0EwZSxZQUFhLFNBQXFCbmUsRUFBU2tlLEdBQ3pDLE9BQU85YixFQUFnQitiLFlBQVluZSxFQUFTa2UsRUFDOUMsRUFDQTJJLFlBQWEsU0FBcUJ2dkMsRUFBUXVaLEVBQVU0RixFQUFNN0QsR0FDeERvTSxFQUFVMW5CLEtBQVlBLEVBQVM2dUIsR0FBUTd1QixHQUFRLElBRS9DLElBQUl3dkMsRUFBU3B2QixHQUFVcGdCLEdBQVUsQ0FBQyxHQUFHdEYsSUFDakMrMEMsRUFBU3R3QixFQUFPeVEsR0FBZUQsR0FHbkMsTUFEUyxXQUFUeFEsSUFBc0JBLEVBQU8sSUFDckJuZixFQUFtQnVaLEVBRXZCazJCLEdBQVF0bUIsR0FBUzVQLElBQWE0UCxHQUFTNVAsR0FBVTdlLEtBQU84MEMsR0FBUXh2QyxFQUFRdVosRUFBVTRGLEVBQU03RCxJQUZ0RCxTQUFVL0IsRUFBVTRGLEVBQU03RCxHQUM5RCxPQUFPbTBCLEdBQVF0bUIsR0FBUzVQLElBQWE0UCxHQUFTNVAsR0FBVTdlLEtBQU84MEMsR0FBUXh2QyxFQUFRdVosRUFBVTRGLEVBQU03RCxHQUNqRyxFQUZpQnRiLENBR25CLEVBQ0EwdkMsWUFBYSxTQUFxQjF2QyxFQUFRdVosRUFBVTRGLEdBR2xELElBRkFuZixFQUFTNnVCLEdBQVE3dUIsSUFFTi9HLE9BQVMsRUFBRyxDQUNyQixJQUFJMDJDLEVBQVUzdkMsRUFBT00sS0FBSSxTQUFVc1ksR0FDakMsT0FBT3hkLEdBQUtzMEMsWUFBWTkyQixFQUFHVyxFQUFVNEYsRUFDdkMsSUFDSW5tQixFQUFJMjJDLEVBQVExMkMsT0FDaEIsT0FBTyxTQUFVNEwsR0FHZixJQUZBLElBQUkySyxFQUFJeFcsRUFFRHdXLEtBQ0xtZ0MsRUFBUW5nQyxHQUFHM0ssRUFFZixDQUNGLENBRUE3RSxFQUFTQSxFQUFPLElBQU0sQ0FBQyxFQUV2QixJQUFJbTdCLEVBQVNoUyxHQUFTNVAsR0FDbEJTLEVBQVFvRyxHQUFVcGdCLEdBQ2xCNlksRUFBSW1CLEVBQU0yVSxVQUFZM1UsRUFBTTJVLFFBQVE3RSxTQUFXLENBQUMsR0FBR3ZRLElBQWFBLEVBRXBFbXZCLEVBQVN2TixFQUFTLFNBQVV0MkIsR0FDMUIsSUFBSWdVLEVBQUksSUFBSXNpQixFQUNaalEsRUFBWXpNLElBQU0sRUFDbEI1RixFQUFFbkcsS0FBSzFTLEVBQVFtZixFQUFPdGEsRUFBUXNhLEVBQU90YSxFQUFPcW1CLEVBQWEsRUFBRyxDQUFDbHJCLElBQzdENlksRUFBRWhOLE9BQU8sRUFBR2dOLEdBQ1pxUyxFQUFZek0sS0FBT3diLEdBQWtCLEVBQUcvTyxFQUMxQyxFQUFJbFIsRUFBTXJlLElBQUlxRSxFQUFRNlksR0FFdEIsT0FBT3NpQixFQUFTdU4sRUFBUyxTQUFVN2pDLEdBQ2pDLE9BQU82akMsRUFBTzFvQyxFQUFRNlksRUFBR3NHLEVBQU90YSxFQUFRc2EsRUFBT3RhLEVBQU9tVixFQUFPLEVBQy9ELENBQ0YsRUFDQTQxQixRQUFTLFNBQWlCNXZDLEVBQVF1WixFQUFVNE8sR0FDMUMsSUFBSTBuQixFQUVBdHRCLEVBQVFubkIsR0FBS29ELEdBQUd3QixFQUFRdXRCLEtBQVFzaUIsRUFBVSxDQUFDLEdBQVd0MkIsR0FBWSxRQUFTczJCLEVBQVF4eUMsUUFBUyxFQUFNd3lDLEdBQVUxbkIsR0FBUSxDQUFDLElBQ3JINEcsRUFBTyxTQUFjbHFCLEVBQU8zQyxFQUFPd3BDLEdBQ3JDLE9BQU9ucEIsRUFBTWtwQixRQUFRbHlCLEVBQVUxVSxFQUFPM0MsRUFBT3dwQyxFQUMvQyxFQUdBLE9BREEzYyxFQUFLeE0sTUFBUUEsRUFDTndNLENBQ1QsRUFDQStnQixXQUFZLFNBQW9CcG5CLEdBQzlCLE9BQU9vQyxFQUFnQitiLFlBQVluZSxHQUFTLEdBQU16dkIsT0FBUyxDQUM3RCxFQUNBNjJCLFNBQVUsU0FBa0JqckIsR0FFMUIsT0FEQUEsR0FBU0EsRUFBTXZILE9BQVN1SCxFQUFNdkgsS0FBT3M1QixHQUFXL3hCLEVBQU12SCxLQUFNcXVCLEVBQVVydUIsT0FDL0QyeUIsR0FBV3RFLEVBQVc5bUIsR0FBUyxDQUFDLEVBQ3pDLEVBQ0FtMkIsT0FBUSxTQUFnQm4yQixHQUN0QixPQUFPb3JCLEdBQVdwTyxFQUFTaGQsR0FBUyxDQUFDLEVBQ3ZDLEVBQ0FrckMsZUFBZ0IsU0FBd0JDLEdBQ3RDLElBQUlwOUIsRUFBT285QixFQUFNcDlCLEtBQ2JxOUIsRUFBU0QsRUFBTUMsT0FDZkMsRUFBVUYsRUFBTUUsUUFDaEJwZ0IsRUFBV2tnQixFQUFNbGdCLFNBQ2pCcWdCLEVBQWlCSCxFQUFNRyxnQkFDMUJELEdBQVcsSUFBSTFqQyxNQUFNLEtBQUs5UyxTQUFRLFNBQVUwMkMsR0FDM0MsT0FBT0EsSUFBZWpuQixHQUFTaW5CLEtBQWdCampCLEVBQVNpakIsSUFBZTVpQixFQUFNNWEsRUFBTyxvQkFBc0J3OUIsRUFBYSxXQUN6SCxJQUVBL2hCLEdBQVN6YixHQUFRLFNBQVU4VixFQUFTUCxFQUFNa2YsR0FDeEMsT0FBTzRJLEVBQU9waEIsR0FBUW5HLEdBQVVtSCxHQUFhMUgsR0FBUSxDQUFDLEVBQUcySCxHQUFXdVgsRUFDdEUsRUFFSThJLElBQ0Z4YixHQUFTeGlCLFVBQVVTLEdBQVEsU0FBVThWLEVBQVNQLEVBQU10a0IsR0FDbEQsT0FBT3ZJLEtBQUtzQixJQUFJeXhCLEdBQVN6YixHQUFNOFYsRUFBUzZELEVBQVVwRSxHQUFRQSxHQUFRdGtCLEVBQVdza0IsSUFBUyxDQUFDLEVBQUc3c0IsTUFBT3VJLEVBQ25HLEVBRUosRUFDQXdzQyxhQUFjLFNBQXNCejlCLEVBQU10VixHQUN4Q3VpQyxHQUFTanRCLEdBQVFna0IsR0FBV3Q1QixFQUM5QixFQUNBZ3pDLFVBQVcsU0FBbUJoekMsRUFBTXFqQyxHQUNsQyxPQUFPenRCLFVBQVVqYSxPQUFTMjlCLEdBQVd0NUIsRUFBTXFqQyxHQUFlZCxFQUM1RCxFQUNBeUcsUUFBUyxTQUFpQmxuQyxHQUN4QixPQUFPMHJCLEVBQWdCd2IsUUFBUWxuQyxFQUNqQyxFQUNBbXhDLFdBQVksU0FBb0Jwb0IsRUFBTXFvQixRQUN2QixJQUFUcm9CLElBQ0ZBLEVBQU8sQ0FBQyxHQUdWLElBQ0l1SSxFQUNBTyxFQUZBb1csRUFBSyxJQUFJMVMsR0FBU3hNLEdBWXRCLElBVEFrZixFQUFHdFUsa0JBQW9CdkcsRUFBWXJFLEVBQUs0SyxtQkFFeENqSSxFQUFnQnJqQixPQUFPNC9CLEdBRXZCQSxFQUFHN1csSUFBTSxFQUVUNlcsRUFBRzdrQixNQUFRNmtCLEVBQUdsVixPQUFTckgsRUFBZ0J0SSxNQUN2Q2tPLEVBQVE1RixFQUFnQndWLE9BRWpCNVAsR0FDTE8sRUFBT1AsRUFBTTNPLE9BRVR5dUIsSUFBMEI5ZixFQUFNak8sTUFBUWlPLGFBQWlCZ0YsSUFBU2hGLEVBQU12SSxLQUFLcG5CLGFBQWUydkIsRUFBTXdXLFNBQVMsSUFDN0c5VCxHQUFlaVUsRUFBSTNXLEVBQU9BLEVBQU1jLE9BQVNkLEVBQU02QyxRQUdqRDdDLEVBQVFPLEVBS1YsT0FGQW1DLEdBQWV0SSxFQUFpQnVjLEVBQUksR0FFN0JBLENBQ1QsRUFDQTV3QixRQUFTLFNBQWlCc1ksRUFBTXpCLEdBQzlCLE9BQU95QixFQUFPLElBQUl1ZixHQUFRdmYsRUFBTXpCLEdBQVN6QyxDQUMzQyxFQUNBdWpCLFdBQVksU0FBb0I5Z0IsR0FDOUIsT0FBTyxJQUFJeWhCLEdBQVd6aEIsRUFDeEIsRUFDQW1qQixrQkFBbUIsV0FDakIsT0FBT2hELEdBQU8vekMsU0FBUSxTQUFVcWYsR0FDOUIsSUFDSTIzQixFQUNBNzNCLEVBRkF1MkIsRUFBT3IyQixFQUFFbzFCLFdBSWIsSUFBS3QxQixLQUFLdTJCLEVBQ0pBLEVBQUt2MkIsS0FDUHUyQixFQUFLdjJCLElBQUssRUFDVjYzQixFQUFRLEdBSVpBLEdBQVMzM0IsRUFBRTJDLFFBQ2IsS0FBTW95QixJQUNSLEVBQ0E3dkMsaUJBQWtCLFNBQTBCa1csRUFBTXFtQixHQUNoRCxJQUFJOXhCLEVBQUk0TSxHQUFXbkIsS0FBVW1CLEdBQVduQixHQUFRLEtBQy9DekwsRUFBRTlQLFFBQVE0aEMsSUFBYTl4QixFQUFFNVAsS0FBSzBoQyxFQUNqQyxFQUNBcjhCLG9CQUFxQixTQUE2QmdXLEVBQU1xbUIsR0FDdEQsSUFBSTl4QixFQUFJNE0sR0FBV25CLEdBQ2YzRSxFQUFJOUcsR0FBS0EsRUFBRTlQLFFBQVE0aEMsR0FDdkJockIsR0FBSyxHQUFLOUcsRUFBRWttQixPQUFPcGYsRUFBRyxFQUN4QixFQUNBbk8sTUFBTyxDQUNMMjNCLEtBQU1BLEdBQ05FLFNBQVVBLEdBQ1Z2QyxXQUFZQSxHQUNaM3VCLE9BQVFBLEdBQ1I2dkIsS0FBTUEsR0FDTmlCLFVBQVdBLEdBQ1hqUyxRQUFTQSxHQUNUdmxCLE1BQU9BLEdBQ1BzN0IsV0FBWUEsR0FDWi9OLFFBQVNBLEdBQ1Rqd0IsU0FBVUEsR0FDVjRHLFNBQVVBLEdBQ1ZnekIsS0FBTUEsR0FDTkssUUFBU0EsR0FDVHQzQixZQUFhQSxHQUNiazFCLFFBQVNBLElBRVhrYSxRQUFTdGpCLEVBQ1R1akIsUUFBU3ZpQixHQUNUd2lCLE9BQVExd0IsR0FDUm9vQixXQUFZNVQsR0FBUzRULFdBQ3JCMkgsUUFBUy9tQixHQUNUMm5CLGVBQWdCaG1CLEVBQ2hCbFAsS0FBTSxDQUNKNEMsVUFBV0EsR0FDWHV5QixRQUFTcmpCLEdBQ1RnSSxNQUFPQSxHQUNQZixTQUFVQSxHQUNWNzVCLFVBQVdBLEdBQ1grZ0IsU0FBVXVFLEdBQ1Y0USxzQkFBdUJBLEdBQ3ZCblUsVUFBVyxXQUNULE9BQU8vRSxDQUNULEVBQ0FyQixRQUFTLFNBQWlCdTZCLEdBT3hCLE9BTklBLEdBQVNubUIsSUFDWEEsRUFBU2xTLEtBQUs3ZixLQUFLazRDLEdBRW5CQSxFQUFNdFcsS0FBTzdQLEdBR1JBLENBQ1QsRUFDQW9tQixtQkFBb0IsU0FBNEJwc0MsR0FDOUMsT0FBTytsQixFQUFzQi9sQixDQUMvQixJQUlKb2pCLEdBQWEsK0NBQStDLFNBQVVyVixHQUNwRSxPQUFPK0csR0FBTS9HLEdBQVE4aUIsR0FBTTlpQixFQUM3QixJQUVBdU4sR0FBUXZqQixJQUFJKzNCLEdBQVM0VCxZQUVyQnJkLEVBQWN2UixHQUFNbmIsR0FBRyxDQUFDLEVBQUcsQ0FDekIvQyxTQUFVLElBR1osSUFBSXkxQyxHQUFzQixTQUE2Qjl5QixFQUFRdUMsR0FHN0QsSUFGQSxJQUFJcEMsRUFBS0gsRUFBT0ssSUFFVEYsR0FBTUEsRUFBRzFGLElBQU04SCxHQUFRcEMsRUFBR3d1QixLQUFPcHNCLEdBQVFwQyxFQUFHd3FCLEtBQU9wb0IsR0FDeERwQyxFQUFLQSxFQUFHd0QsTUFHVixPQUFPeEQsQ0FDVCxFQXdCSTR5QixHQUF1QixTQUE4QnYrQixFQUFNMG9CLEdBQzdELE1BQU8sQ0FDTDFvQixLQUFNQSxFQUNONG9CLFFBQVMsRUFFVDlvQixLQUFNLFNBQWMxUyxFQUFRbW9CLEVBQU01RixHQUNoQ0EsRUFBTWdvQixRQUFVLFNBQVVob0IsR0FDeEIsSUFBSWMsRUFBTXhLLEVBYVYsR0FYSTZPLEVBQVVTLEtBQ1o5RSxFQUFPLENBQUMsRUFFUjRFLEdBQWFFLEdBQU0sU0FBVXZWLEdBQzNCLE9BQU95USxFQUFLelEsR0FBUSxDQUN0QixJQUdBdVYsRUFBTzlFLEdBR0xpWSxFQUFVLENBR1osSUFBS3ppQixLQUZMd0ssRUFBTyxDQUFDLEVBRUU4RSxFQUNSOUUsRUFBS3hLLEdBQUt5aUIsRUFBU25ULEVBQUt0UCxJQUcxQnNQLEVBQU85RSxDQUNULEVBbkRZLFNBQXVCZCxFQUFPNnVCLEdBQ2hELElBQ0l2NEIsRUFDQXJKLEVBQ0ErTyxFQUhBbUssRUFBVW5HLEVBQU0ya0IsU0FLcEIsSUFBS3J1QixLQUFLdTRCLEVBR1IsSUFGQTVoQyxFQUFJa1osRUFBUXp2QixPQUVMdVcsTUFDTCtPLEVBQUtnRSxFQUFNa2dCLFVBQVVqekIsR0FBR3FKLE1BRWIwRixFQUFLQSxFQUFHbUYsS0FDYm5GLEVBQUdFLE1BRUxGLEVBQUsyeUIsR0FBb0IzeUIsRUFBSTFGLElBRy9CMEYsR0FBTUEsRUFBRytjLFVBQVkvYyxFQUFHK2MsU0FBUzhWLEVBQVV2NEIsR0FBSTBKLEVBQU9tRyxFQUFRbFosR0FBSXFKLEdBSTFFLENBK0JRdzRCLENBQWM5dUIsRUFBTzRGLEVBQ3ZCLENBQ0YsRUFFSixFQUdXL3NCLEdBQU91ZSxHQUFNeVEsZUFBZSxDQUNyQ3hYLEtBQU0sT0FDTkYsS0FBTSxTQUFjMVMsRUFBUW1vQixFQUFNNUYsRUFBTzdnQixFQUFPZ25CLEdBQzlDLElBQUk3UCxFQUFHMEYsRUFBSTlPLEVBR1gsSUFBS29KLEtBRkx2ZCxLQUFLaW5CLE1BQVFBLEVBRUg0RixFQUNSMVksRUFBSXpQLEVBQU9uRCxhQUFhZ2MsSUFBTSxJQUM5QjBGLEVBQUtqakIsS0FBS3NCLElBQUlvRCxFQUFRLGdCQUFpQnlQLEdBQUssR0FBSyxHQUFJMFksRUFBS3RQLEdBQUluWCxFQUFPZ25CLEVBQVMsRUFBRyxFQUFHN1AsSUFDakZrMEIsR0FBS2wwQixFQUNSMEYsRUFBRzVWLEVBQUk4RyxFQUVQblUsS0FBS29qQixPQUFPNWxCLEtBQUsrZixFQUVyQixFQUNBaE4sT0FBUSxTQUFnQjZNLEVBQU9DLEdBRzdCLElBRkEsSUFBSTRGLEVBQUs1RixFQUFLOEYsSUFFUEYsR0FDTHpHLEVBQWF5RyxFQUFHNWlCLElBQUk0aUIsRUFBRzNGLEVBQUcyRixFQUFHMUYsRUFBRzBGLEVBQUc1VixFQUFHNFYsR0FBTUEsRUFBR3lELEVBQUV0SixFQUFPNkYsRUFBR21GLEdBRTNEbkYsRUFBS0EsRUFBR3dELEtBRVosR0FDQyxDQUNEblAsS0FBTSxXQUNORixLQUFNLFNBQWMxUyxFQUFRNkUsR0FHMUIsSUFGQSxJQUFJMkssRUFBSTNLLEVBQU01TCxPQUVQdVcsS0FDTGxVLEtBQUtzQixJQUFJb0QsRUFBUXdQLEVBQUd4UCxFQUFPd1AsSUFBTSxFQUFHM0ssRUFBTTJLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBRWpFLEdBQ0MyaEMsR0FBcUIsYUFBY3paLElBQWlCeVosR0FBcUIsYUFBY0EsR0FBcUIsT0FBUXRaLE1BQVVsZSxHQUVqSStiLEdBQU11SixRQUFVdEssR0FBU3NLLFFBQVU3akMsR0FBSzZqQyxRQUFVLFNBQ2xEalUsRUFBYSxFQUNieUIsS0FBbUI2SixLQUNuQixJQUFJZ2IsR0FBU3pSLEdBQVN5UixPQUNsQkMsR0FBUzFSLEdBQVMwUixPQUNsQkMsR0FBUzNSLEdBQVMyUixPQUNsQkMsR0FBUzVSLEdBQVM0UixPQUNsQkMsR0FBUzdSLEdBQVM2UixPQUNsQjVQLEdBQVNqQyxHQUFTaUMsT0FDbEI2UCxHQUFPOVIsR0FBUzhSLEtBQ2hCQyxHQUFRL1IsR0FBUytSLE1BQ2pCQyxHQUFRaFMsR0FBU2dTLE1BQ2pCQyxHQUFRalMsR0FBU2lTLE1BQ2pCQyxHQUFTbFMsR0FBU2tTLE9BQ2xCQyxHQUFVblMsR0FBU21TLFFBQ25CQyxHQUFPcFMsR0FBU29TLEtBQ2hCaFEsR0FBY3BDLEdBQVNvQyxZQUN2QmlRLEdBQVNyUyxHQUFTcVMsT0FDbEJDLEdBQU90UyxHQUFTc1MsS0FDaEJDLEdBQU92UyxHQUFTdVMsS0FDaEJDLEdBQU94UyxHQUFTd1Msb3BCQ2g0SWhCQyxFQUFjLEVBQUFsM0MsS0FBS2d2QixlQUFlLEVBQUE5QixZQUFjLEVBQUFsdEIsS0FFcERtM0MsRUFBa0JELEVBQVkxMkIsS0FBSzhaLGdGQ0p0QixJQUFJOGMsRUFBU2wzQyxNQUFNQSxLQUFLazNDLFVBQVUsV0FBd0wsT0FBN0tBLEVBQVNoNEMsT0FBT2k0QyxRQUFRLFNBQVM3NUIsR0FBRyxJQUFJLElBQUlFLEVBQUV0SixFQUFFLEVBQUU3VixFQUFFdVosVUFBVWphLE9BQU91VyxFQUFFN1YsRUFBRTZWLElBQW9CLElBQUksSUFBSXFKLEtBQXZCQyxFQUFFNUYsVUFBVTFELEdBQXFCaFYsT0FBTzJYLFVBQVVsWSxlQUFlMEcsS0FBS21ZLEVBQUVELEtBQUdELEVBQUVDLEdBQUdDLEVBQUVELElBQUcsT0FBT0QsQ0FBQyxFQUFTNDVCLEVBQVN6Z0MsTUFBTXpXLEtBQUs0WCxVQUFVLEVBQUUxWSxPQUFPQyxlQUFldEQsRUFBdEIsY0FBNEMwTixPQUFNLElBQU8sSUFBSTZ0QyxFQUFtQixFQUFRLHdEQUEwQkMsRUFBc0IsRUFBUSwyREFBNkJDLEVBQWtCLEVBQVEsdURBQXlCQyxFQUFtQkwsRUFBU0EsRUFBUyxDQUFDLEVBQUVFLEVBQW1CSSxpQkFBaUIsQ0FBQ3pxQixJQUFJcXFCLEVBQW1CSSxnQkFBZ0JDLFFBQVEsU0FBU0MsRUFBbUJDLEVBQVVDLEVBQVlDLEdBQWVELEVBQVl0eEIsVUFBVSxFQUFFLElBQWlEd3hCLEVBQTdDQyxFQUFhSCxFQUFZenhCLEtBQUt3eEIsR0FBNkIsR0FBR0ksRUFBYSxDQUFDRCxFQUFjLEdBQUcsSUFBSUUsRUFBaUIsRUFBRSxFQUFFLENBQUlBLElBQW1CRCxFQUFhM3hDLFFBQU8weEMsR0FBZUgsRUFBVXZ4QixVQUFVNHhCLEVBQWlCRCxFQUFhM3hDLFFBQU8sSUFBSTZ4QyxFQUFhRixFQUFhLEdBQUdELEdBQWVELEVBQWNJLEdBQWNELEVBQWlCRCxFQUFhM3hDLE1BQU02eEMsRUFBYXQ2QyxNQUFNLE9BQU9vNkMsRUFBYUgsRUFBWXp4QixLQUFLd3hCLElBQWVLLElBQW1CTCxFQUFVaDZDLFNBQVFtNkMsR0FBZUgsRUFBVXZ4QixVQUFVNHhCLEdBQWtCLE1BQU1GLEVBQWNILEVBQVUsT0FBT0csQ0FBYSxDQUFDLElBQUlJLEVBQWMsQ0FBQ0MsYUFBYSxXQUFXQyxTQUFTLDZJQUE2SUMsa0JBQWtCLHNLQUFzS0Msc0JBQXNCLGlLQUFpS0MsVUFBVSxzTUFBME1DLEVBQXFCLENBQUNDLEtBQUssZUFBZUMsTUFBTSxNQUFNQyxRQUFRLFdBQWltQjk4QyxFQUFRKzhDLE9BQTlsQixTQUFnQjk3QyxFQUFLKzdDLEdBQUksSUFBSUMsT0FBUSxJQUFMRCxFQUFZTCxFQUFxQkssRUFBR0UsRUFBR0QsRUFBR0wsS0FBS0EsT0FBVSxJQUFMTSxFQUFZLGVBQWVBLEVBQUdDLEVBQUdGLEVBQUdILFFBQVFBLE9BQWEsSUFBTEssRUFBWSxVQUFVQSxFQUFHQyxFQUFHSCxFQUFHSixNQUFpQyxJQUFJNTdDLEVBQU0sTUFBTSxHQUFHLElBQUlvOEMsRUFBYWhCLEVBQWNPLEdBQVVVLEVBQVc1QixPQUF2RixJQUFMMEIsRUFBWSxNQUFNQSxHQUFvR0csV0FBZUMsRUFBZ0IsZ0JBQVZWLEVBQXdCLE9BQU9qQixFQUFtQjU2QyxFQUFLbzhDLEdBQWEsU0FBVUksR0FBTyxJQUFJaDBCLEVBQU82ekIsRUFBV0csR0FBTyxJQUFJaDBCLEVBQU8sQ0FBQyxJQUFJdG5CLEVBQUtzN0MsRUFBTTM3QyxPQUFPLEVBQUUyNUMsRUFBa0JpQyxhQUFhRCxFQUFNLEdBQUdBLEVBQU1FLFdBQVcsR0FBR2wwQixHQUFRK3pCLEVBQU0sTUFBTXI3QyxFQUFLRyxTQUFTLElBQUksS0FBS0gsR0FBTSxHQUFHLENBQUMsT0FBT3NuQixDQUFPLEdBQUUsRUFBdUIsSUFBSW0wQixFQUFxQixDQUFDem5CLE1BQU0sT0FBTzBtQixNQUFNLE9BQVdnQixFQUFPLDRDQUFnREMsRUFBVSxnREFBb0RDLEVBQWtCLENBQUNDLElBQUksQ0FBQ0gsT0FBT0EsRUFBT0MsVUFBVUEsRUFBVW5yQyxLQUFLNG9DLEVBQW1CMEMsWUFBWUQsS0FBS0UsTUFBTSxDQUFDTCxPQUFPQSxFQUFPQyxVQUFVQSxFQUFVbnJDLEtBQUs0b0MsRUFBbUIwQyxZQUFZQyxPQUFPdEMsTUFBTSxDQUFDaUMsT0FBT0EsRUFBT0MsVUFBVUEsRUFBVW5yQyxLQUFLNG9DLEVBQW1CMEMsWUFBWXJDLFFBQVl1QyxFQUFjOUMsRUFBU0EsRUFBUyxDQUFDLEVBQUUwQyxHQUFtQixDQUFDN3NCLElBQUk2c0IsRUFBa0JuQyxRQUFZd0MsRUFBYTFnQyxPQUFPMGdDLGFBQWlCQyxFQUFnQkQsRUFBYSxPQUFXRSxFQUEyQixDQUFDekIsTUFBTSxPQUFPLFNBQVMwQixFQUFpQkMsRUFBT2xCLEVBQVdtQixFQUFZQyxHQUFVLElBQUlDLEVBQWFILEVBQVdJLEVBQXFCSixFQUFPQSxFQUFPMThDLE9BQU8sR0FBRyxHQUFHMjhDLEdBQW9DLE1BQXZCRyxFQUE0QkQsRUFBYUgsT0FBWSxHQUFHRSxHQUFpQyxNQUF2QkUsRUFBNEJELEVBQWFILE1BQVcsQ0FBQyxJQUFJSyxFQUF3QnZCLEVBQVdrQixHQUFRLEdBQUdLLEVBQXlCRixFQUFhRSxPQUE2QixHQUFlLE1BQVpMLEVBQU8sSUFBc0IsTUFBWkEsRUFBTyxHQUFTLENBQUMsSUFBSU0sRUFBaUJOLEVBQU8sR0FBT08sRUFBNkIsS0FBbEJELEdBQXlDLEtBQWxCQSxFQUFzQno4QyxTQUFTbThDLEVBQU94NkIsT0FBTyxHQUFHLElBQUkzaEIsU0FBU204QyxFQUFPeDZCLE9BQU8sSUFBSTI2QixFQUFhSSxHQUFZLFFBQVFWLEVBQWdCVSxFQUFXLE1BQU10RCxFQUFrQnVELGNBQWNELEdBQVlYLEVBQWE1QyxFQUFzQnlELGtCQUFrQkYsSUFBYUEsRUFBVyxDQUFDLENBQUMsT0FBT0osQ0FBWSxDQUEwTjMrQyxFQUFRay9DLGFBQWpPLFNBQXNCVixFQUFPeEIsR0FBSSxJQUFJQyxRQUFTLElBQUxELEVBQVlzQixFQUEyQnRCLEdBQUlILE1BQWlDLE9BQUkyQixFQUF3QkQsRUFBaUJDLEVBQU85QyxPQUFwRSxJQUFMdUIsRUFBWSxNQUFNQSxHQUFpRmtDLFVBQVMsR0FBTSxHQUEzRSxFQUFpRixFQUFrZ0JuL0MsRUFBUW8vQyxPQUF2ZSxTQUFnQm4rQyxFQUFLKzdDLEdBQUksSUFBSUMsT0FBUSxJQUFMRCxFQUFZWSxFQUFxQlosRUFBR0UsRUFBR0QsRUFBR0osTUFBTUEsT0FBVyxJQUFMSyxFQUFZLE1BQU1BLEVBQUdDLEVBQUdGLEVBQUc5bUIsTUFBTUEsT0FBVyxJQUFMZ25CLEVBQW9CLFFBQVJOLEVBQWMsU0FBUyxPQUFPTSxFQUFHLElBQUlsOEMsRUFBTSxNQUFNLEdBQUcsSUFBSW8rQyxFQUFhbEIsRUFBY3RCLEdBQU8xbUIsR0FBV21uQixFQUFXNUIsRUFBbUJtQixHQUFPc0MsU0FBYVYsRUFBb0IsY0FBUnRvQixFQUF3QnVvQixFQUFpQixXQUFSdm9CLEVBQWlCLE9BQU8wbEIsRUFBbUI1NkMsRUFBS28rQyxHQUFhLFNBQVViLEdBQVEsT0FBT0QsRUFBaUJDLEVBQU9sQixFQUFXbUIsRUFBWUMsRUFBVSxHQUFFLCtFQ0F0eEpyN0MsT0FBT0MsZUFBZXRELEVBQXRCLGNBQTRDME4sT0FBTSxJQUFPMU4sRUFBUWkrQyxZQUFZLENBQUNELElBQUksNkNBQTZDRSxNQUFNLHVvQkFBdW9CdEMsTUFBTSxxaENBQXFoQzU3QyxFQUFRMjdDLGdCQUFnQixDQUFDcUMsSUFBSSxDQUFDbUIsU0FBUyxDQUFDLE9BQU8sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUs1QixXQUFXLENBQUMsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVVcsTUFBTSxDQUFDaUIsU0FBUyxDQUFDLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUs1QixXQUFXLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLE9BQU8sRUFBSSxZQUFZLEVBQUksT0FBTyxFQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFlBQVksRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLE9BQU8sRUFBSSxZQUFZLEVBQUksT0FBTyxFQUFJLFFBQVEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxZQUFZLEVBQUksUUFBUSxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLGFBQWEsRUFBSSxVQUFVLEVBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZM0IsTUFBTSxDQUFDdUQsU0FBUyxDQUFDLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLGtCQUFrQixJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxlQUFlLElBQUksU0FBUyxJQUFJLFFBQVEsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSx5QkFBeUIsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLGNBQWMsSUFBSSxnQkFBZ0IsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksNkJBQTZCLElBQUksMEJBQTBCLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksb0NBQW9DLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSwyQkFBMkIsSUFBSSxxQkFBcUIsSUFBSSxxQkFBcUIsSUFBSSxZQUFZLElBQUksa0JBQWtCLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLDBCQUEwQixJQUFJLGNBQWMsSUFBSSxvQkFBb0IsSUFBSSxvQkFBb0IsSUFBSSx5QkFBeUIsSUFBSSxrQkFBa0IsSUFBSSx3QkFBd0IsSUFBSSw2QkFBNkIsSUFBSSx5QkFBeUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxrQkFBa0IsSUFBSSxzQkFBc0IsSUFBSSxzQkFBc0IsSUFBSSxjQUFjLElBQUksaUJBQWlCLElBQUkscUJBQXFCLElBQUksY0FBYyxJQUFJLHdCQUF3QixJQUFJLHNCQUFzQixJQUFJLG1CQUFtQixJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLG9CQUFvQixJQUFJLHVCQUF1QixJQUFJLFlBQVksSUFBSSxpQkFBaUIsSUFBSSxjQUFjLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxxQkFBcUIsSUFBSSx5QkFBeUIsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssc0JBQXNCLElBQUksMEJBQTBCLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxpQkFBaUIsSUFBSSxxQkFBcUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxnQkFBZ0IsSUFBSSxzQkFBc0IsSUFBSSxpQkFBaUIsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksaUJBQWlCLElBQUksU0FBUyxJQUFJLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksaUJBQWlCLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLG1CQUFtQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxxQkFBcUIsSUFBSSxjQUFjLElBQUksaUJBQWlCLElBQUksd0JBQXdCLElBQUksZ0JBQWdCLElBQUksc0JBQXNCLElBQUksc0JBQXNCLElBQUksbUJBQW1CLElBQUksc0JBQXNCLElBQUksY0FBYyxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFlBQVksSUFBSSxpQkFBaUIsSUFBSSxrQkFBa0IsSUFBSSxpQkFBaUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxxQkFBcUIsSUFBSSxvQkFBb0IsSUFBSSxpQkFBaUIsSUFBSSxvQkFBb0IsSUFBSSxlQUFlLElBQUksa0JBQWtCLElBQUksY0FBYyxJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLGtCQUFrQixJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksUUFBUSxLQUFLLE9BQU8sSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLHVCQUF1QixJQUFJLG1CQUFtQixJQUFJLGtCQUFrQixJQUFJLHVCQUF1QixJQUFJLG1CQUFtQixJQUFJLFNBQVMsS0FBSyxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLElBQUksUUFBUSxLQUFLLGNBQWMsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLHdCQUF3QixJQUFJLHVCQUF1QixJQUFJLHNCQUFzQixJQUFJLDBCQUEwQixJQUFJLHlCQUF5QixJQUFJLG1CQUFtQixJQUFJLFlBQVksS0FBSyxRQUFRLEtBQUssWUFBWSxJQUFJLHFCQUFxQixJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksaUJBQWlCLElBQUksY0FBYyxJQUFJLHlCQUF5QixJQUFJLGVBQWUsSUFBSSxhQUFhLElBQUksa0JBQWtCLEtBQUssY0FBYyxJQUFJLGVBQWUsSUFBSSxvQkFBb0IsSUFBSSx3QkFBd0IsS0FBSyxzQkFBc0IsS0FBSyxtQkFBbUIsSUFBSSx5QkFBeUIsS0FBSyxvQkFBb0IsSUFBSSxvQkFBb0IsS0FBSyxpQkFBaUIsS0FBSyxvQkFBb0IsSUFBSSx1QkFBdUIsS0FBSyx5QkFBeUIsSUFBSSxZQUFZLElBQUksaUJBQWlCLElBQUksbUJBQW1CLElBQUksZ0JBQWdCLEtBQUssc0JBQXNCLEtBQUssaUJBQWlCLElBQUksNEJBQTRCLEtBQUssc0JBQXNCLEtBQUssZ0JBQWdCLElBQUkscUJBQXFCLEtBQUssMEJBQTBCLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksd0JBQXdCLEtBQUssMEJBQTBCLElBQUksb0JBQW9CLEtBQUsseUJBQXlCLElBQUksc0JBQXNCLEtBQUssMkJBQTJCLElBQUksY0FBYyxLQUFLLG1CQUFtQixJQUFJLGdCQUFnQixJQUFJLHFCQUFxQixLQUFLLDBCQUEwQixJQUFJLHFCQUFxQixLQUFLLGdCQUFnQixLQUFLLHFCQUFxQixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSxzQkFBc0IsSUFBSSxrQkFBa0IsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsS0FBSyx5QkFBeUIsSUFBSSxtQkFBbUIsSUFBSSxPQUFPLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLGdCQUFnQixJQUFJLG9CQUFvQixJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksY0FBYyxJQUFJLGtCQUFrQixJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLGtCQUFrQixJQUFJLHVCQUF1QixJQUFJLGtCQUFrQixJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGlCQUFpQixJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLG1CQUFtQixJQUFJLHVCQUF1QixJQUFJLHlCQUF5QixJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksc0JBQXNCLElBQUksZUFBZSxJQUFJLGtCQUFrQixJQUFJLHdCQUF3QixJQUFJLGlCQUFpQixJQUFJLHVCQUF1QixJQUFJLHVCQUF1QixJQUFJLG9CQUFvQixJQUFJLHVCQUF1QixJQUFJLGVBQWUsSUFBSSxhQUFhLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksa0JBQWtCLElBQUkscUJBQXFCLElBQUksdUJBQXVCLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksa0JBQWtCLElBQUkscUJBQXFCLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxpQkFBaUIsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxtQkFBbUIsSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxpQkFBaUIsSUFBSSxVQUFVLElBQUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksdUJBQXVCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksbUJBQW1CLElBQUksd0JBQXdCLElBQUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSx1QkFBdUIsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUksZUFBZSxJQUFJLFNBQVMsS0FBSyxjQUFjLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksaUJBQWlCLElBQUkscUJBQXFCLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxlQUFlLElBQUkscUJBQXFCLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGdCQUFnQixJQUFJLGtCQUFrQixJQUFJLHNCQUFzQixJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFlBQVksS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxvQkFBb0IsSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUkscUJBQXFCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGdCQUFnQixJQUFJLGlCQUFpQixJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUksd0JBQXdCLElBQUksbUJBQW1CLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksdUJBQXVCLElBQUksZUFBZSxJQUFJLG1CQUFtQixJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssZUFBZSxJQUFJLG9CQUFvQixJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLGFBQWEsS0FBSyxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxXQUFXLEtBQUssVUFBVSxLQUFLLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFdBQVcsS0FBSyxnQkFBZ0IsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxjQUFjLElBQUksbUJBQW1CLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksS0FBSyxjQUFjLElBQUksZUFBZSxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLGNBQWMsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLG9CQUFvQixJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEtBQUssVUFBVSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLGdCQUFnQixJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksZ0JBQWdCLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUkscUJBQXFCLElBQUksc0JBQXNCLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssYUFBYSxJQUFJLG9CQUFvQixJQUFJLHFCQUFxQixJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxPQUFPLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUs1QixXQUFXLENBQUMsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksT0FBTyxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsRUFBSSxRQUFRLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxTQUFTLEdBQUssUUFBUSxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLFFBQVEsRUFBSSxPQUFPLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFlBQVksRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLDBCQUEwQixJQUFJLFNBQVMsRUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksYUFBYSxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksa0JBQWtCLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxVQUFVLEVBQUksVUFBVSxHQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksRUFBSSxPQUFPLEdBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksd0JBQXdCLElBQUksc0JBQXNCLElBQUksVUFBVSxJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFFBQVEsSUFBSSxlQUFlLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxTQUFTLEdBQUssUUFBUSxFQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLHFCQUFxQixJQUFJLHlCQUF5QixFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLGdCQUFnQixJQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxpQkFBaUIsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLHNCQUFzQixJQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksT0FBTyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFNBQVMsR0FBSyxRQUFRLElBQUksUUFBUSxHQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksT0FBTyxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxrQkFBa0IsRUFBSSxXQUFXLEVBQUksZ0JBQWdCLElBQUksU0FBUyxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksU0FBUyxFQUFJLGFBQWEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksT0FBTyxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksU0FBUyxFQUFJLGFBQWEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksUUFBUSxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFFBQVEsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLElBQUksT0FBTyxFQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksU0FBUyxFQUFJLFdBQVcsSUFBSSxxQkFBcUIsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxzQkFBc0IsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGtC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LElBQUksaUJBQWlCLElBQUksVUFBVSxFQUFJLFlBQVksSUFBSSxRQUFRLElBQUksZ0JBQWdCLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLE9BQU8sRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLFlBQVksRUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxhQUFhLEVBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksU0FBUyxLQUFLLFFBQVEsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLGNBQWMsRUFBSSxVQUFVLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFNBQVMsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFdBQVcsRUFBSSxVQUFVOXpDLEVBQUUsV0FBVyxJQUFJLGVBQWUsSUFBSSxTQUFTLElBQUkscUJBQXFCLElBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxZQUFZLEVBQUksVUFBVSxFQUFJLFlBQVksRUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsRUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksc0JBQXNCLElBQUksV0FBVyxJQUFJLFdBQVcsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsR0FBSyxRQUFRLEVBQUksT0FBTyxHQUFLLFNBQVMsR0FBSyxTQUFTLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEdBQUssUUFBUSxHQUFLLFNBQVMsR0FBSyxTQUFTLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxhQUFhLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFFBQVEsSUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxVQUFVLEdBQUssUUFBUSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFlBQVksRUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxhQUFhLEVBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxZQUFZLEVBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFlBQVksSUFBSSxTQUFTLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksRUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsR0FBSyxRQUFRLEVBQUksU0FBUyxJQUFJLGNBQWMsRUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksWUFBWSxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixJQUFJLG1CQUFtQixJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksb0JBQW9CLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksUUFBUSxJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxRQUFRLEVBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFVBQVUsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXNjFDLEVBQUUsV0FBVyxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsR0FBSyxTQUFTLEVBQUksU0FBUyxJQUFJLFNBQVMsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGlCQUFpQixJQUFJLFlBQVksRUFBSSxTQUFTLElBQUksYUFBYSxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksWUFBWSxFQUFJLFFBQVEsRUFBSSxTQUFTLElBQUksa0JBQWtCLEdBQUssUUFBUSxJQUFJLE9BQU8sRUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxFQUFJLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksaUJBQWlCLElBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFVBQVVDLEdBQUcsVUFBVSxJQUFJLFNBQVMsRUFBSSxVQUFVLElBQUksVUFBVSxFQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksZUFBZSxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksY0FBYyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksVUFBVSxFQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLHdCQUF3QixFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxRQUFRLEVBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksUUFBUSxHQUFLLFFBQVEsRUFBSSxVQUFVLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxhQUFhLEVBQUksV0FBVyxFQUFJLFFBQVEsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxTQUFTLEdBQUssU0FBUyxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGFBQWEsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxVQUFVLEdBQUssUUFBUSxJQUFJLFFBQVEsRUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLE9BQU8sSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxFQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEtBQUssYUFBYSxJQUFJLFNBQVMsRUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFNBQVMsR0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxlQUFlLElBQUksU0FBUyxHQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxLQUFLLGFBQWEsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLEtBQUssV0FBVyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLEtBQUssV0FBVyxLQUFLLFdBQVcsR0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLGVBQWUsSUFBSSxTQUFTLEtBQUssZUFBZSxFQUFJLFdBQVcsRUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksSUFBSSxXQUFXLEtBQUssWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFFBQVEsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxZQUFZLElBQUksU0FBUyxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLEdBQUssUUFBUSxFQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLE9BQU8sRUFBSSxVQUFVLEVBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxXQUFXLEdBQUssU0FBUyxFQUFJLFFBQVEsSUFBSSxXQUFXLEdBQUssUUFBUSxHQUFLLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksT0FBTyxFQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksZUFBZSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksYUFBYSxFQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEdBQUssUUFBUSxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEVBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssV0FBVyxLQUFLLFdBQVcsR0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksV0FBVyxHQUFLLFFBQVEsRUFBSSxVQUFVLEVBQUksYUFBYSxFQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLEdBQUssU0FBUyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEVBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxJQUFJLFlBQVksRUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxPQUFPLEdBQUssUUFBUSxHQUFLLFNBQVMsR0FBSyxTQUFTLEdBQUssUUFBUSxFQUFJLE9BQU8sSUFBSSxTQUFTLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxRQUFRLElBQUksUUFBUSxHQUFLLFFBQVEsRUFBSSxTQUFTLEdB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QUFFLEdBQ2xCMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxHQUFLM3ZFLEVBQUUsR0FBS0MsRUFBRSxHQUNsQjB2RSxFQUFJLEdBQUszdkUsRUFBRSxHQUFLQyxFQUFFLEdBQ2xCMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxHQUFLM3ZFLEVBQUUsR0FBS0MsRUFBRSxHQUNsQjB2RSxFQUFJLElBQU0zdkUsRUFBRSxJQUFNQyxFQUFFLElBQ3BCMHZFLEVBQUksSUFBTTN2RSxFQUFFLElBQU1DLEVBQUUsSUFDcEIwdkUsRUFBSSxJQUFNM3ZFLEVBQUUsSUFBTUMsRUFBRSxJQUNwQjB2RSxFQUFJLElBQU0zdkUsRUFBRSxJQUFNQyxFQUFFLElBQ3BCMHZFLEVBQUksSUFBTTN2RSxFQUFFLElBQU1DLEVBQUUsSUFDcEIwdkUsRUFBSSxJQUFNM3ZFLEVBQUUsSUFBTUMsRUFBRSxJQUNiMHZFLENBQ1gsQ0FVTyxTQUFTMkMsRUFBUzNDLEVBQUszdkUsRUFBR0MsR0FpQjdCLE9BaEJBMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxHQUFLM3ZFLEVBQUUsR0FBS0MsRUFBRSxHQUNsQjB2RSxFQUFJLEdBQUszdkUsRUFBRSxHQUFLQyxFQUFFLEdBQ2xCMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxHQUFLM3ZFLEVBQUUsR0FBS0MsRUFBRSxHQUNsQjB2RSxFQUFJLEdBQUszdkUsRUFBRSxHQUFLQyxFQUFFLEdBQ2xCMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxHQUFLM3ZFLEVBQUUsR0FBS0MsRUFBRSxHQUNsQjB2RSxFQUFJLEdBQUszdkUsRUFBRSxHQUFLQyxFQUFFLEdBQ2xCMHZFLEVBQUksR0FBSzN2RSxFQUFFLEdBQUtDLEVBQUUsR0FDbEIwdkUsRUFBSSxJQUFNM3ZFLEVBQUUsSUFBTUMsRUFBRSxJQUNwQjB2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RCxFQUFLeEQsRUFBS3VELEVBQUtyRCxFQUNsQ3hFLEVBQUksR0FBSzRILEVBQUtDLEVBQUtyRCxFQUFLRixFQUFLQyxFQUFLdUQsRUFDbEM5SCxFQUFJLEdBQUs0SCxFQUFLQyxFQUFLQyxFQUFLeEQsRUFBS0MsRUFBS0MsR0FDakIsUUFBVnRJLEdBQ1A4RCxFQUFJLEdBQUtzRSxFQUFLdUQsRUFBS0MsRUFBS0YsRUFBS3JELEVBQUtDLEVBQ2xDeEUsRUFBSSxHQUFLNEgsRUFBS3JELEVBQUt1RCxFQUFLeEQsRUFBS3VELEVBQUtyRCxFQUNsQ3hFLEVBQUksR0FBSzRILEVBQUtDLEVBQUtyRCxFQUFLRixFQUFLQyxFQUFLdUQsRUFDbEM5SCxFQUFJLEdBQUs0SCxFQUFLQyxFQUFLQyxFQUFLeEQsRUFBS0MsRUFBS0MsR0FDakIsUUFBVnRJLEdBQ1A4RCxFQUFJLEdBQUtzRSxFQUFLdUQsRUFBS0MsRUFBS0YsRUFBS3JELEVBQUtDLEVBQ2xDeEUsRUFBSSxHQUFLNEgsRUFBS3JELEVBQUt1RCxFQUFLeEQsRUFBS3VELEVBQUtyRCxFQUNsQ3hFLEVBQUksR0FBSzRILEVBQUtDLEVBQUtyRCxFQUFLRixFQUFLQyxFQUFLdUQsRUFDbEM5SCxFQUFJLEdBQUs0SCxFQUFLQyxFQUFLQyxFQUFLeEQsRUFBS0MsRUFBS0MsR0FDakIsUUFBVnRJLEdBQ1A4RCxFQUFJLEdBQUtzRSxFQUFLdUQsRUFBS0MsRUFBS0YsRUFBS3JELEVBQUtDLEVBQ2xDeEUsRUFBSSxHQUFLNEgsRUFBS3JELEVBQUt1RCxFQUFLeEQsRUFBS3VELEVBQUtyRCxFQUNsQ3hFLEVBQUksR0FBSzRILEVBQUtDLEVBQUtyRCxFQUFLRixFQUFLQyxFQUFLdUQsRUFDbEM5SCxFQUFJLEdBQUs0SCxFQUFLQyxFQUFLQyxFQUFLeEQsRUFBS0MsRUFBS0MsR0FDakIsUUFBVnRJLElBQ1A4RCxFQUFJLEdBQUtzRSxFQUFLdUQsRUFBS0MsRUFBS0YsRUFBS3JELEVBQUtDLEVBQ2xDeEUsRUFBSSxHQUFLNEgsRUFBS3JELEVBQUt1RCxFQUFLeEQsRUFB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QVMxN0UsT0FBWixDQUNBLElBQUkwN0UsRUFBU2g1QixHQUFJLE1BQU0sSUFBSTMzRCxNQUFNLG1DQUFxQzJ3RixFQUFTQyxZQUMvRSxPQUFPRCxFQUFTRSxNQUZrQixDQUVaLEdBQ3JCLE1DdGZIbEosRUFBb0IsK0tBQ3BCQSxFQUFvQiw0Q0FDcEJBLEVBQW9CLGtCQUNNQSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2FuaW1hdGlvbnMvSGlnaGxpZ2h0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvYW5pbWF0aW9ucy9MYWJlbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2FuaW1hdGlvbnMvUGFyYWdyYXBoLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvYW5pbWF0aW9ucy9UaXRsZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvY2xhc3Nlcy9Bc3luY0xvYWQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jbGFzc2VzL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NsYXNzZXMvQ29sb3JzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvY2xhc3Nlcy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jbGFzc2VzL1BhZ2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9HYWxsZXJ5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvQWJvdXQvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0NvbGxlY3Rpb25zL01lZGlhLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvQ29sbGVjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9EZXRhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9Ib21lL01lZGlhLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9wYWdlcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL3BhZ2VzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvcGFnZXMvRGV0YWlsL2luZGV4LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvcGFnZXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL3V0aWxzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL3V0aWxzL3RleHQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9nc2FwL2dzYXAtY29yZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL25hbWVkLXJlZmVyZW5jZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9udW1lcmljLXVuaWNvZGUtbWFwLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvc3Vycm9nYXRlLXBhaXJzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZvckVhY2guanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvaXNFdmVudFN1cHBvcnRlZC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvbm9ybWFsaXplV2hlZWwuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9wcmVmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9zaGFkZXJzL2Fib3V0LWZyYWdtZW50LmZyYWciLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL2FwcC9zaGFkZXJzL2Fib3V0LXZlcnRleC52ZXJ0Iiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvc2hhZGVycy9jb2xsZWN0aW9ucy1mcmFnbWVudC5mcmFnIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvc2hhZGVycy9jb2xsZWN0aW9ucy12ZXJ0ZXgudmVydCIsIndlYnBhY2s6Ly9jaHJvbWljLy4vYXBwL3NoYWRlcnMvaG9tZS1mcmFnbWVudC5mcmFnIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvc2hhZGVycy9ob21lLXZlcnRleC52ZXJ0Iiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvc2hhZGVycy9wbGFuZS1mcmFnbWVudC5mcmFnIiwid2VicGFjazovL2Nocm9taWMvLi9hcHAvc2hhZGVycy9wbGFuZS12ZXJ0ZXgudmVydCIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9mc20uanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvcnVudGltZS1lcnJvci5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9zdGF0ZS1tYWNoaW5lLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0eWxlcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3N0cmlwQW5zaS5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLWFwcGx5LXJlc3VsdC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9DYW1lcmEuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvTWVzaC5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9Qcm9ncmFtLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1RleHR1cmUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvUGxhbmUuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvRXVsZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9NYXQ0LmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL1F1YXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvVmVjMy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0NEZ1bmMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1F1YXRGdW5jLmpzIiwid2VicGFjazovL2Nocm9taWMvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyIsIndlYnBhY2s6Ly9jaHJvbWljLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanMiLCJ3ZWJwYWNrOi8vY2hyb21pYy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vY2hyb21pYy93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2hyb21pYy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vY2hyb21pYy93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9jaHJvbWljL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL2Nocm9taWMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vY2hyb21pYy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiY2hyb21pYzpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblxuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCJpbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gY3JlYXRlIGFuIGFuaW1hdGlvblxuICogZm9yIGFuIGVsZW1lbnQgdGl0bGVcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xuICogbmV3IEFuaW1hdGlvbih7IGVsZW1lbnQgfSk7XG4gKiBAZXhwb3J0cyBBbmltYXRpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0IGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRzLFxuICAgIH0pO1xuICB9XG5cbiAgYW5pbWF0ZUluKCkge1xuICAgIGdzYXAuZnJvbVRvKFxuICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIGRlbGF5OiAwLjUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgYW5pbWF0ZU91dCgpIHtcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGF1dG9BbHBoYTogMCxcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKCkge31cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG4vLyBpbXBvcnQgZWFjaCBmcm9tIFwibG9kYXNoL2VhY2hcIjtcblxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiY2xhc3Nlcy9BbmltYXRpb25cIjtcbi8vIGltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tIFwidXRpbHMvdGV4dFwiO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gY3JlYXRlIGFuIGFuaW1hdGlvblxuICogZm9yIGFuIGVsZW1lbnQgdGl0bGVcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xuICogbmV3IEFuaW1hdGlvbih7IGVsZW1lbnQgfSk7XG4gKiBAZXhwb3J0cyBBbmltYXRpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFiZWwgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudHMsXG4gICAgfSk7XG5cbiAgICAvLyBzcGxpdCh7XG4gICAgLy8gICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgLy8gICBhcHBlbmQ6IHRydWUsXG4gICAgLy8gfSk7XG5cbiAgICAvLyBzcGxpdCh7XG4gICAgLy8gICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgLy8gICBhcHBlbmQ6IHRydWUsXG4gICAgLy8gfSk7XG5cbiAgICAvLyB0aGlzLmVsZW1lbnRMaW5lc1NwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuIHNwYW5cIik7XG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgZ3NhcC5mcm9tVG8oXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgZGVsYXk6IDAuNSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBhbmltYXRlT3V0KCkge1xuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgYXV0b0FscGhhOiAwLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gcmVzaXplIHRoZSBlbGVtZW50XG4gICAqIEBtZW1iZXJvZiBUaXRsZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICAvLyBvblJlc2l6ZSgpIHtcbiAgLy8gICB0aGlzLmVsZW1lbnRzTGluZXMgPSBjYWxjdWxhdGUodGhpcy5lbGVtZW50TGluZXNTcGFucyk7XG4gIC8vIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG4vLyBpbXBvcnQgZWFjaCBmcm9tIFwibG9kYXNoL2VhY2hcIjtcblxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiY2xhc3Nlcy9BbmltYXRpb25cIjtcbi8vIGltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tIFwidXRpbHMvdGV4dFwiO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gY3JlYXRlIGFuIGFuaW1hdGlvblxuICogZm9yIGFuIGVsZW1lbnQgdGl0bGVcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xuICogbmV3IEFuaW1hdGlvbih7IGVsZW1lbnQgfSk7XG4gKiBAZXhwb3J0cyBBbmltYXRpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRzLFxuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5lbGVtZW50TGluZXNTcGFucyA9IHNwbGl0KHtcbiAgICAvLyAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAvLyAgIGFwcGVuZDogdHJ1ZSxcbiAgICAvLyB9KTtcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgICBnc2FwLmZyb21UbyhcbiAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICBkZWxheTogMC41LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDAsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byByZXNpemUgdGhlIGVsZW1lbnRcbiAgICogQG1lbWJlcm9mIFRpdGxlXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIC8vIG9uUmVzaXplKCkge1xuICAvLyAgIHRoaXMuZWxlbWVudHNMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lc1NwYW5zKTtcbiAgLy8gfVxufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbi8vIGltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xuLy8gaW1wb3J0IHsgY2FsY3VsYXRlLCBzcGxpdCB9IGZyb20gXCJ1dGlscy90ZXh0XCI7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFRoaXMgY2xhc3MgaXMgdXNlZCB0byBjcmVhdGUgYW4gYW5pbWF0aW9uXG4gKiBmb3IgYW4gZWxlbWVudCB0aXRsZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBBbmltYXRpb24gZnJvbSBcImNsYXNzZXMvQW5pbWF0aW9uXCI7XG4gKiBuZXcgQW5pbWF0aW9uKHsgZWxlbWVudCB9KTtcbiAqIEBleHBvcnRzIEFuaW1hdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaXRsZSBleHRlbmRzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50cyxcbiAgICB9KTtcblxuICAgIC8vIHNwbGl0KHtcbiAgICAvLyAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAvLyAgIGFwcGVuZDogdHJ1ZSxcbiAgICAvLyB9KTtcblxuICAgIC8vIHNwbGl0KHtcbiAgICAvLyAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAvLyAgIGFwcGVuZDogdHJ1ZSxcbiAgICAvLyB9KTtcblxuICAgIC8vIHRoaXMuZWxlbWVudExpbmVzU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNwYW4gc3BhblwiKTtcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgICBnc2FwLmZyb21UbyhcbiAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICBkZWxheTogMC41LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDAsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byByZXNpemUgdGhlIGVsZW1lbnRcbiAgICogQG1lbWJlcm9mIFRpdGxlXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIC8vIG9uUmVzaXplKCkge1xuICAvLyAgIHRoaXMuZWxlbWVudHNMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lc1NwYW5zKTtcbiAgLy8gfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIjtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBjbGFzcyBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBhbmltYXRpb25cbiAqIGZvciBhbiBlbGVtZW50XG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiY2xhc3Nlcy9BbmltYXRpb25cIjtcbiAqIG5ldyBBbmltYXRpb24oeyBlbGVtZW50IH0pO1xuICogQGV4cG9ydHMgQW5pbWF0aW9uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50cyxcbiAgICB9KTtcbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKCk7XG4gICAgdGhpcy5hbmltYXRlT3V0KCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byBjcmVhdGUgdGhlIG9ic2VydmVyXG4gICAqIGZvciB0aGUgYW5pbWF0aW9uXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5jcmVhdGVPYnNlcnZlcigpO1xuICAgKiBAbWVtYmVyb2YgQW5pbWF0aW9uXG4gICAqL1xuICBjcmVhdGVPYnNlcnZlcigpIHtcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVJbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHt9XG4gIGFuaW1hdGVPdXQoKSB7fVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzeW5jTG9hZCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCB9KSB7XG4gICAgc3VwZXIoeyBlbGVtZW50IH0pO1xuXG4gICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpO1xuICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5zcmMpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc3JjID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpO1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxvYWRlZFwiKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHt9XG59XG4iLCJpbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIjtcblxuLyoqXG4gKiBAY2xhc3MgQnV0dG9uXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBjbGFzcyBpcyB1c2VkIHRvIGNyZWF0ZSBhIGJ1dHRvbiB0aGF0IGFuaW1hdGVzIHRoZSBwYXRoIG9uIGhvdmVyXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50IH0pIHtcbiAgICBzdXBlcih7IGVsZW1lbnQgfSk7XG5cbiAgICB0aGlzLnBhdGggPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJwYXRoOmxhc3QtY2hpbGRcIik7XG4gICAgdGhpcy5wYXRoTGVuZ3RoID0gdGhpcy5wYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICB0aGlzLnRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICBwYXVzZWQ6IHRydWUsXG4gICAgICBkdXJhdGlvbjogMC41LFxuICAgICAgZWFzZTogXCJleHBvLmluT3V0XCIsXG4gICAgfSk7XG4gICAgdGhpcy50aW1lbGluZS5mcm9tVG8oXG4gICAgICB0aGlzLnBhdGgsXG4gICAgICB7XG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMucGF0aExlbmd0aCxcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBhdGhMZW5ndGh9ICR7dGhpcy5wYXRoTGVuZ3RofWAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAwLFxuICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGAke3RoaXMucGF0aExlbmd0aH0gJHt0aGlzLnBhdGhMZW5ndGh9YCxcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIG9uTW91c2VFbnRlcigpIHtcbiAgICB0aGlzLnRpbWVsaW5lLnBsYXkoKTtcbiAgfVxuXG4gIG9uTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLnRpbWVsaW5lLnJldmVyc2UoKTtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMub25Nb3VzZUVudGVyRXZlbnQgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQgPSB0aGlzLm9uTW91c2VMZWF2ZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUVudGVyRXZlbnQpO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZUV2ZW50KTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VFbnRlckV2ZW50KTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmVFdmVudCk7XG4gIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbi8qKlxuICogQGNsYXNzIENvbG9yc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNoYW5naW5nIHRoZSBjb2xvcnNcbiAqIG9mIHRoZSBwYWdlXG4gKiBAbWV0aG9kIGNoYW5nZVxuICogQHBhcmFtIHtPYmplY3R9IGJhY2tncm91bmRDb2xvclxuICogQHBhcmFtIHtPYmplY3R9IGNvbG9yXG4gKiBAcmV0dXJucyB2b2lkXG4gKi9cbmNsYXNzIENvbG9ycyB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHt7YmFja2dyb3VuZENvbG9yOnN0cmluZywgY29sb3I6c3RyaW5nfX0ge2JhY2tncm91bmQsIGNvbG9yfSBoZXggdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbG9yIGhleCB2YWx1ZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBjaGFuZ2UoeyBiYWNrZ3JvdW5kQ29sb3IsIGNvbG9yIH0pIHtcbiAgICBnc2FwLnRvKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwge1xuICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgIGNvbG9yLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb2xvck1hbmFnZXIgPSBuZXcgQ29sb3JzKCk7XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcbmltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuXG4vKipcbiAqIEBjbGFzcyBDb21wb25lbnRcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIGNsYXNzIGlzIHRoZSBiYXNlXG4gKiBjbGFzcyBmb3IgYWxsIGNvbXBvbmVudHMgaW4gdGhlIGFwcGxpY2F0aW9uXG4gKiBJdCBjb250YWlucyBtZXRob2RzIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgY29tcG9uZW50c1xuICogYW5kIGNhbiBiZSBleHRlbmRlZCBieSBvdGhlciBjb21wb25lbnRzXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBleHBvcnRzIENvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50O1xuICAgIHRoaXMuc2VsZWN0b3JDaGlsZHJlbiA9IHsgLi4uZWxlbWVudHMgfTtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byBjcmVhdGUgdGhlXG4gICAqIGNvbXBvbmVudCBhbmQgaXRzIGVsZW1lbnRzXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGNyZWF0ZSgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zZWxlY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuXG4gICAgZWFjaCh0aGlzLnNlbGVjdG9yQ2hpbGRyZW4sIChlbnRyeSwga2V5KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8XG4gICAgICAgIGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoZW50cnkpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZW50cnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnRyeSk7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoZW50cnkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHt9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge31cbn1cbiIsImltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuaW1wb3J0IG1hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBQcmVmaXggZnJvbSBcInByZWZpeFwiO1xuXG5pbXBvcnQgVGl0bGUgZnJvbSBcImFuaW1hdGlvbnMvVGl0bGVcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiYW5pbWF0aW9ucy9MYWJlbFwiO1xuaW1wb3J0IFBhcmFncmFwaCBmcm9tIFwiYW5pbWF0aW9ucy9QYXJhZ3JhcGhcIjtcbmltcG9ydCBIaWdobGlnaHQgZnJvbSBcImFuaW1hdGlvbnMvSGlnaGxpZ2h0XCI7XG5cbmltcG9ydCBBc3luY0xvYWQgZnJvbSBcImNsYXNzZXMvQXN5bmNMb2FkXCI7XG5pbXBvcnQgeyBDb2xvck1hbmFnZXIgfSBmcm9tIFwiY2xhc3Nlcy9Db2xvcnNcIjtcblxuLyoqXG4gKiBAY2xhc3MgUGFnZVxuICogQGRlc2NyaXB0aW9uIFRoaXMgY2xhc3MgaXMgdGhlIGJhc2VcbiAqIGNsYXNzIGZvciBhbGwgcGFnZXMgaW4gdGhlIGFwcGxpY2F0aW9uXG4gKiBJdCBjb250YWlucyBtZXRob2RzIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgcGFnZXNcbiAqIGFuZCBjYW4gYmUgZXh0ZW5kZWQgYnkgb3RoZXIgcGFnZXNcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cywgaWQgfSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50O1xuICAgIHRoaXMuc2VsZWN0b3JDaGlsZHJlbiA9IHtcbiAgICAgIC4uLmVsZW1lbnRzLFxuICAgICAgYW5pbWF0aW9uc1RpdGxlczogJ1tkYXRhLWFuaW1hdGlvbj1cInRpdGxlXCJdJyxcbiAgICAgIGFuaW1hdGlvbnNMYWJlbHM6ICdbZGF0YS1hbmltYXRpb249XCJsYWJlbFwiXScsXG4gICAgICBhbmltYXRpb25zUGFyYWdyYXBoczogJ1tkYXRhLWFuaW1hdGlvbj1cInBhcmFncmFwaFwiXScsXG4gICAgICBhbmltYXRpb25zSGlnaGxpZ2h0czogJ1tkYXRhLWFuaW1hdGlvbj1cImhpZ2hsaWdodFwiXScsXG5cbiAgICAgIHByZWxvYWRlcnM6IFwiW2RhdGEtc3JjXVwiLFxuICAgIH07XG5cbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5vbk1vdXNlV2hlZWxFdmVudCA9IHRoaXMub25XaGVlbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gY3JlYXRlIHRoZVxuICAgKiBwYWdlIGFuZCBpdHMgZWxlbWVudHNcbiAgICogVGhpcyBtZXRob2QgYWxzbyBjYWxscyB0aGUgYW5pbWF0aW9ucyBhZnRlciB0aGUgb2FnZSBoYXMgYmVlbiBjcmVhdGVkXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGNyZWF0ZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3IpO1xuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsYXN0OiAwLFxuICAgICAgbGltaXQ6IDAsXG4gICAgfTtcblxuICAgIGVhY2godGhpcy5zZWxlY3RvckNoaWxkcmVuLCAoZW50cnksIGtleSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBlbnRyeSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCB8fFxuICAgICAgICBlbnRyeSBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdCB8fFxuICAgICAgICBBcnJheS5pc0FycmF5KGVudHJ5KVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGVudHJ5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZW50cnkpO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuY3JlYXRlQW5pbWF0aW9ucygpO1xuICAgIHRoaXMuY3JlYXRlUHJlbG9hZGVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gY3JlYXRlIHRoZSBhbmltYXRpb25zXG4gICAqIGZvciB0aGUgcGFnZSBlbGVtZW50cyBhbmQgc3RvcmVzIHRoZW0gaW4gYW4gYXJyYXkgb2YgYW5pbWF0aW9uc1xuICAgKiBAbWVtYmVyb2YgUGFnZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqXG4gICAqL1xuICBjcmVhdGVBbmltYXRpb25zKCkge1xuICAgIHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xuXG4gICAgLy9UaXRsZXNcbiAgICB0aGlzLmFuaW1hdGlvbnNUaXRsZXMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25zVGl0bGVzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBUaXRsZSh7IGVsZW1lbnQgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zVGl0bGVzKTtcblxuICAgIC8vTGFiZWxzXG4gICAgdGhpcy5hbmltYXRpb25zTGFiZWxzID0gbWFwKHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uc0xhYmVscywgKGVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgTGFiZWwoeyBlbGVtZW50IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0xhYmVscyk7XG5cbiAgICAvL1BhcmFncmFwaHNcbiAgICB0aGlzLmFuaW1hdGlvbnNQYXJhZ3JhcGhzID0gbWFwKFxuICAgICAgdGhpcy5lbGVtZW50cy5hbmltYXRpb25zUGFyYWdyYXBocyxcbiAgICAgIChlbGVtZW50KSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyYWdyYXBoKHsgZWxlbWVudCB9KTtcbiAgICAgIH0sXG4gICAgKTtcbiAgICB0aGlzLmFuaW1hdGlvbnMucHVzaCguLi50aGlzLmFuaW1hdGlvbnNQYXJhZ3JhcGhzKTtcblxuICAgIC8vSGlnaGxpZ2h0c1xuICAgIHRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMgPSBtYXAoXG4gICAgICB0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNIaWdobGlnaHRzLFxuICAgICAgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHQoeyBlbGVtZW50IH0pO1xuICAgICAgfSxcbiAgICApO1xuICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gY3JlYXRlIHRoZSBpbWFnZXMgb24gdGhlIHBhZ2UgYXN5bmNocm9ub3VzbHlcbiAgICogQG1lbWJlcm9mIFBhZ2VcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgY3JlYXRlUHJlbG9hZGVycygpIHtcbiAgICB0aGlzLnByZWxvYWRlcnMgPSBtYXAodGhpcy5lbGVtZW50cy5wcmVsb2FkZXJzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBBc3luY0xvYWQoeyBlbGVtZW50IH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2VcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byBzaG93IHRoZSBwYWdlXG4gICAqL1xuXG4gIHNob3coYW5pbWF0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBDb2xvck1hbmFnZXIuY2hhbmdlKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1iYWNrZ3JvdW5kXCIpLFxuICAgICAgICBjb2xvcjogdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY29sb3JcIiksXG4gICAgICB9KTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLmFuaW1hdGVJbiA9IGFuaW1hdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZUluID0gZ3NhcC50aW1lbGluZSgpO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0ZUluLmZyb21UbyhcbiAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBhdXRvQWxwaGE6IDEgfSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hbmltYXRlSW4uY2FsbCgoXykgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byBoaWRlIHRoZSBwYWdlXG4gICAqL1xuICBoaWRlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG5cbiAgICAgIHRoaXMuYW5pbWF0ZU91dCA9IGdzYXAudGltZWxpbmUoKTtcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudCwge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIG9uQ29tcGxldGU6IHJlc29sdmUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50XG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSBtb3VzZSB3aGVlbCBpcyBzY3JvbGxlZFxuICAgKi9cbiAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG9uUmVzaXplXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXG4gICAqIEl0IHNldHMgdGhlIGxpbWl0IG9mIHRoZSBzY3JvbGwuXG4gICAqIFRoZSB3cmFwcGVyIGNsaWVudCBoZWlnaHQgaXMgc3VidHJhY3RlZCBmcm9tIHRoZSB3aW5kb3cgaGVpZ2h0IHRvIHByZXZlbnRcbiAgICogdGhlIHBhZ2UgZnJvbSBleGNlZWRpbmcgdGhlIGNvbnRlbnQgYmVpbmcgZGlzcGxheWVkLlxuICAgKiBJdCBhbHNvIGNhbGxzIHRoZSBvblJlc2l6ZSBtZXRob2QgZm9yXG4gICAqIGVhY2ggYW5pbWF0aW9uIGNvbXBvbmVudFxuICAgKiBAbWVtYmVyb2YgUGFnZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBvblJlc2l6ZSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKSB7XG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCA9XG4gICAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdXBkYXRlXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIGlzIGFsd2F5cyBiZWluZyBjYWxsZWQgaW4gdGhlIGVucnkgcG9pbnQgdmlhIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgKiBUaGlzIG1ha2VzIHN1cmUgdGhlIGN1cnJlbnQgZnJhbWUgYmVpbmcgcmVuZGVyZWQgaXMgZ290dGVuIGFuZCB0aGUgc2Nyb2xsXG4gICAqIHRhcmdldCBpcyB1cGRhdGVkLCB3aXRoIGEgbWF4aW11bSBhbmQgbWluaW11bSBsaW1pdCBzZXQgd2l0aCBnc2FwIHV0aWxzXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gZ3NhcC51dGlscy5jbGFtcChcbiAgICAgIDAsXG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcbiAgICApO1xuICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBnc2FwLnV0aWxzLmludGVycG9sYXRlKFxuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcbiAgICAgIDAuMSxcbiAgICApO1xuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgMC4wMSkge1xuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcikge1xuICAgICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9XG4gICAgICAgIGB0cmFuc2xhdGVZKC0ke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRFdmVudExpc3RlbmVyc1xuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIGFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGN1cnJlbnQgcGFnZVxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIHRoaXMub25Nb3VzZVdoZWVsRXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmVtb3ZlRXZlbnRMaXN0ZW5lcnNcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgdGhpcy5vbk1vdXNlV2hlZWxFdmVudCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcblxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnkge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGluZGV4LCBnZW9tZXRyeSwgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmVsZW1lbnRXcmFwcGVyID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5hYm91dF9fZ2FsbGVyeV9fd3JhcHBlclwiLFxuICAgICk7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcblxuICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKCk7XG5cbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgY3VycmVudDogMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIGxlcnA6IDAuMSxcbiAgICAgIHZlbG9jaXR5OiAxLFxuICAgIH07XG5cbiAgICAvLyBUaGUgcmVjdXJyaW5nIGRvbSBlbGVtZW50IGFmdGVyIHNjcm9sbFxuICAgIHRoaXMuZXh0cmEgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICB9O1xuICAgIHRoaXMub25SZXNpemUoeyBzaXplczogdGhpcy5zaXplcyB9KTtcblxuICAgIHRoaXMuY3JlYXRlTWVkaWFzKCk7XG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gIH1cblxuICBjcmVhdGVNZWRpYXMoKSB7XG4gICAgdGhpcy5tZWRpYXNFbGVtZW50cyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuYWJvdXRfX2dhbGxlcnlfX21lZGlhXCIsXG4gICAgKTtcblxuICAgIHRoaXMubWVkaWFzID0gbWFwKHRoaXMubWVkaWFzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgICBzY2VuZTogdGhpcy5ncm91cCxcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLnNob3coKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBvblJlc2l6ZVxuICAgKi9cbiAgb25SZXNpemUoZXZlbnQpIHtcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudFdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXM7XG5cbiAgICB0aGlzLmdhbGxlcnlXaWR0aCA9XG4gICAgICAodGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiB0aGlzLnNpemVzLndpZHRoO1xuXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IHRoaXMuc2Nyb2xsLnRhcmdldCA9IDA7XG5cbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4ge1xuICAgICAgbWVkaWEub25SZXNpemUoZXZlbnQsIHRoaXMuc2Nyb2xsLmN1cnJlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7e3g6bnVtYmVyLCB5Om51bWJlcn19XG4gICAqIG9uVG91Y2hEb3duIGZvciBjYW52YXNcbiAgICovXG4gIG9uVG91Y2hEb3duKHsgeCwgeSB9KSB7XG4gICAgdGhpcy5zY3JvbGwuc3RhcnQgPSB0aGlzLnNjcm9sbC5jdXJyZW50O1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fVxuICAgKiBvblRvdWNoTW92ZSBmb3IgY2FudmFzXG4gICAqL1xuICBvblRvdWNoTW92ZSh7IHgsIHkgfSkge1xuICAgIGNvbnN0IGRpc3RhbmNlID0geC5zdGFydCAtIHguZW5kO1xuXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gdGhpcy5zY3JvbGwuc3RhcnQgLSBkaXN0YW5jZTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHt7eDpudW1iZXIsIHk6bnVtYmVyfX1cbiAgICogb25Ub3VjaFVwIGZvciBjYW52YXNcbiAgICovXG4gIG9uVG91Y2hVcCh7IHgsIHkgfSkge31cblxuICAvKipcbiAgICpcbiAgICogQXJndW1lbnQgeSBpcyBmcm9tIHRoZSBwYWdlIGN1cnJlbnQgc2Nyb2xsXG4gICAqIEBhcmd1bWVudCB7bnVtYmVyfSB5XG4gICAqIFNjcm9sbCB1cGRhdGVcbiAgICovXG4gIHVwZGF0ZShzY3JvbGwpIHtcbiAgICAvLyBEaXN0YW5jZSBmcm9tIHRvcCBvZiBzY3JlZW4gdG8gZ2V0IHNwZWVkIG9mIHRyYW5zbGF0aW9uIHdoZW4gc2Nyb2xsaW5nXG4gICAgY29uc3QgZGlzdGFuY2UgPSAoc2Nyb2xsLmN1cnJlbnQgLSBzY3JvbGwudGFyZ2V0KSAqIDAuMTtcblxuICAgIGNvbnN0IHkgPSBzY3JvbGwuY3VycmVudCAvIHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIC8vIENoZWNrcyB0aGUgc2Nyb2xsIGRpcmVjdGlvblxuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgdGhpcy5zY3JvbGwudGFyZ2V0KSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiA9IFwicmlnaHRcIjtcbiAgICAgIHRoaXMuc2Nyb2xsLnZlbG9jaXR5ID0gLTE7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50ID4gdGhpcy5zY3JvbGwudGFyZ2V0KSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiA9IFwibGVmdFwiO1xuICAgICAgdGhpcy5zY3JvbGwudmVsb2NpdHkgPSAxO1xuICAgIH1cblxuICAgIC8vIEZvciBhdXRvbWF0aWMgc2Nyb2xsaW5nXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0IC09IHRoaXMuc2Nyb2xsLnZlbG9jaXR5O1xuICAgIC8vIEZvciBhdXRvbWF0aWMgdHJhbnNsYXRpb24gd2hlbiBzY3JvbGxpbmcgdGhlIHNjcmVlblxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBkaXN0YW5jZTtcblxuICAgIC8vIFRoaXMgdXBkYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBzY3JvbGwgd2l0aCB0aGUgdGFyZ2V0IGFmdGVyIHNjcm9sbGluZ1xuICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBnc2FwLnV0aWxzLmludGVycG9sYXRlKFxuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcbiAgICAgIHRoaXMuc2Nyb2xsLmxlcnAsXG4gICAgKTtcblxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBfKSA9PiB7XG4gICAgICBjb25zdCBtZXNoU2NhbGVYID0gbWVkaWEubWVzaC5zY2FsZS54IC8gMiArIDAuMjU7XG5cbiAgICAgIC8vIEluZmluaXRlIHNjcm9sbGluZyBpbiBhbnkgZGlyZWN0aW9uXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggKyBtZXNoU2NhbGVYO1xuICAgICAgICBpZiAoeCA8IC10aGlzLnNpemVzLndpZHRoIC8gMikge1xuICAgICAgICAgIG1lZGlhLmV4dHJhICs9IHRoaXMuZ2FsbGVyeVdpZHRoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgY29uc3QgeCA9IG1lZGlhLm1lc2gucG9zaXRpb24ueCAtIG1lc2hTY2FsZVg7XG5cbiAgICAgICAgaWYgKHggPiB0aGlzLnNpemVzLndpZHRoIC8gMikge1xuICAgICAgICAgIG1lZGlhLmV4dHJhIC09IHRoaXMuZ2FsbGVyeVdpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lZGlhLnVwZGF0ZSh0aGlzLnNjcm9sbC5jdXJyZW50KTtcblxuICAgICAgLy8gVGhpcyBwcm92aWRlcyBhIG1hcHBlZCBudW1iZXIgZnJvbSAwIC0+IDEuIFRoZSBjbG9zZXIgaXQgaXMgdG8gdGhlIGNlbnRlciwgdGhyIGxvd2VyIGl0IGlzIGdvaW5nIHRvIGJlXG4gICAgICAvLyAgIG1lZGlhLm1lc2gucG9zaXRpb24ueSA9XG4gICAgICAvLyAgICAgTWF0aC5jb3MoKG1lZGlhLm1lc2gucG9zaXRpb24ueCAvIHRoaXMuZ2FsbGVyeVdpZHRoKSAqIE1hdGguUEkpICogNzUgLVxuICAgICAgLy8gICAgIDc1O1xuICAgIH0pO1xuICAgIHRoaXMuZ3JvdXAucG9zaXRpb24ueSA9IHkgKiB0aGlzLnNpemVzLmhlaWdodDtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUHJvZ3JhbSwgTWVzaCB9IGZyb20gXCJvZ2xcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvYWJvdXQtdmVydGV4LnZlcnRcIjtcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9hYm91dC1mcmFnbWVudC5mcmFnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBpbmRleCwgZ2VvbWV0cnksIGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcblxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIHRoaXMuY3JlYXRlTWVzaCgpO1xuXG4gICAgLy8gVGhlIHJlY3VycmluZyBkb20gZWxlbWVudCBhZnRlciBzY3JvbGxcbiAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgfTtcblxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG4gIH1cblxuICBjcmVhdGVUZXh0dXJlKCkge1xuICAgIGNvbnN0IGVsZW1lbnRJbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tlbGVtZW50SW1hZ2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIildO1xuICB9XG5cbiAgY3JlYXRlUHJvZ3JhbSgpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxuICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfSxcbiAgICAgICAgdVNwZWVkOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgIHVUaW1lOiB7IHZhbHVlOiAwIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlTWVzaCgpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gIH1cblxuICBjcmVhdGVCb3VuZHMoeyBzaXplcyB9KSB7XG4gICAgLy8gVGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGNhbnZhcyBmaWVsZCBvZiB2aWV3XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMuYm91bmRzID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdGhpcy51cGRhdGVTY2FsZSgpO1xuICAgIHRoaXMudXBkYXRlWCgpO1xuICAgIHRoaXMudXBkYXRlWSgpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBnc2FwLmZyb21Ubyh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7IHZhbHVlOiAwIH0sIHsgdmFsdWU6IDEgfSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGdzYXAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwgeyB2YWx1ZTogMCB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKGV2ZW50LCBzY3JvbGwpIHtcbiAgICB0aGlzLmV4dHJhID0gMDtcblxuICAgIHRoaXMuY3JlYXRlQm91bmRzKGV2ZW50KTtcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsKTtcbiAgICB0aGlzLnVwZGF0ZVkoMCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtYXBzIHRoZSB3aWR0aCByYW5nZSBvZiB0aGUgY2FudmFzIGZpZWxkIG9mIHZpZXcgdG8gUElcbiAgICogdG8gZ2V0IGFuIGFjY3VyYXRlIG1hcHBlZCB2YWx1ZSBvZiByb3RhdGlvbiBiYXNlZCBvbiB0aGUgeC1wb3NpdGlvblxuICAgKi9cbiAgdXBkYXRlUm90YXRpb24oKSB7XG4gICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBnc2FwLnV0aWxzLm1hcFJhbmdlKFxuICAgICAgLXRoaXMuc2l6ZXMud2lkdGggLyAyLFxuICAgICAgdGhpcy5zaXplcy53aWR0aCAvIDIsXG4gICAgICBNYXRoLlBJICogMC4xLFxuICAgICAgLU1hdGguUEkgKiAwLjEsXG4gICAgICB0aGlzLm1lc2gucG9zaXRpb24ueCxcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlU2NhbGUoKSB7XG4gICAgLy8gVG8gZ2V0IHRoZSBwZXJjZW50YWdlIG9mIGRvbSB3aWR0aCAmIGhlaWdodCBpbiB0aGUgd2luZG93XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoO1xuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gdGhpcy5zaXplcy5oZWlnaHQgKiB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIHVwZGF0ZVgoeCA9IDApIHtcbiAgICB0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9XG4gICAgICAtdGhpcy5zaXplcy53aWR0aCAvIDIgK1xuICAgICAgdGhpcy5tZXNoLnNjYWxlLnggLyAyICtcbiAgICAgIHRoaXMueCAqIHRoaXMuc2l6ZXMud2lkdGggK1xuICAgICAgdGhpcy5leHRyYTtcbiAgfVxuXG4gIHVwZGF0ZVkoeSA9IDApIHtcbiAgICB0aGlzLnkgPSAodGhpcy5ib3VuZHMudG9wICsgeSkgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9XG4gICAgICB0aGlzLnNpemVzLmhlaWdodCAvIDIgLVxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgLyAyIC1cbiAgICAgIHRoaXMueSAqIHRoaXMuc2l6ZXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgKz1cbiAgICAgIE1hdGguY29zKCh0aGlzLm1lc2gucG9zaXRpb24ueCAvIHRoaXMuc2l6ZXMud2lkdGgpICogTWF0aC5QSSAqIDAuMSkgKiA1MCAtXG4gICAgICA1MDtcbiAgfVxuICB1cGRhdGUoc2Nyb2xsKSB7XG4gICAgdGhpcy51cGRhdGVSb3RhdGlvbigpO1xuXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbCk7XG4gICAgdGhpcy51cGRhdGVZKDApO1xuXG4gICAgLy8gUGFwZXIgRGlzdG9ydGlvbiBvbiBUZXh0dXJlXG4gICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVUaW1lLnZhbHVlICs9IDAuMDAwMjtcbiAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudVNwZWVkLnZhbHVlID0gc2Nyb2xsICogMC4wMDAwMTtcbiAgfVxufVxuIiwiaW1wb3J0IG1hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IHsgUGxhbmUsIFRyYW5zZm9ybSB9IGZyb20gXCJvZ2xcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmltcG9ydCBHYWxsZXJ5IGZyb20gXCIuL0dhbGxlcnlcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0IHtcbiAgY29uc3RydWN0b3IoeyBnbCwgc2NlbmUsIHNpemVzIH0pIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XG5cbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XG4gICAgdGhpcy5jcmVhdGVHYWxsZXJpZXMoKTtcbiAgICB0aGlzLm9uUmVzaXplKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG5cbiAgICB0aGlzLmdyb3VwLnNldFBhcmVudChzY2VuZSk7XG5cbiAgICB0aGlzLnNob3coKTtcbiAgfVxuXG4gIGNyZWF0ZUdlb21ldHJ5KCkge1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCk7XG4gIH1cbiAgY3JlYXRlR2FsbGVyaWVzKCkge1xuICAgIHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFib3V0X19nYWxsZXJ5XCIpO1xuXG4gICAgdGhpcy5nYWxsZXJpZXMgPSBtYXAodGhpcy5nYWxsZXJpZXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IEdhbGxlcnkoe1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgICBnbDogdGhpcy5nbCxcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXG4gICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IHtcbiAgICAgIGdhbGxlcnkuc2hvdygpO1xuICAgIH0pO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiB7XG4gICAgICBnYWxsZXJ5LmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4ge1xuICAgICAgZ2FsbGVyeS5vblJlc2l6ZShldmVudCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaERvd24gZm9yIGdhbGxlcmllc1xuICAgKi9cbiAgb25Ub3VjaERvd24oZXZlbnQpIHtcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiB7XG4gICAgICBnYWxsZXJ5Lm9uVG91Y2hEb3duKGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaE1vdmUgZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiB7XG4gICAgICBnYWxsZXJ5Lm9uVG91Y2hNb3ZlKGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaFVwIGZvciBjYW52YXNcbiAgICovXG4gIG9uVG91Y2hVcChldmVudCkge1xuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IHtcbiAgICAgIGdhbGxlcnkub25Ub3VjaFVwKGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uV2hlZWwoeyBwaXhlbFksIHBpeGVsWCB9KSB7fVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fSB7eCwgeX1cbiAgICogU2Nyb2xsIHVwZGF0ZVxuICAgKi9cbiAgdXBkYXRlKHNjcm9sbCkge1xuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnksIF8pID0+IHtcbiAgICAgIGdhbGxlcnkudXBkYXRlKHNjcm9sbCk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IHtcbiAgICAgIGdhbGxlcnkuZGVzdHJveSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQcm9ncmFtLCBNZXNoIH0gZnJvbSBcIm9nbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuaW1wb3J0IHZlcnRleCBmcm9tIFwic2hhZGVycy9jb2xsZWN0aW9ucy12ZXJ0ZXgudmVydFwiO1xuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL2NvbGxlY3Rpb25zLWZyYWdtZW50LmZyYWdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWEge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGluZGV4LCBnZW9tZXRyeSwgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuXG4gICAgLy8gVGhlIHJlY3VycmluZyBkb20gZWxlbWVudCBhZnRlciBzY3JvbGxcbiAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgfTtcblxuICAgIHRoaXMub3BhY2l0eSA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsZXJwOiAwLjEsXG4gICAgICBtdWx0aXBsaWVyOiAwLFxuICAgIH07XG5cbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKTtcbiAgICB0aGlzLmNyZWF0ZVByb2dyYW0oKTtcbiAgICB0aGlzLmNyZWF0ZU1lc2goKTtcbiAgICB0aGlzLmNyZWF0ZUJvdW5kcyh7IHNpemVzOiB0aGlzLnNpemVzIH0pO1xuICB9XG5cbiAgY3JlYXRlVGV4dHVyZSgpIHtcbiAgICBjb25zdCBlbGVtZW50SW1hZ2UgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLmNvbGxlY3Rpb25zX19nYWxsZXJ5X19tZWRpYV9faW1hZ2VcIixcbiAgICApO1xuICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tlbGVtZW50SW1hZ2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIildO1xuICB9XG5cbiAgY3JlYXRlUHJvZ3JhbSgpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgIHVuaWZvcm1zOiB7IHVBbHBoYTogeyB2YWx1ZTogMCB9LCB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfSB9LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlTWVzaCgpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gIH1cblxuICBjcmVhdGVCb3VuZHMoeyBzaXplcyB9KSB7XG4gICAgLy8gVGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGNhbnZhcyBmaWVsZCBvZiB2aWV3XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMuYm91bmRzID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdGhpcy51cGRhdGVTY2FsZSgpO1xuICAgIHRoaXMudXBkYXRlWCgpO1xuICAgIHRoaXMudXBkYXRlWSgpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBnc2FwLmZyb21Ubyh0aGlzLm9wYWNpdHksIHsgbXVsdGlwbGllcjogMCB9LCB7IG11bHRpcGxpZXI6IDEgfSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGdzYXAudG8odGhpcy5vcGFjaXR5LCB7IG11bHRpcGxpZXI6IDAgfSk7XG4gIH1cblxuICBvblJlc2l6ZShldmVudCwgc2Nyb2xsKSB7XG4gICAgdGhpcy5leHRyYSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgIH07XG5cbiAgICB0aGlzLmNyZWF0ZUJvdW5kcyhldmVudCk7XG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbC54KTtcbiAgICB0aGlzLnVwZGF0ZVkoc2Nyb2xsLnkpO1xuICB9XG5cbiAgdXBkYXRlU2NhbGUoKSB7XG4gICAgLy8gVG8gZ2V0IHRoZSBwZXJjZW50YWdlIG9mIGRvbSB3aWR0aCAmIGhlaWdodCBpbiB0aGUgd2luZG93XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoO1xuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gdGhpcy5zaXplcy5oZWlnaHQgKiB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIHVwZGF0ZVgoeCA9IDApIHtcbiAgICB0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9XG4gICAgICAtdGhpcy5zaXplcy53aWR0aCAvIDIgK1xuICAgICAgdGhpcy5tZXNoLnNjYWxlLnggLyAyICtcbiAgICAgIHRoaXMueCAqIHRoaXMuc2l6ZXMud2lkdGggK1xuICAgICAgdGhpcy5leHRyYS54O1xuICB9XG5cbiAgdXBkYXRlWSh5ID0gMCkge1xuICAgIHRoaXMueSA9ICh0aGlzLmJvdW5kcy50b3AgKyB5KSAvIHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID1cbiAgICAgIHRoaXMuc2l6ZXMuaGVpZ2h0IC8gMiAtXG4gICAgICB0aGlzLm1lc2guc2NhbGUueSAvIDIgLVxuICAgICAgdGhpcy55ICogdGhpcy5zaXplcy5oZWlnaHQgK1xuICAgICAgdGhpcy5leHRyYS55O1xuICB9XG4gIHVwZGF0ZShzY3JvbGwsIGluZGV4KSB7XG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbCk7XG4gICAgdGhpcy51cGRhdGVZKDApO1xuXG4gICAgY29uc3QgYW1wbGl0dWRlID0gMC4xO1xuICAgIGNvbnN0IGZyZXF1ZW5jeSA9IDE7XG5cbiAgICB0aGlzLm1lc2gucm90YXRpb24ueiA9IC0wLjAyICogTWF0aC5QSSAqIE1hdGguc2luKHRoaXMuaW5kZXggLyBmcmVxdWVuY3kpO1xuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gYW1wbGl0dWRlICogTWF0aC5zaW4odGhpcy5pbmRleCAvIGZyZXF1ZW5jeSk7XG5cbiAgICAvLyBTZXR0aW5nIHRoZSBvcGFjaXR5IG9mIHRoZSBjYXJkXG4gICAgdGhpcy5vcGFjaXR5LnRhcmdldCA9IGluZGV4ID09PSB0aGlzLmluZGV4ID8gMSA6IDAuNDtcbiAgICB0aGlzLm9wYWNpdHkuY3VycmVudCA9IGdzYXAudXRpbHMuaW50ZXJwb2xhdGUoXG4gICAgICB0aGlzLm9wYWNpdHkuY3VycmVudCxcbiAgICAgIHRoaXMub3BhY2l0eS50YXJnZXQsXG4gICAgICB0aGlzLm9wYWNpdHkubGVycCxcbiAgICApO1xuXG4gICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYS52YWx1ZSA9XG4gICAgICB0aGlzLm9wYWNpdHkubXVsdGlwbGllciAqIHRoaXMub3BhY2l0eS5jdXJyZW50O1xuICB9XG59XG4iLCJpbXBvcnQgbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBQcmVmaXggZnJvbSBcInByZWZpeFwiO1xuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGxlY3Rpb25zIHtcbiAgY29uc3RydWN0b3IoeyBnbCwgc2NlbmUsIHNpemVzLCB0cmFuc2l0aW9uIH0pIHtcbiAgICB0aGlzLmlkID0gXCJjb2xsZWN0aW9uc1wiO1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XG4gICAgdGhpcy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcblxuICAgIHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29sbGVjdGlvbnNfX2dhbGxlcnlcIik7XG4gICAgdGhpcy5nYWxsZXJ5V3JhcHBlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuY29sbGVjdGlvbnNfX2dhbGxlcnlfX3dyYXBwZXJcIixcbiAgICApO1xuICAgIHRoaXMuY29sbGVjdGlvbkFydGljbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIFwiLmNvbGxlY3Rpb25zX19hcnRpY2xlXCIsXG4gICAgKTtcbiAgICB0aGlzLmNvbGxlY3Rpb25UaXRsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbGxlY3Rpb25zX190aXRsZXNcIik7XG4gICAgdGhpcy5jb2xsZWN0aW9uQXJ0aWNsZXNBY3RpdmUgPSBcImNvbGxlY3Rpb25zX19hcnRpY2xlLS1hY3RpdmVcIjtcbiAgICB0aGlzLm1lZGlhRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuY29sbGVjdGlvbnNfX2dhbGxlcnlfX21lZGlhXCIsXG4gICAgKTtcbiAgICB0aGlzLnggPSB7XG4gICAgICBjdXJyZW50OiAwLFxuICAgICAgdGFyZ2V0OiAwLFxuICAgICAgbGVycDogMC4xLFxuICAgICAgZGlyZWN0aW9uOiBudWxsLFxuICAgIH07XG5cbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgY3VycmVudDogMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIGxlcnA6IDAuMSxcbiAgICAgIGxpbWl0OiAwLFxuICAgICAgdmVsb2NpdHk6IDEsXG4gICAgfTtcblxuICAgIHRoaXMuY3JlYXRlR2VvbWV0cnkoKTtcbiAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKTtcbiAgICB0aGlzLm9uUmVzaXplKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG5cbiAgICB0aGlzLmdyb3VwLnNldFBhcmVudCh0aGlzLnNjZW5lKTtcbiAgICB0aGlzLnNob3coKTtcbiAgfVxuXG4gIGNyZWF0ZUdlb21ldHJ5KCkge1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCk7XG4gIH1cbiAgY3JlYXRlR2FsbGVyeSgpIHtcbiAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgICBzY2VuZTogdGhpcy5ncm91cCxcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbikge1xuICAgICAgLy8gdGhpcy5tZWRpYS5vcGFjaXR5Lm11bHRpcGxpZXIgPSAwO1xuXG4gICAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy50cmFuc2l0aW9uLm1lc2gucHJvZ3JhbS51bmlmb3Jtcy50TWFwLnZhbHVlLmltYWdlO1xuICAgICAgY29uc3QgdGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tzcmNdO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRNZWRpYSA9IHRoaXMubWVkaWFzLmZpbmQoXG4gICAgICAgIChtZWRpYSkgPT4gbWVkaWEudGV4dHVyZSA9PT0gdGV4dHVyZSxcbiAgICAgICk7XG4gICAgICBjb25zdCBzY3JvbGwgPVxuICAgICAgICAtc2VsZWN0ZWRNZWRpYS5ib3VuZHMubGVmdCAtXG4gICAgICAgIHNlbGVjdGVkTWVkaWEuYm91bmRzLndpZHRoIC8gMiArXG4gICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gMjtcblxuICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgdGhpcy50cmFuc2l0aW9uLmFuaW1hdGUoXG4gICAgICAgIHtcbiAgICAgICAgICByb3RhdGlvbjogc2VsZWN0ZWRNZWRpYS5tZXNoLnJvdGF0aW9uLFxuICAgICAgICAgIHNjYWxlOiBzZWxlY3RlZE1lZGlhLm1lc2guc2NhbGUsXG4gICAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogc2VsZWN0ZWRNZWRpYS5tZXNoLnBvc2l0aW9uLnksIHo6IDAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgKF8pID0+IHtcbiAgICAgICAgICBzZWxlY3RlZE1lZGlhLm9wYWNpdHkubXVsdGlwbGllciA9IDE7XG5cbiAgICAgICAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4ge1xuICAgICAgICAgICAgaWYgKG1lZGlhICE9PSBzZWxlY3RlZE1lZGlhKSB7XG4gICAgICAgICAgICAgIG1lZGlhLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPVxuICAgICAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID1cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsLnN0YXJ0ID1cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsLmxhc3QgPVxuICAgICAgICAgICAgICBzY3JvbGw7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4ge1xuICAgICAgICBtZWRpYS5zaG93KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBoaWRlKCkge1xuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiB7XG4gICAgICBtZWRpYS5oaWRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBvblJlc2l6ZShldmVudCkge1xuICAgIHRoaXMuYm91bmRzID0gdGhpcy5nYWxsZXJ5V3JhcHBlckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy5zaXplcyA9IGV2ZW50LnNpemVzO1xuICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC50YXJnZXQgPSAwO1xuICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID0gdGhpcy5ib3VuZHMud2lkdGggLSB0aGlzLm1lZGlhc1swXS5lbGVtZW50LmNsaWVudFdpZHRoO1xuXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLm9uUmVzaXplKGV2ZW50LCB0aGlzLnNjcm9sbCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaERvd24gZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHtcbiAgICB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwuY3VycmVudDtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaE1vdmUgZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaE1vdmUoeyB4IH0pIHtcbiAgICBjb25zdCBkaXN0YW5jZSA9IHguc3RhcnQgLSB4LmVuZDtcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSB0aGlzLnNjcm9sbC5sYXN0IC0gZGlzdGFuY2U7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIG9uVG91Y2hVcCBmb3IgY2FudmFzXG4gICAqL1xuICBvblRvdWNoVXAoeyB4LCB5IH0pIHt9XG5cbiAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICovXG4gIG9uQ2hhbmdlQ3VycmVudChpbmRleCkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICBjb25zdCBzZWxlY3RlZENvbGxlY3Rpb24gPSBwYXJzZUludChcbiAgICAgIHRoaXMubWVkaWFFbGVtZW50c1t0aGlzLmluZGV4XS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbGxlY3Rpb24taW5kZXhcIiksXG4gICAgKTtcbiAgICBtYXAodGhpcy5jb2xsZWN0aW9uQXJ0aWNsZXMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSBzZWxlY3RlZENvbGxlY3Rpb24pIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY29sbGVjdGlvbkFydGljbGVzQWN0aXZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNvbGxlY3Rpb25BcnRpY2xlc0FjdGl2ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5jb2xsZWN0aW9uVGl0bGVzLnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9XG4gICAgICBgdHJhbnNsYXRlWSgtJHsyNSAqIHNlbGVjdGVkQ29sbGVjdGlvbn0lKSAgdHJhbnNsYXRlKC01MCUsLTUwJSkgcm90YXRlKC05MGRlZylgO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFNjcm9sbCB1cGRhdGVcbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSBnc2FwLnV0aWxzLmNsYW1wKFxuICAgICAgLXRoaXMuc2Nyb2xsLmxpbWl0LFxuICAgICAgMCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcbiAgICApO1xuICAgIC8vIFRoaXMgdXBkYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBzY3JvbGwgd2l0aCB0aGUgdGFyZ2V0IGFmdGVyIHNjcm9sbGluZ1xuICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBnc2FwLnV0aWxzLmludGVycG9sYXRlKFxuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcbiAgICAgIHRoaXMuc2Nyb2xsLmxlcnAsXG4gICAgKTtcblxuICAgIHRoaXMuZ2FsbGVyeUVsZW1lbnQuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID1cbiAgICAgIGB0cmFuc2xhdGVYKC0ke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYDtcblxuICAgIC8vIENoZWNrcyB0aGUgc2Nyb2xsIGRpcmVjdGlvblxuICAgIGlmICh0aGlzLnNjcm9sbC5sYXN0IDwgdGhpcy5zY3JvbGwuY3VycmVudCkge1xuICAgICAgdGhpcy5zY3JvbGwuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGwubGFzdCA+IHRoaXMuc2Nyb2xsLmN1cnJlbnQpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRpcmVjdGlvbiA9IFwibGVmdFwiO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZXMgdGhlIHNjcm9sbCB4IGFuZCB5IHdpdGggdGhlIGN1cnJlbnQgeCBhbmQgeSBhZnRlciB0aGV5IGFyZSB1cGRhdGVkXG4gICAgdGhpcy5zY3JvbGwubGFzdCA9IHRoaXMuc2Nyb2xsLmN1cnJlbnQ7XG5cbiAgICBjb25zdCBjdXJyZW50SW5kZXggPSBNYXRoLmZsb29yKFxuICAgICAgTWF0aC5hYnMoXG4gICAgICAgICh0aGlzLnNjcm9sbC5jdXJyZW50IC0gdGhpcy5tZWRpYXNbMF0uYm91bmRzLndpZHRoIC8gMikgL1xuICAgICAgICAgIHRoaXMuc2Nyb2xsLmxpbWl0LFxuICAgICAgKSAqXG4gICAgICAgICh0aGlzLm1lZGlhcy5sZW5ndGggLSAxKSxcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuaW5kZXggIT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgdGhpcy5vbkNoYW5nZUN1cnJlbnQoY3VycmVudEluZGV4KTtcbiAgICB9XG5cbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSwgXykgPT4ge1xuICAgICAgbWVkaWEudXBkYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQsIHRoaXMuaW5kZXgpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnNjZW5lLnJlbW92ZUNoaWxkKHRoaXMuZ3JvdXApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQcm9ncmFtLCBNZXNoLCBQbGFuZSB9IGZyb20gXCJvZ2xcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvcGxhbmUtdmVydGV4LnZlcnRcIjtcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9wbGFuZS1mcmFnbWVudC5mcmFnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldGFpbCB7XG4gIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcywgdHJhbnNpdGlvbiB9KSB7XG4gICAgdGhpcy5pZCA9IFwiZGV0YWlsXCI7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kZXRhaWxfX21lZGlhX19pbWFnZVwiKTtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcbiAgICB0aGlzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKTtcblxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIHRoaXMuY3JlYXRlTWVzaCgpO1xuICAgIHRoaXMuY3JlYXRlQm91bmRzKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG5cbiAgICB0aGlzLnNob3coKTtcbiAgfVxuXG4gIGNyZWF0ZVRleHR1cmUoKSB7XG4gICAgY29uc3QgZWxlbWVudEltYWdlU3JjID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpO1xuICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tlbGVtZW50SW1hZ2VTcmNdO1xuICB9XG5cbiAgY3JlYXRlUHJvZ3JhbSgpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgIHVuaWZvcm1zOiB7IHVBbHBoYTogeyB2YWx1ZTogMCB9LCB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfSB9LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlTWVzaCgpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ID0gTWF0aC5QSSAqIDAuMDE7XG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKTtcbiAgfVxuXG4gIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcbiAgICAvLyBUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgY2FudmFzIGZpZWxkIG9mIHZpZXdcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB0aGlzLnVwZGF0ZVNjYWxlKCk7XG4gICAgdGhpcy51cGRhdGVYKCk7XG4gICAgdGhpcy51cGRhdGVZKCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbi5hbmltYXRlKHRoaXMubWVzaCwgKF8pID0+IHtcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYS52YWx1ZSA9IDE7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3NhcC50byh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7IHZhbHVlOiAxIH0pO1xuICAgIH1cbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgZ3NhcC50byh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7IHZhbHVlOiAwIH0pO1xuICB9XG5cbiAgb25SZXNpemUoZXZlbnQpIHtcbiAgICB0aGlzLmNyZWF0ZUJvdW5kcyhldmVudCk7XG4gICAgdGhpcy51cGRhdGVYKCk7XG4gICAgdGhpcy51cGRhdGVZKCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIG9uVG91Y2hEb3duKGV2ZW50KSB7fVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIG9uVG91Y2hNb3ZlKGV2ZW50KSB7fVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIG9uVG91Y2hVcChldmVudCkge31cblxuICB1cGRhdGVTY2FsZSgpIHtcbiAgICAvLyBUbyBnZXQgdGhlIHBlcmNlbnRhZ2Ugb2YgZG9tIHdpZHRoICYgaGVpZ2h0IGluIHRoZSB3aW5kb3dcbiAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGg7XG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgdXBkYXRlWCgpIHtcbiAgICB0aGlzLnggPSB0aGlzLmJvdW5kcy5sZWZ0IC8gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9XG4gICAgICAtdGhpcy5zaXplcy53aWR0aCAvIDIgKyB0aGlzLm1lc2guc2NhbGUueCAvIDIgKyB0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoO1xuICB9XG5cbiAgdXBkYXRlWSgpIHtcbiAgICB0aGlzLnkgPSB0aGlzLmJvdW5kcy50b3AgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9XG4gICAgICB0aGlzLnNpemVzLmhlaWdodCAvIDIgLVxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgLyAyIC1cbiAgICAgIHRoaXMueSAqIHRoaXMuc2l6ZXMuaGVpZ2h0O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVgoKTtcbiAgICB0aGlzLnVwZGF0ZVkoKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLm1lc2gpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQcm9ncmFtLCBNZXNoIH0gZnJvbSBcIm9nbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuaW1wb3J0IHZlcnRleCBmcm9tIFwic2hhZGVycy9ob21lLXZlcnRleC52ZXJ0XCI7XG5pbXBvcnQgZnJhZ21lbnQgZnJvbSBcInNoYWRlcnMvaG9tZS1mcmFnbWVudC5mcmFnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBpbmRleCwgZ2VvbWV0cnksIGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcblxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIHRoaXMuY3JlYXRlTWVzaCgpO1xuXG4gICAgLy8gVGhlIHJlY3VycmluZyBkb20gZWxlbWVudCBhZnRlciBzY3JvbGxcbiAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgfTtcblxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG4gIH1cblxuICBjcmVhdGVUZXh0dXJlKCkge1xuICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1t0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIildO1xuICB9XG5cbiAgY3JlYXRlUHJvZ3JhbSgpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxuICAgICAgICB1U3BlZWQ6IHsgdmFsdWU6IDAgfSxcbiAgICAgICAgdVZpZXdwb3J0U2l6ZXM6IHsgdmFsdWU6IFt0aGlzLnNpemVzLndpZHRoLCB0aGlzLnNpemVzLmhlaWdodF0gfSxcbiAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlTWVzaCgpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG5cbiAgICB0aGlzLm1lc2gucm90YXRpb24ueiA9IGdzYXAudXRpbHMucmFuZG9tKC1NYXRoLlBJICogMC4wMywgTWF0aC5QSSAqIDAuMDMpO1xuICB9XG5cbiAgY3JlYXRlQm91bmRzKHsgc2l6ZXMgfSkge1xuICAgIC8vIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBjYW52YXMgZmllbGQgb2Ygdmlld1xuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHRoaXMudXBkYXRlU2NhbGUoKTtcbiAgICB0aGlzLnVwZGF0ZVgoKTtcbiAgICB0aGlzLnVwZGF0ZVkoKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgZ3NhcC5mcm9tVG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwgeyB2YWx1ZTogMCB9LCB7IHZhbHVlOiAwLjQgfSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGdzYXAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwgeyB2YWx1ZTogMCB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKGV2ZW50LCBzY3JvbGwpIHtcbiAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgfTtcblxuICAgIHRoaXMuY3JlYXRlQm91bmRzKGV2ZW50KTtcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsLngpO1xuICAgIHRoaXMudXBkYXRlWShzY3JvbGwueSk7XG4gIH1cblxuICB1cGRhdGVTY2FsZSgpIHtcbiAgICAvLyBUbyBnZXQgdGhlIHBlcmNlbnRhZ2Ugb2YgZG9tIHdpZHRoICYgaGVpZ2h0IGluIHRoZSB3aW5kb3dcbiAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGg7XG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgdXBkYXRlWCh4ID0gMCkge1xuICAgIHRoaXMueCA9ICh0aGlzLmJvdW5kcy5sZWZ0ICsgeCkgLyB3aW5kb3cuaW5uZXJXaWR0aDtcblxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID1cbiAgICAgIC10aGlzLnNpemVzLndpZHRoIC8gMiArXG4gICAgICB0aGlzLm1lc2guc2NhbGUueCAvIDIgK1xuICAgICAgdGhpcy54ICogdGhpcy5zaXplcy53aWR0aCArXG4gICAgICB0aGlzLmV4dHJhLng7XG4gIH1cblxuICB1cGRhdGVZKHkgPSAwKSB7XG4gICAgdGhpcy55ID0gKHRoaXMuYm91bmRzLnRvcCArIHkpIC8gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPVxuICAgICAgdGhpcy5zaXplcy5oZWlnaHQgLyAyIC1cbiAgICAgIHRoaXMubWVzaC5zY2FsZS55IC8gMiAtXG4gICAgICB0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodCArXG4gICAgICB0aGlzLmV4dHJhLnk7XG4gIH1cbiAgdXBkYXRlKHNjcm9sbCwgc3BlZWQpIHtcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsLngpO1xuICAgIHRoaXMudXBkYXRlWShzY3JvbGwueSk7XG5cbiAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudVNwZWVkLnZhbHVlID0gc3BlZWQ7XG4gIH1cbn1cbiIsImltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCB7IFBsYW5lLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCI7XG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IG5vcm1hbGl6ZVdoZWVsIGZyb20gXCJub3JtYWxpemUtd2hlZWxcIjtcblxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIHtcbiAgY29uc3RydWN0b3IoeyBnbCwgc2NlbmUsIHNpemVzIH0pIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKCk7XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaG9tZV9fZ2FsbGVyeVwiKTtcbiAgICB0aGlzLm1lZGlhRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuaG9tZV9fZ2FsbGVyeV9fbWVkaWFfX2ltYWdlXCIsXG4gICAgKTtcbiAgICB0aGlzLnggPSB7XG4gICAgICBjdXJyZW50OiAwLFxuICAgICAgdGFyZ2V0OiAwLFxuICAgICAgbGVycDogMC4xLFxuICAgICAgZGlyZWN0aW9uOiBudWxsLFxuICAgIH07XG4gICAgdGhpcy55ID0ge1xuICAgICAgY3VycmVudDogMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIGxlcnA6IDAuMSxcbiAgICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICB9O1xuXG4gICAgLy8gVXNlZCB0byBzYXZlIHRoZSBzY3JvbGwgeCBhbmQgeSBhZnRlciB0b3VjaGRvd24gZXZlbnRcbiAgICAvLyB0byBwcmV2ZW50IHJlZnJlc2hpbmcgdG8gemVyby5cbiAgICB0aGlzLnNjcm9sbEN1cnJlbnQgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICB9O1xuICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgfTtcblxuICAgIC8vIFNwZWVkIG9mIHRoZSBtb3VzZSBkcmFnZ2luZ1xuICAgIHRoaXMuc3BlZWQgPSB7XG4gICAgICBjdXJyZW50OiAwLFxuICAgICAgdGFyZ2V0OiAwLFxuICAgICAgbGVycDogMC4xLFxuICAgIH07XG5cbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XG4gICAgdGhpcy5jcmVhdGVHYWxsZXJ5KCk7XG4gICAgdGhpcy5vblJlc2l6ZSh7IHNpemVzOiB0aGlzLnNpemVzIH0pO1xuXG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gICAgdGhpcy5zaG93KCk7XG4gIH1cblxuICBjcmVhdGVHZW9tZXRyeSgpIHtcbiAgICAvLyBUaGUgaGVpZ2h0U2VnbWVudCAmIHdpZHRoU2VnbWVudCBnaXZlcyBtb3JlIHZlcnRpY2VzIHRvIHRoZSBwbGFuZVxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCwge1xuICAgICAgaGVpZ2h0U2VnbWVudHM6IDIwLFxuICAgICAgd2lkdGhTZWdtZW50czogMjAsXG4gICAgfSk7XG4gIH1cbiAgY3JlYXRlR2FsbGVyeSgpIHtcbiAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgICBzY2VuZTogdGhpcy5ncm91cCxcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLnNob3coKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgdGhpcy5nYWxsZXJ5Qm91bmRzID0gdGhpcy5nYWxsZXJ5RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXM7XG4gICAgdGhpcy5nYWxsZXJ5U2l6ZXMgPSB7XG4gICAgICB3aWR0aDogKHRoaXMuZ2FsbGVyeUJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6XG4gICAgICAgICh0aGlzLmdhbGxlcnlCb3VuZHMuaGVpZ2h0IC8gd2luZG93LmlubmVySGVpZ2h0KSAqIHRoaXMuc2l6ZXMuaGVpZ2h0LFxuICAgIH07XG5cbiAgICAvLyB0aGlzLnNjcm9sbC54ID0gdGhpcy54LnRhcmdldCA9IDA7XG4gICAgLy8gdGhpcy5zY3JvbGwueSA9IHRoaXMueS50YXJnZXQgPSAwO1xuXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IHtcbiAgICAgIG1lZGlhLm9uUmVzaXplKGV2ZW50LCB0aGlzLnNjcm9sbCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaERvd24gZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHtcbiAgICAvLyB0aGlzLnNwZWVkLnRhcmdldCA9IDE7XG5cbiAgICB0aGlzLnNjcm9sbEN1cnJlbnQueCA9IHRoaXMuc2Nyb2xsLng7XG4gICAgdGhpcy5zY3JvbGxDdXJyZW50LnkgPSB0aGlzLnNjcm9sbC55O1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBvblRvdWNoTW92ZSBmb3IgY2FudmFzXG4gICAqL1xuICBvblRvdWNoTW92ZSh7IHgsIHkgfSkge1xuICAgIGNvbnN0IHhEaXN0YW5jZSA9IHguc3RhcnQgLSB4LmVuZDtcbiAgICBjb25zdCB5RGlzdGFuY2UgPSB5LnN0YXJ0IC0geS5lbmQ7XG5cbiAgICB0aGlzLngudGFyZ2V0ID0gdGhpcy5zY3JvbGxDdXJyZW50LnggLSB4RGlzdGFuY2U7XG4gICAgdGhpcy55LnRhcmdldCA9IHRoaXMuc2Nyb2xsQ3VycmVudC55IC0geURpc3RhbmNlO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBvblRvdWNoVXAgZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaFVwKHsgeCwgeSB9KSB7XG4gICAgLy8gdGhpcy5zcGVlZC50YXJnZXQgPSAwO1xuICB9XG5cbiAgb25XaGVlbCh7IHBpeGVsWSwgcGl4ZWxYIH0pIHtcbiAgICB0aGlzLngudGFyZ2V0ICs9IHBpeGVsWDtcbiAgICB0aGlzLnkudGFyZ2V0ICs9IHBpeGVsWTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fSB7eCwgeX1cbiAgICogU2Nyb2xsIHVwZGF0ZVxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIC8vIFVzaW5nIHB5dGhhZ29yYXMgdG8gZ2V0IHRoZSBzcGVlZCBvZiBjdXJzb3Igb3IgdG91Y2ggbW92ZW1lbnQgZnJvbSBhIGN1cnJlbnRcbiAgICAvLyB0byBhIHRhcmdldCBwb3NpdGlvblxuICAgIGNvbnN0IGEgPSB0aGlzLngudGFyZ2V0IC0gdGhpcy54LmN1cnJlbnQ7XG4gICAgY29uc3QgYiA9IHRoaXMueS50YXJnZXQgLSB0aGlzLnkuY3VycmVudDtcbiAgICB0aGlzLnNwZWVkLnRhcmdldCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSAqIDAuMDAxO1xuXG4gICAgdGhpcy5zcGVlZC5jdXJyZW50ID0gZ3NhcC51dGlscy5pbnRlcnBvbGF0ZShcbiAgICAgIHRoaXMuc3BlZWQuY3VycmVudCxcbiAgICAgIHRoaXMuc3BlZWQudGFyZ2V0LFxuICAgICAgdGhpcy5zcGVlZC5sZXJwLFxuICAgICk7XG5cbiAgICAvLyBUaGlzIHVwZGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2Ygc2Nyb2xsIHdpdGggdGhlIHRhcmdldCBhZnRlciBzY3JvbGxpbmdcbiAgICB0aGlzLnguY3VycmVudCA9IGdzYXAudXRpbHMuaW50ZXJwb2xhdGUoXG4gICAgICB0aGlzLnguY3VycmVudCxcbiAgICAgIHRoaXMueC50YXJnZXQsXG4gICAgICB0aGlzLngubGVycCxcbiAgICApO1xuICAgIHRoaXMueS5jdXJyZW50ID0gZ3NhcC51dGlscy5pbnRlcnBvbGF0ZShcbiAgICAgIHRoaXMueS5jdXJyZW50LFxuICAgICAgdGhpcy55LnRhcmdldCxcbiAgICAgIHRoaXMueS5sZXJwLFxuICAgICk7XG5cbiAgICAvLyBDaGVja3MgdGhlIHNjcm9sbCBkaXJlY3Rpb25cbiAgICBpZiAodGhpcy5zY3JvbGwueCA8IHRoaXMueC5jdXJyZW50KSB7XG4gICAgICB0aGlzLnguZGlyZWN0aW9uID0gXCJyaWdodFwiO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGwueCA+IHRoaXMueC5jdXJyZW50KSB7XG4gICAgICB0aGlzLnguZGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsLnkgPCB0aGlzLnkuY3VycmVudCkge1xuICAgICAgdGhpcy55LmRpcmVjdGlvbiA9IFwidG9wXCI7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbC55ID4gdGhpcy55LmN1cnJlbnQpIHtcbiAgICAgIHRoaXMueS5kaXJlY3Rpb24gPSBcImJvdHRvbVwiO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZXMgdGhlIHNjcm9sbCB4IGFuZCB5IHdpdGggdGhlIGN1cnJlbnQgeCBhbmQgeSBhZnRlciB0aGV5IGFyZSB1cGRhdGVkXG4gICAgdGhpcy5zY3JvbGwueCA9IHRoaXMueC5jdXJyZW50O1xuICAgIHRoaXMuc2Nyb2xsLnkgPSB0aGlzLnkuY3VycmVudDtcblxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBfKSA9PiB7XG4gICAgICBjb25zdCBtZXNoU2NhbGVYID0gbWVkaWEubWVzaC5zY2FsZS54IC8gMjtcbiAgICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLnNpemVzLndpZHRoICogMC42O1xuXG4gICAgICAvLyBJbmZpbml0ZSBzY3JvbGxpbmcgaW4gYW55IGRpcmVjdGlvblxuICAgICAgaWYgKHRoaXMueC5kaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggKyBtZXNoU2NhbGVYO1xuICAgICAgICBpZiAoeCA8IC1vZmZzZXRYKSB7XG4gICAgICAgICAgbWVkaWEuZXh0cmEueCArPSB0aGlzLmdhbGxlcnlTaXplcy53aWR0aDtcbiAgICAgICAgICBtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBnc2FwLnV0aWxzLnJhbmRvbShcbiAgICAgICAgICAgIC1NYXRoLlBJICogMC4wMyxcbiAgICAgICAgICAgIE1hdGguUEkgKiAwLjAzLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy54LmRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggLSBtZXNoU2NhbGVYO1xuXG4gICAgICAgIGlmICh4ID4gb2Zmc2V0WCkge1xuICAgICAgICAgIG1lZGlhLmV4dHJhLnggLT0gdGhpcy5nYWxsZXJ5U2l6ZXMud2lkdGg7XG4gICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gZ3NhcC51dGlscy5yYW5kb20oXG4gICAgICAgICAgICAtTWF0aC5QSSAqIDAuMDMsXG4gICAgICAgICAgICBNYXRoLlBJICogMC4wMyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1lc2hTY2FsZVkgPSBtZWRpYS5tZXNoLnNjYWxlLnkgLyAyO1xuICAgICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogMC42O1xuXG4gICAgICBpZiAodGhpcy55LmRpcmVjdGlvbiA9PT0gXCJ0b3BcIikge1xuICAgICAgICBjb25zdCB5ID0gbWVkaWEubWVzaC5wb3NpdGlvbi55ICsgbWVzaFNjYWxlWTtcblxuICAgICAgICBpZiAoeSA8IC1vZmZzZXRZKSB7XG4gICAgICAgICAgbWVkaWEuZXh0cmEueSArPSB0aGlzLmdhbGxlcnlTaXplcy5oZWlnaHQ7XG4gICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gZ3NhcC51dGlscy5yYW5kb20oXG4gICAgICAgICAgICAtTWF0aC5QSSAqIDAuMDMsXG4gICAgICAgICAgICBNYXRoLlBJICogMC4wMyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMueS5kaXJlY3Rpb24gPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgY29uc3QgeSA9IG1lZGlhLm1lc2gucG9zaXRpb24ueSAtIG1lc2hTY2FsZVk7XG5cbiAgICAgICAgaWYgKHkgPiBvZmZzZXRZKSB7XG4gICAgICAgICAgbWVkaWEuZXh0cmEueSAtPSB0aGlzLmdhbGxlcnlTaXplcy5oZWlnaHQ7XG4gICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gZ3NhcC51dGlscy5yYW5kb20oXG4gICAgICAgICAgICAtTWF0aC5QSSAqIDAuMDMsXG4gICAgICAgICAgICBNYXRoLlBJICogMC4wMyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lZGlhLnVwZGF0ZSh0aGlzLnNjcm9sbCwgdGhpcy5zcGVlZC5jdXJyZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUHJvZ3JhbSwgTWVzaCwgUGxhbmUgfSBmcm9tIFwib2dsXCI7XG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuXG5pbXBvcnQgdmVydGV4IGZyb20gXCJzaGFkZXJzL3BsYW5lLXZlcnRleC52ZXJ0XCI7XG5pbXBvcnQgZnJhZ21lbnQgZnJvbSBcInNoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZnJhZ1wiO1xuaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWxcIjtcbmltcG9ydCBDb2xsZWN0aW9ucyBmcm9tIFwiLi9Db2xsZWN0aW9uc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2l0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBjb2xsZWN0aW9ucywgZGV0YWlscywgdXJsLCBnbCwgc2NlbmUsIHNpemVzIH0pIHtcbiAgICB0aGlzLmNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnM7XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcbiAgICB0aGlzLnVybCA9IHVybDtcblxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCk7XG4gIH1cblxuICBjcmVhdGVQcm9ncmFtKHRleHR1cmUpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgIHVuaWZvcm1zOiB7IHVBbHBoYTogeyB2YWx1ZTogMSB9LCB0TWFwOiB7IHZhbHVlOiB0ZXh0dXJlIH0gfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZU1lc2gobWVzaCkge1xuICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxuICAgIH0pO1xuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gbWVzaC5zY2FsZS54O1xuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gbWVzaC5zY2FsZS55O1xuICAgIHRoaXMubWVzaC5zY2FsZS56ID0gbWVzaC5zY2FsZS56O1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSBtZXNoLnBvc2l0aW9uLng7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSBtZXNoLnBvc2l0aW9uLnk7XG4gICAgLy8gVGhlIHotb3JkZXJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IG1lc2gucG9zaXRpb24ueiArIDAuMDE7XG5cbiAgICB0aGlzLm1lc2gucm90YXRpb24ueCA9IG1lc2gucm90YXRpb24ueDtcbiAgICB0aGlzLm1lc2gucm90YXRpb24ueSA9IG1lc2gucm90YXRpb24ueTtcbiAgICB0aGlzLm1lc2gucm90YXRpb24ueiA9IG1lc2gucm90YXRpb24uejtcblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtEZXRhaWwgfCBDb2xsZWN0aW9uc30gZWxlbWVudFxuICAgKiBzZXQgZWxlbWVudCBmb3IgdHJhbnNpdGlvbiBpbiBvciBvdXRcbiAgICovXG4gIHNldEVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50LmlkID09PSBcImNvbGxlY3Rpb25zXCIpIHtcbiAgICAgIGNvbnN0IHsgaW5kZXgsIG1lZGlhcyB9ID0gZWxlbWVudDtcbiAgICAgIGNvbnN0IG1lZGlhID0gbWVkaWFzW2luZGV4XTtcblxuICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKG1lZGlhLnRleHR1cmUpO1xuICAgICAgdGhpcy5jcmVhdGVNZXNoKG1lZGlhLm1lc2gpO1xuXG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBcImRldGFpbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oZWxlbWVudC50ZXh0dXJlKTtcbiAgICAgIHRoaXMuY3JlYXRlTWVzaChlbGVtZW50Lm1lc2gpO1xuXG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBcImNvbGxlY3Rpb25zXCI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RGV0YWlsfSBlbGVtZW50XG4gICAqL1xuICBhbmltYXRlKGVsZW1lbnQsIG9uQ29tcGxldGUpIHtcbiAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoKTtcblxuICAgIHRpbWVsaW5lLnRvKFxuICAgICAgdGhpcy5tZXNoLnNjYWxlLFxuICAgICAge1xuICAgICAgICB4OiBlbGVtZW50LnNjYWxlLngsXG4gICAgICAgIHk6IGVsZW1lbnQuc2NhbGUueSxcbiAgICAgICAgejogZWxlbWVudC5zY2FsZS56LFxuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICBlYXNlOiBcImV4cG8uaW5PdXRcIixcbiAgICAgIH0sXG4gICAgICAwLFxuICAgICk7XG5cbiAgICB0aW1lbGluZS50byhcbiAgICAgIHRoaXMubWVzaC5wb3NpdGlvbixcbiAgICAgIHtcbiAgICAgICAgeDogZWxlbWVudC5wb3NpdGlvbi54LFxuICAgICAgICB5OiBlbGVtZW50LnBvc2l0aW9uLnksXG4gICAgICAgIHo6IGVsZW1lbnQucG9zaXRpb24ueixcbiAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgICAgZWFzZTogXCJleHBvLmluT3V0XCIsXG4gICAgICB9LFxuICAgICAgMCxcbiAgICApO1xuXG4gICAgdGltZWxpbmUudG8oXG4gICAgICB0aGlzLm1lc2gucm90YXRpb24sXG4gICAgICB7XG4gICAgICAgIHg6IGVsZW1lbnQucm90YXRpb24ueCxcbiAgICAgICAgeTogZWxlbWVudC5yb3RhdGlvbi55LFxuICAgICAgICB6OiBlbGVtZW50LnJvdGF0aW9uLnosXG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIGVhc2U6IFwiZXhwby5pbk91dFwiLFxuICAgICAgfSxcbiAgICAgIDAsXG4gICAgKTtcblxuICAgIHRpbWVsaW5lLmNhbGwoKCkgPT4ge1xuICAgICAgb25Db21wbGV0ZSgpO1xuICAgIH0pO1xuXG4gICAgdGltZWxpbmUuY2FsbChcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLm1lc2gpO1xuICAgICAgfSxcbiAgICAgIG51bGwsXG4gICAgICBcIis9MC4yXCIsXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2FtZXJhLCBSZW5kZXJlciwgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vSG9tZVwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCIuL0Fib3V0XCI7XG5pbXBvcnQgQ29sbGVjdGlvbnMgZnJvbSBcIi4vQ29sbGVjdGlvbnNcIjtcbmltcG9ydCBEZXRhaWwgZnJvbSBcIi4vRGV0YWlsXCI7XG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tIFwiLi9UcmFuc2l0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XG4gIGNvbnN0cnVjdG9yKHsgdGVtcGxhdGUgfSkge1xuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblxuICAgIHRoaXMueCA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZGlzdGFuY2U6IDAsXG4gICAgICBlbmQ6IDAsXG4gICAgfTtcbiAgICB0aGlzLnkgPSB7XG4gICAgICBzdGFydDogMCxcbiAgICAgIGRpc3RhbmNlOiAwLFxuICAgICAgZW5kOiAwLFxuICAgIH07XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgIHRoaXMuY3JlYXRlQ2FtZXJhKCk7XG4gICAgdGhpcy5jcmVhdGVTY2VuZSgpO1xuXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICB9XG5cbiAgY3JlYXRlUmVuZGVyZXIoKSB7XG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih7IGFscGhhOiB0cnVlLCBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdsLmNhbnZhcyk7XG4gIH1cblxuICBjcmVhdGVDYW1lcmEoKSB7XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMuZ2wpO1xuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1O1xuICB9XG5cbiAgY3JlYXRlU2NlbmUoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgfVxuXG4gIGNyZWF0ZUhvbWUoKSB7XG4gICAgdGhpcy5ob21lID0gbmV3IEhvbWUoeyBnbDogdGhpcy5nbCwgc2NlbmU6IHRoaXMuc2NlbmUsIHNpemVzOiB0aGlzLnNpemVzIH0pO1xuICB9XG5cbiAgZGVzdHJveUhvbWUoKSB7XG4gICAgaWYgKCF0aGlzLmhvbWUpIHJldHVybjtcbiAgICB0aGlzLmhvbWUuZGVzdHJveSgpO1xuICAgIHRoaXMuaG9tZSA9IG51bGw7XG4gIH1cblxuICBjcmVhdGVBYm91dCgpIHtcbiAgICB0aGlzLmFib3V0ID0gbmV3IEFib3V0KHtcbiAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXG4gICAgICBzaXplczogdGhpcy5zaXplcyxcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3lBYm91dCgpIHtcbiAgICBpZiAoIXRoaXMuYWJvdXQpIHJldHVybjtcbiAgICB0aGlzLmFib3V0LmRlc3Ryb3koKTtcbiAgICB0aGlzLmFib3V0ID0gbnVsbDtcbiAgfVxuXG4gIGNyZWF0ZUNvbGxlY3Rpb25zKCkge1xuICAgIHRoaXMuY29sbGVjdGlvbnMgPSBuZXcgQ29sbGVjdGlvbnMoe1xuICAgICAgZ2w6IHRoaXMuZ2wsXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxuICAgICAgdHJhbnNpdGlvbjogdGhpcy50cmFuc2l0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveUNvbGxlY3Rpb25zKCkge1xuICAgIGlmICghdGhpcy5jb2xsZWN0aW9ucykgcmV0dXJuO1xuICAgIHRoaXMuY29sbGVjdGlvbnMuZGVzdHJveSgpO1xuICAgIHRoaXMuY29sbGVjdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgY3JlYXRlRGV0YWlsKCkge1xuICAgIHRoaXMuZGV0YWlsID0gbmV3IERldGFpbCh7XG4gICAgICBnbDogdGhpcy5nbCxcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICB0cmFuc2l0aW9uOiB0aGlzLnRyYW5zaXRpb24sXG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95RGV0YWlsKCkge1xuICAgIGlmICghdGhpcy5kZXRhaWwpIHJldHVybjtcbiAgICB0aGlzLmRldGFpbC5kZXN0cm95KCk7XG4gICAgdGhpcy5kZXRhaWwgPSBudWxsO1xuICB9XG5cbiAgb25QcmVsb2FkZWQoKSB7XG4gICAgdGhpcy5vbkNoYW5nZUVuZCh0aGlzLnRlbXBsYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmb3IgaGlkaW5nIGNhbnZhcyBvbiBhbiBhY3RpdmUgcGFnZVxuICAgKiBAYXJndW1lbnQge3RlbXBsYXRlLCB1cmx9IHN0cmluZ1xuICAgKi9cbiAgb25DaGFuZ2VTdGFydCh0ZW1wbGF0ZSwgdXJsKSB7XG4gICAgdGhpcy5pc0Zyb21Db2xsZWN0aW9uc3RUb0RldGFpbCA9XG4gICAgICB0aGlzLnRlbXBsYXRlID09PSBcImNvbGxlY3Rpb25zXCIgJiYgdXJsLmluZGV4T2YoXCJkZXRhaWxcIikgPiAtMTtcbiAgICB0aGlzLmlzRnJvbURldGFpbFRvQ29sbGVjdGlvbnMgPVxuICAgICAgdGhpcy50ZW1wbGF0ZSA9PT0gXCJkZXRhaWxcIiAmJiB1cmwuaW5kZXhPZihcImNvbGxlY3Rpb25zXCIpID4gLTE7XG5cbiAgICBpZiAodGhpcy5ob21lKSB7XG4gICAgICB0aGlzLmhvbWUuaGlkZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hYm91dCkge1xuICAgICAgdGhpcy5hYm91dC5oaWRlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Zyb21Db2xsZWN0aW9uc3RUb0RldGFpbCB8fCB0aGlzLmlzRnJvbURldGFpbFRvQ29sbGVjdGlvbnMpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbiA9IG5ldyBUcmFuc2l0aW9uKHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICB9KTtcblxuICAgICAgdGhpcy50cmFuc2l0aW9uLnNldEVsZW1lbnQodGhpcy5jb2xsZWN0aW9ucyB8fCB0aGlzLmRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZXMgYWN0aXZlIHBhZ2Ugc2NlbmUgb24gY2hhbmdlIG9mIHJvdXRlXG4gICAqIEBhcmd1bWVudCB7c3RyaW5nfSB0ZW1wbGF0ZVxuICAgKi9cbiAgb25DaGFuZ2VFbmQodGVtcGxhdGUpIHtcbiAgICBpZiAodGVtcGxhdGUgPT09IFwiaG9tZVwiKSB7XG4gICAgICB0aGlzLmNyZWF0ZUhvbWUoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaG9tZSkge1xuICAgICAgdGhpcy5kZXN0cm95SG9tZSgpO1xuICAgIH1cblxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gXCJhYm91dFwiKSB7XG4gICAgICB0aGlzLmNyZWF0ZUFib3V0KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFib3V0KSB7XG4gICAgICB0aGlzLmRlc3Ryb3lBYm91dCgpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGUgPT09IFwiY29sbGVjdGlvbnNcIikge1xuICAgICAgdGhpcy5jcmVhdGVDb2xsZWN0aW9ucygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xuICAgICAgdGhpcy5kZXN0cm95Q29sbGVjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBpZiAodGVtcGxhdGUgPT09IFwiZGV0YWlsXCIpIHtcbiAgICAgIHRoaXMuY3JlYXRlRGV0YWlsKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRldGFpbCkge1xuICAgICAgdGhpcy5kZXN0cm95RGV0YWlsKCk7XG4gICAgfVxuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7XG4gICAgICBhc3BlY3Q6IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxuICAgIH0pO1xuICAgIC8vIGZvdiAtIGZpZWxkIG9mIHZpZXdcbiAgICBjb25zdCBmb3YgPSAodGhpcy5jYW1lcmEuZm92ICogTWF0aC5QSSkgLyAxODA7XG4gICAgY29uc3QgaGVpZ2h0ID0gMiAqIE1hdGgudGFuKGZvdiAvIDIpICogdGhpcy5jYW1lcmEucG9zaXRpb24uejtcbiAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdDtcblxuICAgIC8vIHNpemVzIG9mIHRoZSBmaWVsZCBvZiB2aWV3XG4gICAgdGhpcy5zaXplcyA9IHtcbiAgICAgIGhlaWdodCxcbiAgICAgIHdpZHRoLFxuICAgIH07XG4gICAgaWYgKHRoaXMuaG9tZSkge1xuICAgICAgdGhpcy5ob21lLm9uUmVzaXplKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFib3V0KSB7XG4gICAgICB0aGlzLmFib3V0Lm9uUmVzaXplKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uUmVzaXplKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRldGFpbCkge1xuICAgICAgdGhpcy5kZXRhaWwub25SZXNpemUoeyBzaXplczogdGhpcy5zaXplcyB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaERvd24gZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaERvd24oZXZlbnQpIHtcbiAgICB0aGlzLmlzRG93biA9IHRydWU7XG5cbiAgICB0aGlzLnguc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WDtcbiAgICB0aGlzLnkuc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WTtcblxuICAgIGlmICh0aGlzLmhvbWUpIHtcbiAgICAgIHRoaXMuaG9tZS5vblRvdWNoRG93bih7IHg6IHRoaXMueC5zdGFydCwgeTogdGhpcy55LnN0YXJ0IH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5hYm91dCkge1xuICAgICAgdGhpcy5hYm91dC5vblRvdWNoRG93bih7IHg6IHRoaXMueC5zdGFydCwgeTogdGhpcy55LnN0YXJ0IH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5vblRvdWNoRG93bih7IHg6IHRoaXMueC5zdGFydCwgeTogdGhpcy55LnN0YXJ0IH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLm9uVG91Y2hEb3duKHsgeDogdGhpcy54LnN0YXJ0LCB5OiB0aGlzLnkuc3RhcnQgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBvblRvdWNoTW92ZSBmb3IgY2FudmFzXG4gICAqL1xuICBvblRvdWNoTW92ZShldmVudCkge1xuICAgIGlmICghdGhpcy5pc0Rvd24pIHJldHVybjtcblxuICAgIGNvbnN0IHggPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WDtcbiAgICBjb25zdCB5ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICB0aGlzLnguZW5kID0geDtcbiAgICB0aGlzLnkuZW5kID0geTtcblxuICAgIGlmICh0aGlzLmhvbWUpIHtcbiAgICAgIHRoaXMuaG9tZS5vblRvdWNoTW92ZSh7IHg6IHRoaXMueCwgeTogdGhpcy55IH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFib3V0KSB7XG4gICAgICB0aGlzLmFib3V0Lm9uVG91Y2hNb3ZlKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uVG91Y2hNb3ZlKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRldGFpbCkge1xuICAgICAgdGhpcy5kZXRhaWwub25Ub3VjaE1vdmUoeyB4OiB0aGlzLngsIHk6IHRoaXMueSB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIG9uVG91Y2hVcCBmb3IgY2FudmFzXG4gICAqL1xuICBvblRvdWNoVXAoZXZlbnQpIHtcbiAgICB0aGlzLmlzRG93biA9IGZhbHNlO1xuICAgIGNvbnN0IHggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1xuICAgICAgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYXG4gICAgICA6IGV2ZW50LmNsaWVudFg7XG4gICAgY29uc3QgeSA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzXG4gICAgICA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFlcbiAgICAgIDogZXZlbnQuY2xpZW50WTtcblxuICAgIHRoaXMueC5lbmQgPSB4O1xuICAgIHRoaXMueS5lbmQgPSB5O1xuXG4gICAgaWYgKHRoaXMuaG9tZSkge1xuICAgICAgdGhpcy5ob21lLm9uVG91Y2hVcCh7IHg6IHRoaXMueCwgeTogdGhpcy55IH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5hYm91dCkge1xuICAgICAgdGhpcy5hYm91dC5vblRvdWNoVXAoeyB4OiB0aGlzLngsIHk6IHRoaXMueSB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMub25Ub3VjaFVwKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRldGFpbCkge1xuICAgICAgdGhpcy5kZXRhaWwub25Ub3VjaFVwKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XG4gICAgfVxuICB9XG5cbiAgb25XaGVlbChldmVudCkge1xuICAgIGlmICh0aGlzLmhvbWUpIHtcbiAgICAgIHRoaXMuaG9tZS5vbldoZWVsKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMub25XaGVlbChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKHNjcm9sbCkge1xuICAgIGlmICh0aGlzLmhvbWUpIHtcbiAgICAgIHRoaXMuaG9tZS51cGRhdGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYWJvdXQpIHtcbiAgICAgIHRoaXMuYWJvdXQudXBkYXRlKHNjcm9sbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih7IGNhbWVyYTogdGhpcy5jYW1lcmEsIHNjZW5lOiB0aGlzLnNjZW5lIH0pO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHsgY2FtZXJhOiB0aGlzLmNhbWVyYSwgc2NlbmU6IHRoaXMuc2NlbmUgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBDT0xPUl9CUklHSFRfR1JBWSwgQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFIH0gZnJvbSBcInV0aWxzL2NvbG9yc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgdGVtcGxhdGUgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQ6IFwiLm5hdmlnYXRpb25cIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGl0ZW1zOiBcIi5uYXZpZ2F0aW9uX19saXN0X19pdGVtXCIsXG4gICAgICAgIGxpbmtzOiBcIi5uYXZpZ2F0b25fX2xpc3RfX2xpbmtcIixcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5vbkNoYW5nZSh0ZW1wbGF0ZSk7XG4gIH1cblxuICBvbkNoYW5nZSh0ZW1wbGF0ZSkge1xuICAgIGlmICh0ZW1wbGF0ZSA9PT0gXCJhYm91dFwiKSB7XG4gICAgICBnc2FwLnRvKHRoaXMuZWxlbWVudCwge1xuICAgICAgICBjb2xvcjogQ09MT1JfQlJJR0hUX0dSQVksXG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICB9KTtcbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xuICAgICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICAgIGRlbGF5OiAwLjc1LFxuICAgICAgICBkdXJhdGlvbjogMC43NSxcbiAgICAgIH0pO1xuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzFdLCB7XG4gICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgZHVyYXRpb246IDAuNzUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgY29sb3I6IENPTE9SX1FVQVJURVJfU1BBTklTSF9XSElURSxcbiAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgIH0pO1xuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzBdLCB7XG4gICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgZHVyYXRpb246IDAuNzUsXG4gICAgICB9KTtcbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5pdGVtc1sxXSwge1xuICAgICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICAgIGRlbGF5OiAwLjc1LFxuICAgICAgICBkdXJhdGlvbjogMC43NSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwib2dsXCI7XG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gXCJ1dGlscy90ZXh0XCI7XG5cbi8qKlxuICogQGNsYXNzIFByZWxvYWRlclxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKiBAZXhwb3J0cyBQcmVsb2FkZXJcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIGNsYXNzIGlzIHRoZSBiYXNlXG4gKiBjbGFzcyBmb3IgdGhlIHByZWxvYWRlciBpbiB0aGUgYXBwbGljYXRpb25cbiAqIEl0IGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBhcmUgY29tbW9uIHRvIGFsbCBwcmVsb2FkZXJzXG4gKiBhbmQgY2FuIGJlIGV4dGVuZGVkIGJ5IG90aGVyIHByZWxvYWRlcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBjYW52YXMgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQ6IFwiLnByZWxvYWRlclwiLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgdGl0bGU6IFwiLnByZWxvYWRlcl9fdGV4dFwiLFxuICAgICAgICBudW1iZXI6IFwiLnByZWxvYWRlcl9fbnVtYmVyXCIsXG4gICAgICAgIG51bWJlclRleHQ6IFwiLnByZWxvYWRlcl9fbnVtYmVyX190ZXh0XCIsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuXG4gICAgd2luZG93LlRFWFRVUkVTID0ge307XG5cbiAgICBzcGxpdCh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgZXhwcmVzc2lvbjogXCI8YnI+XCIsXG4gICAgfSk7XG5cbiAgICBzcGxpdCh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgZXhwcmVzc2lvbjogXCI8YnI+XCIsXG4gICAgfSk7XG5cbiAgICB0aGlzLmVsZW1lbnRzLnRpdGxlU3BhbnMgPVxuICAgICAgdGhpcy5lbGVtZW50cy50aXRsZS5xdWVyeVNlbGVjdG9yQWxsKFwic3BhbiBzcGFuXCIpO1xuXG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgdGhpcy5jcmVhdGVMb2FkZXIoKTtcbiAgfVxuXG4gIGNyZWF0ZUxvYWRlcigpIHtcbiAgICB3aW5kb3cuQVNTRVRTLmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUodGhpcy5jYW52YXMuZ2wsIHtcbiAgICAgICAgZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBuZXdJbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIG5ld0ltYWdlLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIjtcbiAgICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlO1xuXG4gICAgICBuZXdJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRleHR1cmUuaW1hZ2UgPSBuZXdJbWFnZTtcbiAgICAgICAgdGhpcy5vbkFzc2V0TG9hZGVkKCk7XG4gICAgICB9O1xuXG4gICAgICB3aW5kb3cuVEVYVFVSRVNbaW1hZ2VdID0gdGV4dHVyZTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uQXNzZXRMb2FkZWQoKSB7XG4gICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5sZW5ndGggLyB3aW5kb3cuQVNTRVRTLmxlbmd0aDtcblxuICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dC5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApfSVgO1xuICAgIGlmIChwZXJjZW50ID09PSAxKSB7XG4gICAgICB0aGlzLm9uTG9hZGVkKCk7XG4gICAgfVxuICB9XG5cbiAgb25Mb2FkZWQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZWRcIik7XG5cbiAgICAgIHRoaXMuYW5pbWF0ZU91dCA9IGdzYXAudGltZWxpbmUoeyBkZWxheTogMSB9KTtcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMudGl0bGVTcGFucywge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIHk6IFwiMTAwJVwiLFxuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICBlYXNlOiBcImV4cG8ub3V0XCIsXG4gICAgICAgIHN0YWdnZXI6IDAuMSxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmFuaW1hdGVPdXQudG8oXG4gICAgICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dCxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICB5OiBcIjEwMCVcIixcbiAgICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcbiAgICAgICAgICBzdGFnZ2VyOiAwLjEsXG4gICAgICAgIH0sXG4gICAgICAgIFwiLT0xLjRcIixcbiAgICAgICk7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQudG8oXG4gICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgICAgfSxcbiAgICAgICAgXCItPTFcIixcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuYW5pbWF0ZU91dC5jYWxsKCgpID0+IHRoaXMuZGVzdHJveSgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XG5pbXBvcnQgbm9ybWFsaXplV2hlZWwgZnJvbSBcIm5vcm1hbGl6ZS13aGVlbFwiO1xuXG5pbXBvcnQgQ2FudmFzIGZyb20gXCJjb21wb25lbnRzL0NhbnZhc1wiO1xuXG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gXCJjb21wb25lbnRzL1ByZWxvYWRlclwiO1xuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcImNvbXBvbmVudHMvTmF2aWdhdGlvblwiO1xuXG5pbXBvcnQgSG9tZSBmcm9tIFwicGFnZXMvSG9tZVwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCJwYWdlcy9BYm91dFwiO1xuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gXCJwYWdlcy9Db2xsZWN0aW9uc1wiO1xuaW1wb3J0IERldGFpbCBmcm9tIFwicGFnZXMvRGV0YWlsXCI7XG5cbi8qKlxuICogQGNsYXNzIEFwcFxuICogQGRlc2NyaXB0aW9uIFRoaXMgY2xhc3MgaXMgdGhlIGVudHJ5IHBvaW50IG9mIHRoZSBhcHBsaWNhdGlvblxuICogSXQgY3JlYXRlcyB0aGUgcHJlbG9hZGVyLCB0aGUgY29udGVudCwgdGhlIHBhZ2VzIGFuZCB0aGUgbGluayBsaXN0ZW5lcnNcbiAqIEl0IGFsc28gdXBkYXRlcyB0aGUgY3VycmVudCBwYWdlIGFuZCBsaXN0ZW5zIGZvciByZXNpemUgZXZlbnRzLlxuICogSXQgYWxzbyBjcmVhdGVzIHRoZSBjYW52YXMgZm9yIGFuaW1hdGlvbnNcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgQXBwIGZyb20gXCJhcHBcIjtcbiAqIG5ldyBBcHAoKTtcbiAqIEBleHBvcnRzIEFwcFxuICpcbiAqL1xuY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XG5cbiAgICB0aGlzLmNyZWF0ZUNhbnZhcygpO1xuICAgIHRoaXMuY3JlYXRlUHJlbG9hZGVyKCk7XG4gICAgdGhpcy5jcmVhdGVOYXZpZ2F0aW9uKCk7XG4gICAgdGhpcy5jcmVhdGVQYWdlcygpO1xuXG4gICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBjcmVhdGVOYXZpZ2F0aW9uKCkge1xuICAgIHRoaXMubmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjcmVhdGVQcmVsb2FkZXJcbiAgICogQGRlc2NyaXB0aW9uIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFByZWxvYWRlciBjbGFzc1xuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBjcmVhdGVQcmVsb2FkZXIoKSB7XG4gICAgdGhpcy5wcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKHsgY2FudmFzOiB0aGlzLmNhbnZhcyB9KTtcbiAgICB0aGlzLnByZWxvYWRlci5vbmNlKFwiY29tcGxldGVkXCIsIHRoaXMub25QcmVsb2FkZWQuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjcmVhdGVDYW52YXNcbiAgICogQ3JlYXRlcyBjYW52YXMgZm9yIGFwcCB3ZWJnbCBlbGVtZW50c1xuICAgKi9cbiAgY3JlYXRlQ2FudmFzKCkge1xuICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcyh7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlIH0pO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAbWV0aG9kIGNyZWF0ZUNvbnRlbnRcbiAgICogQGRlc2NyaXB0aW9uIHRhcmdldHMgdGhlIGNvbnRlbnQgZWxlbWVudCBhbmQgZ2V0cyB0aGUgZGF0YS10ZW1wbGF0ZSBhdHRyaWJ1dGVcbiAgICovXG4gIGNyZWF0ZUNvbnRlbnQoKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10ZW1wbGF0ZVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNyZWF0ZVBhZ2VzXG4gICAqIEBkZXNjcmlwdGlvbiBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGVhY2ggcGFnZSBjbGFzcyBhbmQgc3RvcmVzIHRoZSBjdXJyZW50IHBhZ2UgaW4gYW4gb2JqZWN0XG4gICAqL1xuICBjcmVhdGVQYWdlcygpIHtcbiAgICB0aGlzLnBhZ2VzID0ge1xuICAgICAgYWJvdXQ6IG5ldyBBYm91dCgpLFxuICAgICAgY29sbGVjdGlvbnM6IG5ldyBDb2xsZWN0aW9ucygpLFxuICAgICAgZGV0YWlsOiBuZXcgRGV0YWlsKCksXG4gICAgICBob21lOiBuZXcgSG9tZSgpLFxuICAgIH07XG4gICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXTtcbiAgICB0aGlzLnBhZ2UuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBvblByZWxvYWRlZFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHByZWxvYWRlciBoYXMgZmluaXNoZWRcbiAgICogbG9hZGluZyB0aGUgY29udGVudFxuICAgKiBJdCBkZXN0cm95cyB0aGUgcHJlbG9hZGVyIGFuZCBzaG93cyB0aGUgcGFnZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMucHJlbG9hZGVyLmRlc3Ryb3koKTtcbiAgICogdGhpcy5wYWdlLm9uUmVzaXplKCk7XG4gICAqIHRoaXMucGFnZS5zaG93KCk7XG4gICAqIEBtZW1iZXJvZiBBcHBcbiAgICovXG4gIG9uUHJlbG9hZGVkKCkge1xuICAgIHRoaXMub25SZXNpemUoKTtcbiAgICB0aGlzLmNhbnZhcy5vblByZWxvYWRlZCgpO1xuICAgIHRoaXMucGFnZS5zaG93KCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBvblBvcFN0YXRlXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgcG9wc3RhdGUgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAqIEl0IGNhbGxzIHRoZSBvbkNoYW5nZSBtZXRob2Qgd2l0aCB0aGUgY3VycmVudCBwYXRobmFtZSBhbmQgbmF2aWdhdGVzXG4gICAqIHRoZSBoaXN0b3J5IG9mIHRoZSBhY3RpdmUgc2Vzc2lvbiBvZiB0aGUgY3VycmVudCB3aW5kb3cuXG4gICAqIFRoZSBwdXNoIHBhcmFtZXRlciBpcyBzZXQgdG8gZmFsc2UgdG8gcHJldmVudCB0aGUgcGFnZSBmcm9tIGJlaW5nIHB1c2hlZCB0byB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBvblBvcFN0YXRlKCkge1xuICAgIHRoaXMub25DaGFuZ2UoeyB1cmw6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgcHVzaDogZmFsc2UgfSk7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdXJsXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbGluayBpcyBjbGlja2VkXG4gICAqIEl0IGZldGNoZXMgdGhlIG5ldyBwYWdlIGFuZCB1cGRhdGVzIHRoZSBjb250ZW50XG4gICAqIHdpdGggdGhlIG5ldyBwYWdlIGNvbnRlbnRcbiAgICogSXQgYWxzbyB1cGRhdGVzIHRoZSB0ZW1wbGF0ZSBhbmQgdGhlIGN1cnJlbnQgcGFnZVxuICAgKlxuICAgKi9cbiAgYXN5bmMgb25DaGFuZ2UoeyB1cmwsIHB1c2ggPSB0cnVlIH0pIHtcbiAgICB0aGlzLmNhbnZhcy5vbkNoYW5nZVN0YXJ0KHRoaXMudGVtcGxhdGUsIHVybCk7XG5cbiAgICBhd2FpdCB0aGlzLnBhZ2UuaGlkZSgpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKTtcblxuICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVxdWVzdC50ZXh0KCk7XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICBpZiAocHVzaCkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgY29uc3QgZGl2Q29udGVudCA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRcIik7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbXBsYXRlXCIpO1xuXG4gICAgICB0aGlzLm5hdmlnYXRpb24ub25DaGFuZ2UodGhpcy50ZW1wbGF0ZSk7XG5cbiAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTDtcbiAgICAgIHRoaXMuY29udGVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbXBsYXRlXCIsIHRoaXMudGVtcGxhdGUpO1xuXG4gICAgICB0aGlzLmNhbnZhcy5vbkNoYW5nZUVuZCh0aGlzLnRlbXBsYXRlKTtcblxuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXTtcbiAgICAgIHRoaXMucGFnZS5jcmVhdGUoKTtcbiAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICAgIGF3YWl0IHRoaXMucGFnZS5zaG93KCk7XG5cbiAgICAgIHRoaXMuYWRkTGlua0xpc3RlbmVycygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL2NvbnNvbGUubG9nKC4uLm9vX29vKGAyMTM5ODkxMjJfMTU5XzZfMTU5XzQyXzRgLFwiRXJyb3JcIiwgcmVxdWVzdC5zdGF0dXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBvblJlc2l6ZVxuICAgKiBAZGVzY3JpcHRpb24gY2hlY2tzIGlmIHBhZ2UgaXMgZGVmaW5lZCBhbmQgY2FsbHMgdGhlIG9uUmVzaXplIG1ldGhvZFxuICAgKi9cbiAgb25SZXNpemUoKSB7XG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25SZXNpemUpIHtcbiAgICAgIHRoaXMucGFnZS5vblJlc2l6ZSgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uUmVzaXplKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLm9uUmVzaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25Ub3VjaERvd24gZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaERvd24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25Ub3VjaERvd24pIHtcbiAgICAgIHRoaXMuY2FudmFzLm9uVG91Y2hEb3duKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIG9uVG91Y2hNb3ZlIGZvciBjYW52YXNcbiAgICovXG4gIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKSB7XG4gICAgICB0aGlzLmNhbnZhcy5vblRvdWNoTW92ZShldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBvblRvdWNoVXAgZm9yIGNhbnZhc1xuICAgKi9cbiAgb25Ub3VjaFVwKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hVcCkge1xuICAgICAgdGhpcy5jYW52YXMub25Ub3VjaFVwKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogb25XaGVlbCBldmVudFxuICAgKi9cbiAgb25XaGVlbChldmVudCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRXaGVlbCA9IG5vcm1hbGl6ZVdoZWVsKGV2ZW50KTtcbiAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS5vbldoZWVsKSB7XG4gICAgICB0aGlzLnBhZ2Uub25XaGVlbChub3JtYWxpemVkV2hlZWwpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25XaGVlbCkge1xuICAgICAgdGhpcy5jYW52YXMub25XaGVlbChub3JtYWxpemVkV2hlZWwpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQGRlc2NyaXB0aW9uIHVwZGF0ZXMgdGhlIGN1cnJlbnQgcGFnZSBhbmQgcmVxdWVzdHMgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS51cGRhdGUpIHtcbiAgICAgIHRoaXMucGFnZS51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMudXBkYXRlKSB7XG4gICAgICAvLyBUaGUgYXJndW1lbnQgaXMgcGFzc2VkIHRvIGdldCB0aGUgY3VycmVudCBwYWdlIHNjcm9sbCBzbyBhcyB0byB0cmFuc2xhdGUgdGhlXG4gICAgICAvLyBjYW52YXMgZ2FsbGVyeSBpbiBzZWN0aW9ucyB0aGF0IG5lZWRzIHRvIGJlIHRyYW5zYWxhdGVkXG4gICAgICB0aGlzLmNhbnZhcy51cGRhdGUodGhpcy5wYWdlLnNjcm9sbCk7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRFdmVudExpc3RlbmVyXG4gICAqIEBkZXNjcmlwdGlvbiBhZGQgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSB3aW5kb3cgZW50cnkgcG9pbnRcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5vbldoZWVsLmJpbmQodGhpcykpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5vblRvdWNoRG93bi5iaW5kKHRoaXMpKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uVG91Y2hNb3ZlLmJpbmQodGhpcykpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgdGhpcy5vblBvcFN0YXRlLmJpbmQodGhpcykpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRMaW5rTGlzdGVuZXJzXG4gICAqIEBkZXNjcmlwdGlvbiBhZGRzIGV2ZW50IGxpc3RlbmVycyB0byBhbGwgYW5jaG9yIHRhZ3NcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgYWRkTGlua0xpc3RlbmVycygpIHtcbiAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpO1xuICAgIGVhY2gobGlua3MsIChsaW5rKSA9PiB7XG4gICAgICBsaW5rLm9uY2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgeyBocmVmIH0gPSBsaW5rO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKHsgdXJsOiBocmVmIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxubmV3IEFwcCgpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8vKiBjOCBpZ25vcmUgc3RhcnQgKi8vKiBlc2xpbnQtZGlzYWJsZSAqLztmdW5jdGlvbiBvb19jbSgpe3RyeXtyZXR1cm4gKDAsZXZhbCkoXCJnbG9iYWxUaGlzLl9jb25zb2xlX25pbmphXCIpIHx8ICgwLGV2YWwpKFwiLyogaHR0cHM6Ly9naXRodWIuY29tL3dhbGxhYnlqcy9jb25zb2xlLW5pbmphI2hvdy1kb2VzLWl0LXdvcmsgKi8ndXNlIHN0cmljdCc7dmFyIF8weDIxNjBkZT1fMHgyMWEzO2Z1bmN0aW9uIF8weDM2MzIoKXt2YXIgXzB4NTY5ODJmPVsnZGVmYXVsdCcsJ3NlbmQnLCclY1xcXFx4MjBDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGV4dGVuc2lvblxcXFx4MjBpc1xcXFx4MjBjb25uZWN0ZWRcXFxceDIwdG9cXFxceDIwJywnX0hUTUxBbGxDb2xsZWN0aW9uJywnZXhwcmVzc2lvbnNUb0V2YWx1YXRlJywnaG9zdCcsJycsJ3ZlcnNpb25zJywncGVyZl9ob29rcycsJ3Bvc2l0aXZlSW5maW5pdHknLCcxMjcuMC4wLjEnLCdzZXQnLCdfY29ubmVjdFRvSG9zdE5vdycsJ2Jvb2xlYW4nLCdfaXNBcnJheScsJ2dldE93blByb3BlcnR5TmFtZXMnLCdsb2dnZXJcXFxceDIwd2Vic29ja2V0XFxcXHgyMGVycm9yJywnZGF0ZScsJ19kYXRlVG9TdHJpbmcnLCdiaW5kJywnbG9jYXRpb24nLCc1MjY0MjU5MEpzTHJ6aScsJ1xcXFx4MjBzZXJ2ZXInLCdsb2cnLCcyNjYwMjUwR3BRbE51JywnZnVuY05hbWUnLCdjb3VudCcsJ2luY2x1ZGVzJywnZWRnZScsJ19hZGRMb2FkTm9kZScsJ21hdGNoJywnb25jbG9zZScsJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCcsJ2h0dHBzOi8vdGlueXVybC5jb20vMzd4OGI3OXQnLCdvbm1lc3NhZ2UnLCdyb290RXhwcmVzc2lvbicsJ25vZGUnLCdsb2dnZXJcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdCxcXFxceDIwc2VlXFxcXHgyMCcsJ19jYXBJZlN0cmluZycsJ19vYmplY3RUb1N0cmluZycsJ2NvbmNhdCcsJ19wX25hbWUnLCduZXh0LmpzJywnb25lcnJvcicsJ3VuZGVmaW5lZCcsJ25lZ2F0aXZlSW5maW5pdHknLCd0b0xvd2VyQ2FzZScsJ19zZXROb2RlRXhwcmVzc2lvblBhdGgnLCdzbGljZScsJ21lc3NhZ2UnLCdhc3RybycsJ19jb25uZWN0ZWQnLCd0b1VwcGVyQ2FzZScsJ2NhdGNoJywnYmFja2dyb3VuZDpcXFxceDIwcmdiKDMwLDMwLDMwKTtcXFxceDIwY29sb3I6XFxcXHgyMHJnYigyNTUsMjEzLDkyKScsJ2ZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3Q6XFxcXHgyMCcsJ19xdW90ZWRSZWdFeHAnLCd1bmtub3duJywndW5zaGlmdCcsJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50JywnX3R5cGUnLCcyNzkzUk15a2ZnJywnc3RyaW5naWZ5JywnY3VycmVudCcsJ2hhc093blByb3BlcnR5Jywnd2VicGFjaycsJ19nZXRPd25Qcm9wZXJ0eVN5bWJvbHMnLCdpc0V4cHJlc3Npb25Ub0V2YWx1YXRlJywndGhlbicsJ19nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCd1bnJlZicsJ19pc1NldCcsJ29ub3BlbicsJ19oYXNNYXBPbkl0c1BhdGgnLCdoaXRzJywnX2lzVW5kZWZpbmVkJywnX2hhc1N5bWJvbFByb3BlcnR5T25JdHNQYXRoJywndmFsdWVPZicsJ3BvcCcsJzI1NzA4MTRYSHZQYWknLCdhdXRvRXhwYW5kTWF4RGVwdGgnLCdudWxsJywnX3Byb3BlcnR5TmFtZScsJ1tvYmplY3RcXFxceDIwRGF0ZV0nLCdwcm9jZXNzJywndG90YWxTdHJMZW5ndGgnLCdjYXBwZWRFbGVtZW50cycsJ3NldHRlcicsW1xcXCJsb2NhbGhvc3RcXFwiLFxcXCIxMjcuMC4wLjFcXFwiLFxcXCJleGFtcGxlLmN5cHJlc3MuaW9cXFwiLFxcXCJNYWNCb29rUHJvXFxcIixcXFwiMTkyLjE2OC4wLjE5NlxcXCJdLCdfYWxsb3dlZFRvU2VuZCcsJ3BvcnQnLCdmb3JFYWNoJywnUmVnRXhwJywnd3M6Ly8nLCdfcmVnRXhwVG9TdHJpbmcnLCdyb290X2V4cF9pZCcsJ3JlbWl4JywnX25pbmphSWdub3JlTmV4dEVycm9yJywnZnVuY3Rpb24nLCdbb2JqZWN0XFxcXHgyMFNldF0nLCdiaWdpbnQnLCdfaXNQcmltaXRpdmVUeXBlJywnMS4wLjAnLCdfV2ViU29ja2V0Q2xhc3MnLCd1cmwnLCdbb2JqZWN0XFxcXHgyME1hcF0nLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlc3RhcnRpbmdcXFxceDIwdGhlXFxcXHgyMHByb2Nlc3NcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ3Byb3RvdHlwZScsJ2dsb2JhbCcsJ2dldFdlYlNvY2tldENsYXNzJywnX3NvcnRQcm9wcycsJ1tvYmplY3RcXFxceDIwQXJyYXldJywnZWxhcHNlZCcsJ190cmVlTm9kZVByb3BlcnRpZXNCZWZvcmVGdWxsVmFsdWUnLCdvYmplY3QnLCdTdHJpbmcnLCdfaW5OZXh0RWRnZScsJ19hZGRQcm9wZXJ0eScsJ3NvcnRQcm9wcycsJ2V2ZW50UmVjZWl2ZWRDYWxsYmFjaycsJ29yaWdpbicsJ3B1c2gnLCdzdGFja1RyYWNlTGltaXQnLCdzeW1ib2wnLCdTZXQnLCdfY29ubmVjdEF0dGVtcHRDb3VudCcsJ25hbWUnLCd0b1N0cmluZycsJ19hZGRGdW5jdGlvbnNOb2RlJywnX2lzUHJpbWl0aXZlV3JhcHBlclR5cGUnLCdyZWR1Y2VMaW1pdHMnLCdfdHJlZU5vZGVQcm9wZXJ0aWVzQWZ0ZXJGdWxsVmFsdWUnLCdfc29ja2V0Jywnd2FybicsJ19oYXNTZXRPbkl0c1BhdGgnLCdfc2VuZEVycm9yTWVzc2FnZScsJ19udW1iZXJSZWdFeHAnLCdwcm9wcycsJ2luZGV4JywnYXV0b0V4cGFuZCcsJ1xcXFx4MjBicm93c2VyJywnX3NldE5vZGVMYWJlbCcsJ2NvbnN0cnVjdG9yJywncGF0aCcsJ19zZXROb2RlUGVybWlzc2lvbnMnLCdpbmRleE9mJywnc3Vic3RyJywnc3BsaXQnLCdhcmdzJywnX2NsZWFuTm9kZScsJ05FR0FUSVZFX0lORklOSVRZJywnX2FkZE9iamVjdFByb3BlcnR5JywndmFsdWUnLCdkaXNhYmxlZExvZycsJ25vRnVuY3Rpb25zJywncmVsb2FkJywncGFyZW50JywnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QnLCdfcHJvcGVydHknLCdnZXR0ZXInLCdfcHJvY2Vzc1RyZWVOb2RlUmVzdWx0JywncGFyc2UnLCdlbGVtZW50cycsJ3R5cGUnLCdfc2V0Tm9kZVF1ZXJ5UGF0aCcsJ2RlcHRoJywnZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGZpbmRcXFxceDIwYW5kXFxcXHgyMGxvYWRcXFxceDIwV2ViU29ja2V0JywnMTI1MzIwcGtpYmtIJywnMTczMTk2NDIwMzIxMycsJ25vdycsJ2pvaW4nLCdhcnJheScsJ3BlcmZvcm1hbmNlJywnY2FsbCcsJ2RvY2tlcml6ZWRBcHAnLCdmcm9tQ2hhckNvZGUnLCdkYXRhJywnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywnX2FkZGl0aW9uYWxNZXRhZGF0YScsJ251bWJlcicsJ19TeW1ib2wnLCdOdW1iZXInLCdnZXQnLCdfcmVjb25uZWN0VGltZW91dCcsJ3BhdGhUb0ZpbGVVUkwnLCdzdHJMZW5ndGgnLCcxMEFmZ25lQycsJ2NhcHBlZFByb3BzJywnQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwc2VuZFxcXFx4MjBsb2dzLFxcXFx4MjByZWZyZXNoaW5nXFxcXHgyMHRoZVxcXFx4MjBwYWdlXFxcXHgyMG1heVxcXFx4MjBoZWxwO1xcXFx4MjBhbHNvXFxcXHgyMHNlZVxcXFx4MjAnLCdzdHJpbmcnLCdfX2VzJysnTW9kdWxlJywnbGVuZ3RoJywnQm9vbGVhbicsJ19pc05lZ2F0aXZlWmVybycsJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJywnLi4uJywncmVwbGFjZScsJzExMTR0cGtub3UnLCd0aW1lJywnX3NldE5vZGVJZCcsJ2hydGltZScsJ01hcCcsJ19jb25zb2xlX25pbmphX3Nlc3Npb24nLCdCdWZmZXInLCduZWdhdGl2ZVplcm8nLCdfY29uc29sZV9uaW5qYScsJ2F1dG9FeHBhbmRMaW1pdCcsJ19hdHRlbXB0VG9SZWNvbm5lY3RTaG9ydGx5JywnX2FsbG93ZWRUb0Nvbm5lY3RPblNlbmQnLCdfYmxhY2tsaXN0ZWRQcm9wZXJ0eScsJzEnLCdhbmd1bGFyJywnY29uc29sZScsJzczNzQ0NTZzQ0JHZW4nLCdnYXRld2F5LmRvY2tlci5pbnRlcm5hbCcsJ0hUTUxBbGxDb2xsZWN0aW9uJywnbmFuJywnJywnaG9zdG5hbWUnLCdleHBJZCcsJ2NyZWF0ZScsJ2NhcHBlZCcsJ3NlcmlhbGl6ZScsJ3N0YWNrJywnX3dzJywnX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnLCdfcF8nLCdORVhUX1JVTlRJTUUnLCdpc0FycmF5JywnZW5kc1dpdGgnLCdfY29ubmVjdGluZycsJ2RlZmluZVByb3BlcnR5JywnX3VuZGVmaW5lZCcsJ2F1dG9FeHBhbmRQcmV2aW91c09iamVjdHMnLCcxNjFrQUlHT2UnLFxcXCIvVXNlcnMvbWFjLy52c2NvZGUvZXh0ZW5zaW9ucy93YWxsYWJ5anMuY29uc29sZS1uaW5qYS0xLjAuMzY5L25vZGVfbW9kdWxlc1xcXCIsJ25vZGVNb2R1bGVzJywnX1dlYlNvY2tldCcsJ2VudicsJ3Rlc3QnLCd0cmFjZScsJ2xldmVsJywnbWV0aG9kJywnX2luQnJvd3NlcicsJ2Vycm9yJywnX2Rpc3Bvc2VXZWJzb2NrZXQnLCdfaXNNYXAnLCc0OTU2NDg5UXFxdnhUJywnYWxsU3RyTGVuZ3RoJywnW29iamVjdFxcXFx4MjBCaWdJbnRdJywnX2dldE93blByb3BlcnR5TmFtZXMnLCdyZXNvbHZlR2V0dGVycycsJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J107XzB4MzYzMj1mdW5jdGlvbigpe3JldHVybiBfMHg1Njk4MmY7fTtyZXR1cm4gXzB4MzYzMigpO30oZnVuY3Rpb24oXzB4NGMzMDI0LF8weDI3ZWIyMyl7dmFyIF8weDQ3ZTdmZj1fMHgyMWEzLF8weDQ4MTc5Mj1fMHg0YzMwMjQoKTt3aGlsZSghIVtdKXt0cnl7dmFyIF8weDIyNGFiMz0tcGFyc2VJbnQoXzB4NDdlN2ZmKDB4MWJhKSkvMHgxKihwYXJzZUludChfMHg0N2U3ZmYoMHgxNDUpKS8weDIpK3BhcnNlSW50KF8weDQ3ZTdmZigweDFjYykpLzB4MystcGFyc2VJbnQoXzB4NDdlN2ZmKDB4MTU1KSkvMHg0K3BhcnNlSW50KF8weDQ3ZTdmZigweDEzYSkpLzB4NSooLXBhcnNlSW50KF8weDQ3ZTdmZigweDE5NSkpLzB4NikrcGFyc2VJbnQoXzB4NDdlN2ZmKDB4MTZhKSkvMHg3KigtcGFyc2VJbnQoXzB4NDdlN2ZmKDB4MTI3KSkvMHg4KSstcGFyc2VJbnQoXzB4NDdlN2ZmKDB4MTc3KSkvMHg5K3BhcnNlSW50KF8weDQ3ZTdmZigweDE5MikpLzB4YTtpZihfMHgyMjRhYjM9PT1fMHgyN2ViMjMpYnJlYWs7ZWxzZSBfMHg0ODE3OTJbJ3B1c2gnXShfMHg0ODE3OTJbJ3NoaWZ0J10oKSk7fWNhdGNoKF8weDI4MDlmMCl7XzB4NDgxNzkyWydwdXNoJ10oXzB4NDgxNzkyWydzaGlmdCddKCkpO319fShfMHgzNjMyLDB4ZTE5ZDQpKTt2YXIgSz1PYmplY3RbXzB4MjE2MGRlKDB4MTVjKV0sUT1PYmplY3RbXzB4MjE2MGRlKDB4MTY3KV0sRz1PYmplY3RbJ2dldE93blByb3BlcnR5RGVzY3JpcHRvciddLGVlPU9iamVjdFtfMHgyMTYwZGUoMHgxOGMpXSx0ZT1PYmplY3RbJ2dldFByb3RvdHlwZU9mJ10sbmU9T2JqZWN0Wydwcm90b3R5cGUnXVtfMHgyMTYwZGUoMHgxYmQpXSxyZT0oXzB4YjYwZTZjLF8weDI3MjNhNyxfMHg1MGE0OGIsXzB4MjQzNTkyKT0+e3ZhciBfMHhhNzZjND1fMHgyMTYwZGU7aWYoXzB4MjcyM2E3JiZ0eXBlb2YgXzB4MjcyM2E3PT1fMHhhNzZjNCgweGYyKXx8dHlwZW9mIF8weDI3MjNhNz09XzB4YTc2YzQoMHgxZGYpKXtmb3IobGV0IF8weGI5Zjg2MyBvZiBlZShfMHgyNzIzYTcpKSFuZVtfMHhhNzZjNCgweDEyZCldKF8weGI2MGU2YyxfMHhiOWY4NjMpJiZfMHhiOWY4NjMhPT1fMHg1MGE0OGImJlEoXzB4YjYwZTZjLF8weGI5Zjg2Myx7J2dldCc6KCk9Pl8weDI3MjNhN1tfMHhiOWY4NjNdLCdlbnVtZXJhYmxlJzohKF8weDI0MzU5Mj1HKF8weDI3MjNhNyxfMHhiOWY4NjMpKXx8XzB4MjQzNTkyWydlbnVtZXJhYmxlJ119KTt9cmV0dXJuIF8weGI2MGU2Yzt9LFY9KF8weDhjMmFiOCxfMHg0NjhjMWIsXzB4MTRlNTEzKT0+KF8weDE0ZTUxMz1fMHg4YzJhYjghPW51bGw/Syh0ZShfMHg4YzJhYjgpKTp7fSxyZShfMHg0NjhjMWJ8fCFfMHg4YzJhYjh8fCFfMHg4YzJhYjhbXzB4MjE2MGRlKDB4MTNlKV0/UShfMHgxNGU1MTMsXzB4MjE2MGRlKDB4MTdkKSx7J3ZhbHVlJzpfMHg4YzJhYjgsJ2VudW1lcmFibGUnOiEweDB9KTpfMHgxNGU1MTMsXzB4OGMyYWI4KSksWj1jbGFzc3tjb25zdHJ1Y3RvcihfMHgxZDJlMjMsXzB4ZGFiNjBlLF8weDQwZTk0YyxfMHgxNDJlYjEsXzB4MjE0MWRiLF8weGEyMDVmOSl7dmFyIF8weDVjY2VkND1fMHgyMTYwZGUsXzB4NWMxMDhjLF8weDJhMDNkYyxfMHgxODRlNDMsXzB4M2JkMmU5O3RoaXNbJ2dsb2JhbCddPV8weDFkMmUyMyx0aGlzW18weDVjY2VkNCgweDE4MildPV8weGRhYjYwZSx0aGlzW18weDVjY2VkNCgweDFkNyldPV8weDQwZTk0Yyx0aGlzWydub2RlTW9kdWxlcyddPV8weDE0MmViMSx0aGlzW18weDVjY2VkNCgweDEyZSldPV8weDIxNDFkYix0aGlzWydldmVudFJlY2VpdmVkQ2FsbGJhY2snXT1fMHhhMjA1ZjksdGhpc1tfMHg1Y2NlZDQoMHgxZDYpXT0hMHgwLHRoaXNbXzB4NWNjZWQ0KDB4MTUwKV09ITB4MCx0aGlzW18weDVjY2VkNCgweDFiMCldPSEweDEsdGhpc1tfMHg1Y2NlZDQoMHgxNjYpXT0hMHgxLHRoaXNbXzB4NWNjZWQ0KDB4ZjQpXT0oKF8weDJhMDNkYz0oXzB4NWMxMDhjPV8weDFkMmUyM1tfMHg1Y2NlZDQoMHgxZDEpXSk9PW51bGw/dm9pZCAweDA6XzB4NWMxMDhjW18weDVjY2VkNCgweDE2ZSldKT09bnVsbD92b2lkIDB4MDpfMHgyYTAzZGNbXzB4NWNjZWQ0KDB4MTYzKV0pPT09XzB4NWNjZWQ0KDB4MTk5KSx0aGlzW18weDVjY2VkNCgweDE3MyldPSEoKF8weDNiZDJlOT0oXzB4MTg0ZTQzPXRoaXNbXzB4NWNjZWQ0KDB4MWU5KV1bXzB4NWNjZWQ0KDB4MWQxKV0pPT1udWxsP3ZvaWQgMHgwOl8weDE4NGU0M1tfMHg1Y2NlZDQoMHgxODQpXSkhPW51bGwmJl8weDNiZDJlOVtfMHg1Y2NlZDQoMHgxYTEpXSkmJiF0aGlzW18weDVjY2VkNCgweGY0KV0sdGhpc1tfMHg1Y2NlZDQoMHgxZTQpXT1udWxsLHRoaXNbJ19jb25uZWN0QXR0ZW1wdENvdW50J109MHgwLHRoaXNbXzB4NWNjZWQ0KDB4MTdjKV09MHgxNCx0aGlzW18weDVjY2VkNCgweDE0MildPV8weDVjY2VkNCgweDE5ZSksdGhpc1tfMHg1Y2NlZDQoMHgxMDcpXT0odGhpc1tfMHg1Y2NlZDQoMHgxNzMpXT9fMHg1Y2NlZDQoMHgxM2MpOl8weDVjY2VkNCgweDFlNykpK3RoaXNbXzB4NWNjZWQ0KDB4MTQyKV07fWFzeW5jW18weDIxNjBkZSgweDFlYSldKCl7dmFyIF8weDEyOGE0OT1fMHgyMTYwZGUsXzB4M2JjNmNiLF8weDJjOTIwMDtpZih0aGlzWydfV2ViU29ja2V0Q2xhc3MnXSlyZXR1cm4gdGhpc1tfMHgxMjhhNDkoMHgxZTQpXTtsZXQgXzB4MWFkYjU3O2lmKHRoaXNbJ19pbkJyb3dzZXInXXx8dGhpc1snX2luTmV4dEVkZ2UnXSlfMHgxYWRiNTc9dGhpc1snZ2xvYmFsJ11bJ1dlYlNvY2tldCddO2Vsc2V7aWYoKF8weDNiYzZjYj10aGlzW18weDEyOGE0OSgweDFlOSldWydwcm9jZXNzJ10pIT1udWxsJiZfMHgzYmM2Y2JbXzB4MTI4YTQ5KDB4MTZkKV0pXzB4MWFkYjU3PShfMHgyYzkyMDA9dGhpc1tfMHgxMjhhNDkoMHgxZTkpXVtfMHgxMjhhNDkoMHgxZDEpXSk9PW51bGw/dm9pZCAweDA6XzB4MmM5MjAwW18weDEyOGE0OSgweDE2ZCldO2Vsc2UgdHJ5e2xldCBfMHgzMTI4M2U9YXdhaXQgaW1wb3J0KF8weDEyOGE0OSgweDEwZikpO18weDFhZGI1Nz0oYXdhaXQgaW1wb3J0KChhd2FpdCBpbXBvcnQoXzB4MTI4YTQ5KDB4MWU1KSkpW18weDEyOGE0OSgweDEzOCldKF8weDMxMjgzZVtfMHgxMjhhNDkoMHgxMmEpXSh0aGlzW18weDEyOGE0OSgweDE2YyldLCd3cy9pbmRleC5qcycpKVtfMHgxMjhhNDkoMHhmZildKCkpKVtfMHgxMjhhNDkoMHgxN2QpXTt9Y2F0Y2h7dHJ5e18weDFhZGI1Nz1yZXF1aXJlKHJlcXVpcmUoXzB4MTI4YTQ5KDB4MTBmKSlbXzB4MTI4YTQ5KDB4MTJhKV0odGhpc1snbm9kZU1vZHVsZXMnXSwnd3MnKSk7fWNhdGNoe3Rocm93IG5ldyBFcnJvcihfMHgxMjhhNDkoMHgxMjYpKTt9fX1yZXR1cm4gdGhpc1tfMHgxMjhhNDkoMHgxZTQpXT1fMHgxYWRiNTcsXzB4MWFkYjU3O31bXzB4MjE2MGRlKDB4MTg5KV0oKXt2YXIgXzB4M2VhNWY3PV8weDIxNjBkZTt0aGlzW18weDNlYTVmNygweDE2NildfHx0aGlzWydfY29ubmVjdGVkJ118fHRoaXNbXzB4M2VhNWY3KDB4ZmQpXT49dGhpc1tfMHgzZWE1ZjcoMHgxN2MpXXx8KHRoaXNbXzB4M2VhNWY3KDB4MTUwKV09ITB4MSx0aGlzW18weDNlYTVmNygweDE2NildPSEweDAsdGhpc1tfMHgzZWE1ZjcoMHhmZCldKyssdGhpc1tfMHgzZWE1ZjcoMHgxNjApXT1uZXcgUHJvbWlzZSgoXzB4MWNkZmU2LF8weDM5MzA3Nik9Pnt2YXIgXzB4MzI5MzI4PV8weDNlYTVmNzt0aGlzW18weDMyOTMyOCgweDFlYSldKClbJ3RoZW4nXShfMHg1OWVjNTQ9Pnt2YXIgXzB4MWViZmQ5PV8weDMyOTMyODtsZXQgXzB4NWE1YjE3PW5ldyBfMHg1OWVjNTQoXzB4MWViZmQ5KDB4MWRhKSsoIXRoaXNbJ19pbkJyb3dzZXInXSYmdGhpc1tfMHgxZWJmZDkoMHgxMmUpXT9fMHgxZWJmZDkoMHgxNTYpOnRoaXNbJ2hvc3QnXSkrJzonK3RoaXNbXzB4MWViZmQ5KDB4MWQ3KV0pO18weDVhNWIxN1snb25lcnJvciddPSgpPT57dmFyIF8weDVlOGQ2MD1fMHgxZWJmZDk7dGhpc1tfMHg1ZThkNjAoMHgxZDYpXT0hMHgxLHRoaXNbXzB4NWU4ZDYwKDB4MTc1KV0oXzB4NWE1YjE3KSx0aGlzW18weDVlOGQ2MCgweDE0ZildKCksXzB4MzkzMDc2KG5ldyBFcnJvcihfMHg1ZThkNjAoMHgxOGQpKSk7fSxfMHg1YTViMTdbJ29ub3BlbiddPSgpPT57dmFyIF8weGJkMzhhMj1fMHgxZWJmZDk7dGhpc1tfMHhiZDM4YTIoMHgxNzMpXXx8XzB4NWE1YjE3W18weGJkMzhhMigweDEwNCldJiZfMHg1YTViMTdbXzB4YmQzOGEyKDB4MTA0KV1bJ3VucmVmJ10mJl8weDVhNWIxN1tfMHhiZDM4YTIoMHgxMDQpXVtfMHhiZDM4YTIoMHgxYzMpXSgpLF8weDFjZGZlNihfMHg1YTViMTcpO30sXzB4NWE1YjE3W18weDFlYmZkOSgweDE5YyldPSgpPT57dmFyIF8weDI5NTI3OT1fMHgxZWJmZDk7dGhpc1tfMHgyOTUyNzkoMHgxNTApXT0hMHgwLHRoaXNbXzB4Mjk1Mjc5KDB4MTc1KV0oXzB4NWE1YjE3KSx0aGlzWydfYXR0ZW1wdFRvUmVjb25uZWN0U2hvcnRseSddKCk7fSxfMHg1YTViMTdbXzB4MWViZmQ5KDB4MTlmKV09XzB4NDc4MzIxPT57dmFyIF8weDIxMDM1Nj1fMHgxZWJmZDk7dHJ5e2lmKCEoXzB4NDc4MzIxIT1udWxsJiZfMHg0NzgzMjFbJ2RhdGEnXSl8fCF0aGlzW18weDIxMDM1NigweGY3KV0pcmV0dXJuO2xldCBfMHgyMzExN2Q9SlNPTltfMHgyMTAzNTYoMHgxMjEpXShfMHg0NzgzMjFbXzB4MjEwMzU2KDB4MTMwKV0pO3RoaXNbXzB4MjEwMzU2KDB4ZjcpXShfMHgyMzExN2RbXzB4MjEwMzU2KDB4MTcyKV0sXzB4MjMxMTdkW18weDIxMDM1NigweDExNCldLHRoaXNbXzB4MjEwMzU2KDB4MWU5KV0sdGhpc1tfMHgyMTAzNTYoMHgxNzMpXSk7fWNhdGNoe319O30pW18weDMyOTMyOCgweDFjMSldKF8weDE3MDFkOT0+KHRoaXNbXzB4MzI5MzI4KDB4MWIwKV09ITB4MCx0aGlzWydfY29ubmVjdGluZyddPSEweDEsdGhpc1snX2FsbG93ZWRUb0Nvbm5lY3RPblNlbmQnXT0hMHgxLHRoaXNbXzB4MzI5MzI4KDB4MWQ2KV09ITB4MCx0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPTB4MCxfMHgxNzAxZDkpKVtfMHgzMjkzMjgoMHgxYjIpXShfMHgxYzg4YjA9Pih0aGlzW18weDMyOTMyOCgweDFiMCldPSEweDEsdGhpc1snX2Nvbm5lY3RpbmcnXT0hMHgxLGNvbnNvbGVbXzB4MzI5MzI4KDB4MTA1KV0oXzB4MzI5MzI4KDB4MWEyKSt0aGlzWydfd2ViU29ja2V0RXJyb3JEb2NzTGluayddKSxfMHgzOTMwNzYobmV3IEVycm9yKF8weDMyOTMyOCgweDFiNCkrKF8weDFjODhiMCYmXzB4MWM4OGIwWydtZXNzYWdlJ10pKSkpKTt9KSk7fVtfMHgyMTYwZGUoMHgxNzUpXShfMHgzZGI1MTMpe3ZhciBfMHgzNjgyNGQ9XzB4MjE2MGRlO3RoaXNbXzB4MzY4MjRkKDB4MWIwKV09ITB4MSx0aGlzW18weDM2ODI0ZCgweDE2NildPSEweDE7dHJ5e18weDNkYjUxM1tfMHgzNjgyNGQoMHgxOWMpXT1udWxsLF8weDNkYjUxM1tfMHgzNjgyNGQoMHgxYTgpXT1udWxsLF8weDNkYjUxM1tfMHgzNjgyNGQoMHgxYzUpXT1udWxsO31jYXRjaHt9dHJ5e18weDNkYjUxM1sncmVhZHlTdGF0ZSddPDB4MiYmXzB4M2RiNTEzWydjbG9zZSddKCk7fWNhdGNoe319W18weDIxNjBkZSgweDE0ZildKCl7dmFyIF8weDZiY2I5ZD1fMHgyMTYwZGU7Y2xlYXJUaW1lb3V0KHRoaXNbXzB4NmJjYjlkKDB4MTM3KV0pLCEodGhpc1tfMHg2YmNiOWQoMHhmZCldPj10aGlzW18weDZiY2I5ZCgweDE3YyldKSYmKHRoaXNbXzB4NmJjYjlkKDB4MTM3KV09c2V0VGltZW91dCgoKT0+e3ZhciBfMHg1NzdkYjk9XzB4NmJjYjlkLF8weDVjYmFhNjt0aGlzW18weDU3N2RiOSgweDFiMCldfHx0aGlzW18weDU3N2RiOSgweDE2NildfHwodGhpc1snX2Nvbm5lY3RUb0hvc3ROb3cnXSgpLChfMHg1Y2JhYTY9dGhpc1snX3dzJ10pPT1udWxsfHxfMHg1Y2JhYTZbXzB4NTc3ZGI5KDB4MWIyKV0oKCk9PnRoaXNbXzB4NTc3ZGI5KDB4MTRmKV0oKSkpO30sMHgxZjQpLHRoaXNbXzB4NmJjYjlkKDB4MTM3KV1bXzB4NmJjYjlkKDB4MWMzKV0mJnRoaXNbXzB4NmJjYjlkKDB4MTM3KV1bXzB4NmJjYjlkKDB4MWMzKV0oKSk7fWFzeW5jW18weDIxNjBkZSgweDE3ZSldKF8weDEyYjc5Nil7dmFyIF8weDIyMzI3Yz1fMHgyMTYwZGU7dHJ5e2lmKCF0aGlzW18weDIyMzI3YygweDFkNildKXJldHVybjt0aGlzW18weDIyMzI3YygweDE1MCldJiZ0aGlzWydfY29ubmVjdFRvSG9zdE5vdyddKCksKGF3YWl0IHRoaXNbXzB4MjIzMjdjKDB4MTYwKV0pW18weDIyMzI3YygweDE3ZSldKEpTT05bJ3N0cmluZ2lmeSddKF8weDEyYjc5NikpO31jYXRjaChfMHg1NzMzN2Epe2NvbnNvbGVbXzB4MjIzMjdjKDB4MTA1KV0odGhpc1tfMHgyMjMyN2MoMHgxMDcpXSsnOlxcXFx4MjAnKyhfMHg1NzMzN2EmJl8weDU3MzM3YVsnbWVzc2FnZSddKSksdGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgxLHRoaXNbXzB4MjIzMjdjKDB4MTRmKV0oKTt9fX07ZnVuY3Rpb24gcShfMHgxZjk2M2IsXzB4MjYzMzIyLF8weDNmMWIzOCxfMHg0M2M4Y2QsXzB4ZjYwNjdkLF8weGYzZTc5LF8weDQ3MzgyNixfMHg1MDRlZTQ9aWUpe3ZhciBfMHg2NTA0MGI9XzB4MjE2MGRlO2xldCBfMHg1ZTMzY2I9XzB4M2YxYjM4W18weDY1MDQwYigweDExMyldKCcsJylbJ21hcCddKF8weDU3N2U2ND0+e3ZhciBfMHg1Y2ZlYWI9XzB4NjUwNDBiLF8weDFlZWViMCxfMHg1YmVmY2YsXzB4MmVkNDkwLF8weDQ1MTMzMjt0cnl7aWYoIV8weDFmOTYzYltfMHg1Y2ZlYWIoMHgxNGEpXSl7bGV0IF8weDIxMzUwMz0oKF8weDViZWZjZj0oXzB4MWVlZWIwPV8weDFmOTYzYlsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgxZWVlYjBbXzB4NWNmZWFiKDB4MTg0KV0pPT1udWxsP3ZvaWQgMHgwOl8weDViZWZjZltfMHg1Y2ZlYWIoMHgxYTEpXSl8fCgoXzB4NDUxMzMyPShfMHgyZWQ0OTA9XzB4MWY5NjNiW18weDVjZmVhYigweDFkMSldKT09bnVsbD92b2lkIDB4MDpfMHgyZWQ0OTBbXzB4NWNmZWFiKDB4MTZlKV0pPT1udWxsP3ZvaWQgMHgwOl8weDQ1MTMzMltfMHg1Y2ZlYWIoMHgxNjMpXSk9PT1fMHg1Y2ZlYWIoMHgxOTkpOyhfMHhmNjA2N2Q9PT1fMHg1Y2ZlYWIoMHgxYTcpfHxfMHhmNjA2N2Q9PT1fMHg1Y2ZlYWIoMHgxZGQpfHxfMHhmNjA2N2Q9PT1fMHg1Y2ZlYWIoMHgxYWYpfHxfMHhmNjA2N2Q9PT1fMHg1Y2ZlYWIoMHgxNTMpKSYmKF8weGY2MDY3ZCs9XzB4MjEzNTAzP18weDVjZmVhYigweDE5Myk6XzB4NWNmZWFiKDB4MTBjKSksXzB4MWY5NjNiW18weDVjZmVhYigweDE0YSldPXsnaWQnOituZXcgRGF0ZSgpLCd0b29sJzpfMHhmNjA2N2R9LF8weDQ3MzgyNiYmXzB4ZjYwNjdkJiYhXzB4MjEzNTAzJiZjb25zb2xlW18weDVjZmVhYigweDE5NCldKF8weDVjZmVhYigweDE3ZikrKF8weGY2MDY3ZFsnY2hhckF0J10oMHgwKVtfMHg1Y2ZlYWIoMHgxYjEpXSgpK18weGY2MDY3ZFsnc3Vic3RyJ10oMHgxKSkrJywnLF8weDVjZmVhYigweDFiMyksJ3NlZVxcXFx4MjBodHRwczovL3Rpbnl1cmwuY29tLzJ2dDhqeHp3XFxcXHgyMGZvclxcXFx4MjBtb3JlXFxcXHgyMGluZm8uJyk7fWxldCBfMHg4MGI4MzU9bmV3IFooXzB4MWY5NjNiLF8weDI2MzMyMixfMHg1NzdlNjQsXzB4NDNjOGNkLF8weGYzZTc5LF8weDUwNGVlNCk7cmV0dXJuIF8weDgwYjgzNVtfMHg1Y2ZlYWIoMHgxN2UpXVtfMHg1Y2ZlYWIoMHgxOTApXShfMHg4MGI4MzUpO31jYXRjaChfMHgxY2IwMjQpe3JldHVybiBjb25zb2xlW18weDVjZmVhYigweDEwNSldKF8weDVjZmVhYigweDExZCksXzB4MWNiMDI0JiZfMHgxY2IwMjRbJ21lc3NhZ2UnXSksKCk9Pnt9O319KTtyZXR1cm4gXzB4MTgzZDExPT5fMHg1ZTMzY2JbXzB4NjUwNDBiKDB4MWQ4KV0oXzB4NDA0YjRmPT5fMHg0MDRiNGYoXzB4MTgzZDExKSk7fWZ1bmN0aW9uIGllKF8weDVhNWQ2ZSxfMHgzYWI1OTQsXzB4M2QzOTllLF8weDMwOTE2OSl7dmFyIF8weDJiMDIxND1fMHgyMTYwZGU7XzB4MzA5MTY5JiZfMHg1YTVkNmU9PT1fMHgyYjAyMTQoMHgxMWIpJiZfMHgzZDM5OWVbXzB4MmIwMjE0KDB4MTkxKV1bXzB4MmIwMjE0KDB4MTFiKV0oKTt9ZnVuY3Rpb24gXzB4MjFhMyhfMHgzYzRmZDcsXzB4MjQ1YWJlKXt2YXIgXzB4MzYzMmM4PV8weDM2MzIoKTtyZXR1cm4gXzB4MjFhMz1mdW5jdGlvbihfMHgyMWEzZDEsXzB4MjRkMmRlKXtfMHgyMWEzZDE9XzB4MjFhM2QxLTB4ZWU7dmFyIF8weDM0MDZmNT1fMHgzNjMyYzhbXzB4MjFhM2QxXTtyZXR1cm4gXzB4MzQwNmY1O30sXzB4MjFhMyhfMHgzYzRmZDcsXzB4MjQ1YWJlKTt9ZnVuY3Rpb24gQihfMHg0NzlhZGUpe3ZhciBfMHg1NWU0YjY9XzB4MjE2MGRlLF8weDFkYjZkZixfMHgyNjc1ZmM7bGV0IF8weDI1M2U4Mz1mdW5jdGlvbihfMHg0NjFjYixfMHg1MWFlZjcpe3JldHVybiBfMHg1MWFlZjctXzB4NDYxY2I7fSxfMHgyNDY0OGI7aWYoXzB4NDc5YWRlW18weDU1ZTRiNigweDEyYyldKV8weDI0NjQ4Yj1mdW5jdGlvbigpe3ZhciBfMHgyOGM0Mjg9XzB4NTVlNGI2O3JldHVybiBfMHg0NzlhZGVbXzB4MjhjNDI4KDB4MTJjKV1bXzB4MjhjNDI4KDB4MTI5KV0oKTt9O2Vsc2V7aWYoXzB4NDc5YWRlW18weDU1ZTRiNigweDFkMSldJiZfMHg0NzlhZGVbXzB4NTVlNGI2KDB4MWQxKV1bXzB4NTVlNGI2KDB4MTQ4KV0mJigoXzB4MjY3NWZjPShfMHgxZGI2ZGY9XzB4NDc5YWRlWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDFkYjZkZltfMHg1NWU0YjYoMHgxNmUpXSk9PW51bGw/dm9pZCAweDA6XzB4MjY3NWZjW18weDU1ZTRiNigweDE2MyldKSE9PV8weDU1ZTRiNigweDE5OSkpXzB4MjQ2NDhiPWZ1bmN0aW9uKCl7dmFyIF8weDQ0ZGNjND1fMHg1NWU0YjY7cmV0dXJuIF8weDQ3OWFkZVtfMHg0NGRjYzQoMHgxZDEpXVtfMHg0NGRjYzQoMHgxNDgpXSgpO30sXzB4MjUzZTgzPWZ1bmN0aW9uKF8weDFlMTFjNSxfMHhhMzdkNTQpe3JldHVybiAweDNlOCooXzB4YTM3ZDU0WzB4MF0tXzB4MWUxMWM1WzB4MF0pKyhfMHhhMzdkNTRbMHgxXS1fMHgxZTExYzVbMHgxXSkvMHhmNDI0MDt9O2Vsc2UgdHJ5e2xldCB7cGVyZm9ybWFuY2U6XzB4NTY4ZmQ2fT1yZXF1aXJlKF8weDU1ZTRiNigweDE4NSkpO18weDI0NjQ4Yj1mdW5jdGlvbigpe3ZhciBfMHg1ZjU3ZWQ9XzB4NTVlNGI2O3JldHVybiBfMHg1NjhmZDZbXzB4NWY1N2VkKDB4MTI5KV0oKTt9O31jYXRjaHtfMHgyNDY0OGI9ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGUoKTt9O319cmV0dXJueydlbGFwc2VkJzpfMHgyNTNlODMsJ3RpbWVTdGFtcCc6XzB4MjQ2NDhiLCdub3cnOigpPT5EYXRlWydub3cnXSgpfTt9ZnVuY3Rpb24gSChfMHgxMGRjY2IsXzB4MWU4MGFmLF8weDM1MjE3NCl7dmFyIF8weDQ5OTdhYz1fMHgyMTYwZGUsXzB4NWIxYmEyLF8weDExZjljMCxfMHgyN2FjOTMsXzB4MzZiN2FmLF8weDJiNDg3MTtpZihfMHgxMGRjY2JbXzB4NDk5N2FjKDB4MTlkKV0hPT12b2lkIDB4MClyZXR1cm4gXzB4MTBkY2NiWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXTtsZXQgXzB4MzkyYjYzPSgoXzB4MTFmOWMwPShfMHg1YjFiYTI9XzB4MTBkY2NiW18weDQ5OTdhYygweDFkMSldKT09bnVsbD92b2lkIDB4MDpfMHg1YjFiYTJbXzB4NDk5N2FjKDB4MTg0KV0pPT1udWxsP3ZvaWQgMHgwOl8weDExZjljMFtfMHg0OTk3YWMoMHgxYTEpXSl8fCgoXzB4MzZiN2FmPShfMHgyN2FjOTM9XzB4MTBkY2NiW18weDQ5OTdhYygweDFkMSldKT09bnVsbD92b2lkIDB4MDpfMHgyN2FjOTNbJ2VudiddKT09bnVsbD92b2lkIDB4MDpfMHgzNmI3YWZbJ05FWFRfUlVOVElNRSddKT09PV8weDQ5OTdhYygweDE5OSk7ZnVuY3Rpb24gXzB4MmQ4ZTAyKF8weDE1NDRkYil7dmFyIF8weDM2ZGJkYT1fMHg0OTk3YWM7aWYoXzB4MTU0NGRiWydzdGFydHNXaXRoJ10oJy8nKSYmXzB4MTU0NGRiW18weDM2ZGJkYSgweDE2NSldKCcvJykpe2xldCBfMHg0OTc0ZmI9bmV3IFJlZ0V4cChfMHgxNTQ0ZGJbXzB4MzZkYmRhKDB4MWFkKV0oMHgxLC0weDEpKTtyZXR1cm4gXzB4MTQwMWQzPT5fMHg0OTc0ZmJbXzB4MzZkYmRhKDB4MTZmKV0oXzB4MTQwMWQzKTt9ZWxzZXtpZihfMHgxNTQ0ZGJbXzB4MzZkYmRhKDB4MTk4KV0oJyonKXx8XzB4MTU0NGRiW18weDM2ZGJkYSgweDE5OCldKCc/Jykpe2xldCBfMHgyY2IzYjk9bmV3IFJlZ0V4cCgnXicrXzB4MTU0NGRiW18weDM2ZGJkYSgweDE0NCldKC9cXFxcLi9nLFN0cmluZ1tfMHgzNmRiZGEoMHgxMmYpXSgweDVjKSsnLicpWydyZXBsYWNlJ10oL1xcXFwqL2csJy4qJylbJ3JlcGxhY2UnXSgvXFxcXD8vZywnLicpK1N0cmluZ1snZnJvbUNoYXJDb2RlJ10oMHgyNCkpO3JldHVybiBfMHgzMjBiOTc9Pl8weDJjYjNiOVtfMHgzNmRiZGEoMHgxNmYpXShfMHgzMjBiOTcpO31lbHNlIHJldHVybiBfMHgzZDc4NWI9Pl8weDNkNzg1Yj09PV8weDE1NDRkYjt9fWxldCBfMHgyYmRhNWE9XzB4MWU4MGFmWydtYXAnXShfMHgyZDhlMDIpO3JldHVybiBfMHgxMGRjY2JbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddPV8weDM5MmI2M3x8IV8weDFlODBhZiwhXzB4MTBkY2NiW18weDQ5OTdhYygweDE5ZCldJiYoKF8weDJiNDg3MT1fMHgxMGRjY2JbXzB4NDk5N2FjKDB4MTkxKV0pPT1udWxsP3ZvaWQgMHgwOl8weDJiNDg3MVtfMHg0OTk3YWMoMHgxNWEpXSkmJihfMHgxMGRjY2JbXzB4NDk5N2FjKDB4MTlkKV09XzB4MmJkYTVhWydzb21lJ10oXzB4NDVmZTYzPT5fMHg0NWZlNjMoXzB4MTBkY2NiW18weDQ5OTdhYygweDE5MSldW18weDQ5OTdhYygweDE1YSldKSkpLF8weDEwZGNjYltfMHg0OTk3YWMoMHgxOWQpXTt9ZnVuY3Rpb24gWChfMHgzZTc3YzAsXzB4MzY4NTAyLF8weDNkMmQ0YyxfMHgzOTFmYjQpe3ZhciBfMHgxNDRhNzk9XzB4MjE2MGRlO18weDNlNzdjMD1fMHgzZTc3YzAsXzB4MzY4NTAyPV8weDM2ODUwMixfMHgzZDJkNGM9XzB4M2QyZDRjLF8weDM5MWZiND1fMHgzOTFmYjQ7bGV0IF8weDgzYzc0Mz1CKF8weDNlNzdjMCksXzB4NDdhMzk1PV8weDgzYzc0M1tfMHgxNDRhNzkoMHhmMCldLF8weDI0ZDEzMD1fMHg4M2M3NDNbJ3RpbWVTdGFtcCddO2NsYXNzIF8weDRlMTM4Y3tjb25zdHJ1Y3Rvcigpe3ZhciBfMHg1MGRmMGY9XzB4MTQ0YTc5O3RoaXNbJ19rZXlTdHJSZWdFeHAnXT0vXig/ISg/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQpW18kYS16QS1aXFxcXHhBMC1cXFxcdUZGRkZdW18kYS16QS1aMC05XFxcXHhBMC1cXFxcdUZGRkZdKiQvLHRoaXNbXzB4NTBkZjBmKDB4MTA4KV09L14oMHxbMS05XVswLTldKikkLyx0aGlzW18weDUwZGYwZigweDFiNSldPS8nKFteXFxcXFxcXFwnXXxcXFxcXFxcXCcpKicvLHRoaXNbXzB4NTBkZjBmKDB4MTY4KV09XzB4M2U3N2MwW18weDUwZGYwZigweDFhOSldLHRoaXNbXzB4NTBkZjBmKDB4MTgwKV09XzB4M2U3N2MwW18weDUwZGYwZigweDE1NyldLHRoaXNbXzB4NTBkZjBmKDB4MWMyKV09T2JqZWN0W18weDUwZGYwZigweDEzMSldLHRoaXNbXzB4NTBkZjBmKDB4MTdhKV09T2JqZWN0W18weDUwZGYwZigweDE4YyldLHRoaXNbXzB4NTBkZjBmKDB4MTM0KV09XzB4M2U3N2MwWydTeW1ib2wnXSx0aGlzW18weDUwZGYwZigweDFkYildPVJlZ0V4cFtfMHg1MGRmMGYoMHgxZTgpXVsndG9TdHJpbmcnXSx0aGlzW18weDUwZGYwZigweDE4ZildPURhdGVbJ3Byb3RvdHlwZSddW18weDUwZGYwZigweGZmKV07fVtfMHgxNDRhNzkoMHgxNWUpXShfMHg1NDE2ZDcsXzB4MTE2MDEyLF8weDQwNjRlLF8weDVkMjQ5YSl7dmFyIF8weDI3NjgyMj1fMHgxNDRhNzksXzB4NDllNmQ1PXRoaXMsXzB4NTdiN2FlPV8weDQwNjRlW18weDI3NjgyMigweDEwYildO2Z1bmN0aW9uIF8weDNiM2Y2YShfMHg1ZDY4YTAsXzB4NzkwMjkwLF8weDVkNjdhNyl7dmFyIF8weDM5NTA0Nj1fMHgyNzY4MjI7XzB4NzkwMjkwW18weDM5NTA0NigweDEyMyldPV8weDM5NTA0NigweDFiNiksXzB4NzkwMjkwW18weDM5NTA0NigweDE3NCldPV8weDVkNjhhMFtfMHgzOTUwNDYoMHgxYWUpXSxfMHgzZDcwZjg9XzB4NWQ2N2E3Wydub2RlJ11bXzB4Mzk1MDQ2KDB4MWJjKV0sXzB4NWQ2N2E3W18weDM5NTA0NigweDFhMSldW18weDM5NTA0NigweDFiYyldPV8weDc5MDI5MCxfMHg0OWU2ZDVbXzB4Mzk1MDQ2KDB4ZjEpXShfMHg3OTAyOTAsXzB4NWQ2N2E3KTt9dHJ5e18weDQwNjRlW18weDI3NjgyMigweDE3MSldKyssXzB4NDA2NGVbXzB4Mjc2ODIyKDB4MTBiKV0mJl8weDQwNjRlWydhdXRvRXhwYW5kUHJldmlvdXNPYmplY3RzJ11bXzB4Mjc2ODIyKDB4ZjkpXShfMHgxMTYwMTIpO3ZhciBfMHg0MDk4MDksXzB4NGIxMWQ2LF8weDRjNTE5YyxfMHg3NzExNmYsXzB4MjJiNWExPVtdLF8weDU5ODhiZD1bXSxfMHgzOWVlM2IsXzB4MjFkM2Y4PXRoaXNbJ190eXBlJ10oXzB4MTE2MDEyKSxfMHgyZDE1MDQ9XzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MTJiKSxfMHhiMzgxZGU9ITB4MSxfMHgyYWEwYTk9XzB4MjFkM2Y4PT09J2Z1bmN0aW9uJyxfMHgzZmRjOGE9dGhpc1tfMHgyNzY4MjIoMHgxZTIpXShfMHgyMWQzZjgpLF8weDI3OTVjNj10aGlzWydfaXNQcmltaXRpdmVXcmFwcGVyVHlwZSddKF8weDIxZDNmOCksXzB4NTk5NWJhPV8weDNmZGM4YXx8XzB4Mjc5NWM2LF8weDExMzRiND17fSxfMHgzZTYxN2I9MHgwLF8weDM0YjgzOD0hMHgxLF8weDNkNzBmOCxfMHg0NDgzOTI9L14oKFsxLTldezF9WzAtOV0qKXwwKSQvO2lmKF8weDQwNjRlW18weDI3NjgyMigweDEyNSldKXtpZihfMHgyZDE1MDQpe2lmKF8weDRiMTFkNj1fMHgxMTYwMTJbJ2xlbmd0aCddLF8weDRiMTFkNj5fMHg0MDY0ZVsnZWxlbWVudHMnXSl7Zm9yKF8weDRjNTE5Yz0weDAsXzB4NzcxMTZmPV8weDQwNjRlW18weDI3NjgyMigweDEyMildLF8weDQwOTgwOT1fMHg0YzUxOWM7XzB4NDA5ODA5PF8weDc3MTE2ZjtfMHg0MDk4MDkrKylfMHg1OTg4YmRbJ3B1c2gnXShfMHg0OWU2ZDVbXzB4Mjc2ODIyKDB4ZjUpXShfMHgyMmI1YTEsXzB4MTE2MDEyLF8weDIxZDNmOCxfMHg0MDk4MDksXzB4NDA2NGUpKTtfMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MWQzKV09ITB4MDt9ZWxzZXtmb3IoXzB4NGM1MTljPTB4MCxfMHg3NzExNmY9XzB4NGIxMWQ2LF8weDQwOTgwOT1fMHg0YzUxOWM7XzB4NDA5ODA5PF8weDc3MTE2ZjtfMHg0MDk4MDkrKylfMHg1OTg4YmRbXzB4Mjc2ODIyKDB4ZjkpXShfMHg0OWU2ZDVbXzB4Mjc2ODIyKDB4ZjUpXShfMHgyMmI1YTEsXzB4MTE2MDEyLF8weDIxZDNmOCxfMHg0MDk4MDksXzB4NDA2NGUpKTt9XzB4NDA2NGVbXzB4Mjc2ODIyKDB4MWI4KV0rPV8weDU5ODhiZFtfMHgyNzY4MjIoMHgxM2YpXTt9aWYoIShfMHgyMWQzZjg9PT1fMHgyNzY4MjIoMHgxY2UpfHxfMHgyMWQzZjg9PT0ndW5kZWZpbmVkJykmJiFfMHgzZmRjOGEmJl8weDIxZDNmOCE9PV8weDI3NjgyMigweGYzKSYmXzB4MjFkM2Y4IT09XzB4Mjc2ODIyKDB4MTRiKSYmXzB4MjFkM2Y4IT09XzB4Mjc2ODIyKDB4MWUxKSl7dmFyIF8weDViYmM1OT1fMHg1ZDI0OWFbXzB4Mjc2ODIyKDB4MTA5KV18fF8weDQwNjRlWydwcm9wcyddO2lmKHRoaXNbJ19pc1NldCddKF8weDExNjAxMik/KF8weDQwOTgwOT0weDAsXzB4MTE2MDEyW18weDI3NjgyMigweDFkOCldKGZ1bmN0aW9uKF8weDM3MDkyNil7dmFyIF8weDM3ZWIwZD1fMHgyNzY4MjI7aWYoXzB4M2U2MTdiKyssXzB4NDA2NGVbXzB4MzdlYjBkKDB4MWI4KV0rKyxfMHgzZTYxN2I+XzB4NWJiYzU5KXtfMHgzNGI4Mzg9ITB4MDtyZXR1cm47fWlmKCFfMHg0MDY0ZVtfMHgzN2ViMGQoMHgxYzApXSYmXzB4NDA2NGVbXzB4MzdlYjBkKDB4MTBiKV0mJl8weDQwNjRlWydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddPl8weDQwNjRlW18weDM3ZWIwZCgweDE0ZSldKXtfMHgzNGI4Mzg9ITB4MDtyZXR1cm47fV8weDU5ODhiZFsncHVzaCddKF8weDQ5ZTZkNVsnX2FkZFByb3BlcnR5J10oXzB4MjJiNWExLF8weDExNjAxMixfMHgzN2ViMGQoMHhmYyksXzB4NDA5ODA5KyssXzB4NDA2NGUsZnVuY3Rpb24oXzB4MWIwMTBhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gXzB4MWIwMTBhO307fShfMHgzNzA5MjYpKSk7fSkpOnRoaXNbXzB4Mjc2ODIyKDB4MTc2KV0oXzB4MTE2MDEyKSYmXzB4MTE2MDEyWydmb3JFYWNoJ10oZnVuY3Rpb24oXzB4M2U5NjY0LF8weDI4M2RjMSl7dmFyIF8weDZiOWY5Yj1fMHgyNzY4MjI7aWYoXzB4M2U2MTdiKyssXzB4NDA2NGVbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J10rKyxfMHgzZTYxN2I+XzB4NWJiYzU5KXtfMHgzNGI4Mzg9ITB4MDtyZXR1cm47fWlmKCFfMHg0MDY0ZVtfMHg2YjlmOWIoMHgxYzApXSYmXzB4NDA2NGVbXzB4NmI5ZjliKDB4MTBiKV0mJl8weDQwNjRlW18weDZiOWY5YigweDFiOCldPl8weDQwNjRlW18weDZiOWY5YigweDE0ZSldKXtfMHgzNGI4Mzg9ITB4MDtyZXR1cm47fXZhciBfMHg0MjQ0N2U9XzB4MjgzZGMxW18weDZiOWY5YigweGZmKV0oKTtfMHg0MjQ0N2VbXzB4NmI5ZjliKDB4MTNmKV0+MHg2NCYmKF8weDQyNDQ3ZT1fMHg0MjQ0N2VbXzB4NmI5ZjliKDB4MWFkKV0oMHgwLDB4NjQpK18weDZiOWY5YigweDE0MykpLF8weDU5ODhiZFsncHVzaCddKF8weDQ5ZTZkNVsnX2FkZFByb3BlcnR5J10oXzB4MjJiNWExLF8weDExNjAxMiwnTWFwJyxfMHg0MjQ0N2UsXzB4NDA2NGUsZnVuY3Rpb24oXzB4NDkwZWFmKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gXzB4NDkwZWFmO307fShfMHgzZTk2NjQpKSk7fSksIV8weGIzODFkZSl7dHJ5e2ZvcihfMHgzOWVlM2IgaW4gXzB4MTE2MDEyKWlmKCEoXzB4MmQxNTA0JiZfMHg0NDgzOTJbJ3Rlc3QnXShfMHgzOWVlM2IpKSYmIXRoaXNbXzB4Mjc2ODIyKDB4MTUxKV0oXzB4MTE2MDEyLF8weDM5ZWUzYixfMHg0MDY0ZSkpe2lmKF8weDNlNjE3YisrLF8weDQwNjRlW18weDI3NjgyMigweDFiOCldKyssXzB4M2U2MTdiPl8weDViYmM1OSl7XzB4MzRiODM4PSEweDA7YnJlYWs7fWlmKCFfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxYzApXSYmXzB4NDA2NGVbJ2F1dG9FeHBhbmQnXSYmXzB4NDA2NGVbXzB4Mjc2ODIyKDB4MWI4KV0+XzB4NDA2NGVbXzB4Mjc2ODIyKDB4MTRlKV0pe18weDM0YjgzOD0hMHgwO2JyZWFrO31fMHg1OTg4YmRbXzB4Mjc2ODIyKDB4ZjkpXShfMHg0OWU2ZDVbXzB4Mjc2ODIyKDB4MTE3KV0oXzB4MjJiNWExLF8weDExMzRiNCxfMHgxMTYwMTIsXzB4MjFkM2Y4LF8weDM5ZWUzYixfMHg0MDY0ZSkpO319Y2F0Y2h7fWlmKF8weDExMzRiNFsnX3BfbGVuZ3RoJ109ITB4MCxfMHgyYWEwYTkmJihfMHgxMTM0YjRbXzB4Mjc2ODIyKDB4MWE2KV09ITB4MCksIV8weDM0YjgzOCl7dmFyIF8weDQ2ZmFiYj1bXVtfMHgyNzY4MjIoMHgxYTUpXSh0aGlzW18weDI3NjgyMigweDE3YSldKF8weDExNjAxMikpW18weDI3NjgyMigweDFhNSldKHRoaXNbJ19nZXRPd25Qcm9wZXJ0eVN5bWJvbHMnXShfMHgxMTYwMTIpKTtmb3IoXzB4NDA5ODA5PTB4MCxfMHg0YjExZDY9XzB4NDZmYWJiWydsZW5ndGgnXTtfMHg0MDk4MDk8XzB4NGIxMWQ2O18weDQwOTgwOSsrKWlmKF8weDM5ZWUzYj1fMHg0NmZhYmJbXzB4NDA5ODA5XSwhKF8weDJkMTUwNCYmXzB4NDQ4MzkyW18weDI3NjgyMigweDE2ZildKF8weDM5ZWUzYltfMHgyNzY4MjIoMHhmZildKCkpKSYmIXRoaXNbXzB4Mjc2ODIyKDB4MTUxKV0oXzB4MTE2MDEyLF8weDM5ZWUzYixfMHg0MDY0ZSkmJiFfMHgxMTM0YjRbXzB4Mjc2ODIyKDB4MTYyKStfMHgzOWVlM2JbXzB4Mjc2ODIyKDB4ZmYpXSgpXSl7aWYoXzB4M2U2MTdiKyssXzB4NDA2NGVbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J10rKyxfMHgzZTYxN2I+XzB4NWJiYzU5KXtfMHgzNGI4Mzg9ITB4MDticmVhazt9aWYoIV8weDQwNjRlWydpc0V4cHJlc3Npb25Ub0V2YWx1YXRlJ10mJl8weDQwNjRlW18weDI3NjgyMigweDEwYildJiZfMHg0MDY0ZVsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXT5fMHg0MDY0ZVtfMHgyNzY4MjIoMHgxNGUpXSl7XzB4MzRiODM4PSEweDA7YnJlYWs7fV8weDU5ODhiZFtfMHgyNzY4MjIoMHhmOSldKF8weDQ5ZTZkNVtfMHgyNzY4MjIoMHgxMTcpXShfMHgyMmI1YTEsXzB4MTEzNGI0LF8weDExNjAxMixfMHgyMWQzZjgsXzB4MzllZTNiLF8weDQwNjRlKSk7fX19fX1pZihfMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTIzKV09XzB4MjFkM2Y4LF8weDU5OTViYT8oXzB4NTQxNmQ3W18weDI3NjgyMigweDExOCldPV8weDExNjAxMltfMHgyNzY4MjIoMHgxY2EpXSgpLHRoaXNbXzB4Mjc2ODIyKDB4MWEzKV0oXzB4MjFkM2Y4LF8weDU0MTZkNyxfMHg0MDY0ZSxfMHg1ZDI0OWEpKTpfMHgyMWQzZjg9PT1fMHgyNzY4MjIoMHgxOGUpP18weDU0MTZkN1tfMHgyNzY4MjIoMHgxMTgpXT10aGlzW18weDI3NjgyMigweDE4ZildWydjYWxsJ10oXzB4MTE2MDEyKTpfMHgyMWQzZjg9PT1fMHgyNzY4MjIoMHgxZTEpP18weDU0MTZkN1tfMHgyNzY4MjIoMHgxMTgpXT1fMHgxMTYwMTJbXzB4Mjc2ODIyKDB4ZmYpXSgpOl8weDIxZDNmOD09PV8weDI3NjgyMigweDFkOSk/XzB4NTQxNmQ3W18weDI3NjgyMigweDExOCldPXRoaXNbXzB4Mjc2ODIyKDB4MWRiKV1bXzB4Mjc2ODIyKDB4MTJkKV0oXzB4MTE2MDEyKTpfMHgyMWQzZjg9PT1fMHgyNzY4MjIoMHhmYikmJnRoaXNbJ19TeW1ib2wnXT9fMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTE4KV09dGhpc1tfMHgyNzY4MjIoMHgxMzQpXVsncHJvdG90eXBlJ11bJ3RvU3RyaW5nJ11bXzB4Mjc2ODIyKDB4MTJkKV0oXzB4MTE2MDEyKTohXzB4NDA2NGVbXzB4Mjc2ODIyKDB4MTI1KV0mJiEoXzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MWNlKXx8XzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MWE5KSkmJihkZWxldGUgXzB4NTQxNmQ3W18weDI3NjgyMigweDExOCldLF8weDU0MTZkN1tfMHgyNzY4MjIoMHgxNWQpXT0hMHgwKSxfMHgzNGI4MzgmJihfMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTNiKV09ITB4MCksXzB4M2Q3MGY4PV8weDQwNjRlW18weDI3NjgyMigweDFhMSldW18weDI3NjgyMigweDFiYyldLF8weDQwNjRlW18weDI3NjgyMigweDFhMSldWydjdXJyZW50J109XzB4NTQxNmQ3LHRoaXNbXzB4Mjc2ODIyKDB4ZjEpXShfMHg1NDE2ZDcsXzB4NDA2NGUpLF8weDU5ODhiZFtfMHgyNzY4MjIoMHgxM2YpXSl7Zm9yKF8weDQwOTgwOT0weDAsXzB4NGIxMWQ2PV8weDU5ODhiZFtfMHgyNzY4MjIoMHgxM2YpXTtfMHg0MDk4MDk8XzB4NGIxMWQ2O18weDQwOTgwOSsrKV8weDU5ODhiZFtfMHg0MDk4MDldKF8weDQwOTgwOSk7fV8weDIyYjVhMVtfMHgyNzY4MjIoMHgxM2YpXSYmKF8weDU0MTZkN1tfMHgyNzY4MjIoMHgxMDkpXT1fMHgyMmI1YTEpO31jYXRjaChfMHg1NDVjZmMpe18weDNiM2Y2YShfMHg1NDVjZmMsXzB4NTQxNmQ3LF8weDQwNjRlKTt9cmV0dXJuIHRoaXNbXzB4Mjc2ODIyKDB4MTMyKV0oXzB4MTE2MDEyLF8weDU0MTZkNyksdGhpc1tfMHgyNzY4MjIoMHgxMDMpXShfMHg1NDE2ZDcsXzB4NDA2NGUpLF8weDQwNjRlWydub2RlJ11bXzB4Mjc2ODIyKDB4MWJjKV09XzB4M2Q3MGY4LF8weDQwNjRlW18weDI3NjgyMigweDE3MSldLS0sXzB4NDA2NGVbXzB4Mjc2ODIyKDB4MTBiKV09XzB4NTdiN2FlLF8weDQwNjRlWydhdXRvRXhwYW5kJ10mJl8weDQwNjRlW18weDI3NjgyMigweDE2OSldW18weDI3NjgyMigweDFjYildKCksXzB4NTQxNmQ3O31bXzB4MTQ0YTc5KDB4MWJmKV0oXzB4MzQyZWNmKXtyZXR1cm4gT2JqZWN0WydnZXRPd25Qcm9wZXJ0eVN5bWJvbHMnXT9PYmplY3RbJ2dldE93blByb3BlcnR5U3ltYm9scyddKF8weDM0MmVjZik6W107fVtfMHgxNDRhNzkoMHgxYzQpXShfMHg1YmEyYWUpe3ZhciBfMHg1YTc2ODc9XzB4MTQ0YTc5O3JldHVybiEhKF8weDViYTJhZSYmXzB4M2U3N2MwW18weDVhNzY4NygweGZjKV0mJnRoaXNbJ19vYmplY3RUb1N0cmluZyddKF8weDViYTJhZSk9PT1fMHg1YTc2ODcoMHgxZTApJiZfMHg1YmEyYWVbXzB4NWE3Njg3KDB4MWQ4KV0pO31bXzB4MTQ0YTc5KDB4MTUxKV0oXzB4MWNiMTc2LF8weDIxZjZmZixfMHgyMmNkYTUpe3ZhciBfMHgyMjNiODQ9XzB4MTQ0YTc5O3JldHVybiBfMHgyMmNkYTVbXzB4MjIzYjg0KDB4MTFhKV0/dHlwZW9mIF8weDFjYjE3NltfMHgyMWY2ZmZdPT1fMHgyMjNiODQoMHgxZGYpOiEweDE7fVtfMHgxNDRhNzkoMHgxYjkpXShfMHgxNGZiZjUpe3ZhciBfMHg1NDBkZmU9XzB4MTQ0YTc5LF8weDIxZDM3ZT0nJztyZXR1cm4gXzB4MjFkMzdlPXR5cGVvZiBfMHgxNGZiZjUsXzB4MjFkMzdlPT09XzB4NTQwZGZlKDB4ZjIpP3RoaXNbJ19vYmplY3RUb1N0cmluZyddKF8weDE0ZmJmNSk9PT1fMHg1NDBkZmUoMHhlZik/XzB4MjFkMzdlPV8weDU0MGRmZSgweDEyYik6dGhpc1tfMHg1NDBkZmUoMHgxYTQpXShfMHgxNGZiZjUpPT09XzB4NTQwZGZlKDB4MWQwKT9fMHgyMWQzN2U9J2RhdGUnOnRoaXNbXzB4NTQwZGZlKDB4MWE0KV0oXzB4MTRmYmY1KT09PV8weDU0MGRmZSgweDE3OSk/XzB4MjFkMzdlPV8weDU0MGRmZSgweDFlMSk6XzB4MTRmYmY1PT09bnVsbD9fMHgyMWQzN2U9XzB4NTQwZGZlKDB4MWNlKTpfMHgxNGZiZjVbXzB4NTQwZGZlKDB4MTBlKV0mJihfMHgyMWQzN2U9XzB4MTRmYmY1Wydjb25zdHJ1Y3RvciddW18weDU0MGRmZSgweGZlKV18fF8weDIxZDM3ZSk6XzB4MjFkMzdlPT09XzB4NTQwZGZlKDB4MWE5KSYmdGhpc1tfMHg1NDBkZmUoMHgxODApXSYmXzB4MTRmYmY1IGluc3RhbmNlb2YgdGhpc1snX0hUTUxBbGxDb2xsZWN0aW9uJ10mJihfMHgyMWQzN2U9XzB4NTQwZGZlKDB4MTU3KSksXzB4MjFkMzdlO31bXzB4MTQ0YTc5KDB4MWE0KV0oXzB4OGUyYzMzKXt2YXIgXzB4MjUyMjc3PV8weDE0NGE3OTtyZXR1cm4gT2JqZWN0W18weDI1MjI3NygweDFlOCldWyd0b1N0cmluZyddW18weDI1MjI3NygweDEyZCldKF8weDhlMmMzMyk7fVtfMHgxNDRhNzkoMHgxZTIpXShfMHg1NzU3NDEpe3ZhciBfMHgyM2Q4OTE9XzB4MTQ0YTc5O3JldHVybiBfMHg1NzU3NDE9PT1fMHgyM2Q4OTEoMHgxOGEpfHxfMHg1NzU3NDE9PT0nc3RyaW5nJ3x8XzB4NTc1NzQxPT09XzB4MjNkODkxKDB4MTMzKTt9W18weDE0NGE3OSgweDEwMSldKF8weDQ0NTZiNyl7dmFyIF8weDJkZTgzNz1fMHgxNDRhNzk7cmV0dXJuIF8weDQ0NTZiNz09PV8weDJkZTgzNygweDE0MCl8fF8weDQ0NTZiNz09PSdTdHJpbmcnfHxfMHg0NDU2Yjc9PT1fMHgyZGU4MzcoMHgxMzUpO31bXzB4MTQ0YTc5KDB4ZjUpXShfMHg0MzU0ZjUsXzB4MmU2NjEzLF8weDU4NzRiNSxfMHg1NjFjYTgsXzB4MjJlOWZhLF8weGY3YWYxYyl7dmFyIF8weDFjZjU2ND10aGlzO3JldHVybiBmdW5jdGlvbihfMHgzODQ5NDApe3ZhciBfMHg1OTgxMjg9XzB4MjFhMyxfMHgxYzdjMGI9XzB4MjJlOWZhW18weDU5ODEyOCgweDFhMSldW18weDU5ODEyOCgweDFiYyldLF8weDQ2YzAwYz1fMHgyMmU5ZmFbXzB4NTk4MTI4KDB4MWExKV1bXzB4NTk4MTI4KDB4MTBhKV0sXzB4MTZiZTBiPV8weDIyZTlmYVtfMHg1OTgxMjgoMHgxYTEpXVtfMHg1OTgxMjgoMHgxMWMpXTtfMHgyMmU5ZmFbXzB4NTk4MTI4KDB4MWExKV1bXzB4NTk4MTI4KDB4MTFjKV09XzB4MWM3YzBiLF8weDIyZTlmYVtfMHg1OTgxMjgoMHgxYTEpXVtfMHg1OTgxMjgoMHgxMGEpXT10eXBlb2YgXzB4NTYxY2E4PT0nbnVtYmVyJz9fMHg1NjFjYTg6XzB4Mzg0OTQwLF8weDQzNTRmNVtfMHg1OTgxMjgoMHhmOSldKF8weDFjZjU2NFsnX3Byb3BlcnR5J10oXzB4MmU2NjEzLF8weDU4NzRiNSxfMHg1NjFjYTgsXzB4MjJlOWZhLF8weGY3YWYxYykpLF8weDIyZTlmYVtfMHg1OTgxMjgoMHgxYTEpXVtfMHg1OTgxMjgoMHgxMWMpXT1fMHgxNmJlMGIsXzB4MjJlOWZhWydub2RlJ11bJ2luZGV4J109XzB4NDZjMDBjO307fVtfMHgxNDRhNzkoMHgxMTcpXShfMHg1OGQwNTYsXzB4M2YzZDgxLF8weDQyM2YxNSxfMHg3ZWFhNmUsXzB4ZDhlODAsXzB4NTc3ODBmLF8weDRkZmZiYyl7dmFyIF8weDMyYTE0Nj1fMHgxNDRhNzksXzB4NDFlZmE4PXRoaXM7cmV0dXJuIF8weDNmM2Q4MVtfMHgzMmExNDYoMHgxNjIpK18weGQ4ZTgwWyd0b1N0cmluZyddKCldPSEweDAsZnVuY3Rpb24oXzB4NGQ5MjBiKXt2YXIgXzB4NDliNWMyPV8weDMyYTE0NixfMHg1YWMxM2M9XzB4NTc3ODBmW18weDQ5YjVjMigweDFhMSldW18weDQ5YjVjMigweDFiYyldLF8weDNiMmU3Zj1fMHg1Nzc4MGZbJ25vZGUnXVtfMHg0OWI1YzIoMHgxMGEpXSxfMHgxODhjZjM9XzB4NTc3ODBmW18weDQ5YjVjMigweDFhMSldWydwYXJlbnQnXTtfMHg1Nzc4MGZbXzB4NDliNWMyKDB4MWExKV1bXzB4NDliNWMyKDB4MTFjKV09XzB4NWFjMTNjLF8weDU3NzgwZlsnbm9kZSddW18weDQ5YjVjMigweDEwYSldPV8weDRkOTIwYixfMHg1OGQwNTZbXzB4NDliNWMyKDB4ZjkpXShfMHg0MWVmYThbXzB4NDliNWMyKDB4MTFlKV0oXzB4NDIzZjE1LF8weDdlYWE2ZSxfMHhkOGU4MCxfMHg1Nzc4MGYsXzB4NGRmZmJjKSksXzB4NTc3ODBmW18weDQ5YjVjMigweDFhMSldW18weDQ5YjVjMigweDExYyldPV8weDE4OGNmMyxfMHg1Nzc4MGZbXzB4NDliNWMyKDB4MWExKV1bXzB4NDliNWMyKDB4MTBhKV09XzB4M2IyZTdmO307fVtfMHgxNDRhNzkoMHgxMWUpXShfMHgzMGQ1OTQsXzB4MzEzYzYwLF8weDExNmIzZixfMHgxMTA1MjgsXzB4NGM5YWMwKXt2YXIgXzB4ODYwYmFkPV8weDE0NGE3OSxfMHgzYzYxYzI9dGhpcztfMHg0YzlhYzB8fChfMHg0YzlhYzA9ZnVuY3Rpb24oXzB4Mzc0ZmNmLF8weDM0MWZkZCl7cmV0dXJuIF8weDM3NGZjZltfMHgzNDFmZGRdO30pO3ZhciBfMHg1ZWJjOGM9XzB4MTE2YjNmW18weDg2MGJhZCgweGZmKV0oKSxfMHgzMmY2NzM9XzB4MTEwNTI4W18weDg2MGJhZCgweDE4MSldfHx7fSxfMHgzODk2OGU9XzB4MTEwNTI4WydkZXB0aCddLF8weGQ3Mjc3ZD1fMHgxMTA1MjhbXzB4ODYwYmFkKDB4MWMwKV07dHJ5e3ZhciBfMHgxNGI4NWY9dGhpc1snX2lzTWFwJ10oXzB4MzBkNTk0KSxfMHgzMTZmNzg9XzB4NWViYzhjO18weDE0Yjg1ZiYmXzB4MzE2Zjc4WzB4MF09PT0nXFxcXHgyNycmJihfMHgzMTZmNzg9XzB4MzE2Zjc4W18weDg2MGJhZCgweDExMildKDB4MSxfMHgzMTZmNzhbJ2xlbmd0aCddLTB4MikpO3ZhciBfMHg0MDk5ZDg9XzB4MTEwNTI4W18weDg2MGJhZCgweDE4MSldPV8weDMyZjY3M1snX3BfJytfMHgzMTZmNzhdO18weDQwOTlkOCYmKF8weDExMDUyOFtfMHg4NjBiYWQoMHgxMjUpXT1fMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTI1KV0rMHgxKSxfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MWMwKV09ISFfMHg0MDk5ZDg7dmFyIF8weDI4ZjdmZD10eXBlb2YgXzB4MTE2YjNmPT1fMHg4NjBiYWQoMHhmYiksXzB4MzNhMGQwPXsnbmFtZSc6XzB4MjhmN2ZkfHxfMHgxNGI4NWY/XzB4NWViYzhjOnRoaXNbXzB4ODYwYmFkKDB4MWNmKV0oXzB4NWViYzhjKX07aWYoXzB4MjhmN2ZkJiYoXzB4MzNhMGQwW18weDg2MGJhZCgweGZiKV09ITB4MCksIShfMHgzMTNjNjA9PT1fMHg4NjBiYWQoMHgxMmIpfHxfMHgzMTNjNjA9PT0nRXJyb3InKSl7dmFyIF8weDFkYjRhNT10aGlzW18weDg2MGJhZCgweDFjMildKF8weDMwZDU5NCxfMHgxMTZiM2YpO2lmKF8weDFkYjRhNSYmKF8weDFkYjRhNVtfMHg4NjBiYWQoMHgxODgpXSYmKF8weDMzYTBkMFtfMHg4NjBiYWQoMHgxZDQpXT0hMHgwKSxfMHgxZGI0YTVbXzB4ODYwYmFkKDB4MTM2KV0mJiFfMHg0MDk5ZDgmJiFfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTdiKV0pKXJldHVybiBfMHgzM2EwZDBbXzB4ODYwYmFkKDB4MTFmKV09ITB4MCx0aGlzWydfcHJvY2Vzc1RyZWVOb2RlUmVzdWx0J10oXzB4MzNhMGQwLF8weDExMDUyOCksXzB4MzNhMGQwO312YXIgXzB4NDVlZWYyO3RyeXtfMHg0NWVlZjI9XzB4NGM5YWMwKF8weDMwZDU5NCxfMHgxMTZiM2YpO31jYXRjaChfMHgzNDkyNzYpe3JldHVybiBfMHgzM2EwZDA9eyduYW1lJzpfMHg1ZWJjOGMsJ3R5cGUnOid1bmtub3duJywnZXJyb3InOl8weDM0OTI3NltfMHg4NjBiYWQoMHgxYWUpXX0sdGhpc1tfMHg4NjBiYWQoMHgxMjApXShfMHgzM2EwZDAsXzB4MTEwNTI4KSxfMHgzM2EwZDA7fXZhciBfMHg1MzkzOTQ9dGhpc1tfMHg4NjBiYWQoMHgxYjkpXShfMHg0NWVlZjIpLF8weDQ5MGM4Mj10aGlzW18weDg2MGJhZCgweDFlMildKF8weDUzOTM5NCk7aWYoXzB4MzNhMGQwW18weDg2MGJhZCgweDEyMyldPV8weDUzOTM5NCxfMHg0OTBjODIpdGhpc1tfMHg4NjBiYWQoMHgxMjApXShfMHgzM2EwZDAsXzB4MTEwNTI4LF8weDQ1ZWVmMixmdW5jdGlvbigpe3ZhciBfMHg1YTM3NDk9XzB4ODYwYmFkO18weDMzYTBkMFtfMHg1YTM3NDkoMHgxMTgpXT1fMHg0NWVlZjJbJ3ZhbHVlT2YnXSgpLCFfMHg0MDk5ZDgmJl8weDNjNjFjMltfMHg1YTM3NDkoMHgxYTMpXShfMHg1MzkzOTQsXzB4MzNhMGQwLF8weDExMDUyOCx7fSk7fSk7ZWxzZXt2YXIgXzB4M2NlOWIxPV8weDExMDUyOFsnYXV0b0V4cGFuZCddJiZfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTcxKV08XzB4MTEwNTI4W18weDg2MGJhZCgweDFjZCldJiZfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTY5KV1bXzB4ODYwYmFkKDB4MTExKV0oXzB4NDVlZWYyKTwweDAmJl8weDUzOTM5NCE9PSdmdW5jdGlvbicmJl8weDExMDUyOFsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXTxfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTRlKV07XzB4M2NlOWIxfHxfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTcxKV08XzB4Mzg5NjhlfHxfMHg0MDk5ZDg/KHRoaXNbXzB4ODYwYmFkKDB4MTVlKV0oXzB4MzNhMGQwLF8weDQ1ZWVmMixfMHgxMTA1MjgsXzB4NDA5OWQ4fHx7fSksdGhpc1tfMHg4NjBiYWQoMHgxMzIpXShfMHg0NWVlZjIsXzB4MzNhMGQwKSk6dGhpc1tfMHg4NjBiYWQoMHgxMjApXShfMHgzM2EwZDAsXzB4MTEwNTI4LF8weDQ1ZWVmMixmdW5jdGlvbigpe3ZhciBfMHg0ZTg3MWE9XzB4ODYwYmFkO18weDUzOTM5ND09PV8weDRlODcxYSgweDFjZSl8fF8weDUzOTM5ND09PV8weDRlODcxYSgweDFhOSl8fChkZWxldGUgXzB4MzNhMGQwW18weDRlODcxYSgweDExOCldLF8weDMzYTBkMFsnY2FwcGVkJ109ITB4MCk7fSk7fXJldHVybiBfMHgzM2EwZDA7fWZpbmFsbHl7XzB4MTEwNTI4W18weDg2MGJhZCgweDE4MSldPV8weDMyZjY3MyxfMHgxMTA1MjhbJ2RlcHRoJ109XzB4Mzg5NjhlLF8weDExMDUyOFtfMHg4NjBiYWQoMHgxYzApXT1fMHhkNzI3N2Q7fX1bXzB4MTQ0YTc5KDB4MWEzKV0oXzB4NDgwMzdiLF8weDJmMWRkMCxfMHg0NzNjNDMsXzB4MmVjMjkzKXt2YXIgXzB4MzllY2E3PV8weDE0NGE3OSxfMHgzZjE3MWY9XzB4MmVjMjkzW18weDM5ZWNhNygweDEzOSldfHxfMHg0NzNjNDNbXzB4MzllY2E3KDB4MTM5KV07aWYoKF8weDQ4MDM3Yj09PSdzdHJpbmcnfHxfMHg0ODAzN2I9PT1fMHgzOWVjYTcoMHhmMykpJiZfMHgyZjFkZDBbXzB4MzllY2E3KDB4MTE4KV0pe2xldCBfMHgyZDQ2NWQ9XzB4MmYxZGQwW18weDM5ZWNhNygweDExOCldW18weDM5ZWNhNygweDEzZildO18weDQ3M2M0M1tfMHgzOWVjYTcoMHgxNzgpXSs9XzB4MmQ0NjVkLF8weDQ3M2M0M1tfMHgzOWVjYTcoMHgxNzgpXT5fMHg0NzNjNDNbXzB4MzllY2E3KDB4MWQyKV0/KF8weDJmMWRkMFtfMHgzOWVjYTcoMHgxNWQpXT0nJyxkZWxldGUgXzB4MmYxZGQwWyd2YWx1ZSddKTpfMHgyZDQ2NWQ+XzB4M2YxNzFmJiYoXzB4MmYxZGQwW18weDM5ZWNhNygweDE1ZCldPV8weDJmMWRkMFtfMHgzOWVjYTcoMHgxMTgpXVtfMHgzOWVjYTcoMHgxMTIpXSgweDAsXzB4M2YxNzFmKSxkZWxldGUgXzB4MmYxZGQwW18weDM5ZWNhNygweDExOCldKTt9fVtfMHgxNDRhNzkoMHgxNzYpXShfMHg1ZTEyYTkpe3ZhciBfMHgyZTY4MDU9XzB4MTQ0YTc5O3JldHVybiEhKF8weDVlMTJhOSYmXzB4M2U3N2MwW18weDJlNjgwNSgweDE0OSldJiZ0aGlzW18weDJlNjgwNSgweDFhNCldKF8weDVlMTJhOSk9PT1fMHgyZTY4MDUoMHgxZTYpJiZfMHg1ZTEyYTlbXzB4MmU2ODA1KDB4MWQ4KV0pO31bXzB4MTQ0YTc5KDB4MWNmKV0oXzB4NDU5NzJhKXt2YXIgXzB4NThhZTlkPV8weDE0NGE3OTtpZihfMHg0NTk3MmFbXzB4NThhZTlkKDB4MTliKV0oL15cXFxcZCskLykpcmV0dXJuIF8weDQ1OTcyYTt2YXIgXzB4MzE5ODUwO3RyeXtfMHgzMTk4NTA9SlNPTltfMHg1OGFlOWQoMHgxYmIpXSgnJytfMHg0NTk3MmEpO31jYXRjaHtfMHgzMTk4NTA9J1xcXFx4MjInK3RoaXNbXzB4NThhZTlkKDB4MWE0KV0oXzB4NDU5NzJhKSsnXFxcXHgyMic7fXJldHVybiBfMHgzMTk4NTBbXzB4NThhZTlkKDB4MTliKV0oL15cXFwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXFxcIiQvKT9fMHgzMTk4NTA9XzB4MzE5ODUwW18weDU4YWU5ZCgweDExMildKDB4MSxfMHgzMTk4NTBbJ2xlbmd0aCddLTB4Mik6XzB4MzE5ODUwPV8weDMxOTg1MFsncmVwbGFjZSddKC8nL2csJ1xcXFx4NWNcXFxceDI3JylbXzB4NThhZTlkKDB4MTQ0KV0oL1xcXFxcXFxcXFxcIi9nLCdcXFxceDIyJylbXzB4NThhZTlkKDB4MTQ0KV0oLyheXFxcInxcXFwiJCkvZywnXFxcXHgyNycpLF8weDMxOTg1MDt9W18weDE0NGE3OSgweDEyMCldKF8weDFiZDhkYyxfMHgyZWQ0YmQsXzB4MzI0ZGVmLF8weDRlMmJhZSl7dmFyIF8weDM1N2ViYz1fMHgxNDRhNzk7dGhpc1tfMHgzNTdlYmMoMHhmMSldKF8weDFiZDhkYyxfMHgyZWQ0YmQpLF8weDRlMmJhZSYmXzB4NGUyYmFlKCksdGhpc1tfMHgzNTdlYmMoMHgxMzIpXShfMHgzMjRkZWYsXzB4MWJkOGRjKSx0aGlzW18weDM1N2ViYygweDEwMyldKF8weDFiZDhkYyxfMHgyZWQ0YmQpO31bJ190cmVlTm9kZVByb3BlcnRpZXNCZWZvcmVGdWxsVmFsdWUnXShfMHgxMDdkNjUsXzB4M2VkN2NhKXt2YXIgXzB4MjE5YjE2PV8weDE0NGE3OTt0aGlzWydfc2V0Tm9kZUlkJ10oXzB4MTA3ZDY1LF8weDNlZDdjYSksdGhpc1tfMHgyMTliMTYoMHgxMjQpXShfMHgxMDdkNjUsXzB4M2VkN2NhKSx0aGlzW18weDIxOWIxNigweDFhYyldKF8weDEwN2Q2NSxfMHgzZWQ3Y2EpLHRoaXNbXzB4MjE5YjE2KDB4MTEwKV0oXzB4MTA3ZDY1LF8weDNlZDdjYSk7fVtfMHgxNDRhNzkoMHgxNDcpXShfMHg1NmNlNTAsXzB4NTgyODVhKXt9W18weDE0NGE3OSgweDEyNCldKF8weDJmZDM4OSxfMHgxMTNiMTkpe31bXzB4MTQ0YTc5KDB4MTBkKV0oXzB4NDZmZWRjLF8weDFmYjNkMSl7fVtfMHgxNDRhNzkoMHgxYzgpXShfMHg1M2Q2YTQpe3ZhciBfMHgzMTRmNGI9XzB4MTQ0YTc5O3JldHVybiBfMHg1M2Q2YTQ9PT10aGlzW18weDMxNGY0YigweDE2OCldO31bXzB4MTQ0YTc5KDB4MTAzKV0oXzB4OTRmMGQ0LF8weDFmNzhhMil7dmFyIF8weGM0MTZjOT1fMHgxNDRhNzk7dGhpc1tfMHhjNDE2YzkoMHgxMGQpXShfMHg5NGYwZDQsXzB4MWY3OGEyKSx0aGlzWydfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZSddKF8weDk0ZjBkNCksXzB4MWY3OGEyWydzb3J0UHJvcHMnXSYmdGhpc1tfMHhjNDE2YzkoMHhlZSldKF8weDk0ZjBkNCksdGhpc1tfMHhjNDE2YzkoMHgxMDApXShfMHg5NGYwZDQsXzB4MWY3OGEyKSx0aGlzW18weGM0MTZjOSgweDE5YSldKF8weDk0ZjBkNCxfMHgxZjc4YTIpLHRoaXNbXzB4YzQxNmM5KDB4MTE1KV0oXzB4OTRmMGQ0KTt9W18weDE0NGE3OSgweDEzMildKF8weDkxMjYzMixfMHg1ZjU1NDQpe3ZhciBfMHgyMGI1MjI9XzB4MTQ0YTc5O2xldCBfMHg1MGY1OTQ7dHJ5e18weDNlNzdjMFtfMHgyMGI1MjIoMHgxNTQpXSYmKF8weDUwZjU5ND1fMHgzZTc3YzBbXzB4MjBiNTIyKDB4MTU0KV1bXzB4MjBiNTIyKDB4MTc0KV0sXzB4M2U3N2MwW18weDIwYjUyMigweDE1NCldW18weDIwYjUyMigweDE3NCldPWZ1bmN0aW9uKCl7fSksXzB4OTEyNjMyJiZ0eXBlb2YgXzB4OTEyNjMyWydsZW5ndGgnXT09XzB4MjBiNTIyKDB4MTMzKSYmKF8weDVmNTU0NFsnbGVuZ3RoJ109XzB4OTEyNjMyWydsZW5ndGgnXSk7fWNhdGNoe31maW5hbGx5e18weDUwZjU5NCYmKF8weDNlNzdjMFtfMHgyMGI1MjIoMHgxNTQpXVsnZXJyb3InXT1fMHg1MGY1OTQpO31pZihfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTIzKV09PT0nbnVtYmVyJ3x8XzB4NWY1NTQ0W18weDIwYjUyMigweDEyMyldPT09XzB4MjBiNTIyKDB4MTM1KSl7aWYoaXNOYU4oXzB4NWY1NTQ0W18weDIwYjUyMigweDExOCldKSlfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTU4KV09ITB4MCxkZWxldGUgXzB4NWY1NTQ0Wyd2YWx1ZSddO2Vsc2Ugc3dpdGNoKF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMTgpXSl7Y2FzZSBOdW1iZXJbJ1BPU0lUSVZFX0lORklOSVRZJ106XzB4NWY1NTQ0W18weDIwYjUyMigweDE4NildPSEweDAsZGVsZXRlIF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMTgpXTticmVhaztjYXNlIE51bWJlcltfMHgyMGI1MjIoMHgxMTYpXTpfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MWFhKV09ITB4MCxkZWxldGUgXzB4NWY1NTQ0W18weDIwYjUyMigweDExOCldO2JyZWFrO2Nhc2UgMHgwOnRoaXNbXzB4MjBiNTIyKDB4MTQxKV0oXzB4NWY1NTQ0W18weDIwYjUyMigweDExOCldKSYmKF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxNGMpXT0hMHgwKTticmVhazt9fWVsc2UgXzB4NWY1NTQ0W18weDIwYjUyMigweDEyMyldPT09XzB4MjBiNTIyKDB4MWRmKSYmdHlwZW9mIF8weDkxMjYzMlsnbmFtZSddPT1fMHgyMGI1MjIoMHgxM2QpJiZfMHg5MTI2MzJbXzB4MjBiNTIyKDB4ZmUpXSYmXzB4NWY1NTQ0W18weDIwYjUyMigweGZlKV0mJl8weDkxMjYzMltfMHgyMGI1MjIoMHhmZSldIT09XzB4NWY1NTQ0WyduYW1lJ10mJihfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTk2KV09XzB4OTEyNjMyWyduYW1lJ10pO31bXzB4MTQ0YTc5KDB4MTQxKV0oXzB4M2Q4ZGU3KXt2YXIgXzB4NWJkMGZhPV8weDE0NGE3OTtyZXR1cm4gMHgxL18weDNkOGRlNz09PU51bWJlcltfMHg1YmQwZmEoMHgxMTYpXTt9Wydfc29ydFByb3BzJ10oXzB4NGFhNmRkKXt2YXIgXzB4MTE5NjY2PV8weDE0NGE3OTshXzB4NGFhNmRkW18weDExOTY2NigweDEwOSldfHwhXzB4NGFhNmRkW18weDExOTY2NigweDEwOSldW18weDExOTY2NigweDEzZildfHxfMHg0YWE2ZGRbXzB4MTE5NjY2KDB4MTIzKV09PT1fMHgxMTk2NjYoMHgxMmIpfHxfMHg0YWE2ZGRbXzB4MTE5NjY2KDB4MTIzKV09PT1fMHgxMTk2NjYoMHgxNDkpfHxfMHg0YWE2ZGRbXzB4MTE5NjY2KDB4MTIzKV09PT1fMHgxMTk2NjYoMHhmYyl8fF8weDRhYTZkZFtfMHgxMTk2NjYoMHgxMDkpXVsnc29ydCddKGZ1bmN0aW9uKF8weDMxYWQxYixfMHgxZTFmYmYpe3ZhciBfMHgyZDY2MGU9XzB4MTE5NjY2LF8weDFkMzljNz1fMHgzMWFkMWJbXzB4MmQ2NjBlKDB4ZmUpXVtfMHgyZDY2MGUoMHgxYWIpXSgpLF8weDU4YmJjNT1fMHgxZTFmYmZbJ25hbWUnXVtfMHgyZDY2MGUoMHgxYWIpXSgpO3JldHVybiBfMHgxZDM5Yzc8XzB4NThiYmM1Py0weDE6XzB4MWQzOWM3Pl8weDU4YmJjNT8weDE6MHgwO30pO31bXzB4MTQ0YTc5KDB4MTAwKV0oXzB4MjU2Zjg3LF8weDM5Y2FlMSl7dmFyIF8weDNkMDYxNj1fMHgxNDRhNzk7aWYoIShfMHgzOWNhZTFbXzB4M2QwNjE2KDB4MTFhKV18fCFfMHgyNTZmODdbJ3Byb3BzJ118fCFfMHgyNTZmODdbJ3Byb3BzJ11bXzB4M2QwNjE2KDB4MTNmKV0pKXtmb3IodmFyIF8weDEyYTc4Yj1bXSxfMHgxMWMzODI9W10sXzB4NTY0ZWI0PTB4MCxfMHgxMjgwNDM9XzB4MjU2Zjg3Wydwcm9wcyddW18weDNkMDYxNigweDEzZildO18weDU2NGViNDxfMHgxMjgwNDM7XzB4NTY0ZWI0Kyspe3ZhciBfMHg1YjIwYzM9XzB4MjU2Zjg3W18weDNkMDYxNigweDEwOSldW18weDU2NGViNF07XzB4NWIyMGMzW18weDNkMDYxNigweDEyMyldPT09J2Z1bmN0aW9uJz9fMHgxMmE3OGJbXzB4M2QwNjE2KDB4ZjkpXShfMHg1YjIwYzMpOl8weDExYzM4MltfMHgzZDA2MTYoMHhmOSldKF8weDViMjBjMyk7fWlmKCEoIV8weDExYzM4MltfMHgzZDA2MTYoMHgxM2YpXXx8XzB4MTJhNzhiWydsZW5ndGgnXTw9MHgxKSl7XzB4MjU2Zjg3W18weDNkMDYxNigweDEwOSldPV8weDExYzM4Mjt2YXIgXzB4MzJkYWY4PXsnZnVuY3Rpb25zTm9kZSc6ITB4MCwncHJvcHMnOl8weDEyYTc4Yn07dGhpc1tfMHgzZDA2MTYoMHgxNDcpXShfMHgzMmRhZjgsXzB4MzljYWUxKSx0aGlzW18weDNkMDYxNigweDEwZCldKF8weDMyZGFmOCxfMHgzOWNhZTEpLHRoaXNbJ19zZXROb2RlRXhwYW5kYWJsZVN0YXRlJ10oXzB4MzJkYWY4KSx0aGlzW18weDNkMDYxNigweDExMCldKF8weDMyZGFmOCxfMHgzOWNhZTEpLF8weDMyZGFmOFsnaWQnXSs9J1xcXFx4MjBmJyxfMHgyNTZmODdbXzB4M2QwNjE2KDB4MTA5KV1bXzB4M2QwNjE2KDB4MWI3KV0oXzB4MzJkYWY4KTt9fX1bXzB4MTQ0YTc5KDB4MTlhKV0oXzB4MTVhY2MwLF8weDE1NWVmZCl7fVtfMHgxNDRhNzkoMHgxNjEpXShfMHgyZTI4MmEpe31bXzB4MTQ0YTc5KDB4MThiKV0oXzB4MjM3MTAzKXt2YXIgXzB4ZmVkZWU0PV8weDE0NGE3OTtyZXR1cm4gQXJyYXlbXzB4ZmVkZWU0KDB4MTY0KV0oXzB4MjM3MTAzKXx8dHlwZW9mIF8weDIzNzEwMz09XzB4ZmVkZWU0KDB4ZjIpJiZ0aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHgyMzcxMDMpPT09XzB4ZmVkZWU0KDB4ZWYpO31bXzB4MTQ0YTc5KDB4MTEwKV0oXzB4OTNkNmIxLF8weDU1NTUzMil7fVtfMHgxNDRhNzkoMHgxMTUpXShfMHgyMzI4ZWMpe3ZhciBfMHg0NDNjMDQ9XzB4MTQ0YTc5O2RlbGV0ZSBfMHgyMzI4ZWNbXzB4NDQzYzA0KDB4MWM5KV0sZGVsZXRlIF8weDIzMjhlY1tfMHg0NDNjMDQoMHgxMDYpXSxkZWxldGUgXzB4MjMyOGVjW18weDQ0M2MwNCgweDFjNildO31bXzB4MTQ0YTc5KDB4MWFjKV0oXzB4NDczZThhLF8weDFmM2RlMil7fX1sZXQgXzB4MTgyMTg2PW5ldyBfMHg0ZTEzOGMoKSxfMHg0YzcxOTY9eydwcm9wcyc6MHg2NCwnZWxlbWVudHMnOjB4NjQsJ3N0ckxlbmd0aCc6MHg0MDAqMHgzMiwndG90YWxTdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxMzg4LCdhdXRvRXhwYW5kTWF4RGVwdGgnOjB4YX0sXzB4MzcwMWZhPXsncHJvcHMnOjB4NSwnZWxlbWVudHMnOjB4NSwnc3RyTGVuZ3RoJzoweDEwMCwndG90YWxTdHJMZW5ndGgnOjB4MTAwKjB4MywnYXV0b0V4cGFuZExpbWl0JzoweDFlLCdhdXRvRXhwYW5kTWF4RGVwdGgnOjB4Mn07ZnVuY3Rpb24gXzB4MjEzZTNlKF8weDJmZjcwMCxfMHgxMDI4ZDMsXzB4NjIzN2I4LF8weDM1MTJhMSxfMHhjYjA5MCxfMHgzYjZjNGIpe3ZhciBfMHg0MDdlMzE9XzB4MTQ0YTc5O2xldCBfMHgyMTI4MzcsXzB4NGUzNDdmO3RyeXtfMHg0ZTM0N2Y9XzB4MjRkMTMwKCksXzB4MjEyODM3PV8weDNkMmQ0Y1tfMHgxMDI4ZDNdLCFfMHgyMTI4Mzd8fF8weDRlMzQ3Zi1fMHgyMTI4MzdbJ3RzJ10+MHgxZjQmJl8weDIxMjgzN1tfMHg0MDdlMzEoMHgxOTcpXSYmXzB4MjEyODM3W18weDQwN2UzMSgweDE0NildL18weDIxMjgzN1tfMHg0MDdlMzEoMHgxOTcpXTwweDY0PyhfMHgzZDJkNGNbXzB4MTAyOGQzXT1fMHgyMTI4Mzc9eydjb3VudCc6MHgwLCd0aW1lJzoweDAsJ3RzJzpfMHg0ZTM0N2Z9LF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXT17fSk6XzB4NGUzNDdmLV8weDNkMmQ0Y1snaGl0cyddWyd0cyddPjB4MzImJl8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVtfMHg0MDdlMzEoMHgxOTcpXSYmXzB4M2QyZDRjWydoaXRzJ11bXzB4NDA3ZTMxKDB4MTQ2KV0vXzB4M2QyZDRjW18weDQwN2UzMSgweDFjNyldWydjb3VudCddPDB4NjQmJihfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV09e30pO2xldCBfMHgzNmEzZjI9W10sXzB4MjQ1NTRiPV8weDIxMjgzN1tfMHg0MDdlMzEoMHgxMDIpXXx8XzB4M2QyZDRjW18weDQwN2UzMSgweDFjNyldW18weDQwN2UzMSgweDEwMildP18weDM3MDFmYTpfMHg0YzcxOTYsXzB4MzQ3ZmQ3PV8weDI2MWE3ZD0+e3ZhciBfMHgzZWRjYjQ9XzB4NDA3ZTMxO2xldCBfMHgzYTI3MTM9e307cmV0dXJuIF8weDNhMjcxM1sncHJvcHMnXT1fMHgyNjFhN2RbJ3Byb3BzJ10sXzB4M2EyNzEzW18weDNlZGNiNCgweDEyMildPV8weDI2MWE3ZFtfMHgzZWRjYjQoMHgxMjIpXSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MTM5KV09XzB4MjYxYTdkW18weDNlZGNiNCgweDEzOSldLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxZDIpXT1fMHgyNjFhN2RbXzB4M2VkY2I0KDB4MWQyKV0sXzB4M2EyNzEzW18weDNlZGNiNCgweDE0ZSldPV8weDI2MWE3ZFtfMHgzZWRjYjQoMHgxNGUpXSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MWNkKV09XzB4MjYxYTdkW18weDNlZGNiNCgweDFjZCldLF8weDNhMjcxM1tfMHgzZWRjYjQoMHhmNildPSEweDEsXzB4M2EyNzEzW18weDNlZGNiNCgweDExYSldPSFfMHgzNjg1MDIsXzB4M2EyNzEzW18weDNlZGNiNCgweDEyNSldPTB4MSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MTcxKV09MHgwLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxNWIpXT1fMHgzZWRjYjQoMHgxZGMpLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxYTApXT0ncm9vdF9leHAnLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxMGIpXT0hMHgwLF8weDNhMjcxM1snYXV0b0V4cGFuZFByZXZpb3VzT2JqZWN0cyddPVtdLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxYjgpXT0weDAsXzB4M2EyNzEzW18weDNlZGNiNCgweDE3YildPSEweDAsXzB4M2EyNzEzW18weDNlZGNiNCgweDE3OCldPTB4MCxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MWExKV09eydjdXJyZW50Jzp2b2lkIDB4MCwncGFyZW50Jzp2b2lkIDB4MCwnaW5kZXgnOjB4MH0sXzB4M2EyNzEzO307Zm9yKHZhciBfMHgyNTM4M2E9MHgwO18weDI1MzgzYTxfMHhjYjA5MFtfMHg0MDdlMzEoMHgxM2YpXTtfMHgyNTM4M2ErKylfMHgzNmEzZjJbXzB4NDA3ZTMxKDB4ZjkpXShfMHgxODIxODZbJ3NlcmlhbGl6ZSddKHsndGltZU5vZGUnOl8weDJmZjcwMD09PV8weDQwN2UzMSgweDE0Nil8fHZvaWQgMHgwfSxfMHhjYjA5MFtfMHgyNTM4M2FdLF8weDM0N2ZkNyhfMHgyNDU1NGIpLHt9KSk7aWYoXzB4MmZmNzAwPT09J3RyYWNlJ3x8XzB4MmZmNzAwPT09XzB4NDA3ZTMxKDB4MTc0KSl7bGV0IF8weDVhMWExND1FcnJvcltfMHg0MDdlMzEoMHhmYSldO3RyeXtFcnJvcltfMHg0MDdlMzEoMHhmYSldPTB4MS8weDAsXzB4MzZhM2YyW18weDQwN2UzMSgweGY5KV0oXzB4MTgyMTg2W18weDQwN2UzMSgweDE1ZSldKHsnc3RhY2tOb2RlJzohMHgwfSxuZXcgRXJyb3IoKVtfMHg0MDdlMzEoMHgxNWYpXSxfMHgzNDdmZDcoXzB4MjQ1NTRiKSx7J3N0ckxlbmd0aCc6MHgxLzB4MH0pKTt9ZmluYWxseXtFcnJvcltfMHg0MDdlMzEoMHhmYSldPV8weDVhMWExNDt9fXJldHVybnsnbWV0aG9kJzpfMHg0MDdlMzEoMHgxOTQpLCd2ZXJzaW9uJzpfMHgzOTFmYjQsJ2FyZ3MnOlt7J3RzJzpfMHg2MjM3YjgsJ3Nlc3Npb24nOl8weDM1MTJhMSwnYXJncyc6XzB4MzZhM2YyLCdpZCc6XzB4MTAyOGQzLCdjb250ZXh0JzpfMHgzYjZjNGJ9XX07fWNhdGNoKF8weDVkYjA0Yil7cmV0dXJueydtZXRob2QnOl8weDQwN2UzMSgweDE5NCksJ3ZlcnNpb24nOl8weDM5MWZiNCwnYXJncyc6W3sndHMnOl8weDYyMzdiOCwnc2Vzc2lvbic6XzB4MzUxMmExLCdhcmdzJzpbeyd0eXBlJzpfMHg0MDdlMzEoMHgxYjYpLCdlcnJvcic6XzB4NWRiMDRiJiZfMHg1ZGIwNGJbXzB4NDA3ZTMxKDB4MWFlKV19XSwnaWQnOl8weDEwMjhkMywnY29udGV4dCc6XzB4M2I2YzRifV19O31maW5hbGx5e3RyeXtpZihfMHgyMTI4MzcmJl8weDRlMzQ3Zil7bGV0IF8weDQ1ZTI5OT1fMHgyNGQxMzAoKTtfMHgyMTI4MzdbJ2NvdW50J10rKyxfMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTQ2KV0rPV8weDQ3YTM5NShfMHg0ZTM0N2YsXzB4NDVlMjk5KSxfMHgyMTI4MzdbJ3RzJ109XzB4NDVlMjk5LF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVtfMHg0MDdlMzEoMHgxOTcpXSsrLF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVtfMHg0MDdlMzEoMHgxNDYpXSs9XzB4NDdhMzk1KF8weDRlMzQ3ZixfMHg0NWUyOTkpLF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVsndHMnXT1fMHg0NWUyOTksKF8weDIxMjgzN1tfMHg0MDdlMzEoMHgxOTcpXT4weDMyfHxfMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTQ2KV0+MHg2NCkmJihfMHgyMTI4MzdbJ3JlZHVjZUxpbWl0cyddPSEweDApLChfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bXzB4NDA3ZTMxKDB4MTk3KV0+MHgzZTh8fF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVsndGltZSddPjB4MTJjKSYmKF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVsncmVkdWNlTGltaXRzJ109ITB4MCk7fX1jYXRjaHt9fX1yZXR1cm4gXzB4MjEzZTNlO30oKF8weDVkNjVlOSxfMHg1NzFhZjksXzB4MzdlMWU0LF8weDQzM2Q0OCxfMHgxYjAyZjYsXzB4NDMwMDgzLF8weDU0MzJkOCxfMHgxMDJkY2IsXzB4NDkzYTNjLF8weDI0MGRhNSxfMHgyODIxYjkpPT57dmFyIF8weDU1NmRkNj1fMHgyMTYwZGU7aWYoXzB4NWQ2NWU5W18weDU1NmRkNigweDE0ZCldKXJldHVybiBfMHg1ZDY1ZTlbXzB4NTU2ZGQ2KDB4MTRkKV07aWYoIUgoXzB4NWQ2NWU5LF8weDEwMmRjYixfMHgxYjAyZjYpKXJldHVybiBfMHg1ZDY1ZTlbXzB4NTU2ZGQ2KDB4MTRkKV09eydjb25zb2xlTG9nJzooKT0+e30sJ2NvbnNvbGVUcmFjZSc6KCk9Pnt9LCdjb25zb2xlVGltZSc6KCk9Pnt9LCdjb25zb2xlVGltZUVuZCc6KCk9Pnt9LCdhdXRvTG9nJzooKT0+e30sJ2F1dG9Mb2dNYW55JzooKT0+e30sJ2F1dG9UcmFjZU1hbnknOigpPT57fSwnY292ZXJhZ2UnOigpPT57fSwnYXV0b1RyYWNlJzooKT0+e30sJ2F1dG9UaW1lJzooKT0+e30sJ2F1dG9UaW1lRW5kJzooKT0+e319LF8weDVkNjVlOVsnX2NvbnNvbGVfbmluamEnXTtsZXQgXzB4MWQ2MzQwPUIoXzB4NWQ2NWU5KSxfMHgzOTdmZjY9XzB4MWQ2MzQwWydlbGFwc2VkJ10sXzB4MWE5MWRhPV8weDFkNjM0MFsndGltZVN0YW1wJ10sXzB4YTIyYWE5PV8weDFkNjM0MFtfMHg1NTZkZDYoMHgxMjkpXSxfMHg0ZGQ0NmY9eydoaXRzJzp7fSwndHMnOnt9fSxfMHgyMmZhNDM9WChfMHg1ZDY1ZTksXzB4NDkzYTNjLF8weDRkZDQ2ZixfMHg0MzAwODMpLF8weDU5MGU1ZT1fMHg0NGM1Mzk9PntfMHg0ZGQ0NmZbJ3RzJ11bXzB4NDRjNTM5XT1fMHgxYTkxZGEoKTt9LF8weDFlY2M2Yj0oXzB4MzkyMTIxLF8weDFkMDQ2YSk9PntsZXQgXzB4NDg5YmMyPV8weDRkZDQ2ZlsndHMnXVtfMHgxZDA0NmFdO2lmKGRlbGV0ZSBfMHg0ZGQ0NmZbJ3RzJ11bXzB4MWQwNDZhXSxfMHg0ODliYzIpe2xldCBfMHgzNDY1Nzg9XzB4Mzk3ZmY2KF8weDQ4OWJjMixfMHgxYTkxZGEoKSk7XzB4MzdiNzgwKF8weDIyZmE0MygndGltZScsXzB4MzkyMTIxLF8weGEyMmFhOSgpLF8weDRlZTFjNSxbXzB4MzQ2NTc4XSxfMHgxZDA0NmEpKTt9fSxfMHgxMWFjNjA9XzB4MzA5N2ZmPT57dmFyIF8weDQzMjEyYz1fMHg1NTZkZDYsXzB4NWRlNzNlO3JldHVybiBfMHgxYjAyZjY9PT1fMHg0MzIxMmMoMHgxYTcpJiZfMHg1ZDY1ZTlbXzB4NDMyMTJjKDB4ZjgpXSYmKChfMHg1ZGU3M2U9XzB4MzA5N2ZmPT1udWxsP3ZvaWQgMHgwOl8weDMwOTdmZlsnYXJncyddKT09bnVsbD92b2lkIDB4MDpfMHg1ZGU3M2VbJ2xlbmd0aCddKSYmKF8weDMwOTdmZltfMHg0MzIxMmMoMHgxMTQpXVsweDBdWydvcmlnaW4nXT1fMHg1ZDY1ZTlbXzB4NDMyMTJjKDB4ZjgpXSksXzB4MzA5N2ZmO307XzB4NWQ2NWU5W18weDU1NmRkNigweDE0ZCldPXsnY29uc29sZUxvZyc6KF8weDNkZjNkYixfMHgxYmI1YWIpPT57dmFyIF8weDI4NjRlYz1fMHg1NTZkZDY7XzB4NWQ2NWU5W18weDI4NjRlYygweDE1NCldW18weDI4NjRlYygweDE5NCldW18weDI4NjRlYygweGZlKV0hPT1fMHgyODY0ZWMoMHgxMTkpJiZfMHgzN2I3ODAoXzB4MjJmYTQzKF8weDI4NjRlYygweDE5NCksXzB4M2RmM2RiLF8weGEyMmFhOSgpLF8weDRlZTFjNSxfMHgxYmI1YWIpKTt9LCdjb25zb2xlVHJhY2UnOihfMHgyOWRhNDksXzB4M2Y4Mzc0KT0+e3ZhciBfMHgyODBiZjg9XzB4NTU2ZGQ2LF8weDIyNTRjMSxfMHgxZTQxMzA7XzB4NWQ2NWU5Wydjb25zb2xlJ11bXzB4MjgwYmY4KDB4MTk0KV1bXzB4MjgwYmY4KDB4ZmUpXSE9PSdkaXNhYmxlZFRyYWNlJyYmKChfMHgxZTQxMzA9KF8weDIyNTRjMT1fMHg1ZDY1ZTlbXzB4MjgwYmY4KDB4MWQxKV0pPT1udWxsP3ZvaWQgMHgwOl8weDIyNTRjMVsndmVyc2lvbnMnXSkhPW51bGwmJl8weDFlNDEzMFtfMHgyODBiZjgoMHgxYTEpXSYmKF8weDVkNjVlOVtfMHgyODBiZjgoMHgxZGUpXT0hMHgwKSxfMHgzN2I3ODAoXzB4MTFhYzYwKF8weDIyZmE0MyhfMHgyODBiZjgoMHgxNzApLF8weDI5ZGE0OSxfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsXzB4M2Y4Mzc0KSkpKTt9LCdjb25zb2xlRXJyb3InOihfMHg1NDdmMGEsXzB4NTBkYmM3KT0+e3ZhciBfMHgzNTk3YTk9XzB4NTU2ZGQ2O18weDVkNjVlOVtfMHgzNTk3YTkoMHgxZGUpXT0hMHgwLF8weDM3Yjc4MChfMHgxMWFjNjAoXzB4MjJmYTQzKCdlcnJvcicsXzB4NTQ3ZjBhLF8weGEyMmFhOSgpLF8weDRlZTFjNSxfMHg1MGRiYzcpKSk7fSwnY29uc29sZVRpbWUnOl8weDEyM2ZmZT0+e18weDU5MGU1ZShfMHgxMjNmZmUpO30sJ2NvbnNvbGVUaW1lRW5kJzooXzB4MjE3MWEwLF8weDQwM2JiOCk9PntfMHgxZWNjNmIoXzB4NDAzYmI4LF8weDIxNzFhMCk7fSwnYXV0b0xvZyc6KF8weDQ5OThkMCxfMHgxYmFjMzcpPT57dmFyIF8weGQ3M2QyMz1fMHg1NTZkZDY7XzB4MzdiNzgwKF8weDIyZmE0MyhfMHhkNzNkMjMoMHgxOTQpLF8weDFiYWMzNyxfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsW18weDQ5OThkMF0pKTt9LCdhdXRvTG9nTWFueSc6KF8weDQzMWQxOCxfMHgzNmQxNzUpPT57dmFyIF8weDczZDVmYz1fMHg1NTZkZDY7XzB4MzdiNzgwKF8weDIyZmE0MyhfMHg3M2Q1ZmMoMHgxOTQpLF8weDQzMWQxOCxfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsXzB4MzZkMTc1KSk7fSwnYXV0b1RyYWNlJzooXzB4NDU5YzQ5LF8weDI3ZmYyYik9Pnt2YXIgXzB4NDMzYjA2PV8weDU1NmRkNjtfMHgzN2I3ODAoXzB4MTFhYzYwKF8weDIyZmE0MyhfMHg0MzNiMDYoMHgxNzApLF8weDI3ZmYyYixfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsW18weDQ1OWM0OV0pKSk7fSwnYXV0b1RyYWNlTWFueSc6KF8weDJmZjRmNyxfMHgxOGNlMjcpPT57XzB4MzdiNzgwKF8weDExYWM2MChfMHgyMmZhNDMoJ3RyYWNlJyxfMHgyZmY0ZjcsXzB4YTIyYWE5KCksXzB4NGVlMWM1LF8weDE4Y2UyNykpKTt9LCdhdXRvVGltZSc6KF8weDJlNDFiYyxfMHg1ZWI4ZWMsXzB4MWMzOGRkKT0+e18weDU5MGU1ZShfMHgxYzM4ZGQpO30sJ2F1dG9UaW1lRW5kJzooXzB4NDdjMDA4LF8weGFkOWIxMyxfMHg0ZmM1MzIpPT57XzB4MWVjYzZiKF8weGFkOWIxMyxfMHg0ZmM1MzIpO30sJ2NvdmVyYWdlJzpfMHg0ZGU5MWI9PntfMHgzN2I3ODAoeydtZXRob2QnOidjb3ZlcmFnZScsJ3ZlcnNpb24nOl8weDQzMDA4MywnYXJncyc6W3snaWQnOl8weDRkZTkxYn1dfSk7fX07bGV0IF8weDM3Yjc4MD1xKF8weDVkNjVlOSxfMHg1NzFhZjksXzB4MzdlMWU0LF8weDQzM2Q0OCxfMHgxYjAyZjYsXzB4MjQwZGE1LF8weDI4MjFiOSksXzB4NGVlMWM1PV8weDVkNjVlOVtfMHg1NTZkZDYoMHgxNGEpXTtyZXR1cm4gXzB4NWQ2NWU5WydfY29uc29sZV9uaW5qYSddO30pKGdsb2JhbFRoaXMsXzB4MjE2MGRlKDB4MTg3KSwnNjUxNjYnLF8weDIxNjBkZSgweDE2YiksXzB4MjE2MGRlKDB4MWJlKSxfMHgyMTYwZGUoMHgxZTMpLF8weDIxNjBkZSgweDEyOCksXzB4MjE2MGRlKDB4MWQ1KSxfMHgyMTYwZGUoMHgxNTkpLF8weDIxNjBkZSgweDE4MyksXzB4MjE2MGRlKDB4MTUyKSk7XCIpO31jYXRjaChlKXt9fTsvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL2Z1bmN0aW9uIG9vX29vKGksLi4udil7dHJ5e29vX2NtKCkuY29uc29sZUxvZyhpLCB2KTt9Y2F0Y2goZSl7fSByZXR1cm4gdn07LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9mdW5jdGlvbiBvb190cihpLC4uLnYpe3RyeXtvb19jbSgpLmNvbnNvbGVUcmFjZShpLCB2KTt9Y2F0Y2goZSl7fSByZXR1cm4gdn07LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9mdW5jdGlvbiBvb190eChpLC4uLnYpe3RyeXtvb19jbSgpLmNvbnNvbGVFcnJvcihpLCB2KTt9Y2F0Y2goZSl7fSByZXR1cm4gdn07LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9mdW5jdGlvbiBvb190cyh2KXt0cnl7b29fY20oKS5jb25zb2xlVGltZSh2KTt9Y2F0Y2goZSl7fSByZXR1cm4gdjt9Oy8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovZnVuY3Rpb24gb29fdGUodiwgaSl7dHJ5e29vX2NtKCkuY29uc29sZVRpbWVFbmQodiwgaSk7fWNhdGNoKGUpe30gcmV0dXJuIHY7fTsvKmVzbGludCB1bmljb3JuL25vLWFidXNpdmUtZXNsaW50LWRpc2FibGU6LGVzbGludC1jb21tZW50cy9kaXNhYmxlLWVuYWJsZS1wYWlyOixlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby1hZ2dyZWdhdGluZy1lbmFibGU6LGVzbGludC1jb21tZW50cy9uby1kdXBsaWNhdGUtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tdW51c2VkLWVuYWJsZTosKi8iLCJpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0IGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGlkOiBcImFib3V0XCIsXG4gICAgICBlbGVtZW50OiBcIi5hYm91dFwiLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgbmF2aWdhdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZpZ2F0aW9uXCIpLFxuICAgICAgICB3cmFwcGVyOiBcIi5hYm91dF9fd3JhcHBlclwiLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xsZWN0aW9ucyBleHRlbmRzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBpZDogXCJjb2xsZWN0aW9uc1wiLFxuICAgICAgZWxlbWVudDogXCIuY29sbGVjdGlvbnNcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2aWdhdGlvblwiKSxcbiAgICAgICAgd3JhcHBlcjogXCIuY29sbGVjdGlvbnNfX3dyYXBwZXJcIixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCJjbGFzc2VzL0J1dHRvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRhaWwgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgaWQ6IFwiZGV0YWlsXCIsXG4gICAgICBlbGVtZW50OiBcIi5kZXRhaWxcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2aWdhdGlvblwiKSxcbiAgICAgICAgYnV0dG9uOiBcIi5kZXRhaWxfX2J1dHRvblwiLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKTtcbiAgICB0aGlzLmxpbmsgPSBuZXcgQnV0dG9uKHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMuYnV0dG9uLFxuICAgIH0pO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoeyBkZWxheTogMiB9KTtcbiAgICB0aW1lbGluZS5mcm9tVG8oXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgIH0sXG4gICAgICB7IGF1dG9BbHBoYTogMSB9LFxuICAgICk7XG5cbiAgICBzdXBlci5zaG93KHRpbWVsaW5lKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMubGluay5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICB9XG59XG4iLCJpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCJjbGFzc2VzL0J1dHRvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGlkOiBcImhvbWVcIixcbiAgICAgIGVsZW1lbnQ6IFwiLmhvbWVcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2aWdhdGlvblwiKSxcbiAgICAgICAgbGluazogXCIuaG9tZV9fbGlua1wiLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKTtcbiAgICB0aGlzLmxpbmsgPSBuZXcgQnV0dG9uKHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMubGluayxcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMubGluay5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFID0gXCIjZjlmMWU3XCI7XG5leHBvcnQgY29uc3QgQ09MT1JfQlJJR0hUX0dSQVkgPSBcIiMzNzM4NGNcIjtcbiIsImltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQoeyBlbGVtZW50LCBleHByZXNzaW9uID0gXCIgXCIsIGFwcGVuZCA9IHRydWUgfSkge1xuICBjb25zdCB3b3JkcyA9IHNwbGl0VGV4dChlbGVtZW50LmlubmVySFRNTC50b1N0cmluZygpLnRyaW0oKSwgZXhwcmVzc2lvbik7XG4gIGxldCBpbm5lckhUTUwgPSBcIlwiO1xuXG4gIGVhY2god29yZHMsIChsaW5lKSA9PiB7XG4gICAgaWYgKGxpbmUuaW5kZXhPZihcIjxicj5cIikgPiAtMSkge1xuICAgICAgY29uc3QgbGluZXMgPSBsaW5lLnNwbGl0KFwiPGJyPlwiKTtcblxuICAgICAgZWFjaChsaW5lcywgKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlubmVySFRNTCArPSBpbmRleCA+IDAgPyBcIjxicj5cIiArIHBhcnNlTGluZShsaW5lKSA6IHBhcnNlTGluZShsaW5lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lckhUTUwgKz0gcGFyc2VMaW5lKGxpbmUpO1xuICAgIH1cbiAgfSk7XG5cbiAgZWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG5cbiAgY29uc3Qgc3BhbnMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuXCIpO1xuXG4gIGlmIChhcHBlbmQpIHtcbiAgICBlYWNoKHNwYW5zLCAoc3BhbikgPT4ge1xuICAgICAgY29uc3QgaXNTaW5nbGVMZXR0ZXIgPSBzcGFuLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMTtcbiAgICAgIGNvbnN0IGlzTm90RW1wdHkgPSBzcGFuLmlubmVySFRNTC50cmltKCkgIT09IFwiXCI7XG4gICAgICBjb25zdCBpc05vdEFtcGVyc2FuZCA9IHNwYW4uaW5uZXJIVE1MLnRyaW0oKSAhPT0gXCImXCI7XG4gICAgICBjb25zdCBpc05vdERhc2hDaGFyYWN0ZXIgPSBzcGFuLmlubmVySFRNTC50cmltKCkgIT09IFwiLVwiO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGlzU2luZ2xlTGV0dGVyICYmXG4gICAgICAgIGlzTm90RW1wdHkgJiZcbiAgICAgICAgaXNOb3RBbXBlcnNhbmQgJiZcbiAgICAgICAgaXNOb3REYXNoQ2hhcmFjdGVyXG4gICAgICApIHtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBgJHtzcGFuLnRleHRDb250ZW50fSZuYnNwO2A7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3BhbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGUoc3BhbnMpIHtcbiAgY29uc3QgbGluZXMgPSBbXTtcbiAgbGV0IHdvcmRzID0gW107XG5cbiAgbGV0IHBvc2l0aW9uID0gc3BhbnNbMF0ub2Zmc2V0VG9wO1xuXG4gIGVhY2goc3BhbnMsIChzcGFuLCBpbmRleCkgPT4ge1xuICAgIGlmIChzcGFuLm9mZnNldFRvcCA9PT0gcG9zaXRpb24pIHtcbiAgICAgIHdvcmRzLnB1c2goc3Bhbik7XG4gICAgfVxuXG4gICAgaWYgKHNwYW4ub2Zmc2V0VG9wICE9PSBwb3NpdGlvbikge1xuICAgICAgbGluZXMucHVzaCh3b3Jkcyk7XG4gICAgICB3b3JkcyA9IFtdO1xuICAgICAgd29yZHMucHVzaChzcGFuKTtcblxuICAgICAgcG9zaXRpb24gPSBzcGFuLm9mZnNldFRvcDtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggKyAxID09PSBzcGFucy5sZW5ndGgpIHtcbiAgICAgIGxpbmVzLnB1c2god29yZHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxpbmVzO1xufVxuXG5mdW5jdGlvbiBzcGxpdFRleHQodGV4dCwgZXhwcmVzc2lvbikge1xuICBjb25zdCBzcGxpdHMgPSB0ZXh0LnNwbGl0KFwiPGJyPlwiKTtcbiAgbGV0IHdvcmRzID0gW107XG5cbiAgZWFjaChzcGxpdHMsIChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIHdvcmRzLnB1c2goXCI8YnI+XCIpO1xuICAgIH1cbiAgICB3b3JkcyA9IHdvcmRzLmNvbmNhdChpdGVtLnNwbGl0KGV4cHJlc3Npb24pKTtcbiAgICBsZXQgaXNMaW5rID0gZmFsc2U7XG4gICAgbGV0IGxpbmsgPSBcIlwiO1xuXG4gICAgY29uc3QgaW5uZXJIVE1MID0gW107XG5cbiAgICBlYWNoKHdvcmRzLCAod29yZCkgPT4ge1xuICAgICAgaWYgKCFpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoXCI8YVwiKSB8fCB3b3JkLmluY2x1ZGVzKFwiPHN0cm9uZ1wiKSkpIHtcbiAgICAgICAgaXNMaW5rID0gdHJ1ZTtcbiAgICAgICAgbGluayA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmspIHtcbiAgICAgICAgbGluayArPSBgJHt3b3JkfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoXCIvYT5cIikgfHwgd29yZC5pbmNsdWRlcyhcIi9zdHJvbmc+XCIpKSkge1xuICAgICAgICBpbm5lckhUTUwucHVzaCh3b3JkKTtcbiAgICAgICAgbGluayA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNMaW5rICYmIGxpbmsgPT09IFwiXCIpIHtcbiAgICAgICAgaW5uZXJIVE1MLnB1c2god29yZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoXCIvYT5cIikgfHwgd29yZC5pbmNsdWRlcyhcIi9zdHJvbmc+XCIpKSkge1xuICAgICAgICBpc0xpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3b3JkcyA9IGlubmVySFRNTDtcbiAgfSk7XG5cbiAgcmV0dXJuIHdvcmRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpbmUobGluZSkge1xuICBsaW5lID0gbGluZS50cmltKCk7XG4gIGlmIChsaW5lID09PSBcIlwiIHx8IGxpbmUgPT09IFwiIFwiKSB7XG4gICAgcmV0dXJuIGxpbmU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpbmUgPT09IFwiPGJyPlwiXG4gICAgICA/IFwiPGJyPlwiXG4gICAgICA6IGA8c3Bhbj4ke2xpbmV9PC9zcGFuPmAgKyAobGluZS5sZW5ndGggPiAxID8gXCIgXCIgOiBcIlwiKTtcbiAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgc3R5bGUpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gY2FjaGUueCA/IGNhY2hlW3Byb3BlcnR5XSA6IF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7IC8vIG5vdGU6IHNjYWxlIHdvdWxkIG1hcCB0byBcInNjYWxlWCxzY2FsZVlcIiwgdGh1cyB3ZSBsb29wIGFuZCBhcHBseSB0aGVtIGJvdGguXG5cbiAgICAgIHByb3BlcnR5ID09PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGhpcy50Zm0uek9yaWdpbiA9IGNhY2hlLnpPcmlnaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3Byb3BlcnR5QWxpYXNlcy50cmFuc2Zvcm0uc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIF9zYXZlU3R5bGUuY2FsbChfdGhpcywgcCwgaXNOb3RDU1MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiID8gcHJvcHNbaV0gOiBwcm9wc1tpXS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoKCFpIHx8ICFpLmlzU3RhcnQpICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBpZiAoY2FjaGUuek9yaWdpbiAmJiBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdICs9IFwiIFwiICsgY2FjaGUuek9yaWdpbiArIFwicHhcIjsgLy8gc2luY2Ugd2UncmUgdW5jYWNoaW5nLCB3ZSBtdXN0IHB1dCB0aGUgek9yaWdpbiBiYWNrIGludG8gdGhlIHRyYW5zZm9ybU9yaWdpbiBzbyB0aGF0IHdlIGNhbiBwdWxsIGl0IG91dCBhY2N1cmF0ZWx5IHdoZW4gd2UgcGFyc2UgYWdhaW4uIE90aGVyd2lzZSwgd2UnZCBsb3NlIHRoZSB6IHBvcnRpb24gb2YgdGhlIG9yaWdpbiBzaW5jZSB3ZSBleHRyYWN0IGl0IHRvIHByb3RlY3QgZnJvbSBTYWZhcmkgYnVncy5cblxuICAgICAgICBjYWNoZS56T3JpZ2luID0gMDtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpOyAvLyBqdXN0IG1ha2Ugc3VyZSB0aGVyZSdzIGEgX2dzYXAgY2FjaGUgZGVmaW5lZCBiZWNhdXNlIHdlIHJlYWQgZnJvbSBpdCBpbiBfc2F2ZVN0eWxlKCkgYW5kIGl0J3MgbW9yZSBlZmZpY2llbnQgdG8ganVzdCBjaGVjayBpdCBoZXJlIG9uY2UuXG5cbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlICYmIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGZpcnN0MkNoYXJzO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBmaXJzdDJDaGFycyA9IHByb3BlcnR5LnN1YnN0cigwLCAyKTtcblxuICAgICAgaWYgKGZpcnN0MkNoYXJzID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShmaXJzdDJDaGFycyA9PT0gXCItLVwiID8gcHJvcGVydHkgOiBwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0b1BlcmNlbnQgJiYgKHByb3BlcnR5ID09PSBcImhlaWdodFwiIHx8IHByb3BlcnR5ID09PSBcIndpZHRoXCIpKSB7XG4gICAgICAvLyBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggd2lkdGgvaGVpZ2h0IHRoYXQncyBpbnNpZGUgYSBjb250YWluZXIgd2l0aCBwYWRkaW5nIGFuZC9vciBpdCdzIGEgZmxleGJveC9ncmlkIGNvbnRhaW5lciwgd2UgbXVzdCBhcHBseSBpdCB0byB0aGUgdGFyZ2V0IGl0c2VsZiByYXRoZXIgdGhhbiB0aGUgX3RlbXBEaXYgaW4gb3JkZXIgdG8gZW5zdXJlIGNvbXBsZXRlIGFjY3VyYWN5LCBmYWN0b3JpbmcgaW4gdGhlIHBhcmVudCdzIHBhZGRpbmcuXG4gICAgICB2YXIgdiA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gYW1vdW50ICsgdW5pdDtcbiAgICAgIHB4ID0gdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICB2ID8gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHYgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgfVxuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8xODMxMC1jbGlwcGF0aC1kb2VzbnQtd29yay1vbi1pb3MvXG4gICAgdmFyIHAgPSBfY2hlY2tQcm9wUHJlZml4KHByb3AsIHRhcmdldCwgMSksXG4gICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgcHJvcCA9IHA7XG4gICAgICBzdGFydCA9IHM7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgIHN0YXJ0ID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcImJvcmRlclRvcENvbG9yXCIpOyAvLyBGaXJlZm94IGJ1ZzogYWx3YXlzIHJlcG9ydHMgXCJib3JkZXJDb2xvclwiIGFzIFwiXCIsIHNvIHdlIG11c3QgZmFsbCBiYWNrIHRvIGJvcmRlclRvcENvbG9yLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcF07XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHN0YXJ0VmFsdWUgPyB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydFZhbHVlIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgLy8gbm90ZTogaW4gMy4zLjAgd2Ugc3dpdGNoZWQgdGFyZ2V0Lm9mZnNldFBhcmVudCB0byBfZG9jLmJvZHkuY29udGFpbnModGFyZ2V0KSB0byBhdm9pZCBbc29tZXRpbWVzIHVubmVjZXNzYXJ5XSBNdXRhdGlvbk9ic2VydmVyIGNhbGxzIGJ1dCB0aGF0IHdhc24ndCBhZGVxdWF0ZSBiZWNhdXNlIHRoZXJlIGFyZSBlZGdlIGNhc2VzIHdoZXJlIG5lc3RlZCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgbmVlZCB0byBnZXQgcmVwYXJlbnRlZCB0byBhY2N1cmF0ZWx5IHNlbnNlIHRyYW5zZm9ybXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM4OCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zNzVcbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTsgLy8gaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7IC8vIGFkZGVkIGluIDMuMTIuMywgcmV2ZXJ0ZWQgaW4gMy4xMi40OyByZXF1aXJlcyBtb3JlIGV4cGxvcmF0aW9uXG4gICAgLy8gXHR4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgIC8vIFx0eU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnTm9LaWxsID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWVcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfcm91bmRQcmVjaXNlID0gZnVuY3Rpb24gX3JvdW5kUHJlY2lzZSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG59LFxuICAgIC8vIGluY3JlYXNlZCBwcmVjaXNpb24gbW9zdGx5IGZvciB0aW1pbmcgdmFsdWVzLlxuX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgdmFyIG9wZXJhdG9yID0gdmFsdWUuY2hhckF0KDApLFxuICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICByZXR1cm4gb3BlcmF0b3IgPT09IFwiK1wiID8gc3RhcnQgKyBlbmQgOiBvcGVyYXRvciA9PT0gXCItXCIgPyBzdGFydCAtIGVuZCA6IG9wZXJhdG9yID09PSBcIipcIiA/IHN0YXJ0ICogZW5kIDogc3RhcnQgLyBlbmQ7XG59LFxuICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgIWNoaWxkLl9kdXIgJiYgY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0IDwgdGltZWxpbmUuX3RpbWUgJiYgKGNoaWxkLl9kdXIgfHwgIWNoaWxkLmFkZCkpIHtcbiAgICAvLyBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIG9yIGlmIGl0J3MgYmVpbmcgaW5zZXJ0ZWQgaW50byBhIHRpbWVsaW5lIEJFRk9SRSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5LiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLiBTcGVjaWFsIGNhc2U6IGlmIGl0J3MgYSB0aW1lbGluZSAoaGFzIC5hZGQoKSBtZXRob2QpIGFuZCBubyBkdXJhdGlvbiwgd2UgY2FuIHNraXAgcmVuZGVyaW5nIGJlY2F1c2UgdGhlIHVzZXIgbWF5IGJlIHBvcHVsYXRpbmcgaXQgQUZURVIgYWRkaW5nIGl0IHRvIGEgcGFyZW50IHRpbWVsaW5lICh1bmNvbnZlbnRpb25hbCwgYnV0IHBvc3NpYmxlLCBhbmQgd2Ugd291bGRuJ3Qgd2FudCBpdCB0byBnZXQgcmVtb3ZlZCBpZiB0aGUgcGFyZW50J3MgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUpLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgIV9yZXZlcnRpbmcgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdG90YWxUaW1lIDwgMCAmJiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZFByZWNpc2UoZHVyYXRpb24pIHx8IDAsXG4gICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgYW5pbWF0aW9uLl9kdXIgPSBkdXI7XG4gIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmMsXG4gIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLCBwZXJjZW50QW5pbWF0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQsXG4gICAgICBpc1BlcmNlbnQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICByZXR1cm4gKG9mZnNldCA9PT0gXCI8XCIgPyByZWNlbnQuX3N0YXJ0IDogcmVjZW50LmVuZFRpbWUocmVjZW50Ll9yZXBlYXQgPj0gMCkpICsgKHBhcnNlRmxvYXQocG9zaXRpb24uc3Vic3RyKDEpKSB8fCAwKSAqIChpc1BlcmNlbnQgPyAoaSA8IDAgPyByZWNlbnQgOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCkgLyAxMDAgOiAxKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHBvc2l0aW9uIGluIGxhYmVscyB8fCAobGFiZWxzW3Bvc2l0aW9uXSA9IGNsaXBwZWREdXJhdGlvbik7XG4gICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHBvc2l0aW9uLmNoYXJBdChpIC0gMSkgKyBwb3NpdGlvbi5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uID09IG51bGwgPyBjbGlwcGVkRHVyYXRpb24gOiArcG9zaXRpb247XG59LFxuICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgdmFyIGlzTGVnYWN5ID0gX2lzTnVtYmVyKHBhcmFtc1sxXSksXG4gICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICBpclZhcnMsXG4gICAgICBwYXJlbnQ7XG5cbiAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICB2YXJzLnBhcmVudCA9IHRpbWVsaW5lO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgaXJWYXJzID0gdmFycztcbiAgICBwYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgIC8vIGluaGVyaXRhbmNlIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGJ1dCBzb21lb25lIG1heSBoYXZlIHNldCBhIGRlZmF1bHQgaW4gYW4gYW5jZXN0b3IgdGltZWxpbmUuIFdlIGNvdWxkIGRvIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIpIGJ1dCB0aGF0J2QgZXhhY3QgYSBzbGlnaHQgcGVyZm9ybWFuY2UgcGVuYWx0eSBiZWNhdXNlIF9pbmhlcml0RGVmYXVsdHMoKSBhbHNvIHJ1bnMgaW4gdGhlIFR3ZWVuIGNvbnN0cnVjdG9yLiBXZSdyZSBwYXlpbmcgYSBzbWFsbCBrYiBwcmljZSBoZXJlIHRvIGdhaW4gc3BlZWQuXG4gICAgICBpclZhcnMgPSBwYXJlbnQudmFycy5kZWZhdWx0cyB8fCB7fTtcbiAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShpclZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTsgLy8gXCJmcm9tXCIgdmFyc1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG59LFxuICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG59LFxuICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbn0sXG4gICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9jb250ZXh0ICYmICFzY29wZSAmJiBfY29udGV4dC5zZWxlY3RvciA/IF9jb250ZXh0LnNlbGVjdG9yKHZhbHVlKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0IDwgbCAmJiB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUgPSBbXSxcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHJldHVybjtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvLyBVTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSB8fCBjb25maWcuaGVhZGxlc3MpIHtcbiAgICAvLyBlZGdlIGNhc2U6IHNvbWUgYnVpbGQgdG9vbHMgbWF5IHBhc3MgaW4gYSBudWxsL3VuZGVmaW5lZCB2YWx1ZVxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb3BzID0gW107XG4gICAgfSA6IGNvbmZpZyxcbiAgICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgICByYXdWYXJzOiAwXG4gICAgfSxcbiAgICAgICAgc3RhdGljcyA9IHtcbiAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICBnZXQ6IDAsXG4gICAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgICBhbGlhc2VzOiB7fSxcbiAgICAgIHJlZ2lzdGVyOiAwXG4gICAgfTtcblxuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gICAgfVxuXG4gICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gIH0gZWxzZSB7XG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUucHVzaChjb25maWcpO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgfHwgZWxhcHNlZCA8IDApICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUuZm9yRWFjaChfY3JlYXRlUGx1Z2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yYWYgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCBJbmZpbml0eTsgLy8gemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZyB8fCAzMywgX2xhZ1RocmVzaG9sZCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhd1RpbWUoKSA+IDAgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLU1hdGguYWJzKHRoaXMuX2RlbGF5KSwgdGhpcy5fdER1ciwgdFRpbWUpLCBzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5yZXZlcnQoY29uZmlnKTtcbiAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBjb25maWcua2lsbCAhPT0gZmFsc2UgJiYgdGhpcy5raWxsKCk7XG4gICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKE1hdGguYWJzKGFuaW1hdGlvbi5fdHMpIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMuX3NhdCA/IHRoaXMuX3NhdC5nbG9iYWxUaW1lKHJhd1RpbWUpIDogdGltZTsgLy8gdGhlIF9zdGFydEF0IHR3ZWVucyBmb3IgLmZyb21UbygpIGFuZCAuZnJvbSgpIHRoYXQgaGF2ZSBpbW1lZGlhdGVSZW5kZXIgc2hvdWxkIGFsd2F5cyBiZSBGSVJTVCBpbiB0aGUgdGltZWxpbmUgKGltcG9ydGFudCBmb3IgY29udGV4dC5yZXZlcnQoKSkuIFwiX3NhdFwiIHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlbiwgcmVmZXJyaW5nIHRvIHRoZSBwYXJlbnQgdHdlZW4gdGhhdCBjcmVhdGVkIHRoZSBfc3RhcnRBdC4gV2UgbXVzdCBkaXNjZXJuIGlmIHRoYXQgdHdlZW4gaGFkIGltbWVkaWF0ZVJlbmRlciBzbyB0aGF0IHdlIGNhbiBrbm93IHdoZXRoZXIgb3Igbm90IHRvIHByaW9yaXRpemUgaXQgaW4gcmV2ZXJ0KCkuXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6ICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpLiBfc2F0IHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTogZ3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pLCBzdGFnZ2VyOiAwLjV9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gc2tpcFJlY3Vyc2lvbiA/IF93YXJuKHByb3BlcnR5ICsgXCIgbm90IGVsaWdpYmxlIGZvciByZXNldFwiKSA6IDE7IC8vIGlmIHNvbWVvbmUgdHJpZXMgdG8gZG8gYSBxdWlja1RvKCkgb24gYSBzcGVjaWFsIHByb3BlcnR5IGxpa2UgYm9yZGVyUmFkaXVzIHdoaWNoIG11c3QgZ2V0IHNwbGl0IGludG8gNCBkaWZmZXJlbnQgcHJvcGVydGllcywgdGhhdCdzIG5vdCBlbGlnaWJsZSBmb3IgLnJlc2V0VG8oKS5cbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3NhcC5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQgJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrICYmIHRoaXMuX3RpbWUgIT09IGN5Y2xlRHVyYXRpb24gJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgICAgLy8gdGhpcy5fdGltZSB3aWxsID09PSBjeWNsZUR1cmF0aW9uIHdoZW4gd2UgcmVuZGVyIGF0IEVYQUNUTFkgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24uIFdpdGhvdXQgdGhpcyBjb25kaXRpb24sIGl0J2Qgb2Z0ZW4gZG8gdGhlIHJlcGVhdFJlZnJlc2ggcmVuZGVyIFRXSUNFIChhZ2FpbiBvbiB0aGUgdmVyeSBuZXh0IHRpY2spLlxuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmICEoZm9yY2UgJiYgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSkge1xuICAgICAgICAgIC8vIHJhcmUgZWRnZSBjYXNlIC0gZHVyaW5nIGluaXRpYWxpemF0aW9uLCBhbiBvblVwZGF0ZSBpbiB0aGUgX3N0YXJ0QXQgKC5mcm9tVG8oKSkgbWlnaHQgZm9yY2UgdGhpcyB0d2VlbiB0byByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkaXRjaCB0aGlzIHJlbmRlcigpIGNhbGwgc28gdGhhdCBpdCBkb2Vzbid0IHJldmVydCB0aGUgdmFsdWVzLiBCdXQgd2UgYWxzbyBkb24ndCB3YW50IHRvIGR1bXAgaWYgd2UncmUgZG9pbmcgYSByZXBlYXRSZWZyZXNoIHJlbmRlciFcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgc2tpcFJlY3Vyc2lvbikge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgMSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pOyAvLyB3ZSBtdXN0IHVzZSBvblJldmVyc2VDb21wbGV0ZSB0b28gZm9yIHRoaW5ncyBsaWtlIHRpbWVsaW5lLmFkZCgoKSA9PiB7Li4ufSkgd2hpY2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBpbiBCT1RIIGRpcmVjdGlvbnMgKGZvcndhcmQgYW5kIHJldmVyc2UpXG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9jb250ZXh0SUQgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYywgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGMuYWRkKG51bGwsIGZ1bmMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlkID0gX2NvbnRleHRJRCsrOyAvLyB0byB3b3JrIGFyb3VuZCBpc3N1ZXMgdGhhdCBmcmFtZXdvcmtzIGxpa2UgVnVlIGNhdXNlIGJ5IG1ha2luZyB0aGluZ3MgaW50byBQcm94aWVzIHdoaWNoIG1ha2UgaXQgaW1wb3NzaWJsZSB0byBkbyBzb21ldGhpbmcgbGlrZSBfbWVkaWEuaW5kZXhPZih0aGlzKSBiZWNhdXNlIFwidGhpc1wiIHdvdWxkIG5vIGxvbmdlciByZWZlciB0byB0aGUgQ29udGV4dCBpbnN0YW5jZSBpdHNlbGYgLSBpdCdkIHJlZmVyIHRvIGEgUHJveHkhIFdlIG5lZWRlZCBhIHdheSB0byBpZGVudGlmeSB0aGUgY29udGV4dCB1bmlxdWVseVxuXG4gICAgZnVuYyAmJiB0aGlzLmFkZChmdW5jKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZnVuYywgc2NvcGUpIHtcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gaWYgd2UgbmVlZCB0aGUgYWJpbGl0eSB0byBhZGQoKSBhbiBhbmltYXRpb24gdG8gYSBjb250ZXh0IGFuZCBmb3Igd2hhdGV2ZXIgcmVhc29uIGNhbm5vdCBjcmVhdGUgdGhhdCBhbmltYXRpb24gaW5zaWRlIG9mIGEgY29udGV4dC5hZGQoKCkgPT4gey4uLn0pIGZ1bmN0aW9uLlxuICAgIC8vIGlmIChuYW1lICYmIF9pc0Z1bmN0aW9uKG5hbWUucmV2ZXJ0KSkge1xuICAgIC8vIFx0dGhpcy5kYXRhLnB1c2gobmFtZSk7XG4gICAgLy8gXHRyZXR1cm4gKG5hbWUuX2N0eCA9IHRoaXMpO1xuICAgIC8vIH1cbiAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgIGZ1bmMgPSBuYW1lO1xuICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgIHByZXZTZWxlY3RvciA9IHNlbGYuc2VsZWN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuICAgICAgcHJldiAmJiBwcmV2ICE9PSBzZWxmICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgcmV0dXJuIHNlbGYuYWRkKG51bGwsIGZ1bmMpO1xuICAgIH0pIDogbmFtZSA/IHNlbGZbbmFtZV0gPSBmIDogZjtcbiAgfTtcblxuICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBfY29udGV4dDtcbiAgICBfY29udGV4dCA9IG51bGw7XG4gICAgZnVuYyh0aGlzKTtcbiAgICBfY29udGV4dCA9IHByZXY7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmICEoZS5wYXJlbnQgJiYgZS5wYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIikgJiYgYS5wdXNoKGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIF9wcm90bzUua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0LCBtYXRjaE1lZGlhKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHdlZW5zID0gX3RoaXM0LmdldFR3ZWVucygpLFxuICAgICAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHQ7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIEZsaXAgcGx1Z2luIHR3ZWVucyBhcmUgdmVyeSBkaWZmZXJlbnQgaW4gdGhhdCB0aGV5IHNob3VsZCBhY3R1YWxseSBiZSBwdXNoZWQgdG8gdGhlaXIgZW5kLiBUaGUgcGx1Z2luIHJlcGxhY2VzIHRoZSB0aW1lbGluZSdzIC5yZXZlcnQoKSBtZXRob2QgdG8gZG8gZXhhY3RseSB0aGF0LiBCdXQgd2UgYWxzbyBuZWVkIHRvIHJlbW92ZSBhbnkgb2YgdGhvc2UgbmVzdGVkIHR3ZWVucyBpbnNpZGUgdGhlIGZsaXAgdGltZWxpbmUgc28gdGhhdCB0aGV5IGRvbid0IGdldCBpbmRpdmlkdWFsbHkgcmV2ZXJ0ZWQuXG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgICAgdC5yZXZlcnQoKTtcbiAgICAgICAgICAgIHQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2goZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG5cblxuICAgICAgICB0d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGc6IHQuX2R1ciB8fCB0Ll9kZWxheSB8fCB0Ll9zYXQgJiYgIXQuX3NhdC52YXJzLmltbWVkaWF0ZVJlbmRlciA/IHQuZ2xvYmFsVGltZSgwKSA6IC1JbmZpbml0eSxcbiAgICAgICAgICAgIHQ6IHRcbiAgICAgICAgICB9O1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIuZyAtIGEuZyB8fCAtSW5maW5pdHk7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgY3JlYXRlZCwgYW5kIHRoZXknbGwgYWxsIGhhdmUgdGhlIHNhbWUgZ2xvYmFsVGltZSAoLTEpIHNvIHRoZSBcIiB8fCAtMVwiIGluIHRoZSBzb3J0IGtlZXBzIHRoZSBvcmRlciBwcm9wZXJseS5cblxuICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgd2UgbG9vcCBiYWNrd2FyZHMgc28gdGhhdCwgZm9yIGV4YW1wbGUsIFNwbGl0VGV4dHMgdGhhdCB3ZXJlIGNyZWF0ZWQgbGF0ZXIgb24gdGhlIHNhbWUgZWxlbWVudCBnZXQgcmV2ZXJ0ZWQgZmlyc3RcbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICAgICAgICBpZiAodC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICAgICAgICAgIHQuc2Nyb2xsVHJpZ2dlciAmJiB0LnNjcm9sbFRyaWdnZXIucmV2ZXJ0KCk7XG4gICAgICAgICAgICAgIHQua2lsbCgpOyAvLyBkb24ndCByZXZlcnQoKSB0aGUgdGltZWxpbmUgYmVjYXVzZSB0aGF0J3MgZHVwbGljYXRpbmcgZWZmb3J0cyBzaW5jZSB3ZSBhbHJlYWR5IHJldmVydGVkIGFsbCB0aGUgdHdlZW5zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICEodCBpbnN0YW5jZW9mIFR3ZWVuKSAmJiB0LnJldmVydCAmJiB0LnJldmVydChyZXZlcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5fci5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIGYocmV2ZXJ0LCBfdGhpczQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczQuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgICB9KSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5raWxsICYmIGUua2lsbCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgaWYgKG1hdGNoTWVkaWEpIHtcbiAgICAgIHZhciBpID0gX21lZGlhLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAvLyBwcmV2aW91c2x5LCB3ZSBjaGVja2VkIF9tZWRpYS5pbmRleE9mKHRoaXMpLCBidXQgc29tZSBmcmFtZXdvcmtzIGxpa2UgVnVlIGVuZm9yY2UgUHJveHkgb2JqZWN0cyB0aGF0IG1ha2UgaXQgaW1wb3NzaWJsZSB0byBnZXQgdGhlIHByb3BlciByZXN1bHQgdGhhdCB3YXksIHNvIHdlIG11c3QgdXNlIGEgdW5pcXVlIElEIG51bWJlciBpbnN0ZWFkLlxuICAgICAgICBfbWVkaWFbaV0uaWQgPT09IHRoaXMuaWQgJiYgX21lZGlhLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNS5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRleHQ7XG59KCk7XG5cbnZhciBNYXRjaE1lZGlhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgX2NvbnRleHQgJiYgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgX2NvbnRleHQgJiYgIWNvbnRleHQuc2VsZWN0b3IgJiYgKGNvbnRleHQuc2VsZWN0b3IgPSBfY29udGV4dC5zZWxlY3Rvcik7IC8vIGluIGNhc2UgYSBjb250ZXh0IGlzIGNyZWF0ZWQgaW5zaWRlIGEgY29udGV4dC4gTGlrZSBhIGdzYXAubWF0Y2hNZWRpYSgpIHRoYXQncyBpbnNpZGUgYSBzY29wZWQgZ3NhcC5jb250ZXh0KClcblxuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCwgZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmFkZChudWxsLCBmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIlwidXNlIHN0cmljdFwiO3ZhciBfX2Fzc2lnbj10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe19fYXNzaWduPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHQpe2Zvcih2YXIgcyxpPTEsbj1hcmd1bWVudHMubGVuZ3RoO2k8bjtpKyspe3M9YXJndW1lbnRzW2ldO2Zvcih2YXIgcCBpbiBzKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLHApKXRbcF09c1twXX1yZXR1cm4gdH07cmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgbmFtZWRfcmVmZXJlbmNlc18xPXJlcXVpcmUoXCIuL25hbWVkLXJlZmVyZW5jZXNcIik7dmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMT1yZXF1aXJlKFwiLi9udW1lcmljLXVuaWNvZGUtbWFwXCIpO3ZhciBzdXJyb2dhdGVfcGFpcnNfMT1yZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7dmFyIGFsbE5hbWVkUmVmZXJlbmNlcz1fX2Fzc2lnbihfX2Fzc2lnbih7fSxuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzKSx7YWxsOm5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMuaHRtbDV9KTtmdW5jdGlvbiByZXBsYWNlVXNpbmdSZWdFeHAobWFjcm9UZXh0LG1hY3JvUmVnRXhwLG1hY3JvUmVwbGFjZXIpe21hY3JvUmVnRXhwLmxhc3RJbmRleD0wO3ZhciByZXBsYWNlTWF0Y2g9bWFjcm9SZWdFeHAuZXhlYyhtYWNyb1RleHQpO3ZhciByZXBsYWNlUmVzdWx0O2lmKHJlcGxhY2VNYXRjaCl7cmVwbGFjZVJlc3VsdD1cIlwiO3ZhciByZXBsYWNlTGFzdEluZGV4PTA7ZG97aWYocmVwbGFjZUxhc3RJbmRleCE9PXJlcGxhY2VNYXRjaC5pbmRleCl7cmVwbGFjZVJlc3VsdCs9bWFjcm9UZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4LHJlcGxhY2VNYXRjaC5pbmRleCl9dmFyIHJlcGxhY2VJbnB1dD1yZXBsYWNlTWF0Y2hbMF07cmVwbGFjZVJlc3VsdCs9bWFjcm9SZXBsYWNlcihyZXBsYWNlSW5wdXQpO3JlcGxhY2VMYXN0SW5kZXg9cmVwbGFjZU1hdGNoLmluZGV4K3JlcGxhY2VJbnB1dC5sZW5ndGh9d2hpbGUocmVwbGFjZU1hdGNoPW1hY3JvUmVnRXhwLmV4ZWMobWFjcm9UZXh0KSk7aWYocmVwbGFjZUxhc3RJbmRleCE9PW1hY3JvVGV4dC5sZW5ndGgpe3JlcGxhY2VSZXN1bHQrPW1hY3JvVGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleCl9fWVsc2V7cmVwbGFjZVJlc3VsdD1tYWNyb1RleHR9cmV0dXJuIHJlcGxhY2VSZXN1bHR9dmFyIGVuY29kZVJlZ0V4cHM9e3NwZWNpYWxDaGFyczovWzw+J1wiJl0vZyxub25Bc2NpaTovWzw+J1wiJlxcdTAwODAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nLG5vbkFzY2lpUHJpbnRhYmxlOi9bPD4nXCImXFx4MDEtXFx4MDhcXHgxMS1cXHgxNVxceDE3LVxceDFGXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nLG5vbkFzY2lpUHJpbnRhYmxlT25seTovW1xceDAxLVxceDA4XFx4MTEtXFx4MTVcXHgxNy1cXHgxRlxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vZyxleHRlbnNpdmU6L1tcXHgwMS1cXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4MmNcXHgyZS1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3ZFxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vZ307dmFyIGRlZmF1bHRFbmNvZGVPcHRpb25zPXttb2RlOlwic3BlY2lhbENoYXJzXCIsbGV2ZWw6XCJhbGxcIixudW1lcmljOlwiZGVjaW1hbFwifTtmdW5jdGlvbiBlbmNvZGUodGV4dCxfYSl7dmFyIF9iPV9hPT09dm9pZCAwP2RlZmF1bHRFbmNvZGVPcHRpb25zOl9hLF9jPV9iLm1vZGUsbW9kZT1fYz09PXZvaWQgMD9cInNwZWNpYWxDaGFyc1wiOl9jLF9kPV9iLm51bWVyaWMsbnVtZXJpYz1fZD09PXZvaWQgMD9cImRlY2ltYWxcIjpfZCxfZT1fYi5sZXZlbCxsZXZlbD1fZT09PXZvaWQgMD9cImFsbFwiOl9lO2lmKCF0ZXh0KXtyZXR1cm5cIlwifXZhciBlbmNvZGVSZWdFeHA9ZW5jb2RlUmVnRXhwc1ttb2RlXTt2YXIgcmVmZXJlbmNlcz1hbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmNoYXJhY3RlcnM7dmFyIGlzSGV4PW51bWVyaWM9PT1cImhleGFkZWNpbWFsXCI7cmV0dXJuIHJlcGxhY2VVc2luZ1JlZ0V4cCh0ZXh0LGVuY29kZVJlZ0V4cCwoZnVuY3Rpb24oaW5wdXQpe3ZhciByZXN1bHQ9cmVmZXJlbmNlc1tpbnB1dF07aWYoIXJlc3VsdCl7dmFyIGNvZGU9aW5wdXQubGVuZ3RoPjE/c3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KGlucHV0LDApOmlucHV0LmNoYXJDb2RlQXQoMCk7cmVzdWx0PShpc0hleD9cIiYjeFwiK2NvZGUudG9TdHJpbmcoMTYpOlwiJiNcIitjb2RlKStcIjtcIn1yZXR1cm4gcmVzdWx0fSkpfWV4cG9ydHMuZW5jb2RlPWVuY29kZTt2YXIgZGVmYXVsdERlY29kZU9wdGlvbnM9e3Njb3BlOlwiYm9keVwiLGxldmVsOlwiYWxsXCJ9O3ZhciBzdHJpY3Q9LyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOy9nO3ZhciBhdHRyaWJ1dGU9LyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspWzs9XT8vZzt2YXIgYmFzZURlY29kZVJlZ0V4cHM9e3htbDp7c3RyaWN0OnN0cmljdCxhdHRyaWJ1dGU6YXR0cmlidXRlLGJvZHk6bmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLnhtbH0saHRtbDQ6e3N0cmljdDpzdHJpY3QsYXR0cmlidXRlOmF0dHJpYnV0ZSxib2R5Om5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNH0saHRtbDU6e3N0cmljdDpzdHJpY3QsYXR0cmlidXRlOmF0dHJpYnV0ZSxib2R5Om5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNX19O3ZhciBkZWNvZGVSZWdFeHBzPV9fYXNzaWduKF9fYXNzaWduKHt9LGJhc2VEZWNvZGVSZWdFeHBzKSx7YWxsOmJhc2VEZWNvZGVSZWdFeHBzLmh0bWw1fSk7dmFyIGZyb21DaGFyQ29kZT1TdHJpbmcuZnJvbUNoYXJDb2RlO3ZhciBvdXRPZkJvdW5kc0NoYXI9ZnJvbUNoYXJDb2RlKDY1NTMzKTt2YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnM9e2xldmVsOlwiYWxsXCJ9O2Z1bmN0aW9uIGdldERlY29kZWRFbnRpdHkoZW50aXR5LHJlZmVyZW5jZXMsaXNBdHRyaWJ1dGUsaXNTdHJpY3Qpe3ZhciBkZWNvZGVSZXN1bHQ9ZW50aXR5O3ZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcj1lbnRpdHlbZW50aXR5Lmxlbmd0aC0xXTtpZihpc0F0dHJpYnV0ZSYmZGVjb2RlRW50aXR5TGFzdENoYXI9PT1cIj1cIil7ZGVjb2RlUmVzdWx0PWVudGl0eX1lbHNlIGlmKGlzU3RyaWN0JiZkZWNvZGVFbnRpdHlMYXN0Q2hhciE9PVwiO1wiKXtkZWNvZGVSZXN1bHQ9ZW50aXR5fWVsc2V7dmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlPXJlZmVyZW5jZXNbZW50aXR5XTtpZihkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZSl7ZGVjb2RlUmVzdWx0PWRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlfWVsc2UgaWYoZW50aXR5WzBdPT09XCImXCImJmVudGl0eVsxXT09PVwiI1wiKXt2YXIgZGVjb2RlU2Vjb25kQ2hhcj1lbnRpdHlbMl07dmFyIGRlY29kZUNvZGU9ZGVjb2RlU2Vjb25kQ2hhcj09XCJ4XCJ8fGRlY29kZVNlY29uZENoYXI9PVwiWFwiP3BhcnNlSW50KGVudGl0eS5zdWJzdHIoMyksMTYpOnBhcnNlSW50KGVudGl0eS5zdWJzdHIoMikpO2RlY29kZVJlc3VsdD1kZWNvZGVDb2RlPj0xMTE0MTExP291dE9mQm91bmRzQ2hhcjpkZWNvZGVDb2RlPjY1NTM1P3N1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZSk6ZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXXx8ZGVjb2RlQ29kZSl9fXJldHVybiBkZWNvZGVSZXN1bHR9ZnVuY3Rpb24gZGVjb2RlRW50aXR5KGVudGl0eSxfYSl7dmFyIF9iPShfYT09PXZvaWQgMD9kZWZhdWx0RGVjb2RlRW50aXR5T3B0aW9uczpfYSkubGV2ZWwsbGV2ZWw9X2I9PT12b2lkIDA/XCJhbGxcIjpfYjtpZighZW50aXR5KXtyZXR1cm5cIlwifXJldHVybiBnZXREZWNvZGVkRW50aXR5KGVudGl0eSxhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzLGZhbHNlLGZhbHNlKX1leHBvcnRzLmRlY29kZUVudGl0eT1kZWNvZGVFbnRpdHk7ZnVuY3Rpb24gZGVjb2RlKHRleHQsX2Epe3ZhciBfYj1fYT09PXZvaWQgMD9kZWZhdWx0RGVjb2RlT3B0aW9uczpfYSxfYz1fYi5sZXZlbCxsZXZlbD1fYz09PXZvaWQgMD9cImFsbFwiOl9jLF9kPV9iLnNjb3BlLHNjb3BlPV9kPT09dm9pZCAwP2xldmVsPT09XCJ4bWxcIj9cInN0cmljdFwiOlwiYm9keVwiOl9kO2lmKCF0ZXh0KXtyZXR1cm5cIlwifXZhciBkZWNvZGVSZWdFeHA9ZGVjb2RlUmVnRXhwc1tsZXZlbF1bc2NvcGVdO3ZhciByZWZlcmVuY2VzPWFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uZW50aXRpZXM7dmFyIGlzQXR0cmlidXRlPXNjb3BlPT09XCJhdHRyaWJ1dGVcIjt2YXIgaXNTdHJpY3Q9c2NvcGU9PT1cInN0cmljdFwiO3JldHVybiByZXBsYWNlVXNpbmdSZWdFeHAodGV4dCxkZWNvZGVSZWdFeHAsKGZ1bmN0aW9uKGVudGl0eSl7cmV0dXJuIGdldERlY29kZWRFbnRpdHkoZW50aXR5LHJlZmVyZW5jZXMsaXNBdHRyaWJ1dGUsaXNTdHJpY3QpfSkpfWV4cG9ydHMuZGVjb2RlPWRlY29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPS4vaW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmJvZHlSZWdFeHBzPXt4bWw6LyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZyxodG1sNDovJm5vdGluO3wmKD86bmJzcHxpZXhjbHxjZW50fHBvdW5kfGN1cnJlbnx5ZW58YnJ2YmFyfHNlY3R8dW1sfGNvcHl8b3JkZnxsYXF1b3xub3R8c2h5fHJlZ3xtYWNyfGRlZ3xwbHVzbW58c3VwMnxzdXAzfGFjdXRlfG1pY3JvfHBhcmF8bWlkZG90fGNlZGlsfHN1cDF8b3JkbXxyYXF1b3xmcmFjMTR8ZnJhYzEyfGZyYWMzNHxpcXVlc3R8QWdyYXZlfEFhY3V0ZXxBY2lyY3xBdGlsZGV8QXVtbHxBcmluZ3xBRWxpZ3xDY2VkaWx8RWdyYXZlfEVhY3V0ZXxFY2lyY3xFdW1sfElncmF2ZXxJYWN1dGV8SWNpcmN8SXVtbHxFVEh8TnRpbGRlfE9ncmF2ZXxPYWN1dGV8T2NpcmN8T3RpbGRlfE91bWx8dGltZXN8T3NsYXNofFVncmF2ZXxVYWN1dGV8VWNpcmN8VXVtbHxZYWN1dGV8VEhPUk58c3psaWd8YWdyYXZlfGFhY3V0ZXxhY2lyY3xhdGlsZGV8YXVtbHxhcmluZ3xhZWxpZ3xjY2VkaWx8ZWdyYXZlfGVhY3V0ZXxlY2lyY3xldW1sfGlncmF2ZXxpYWN1dGV8aWNpcmN8aXVtbHxldGh8bnRpbGRlfG9ncmF2ZXxvYWN1dGV8b2NpcmN8b3RpbGRlfG91bWx8ZGl2aWRlfG9zbGFzaHx1Z3JhdmV8dWFjdXRlfHVjaXJjfHV1bWx8eWFjdXRlfHRob3JufHl1bWx8cXVvdHxhbXB8bHR8Z3R8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyZjZW50ZXJkb3Q7fCZjb3B5c3I7fCZkaXZpZGVvbnRpbWVzO3wmZ3RjYzt8Jmd0Y2lyO3wmZ3Rkb3Q7fCZndGxQYXI7fCZndHF1ZXN0O3wmZ3RyYXBwcm94O3wmZ3RyYXJyO3wmZ3RyZG90O3wmZ3RyZXFsZXNzO3wmZ3RyZXFxbGVzczt8Jmd0cmxlc3M7fCZndHJzaW07fCZsdGNjO3wmbHRjaXI7fCZsdGRvdDt8Jmx0aHJlZTt8Jmx0aW1lczt8Jmx0bGFycjt8Jmx0cXVlc3Q7fCZsdHJQYXI7fCZsdHJpO3wmbHRyaWU7fCZsdHJpZjt8Jm5vdGluO3wmbm90aW5FO3wmbm90aW5kb3Q7fCZub3RpbnZhO3wmbm90aW52Yjt8Jm5vdGludmM7fCZub3RuaTt8Jm5vdG5pdmE7fCZub3RuaXZiO3wmbm90bml2Yzt8JnBhcmFsbGVsO3wmdGltZXNiO3wmdGltZXNiYXI7fCZ0aW1lc2Q7fCYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZ307ZXhwb3J0cy5uYW1lZFJlZmVyZW5jZXM9e3htbDp7ZW50aXRpZXM6e1wiJmx0O1wiOlwiPFwiLFwiJmd0O1wiOlwiPlwiLFwiJnF1b3Q7XCI6J1wiJyxcIiZhcG9zO1wiOlwiJ1wiLFwiJmFtcDtcIjpcIiZcIn0sY2hhcmFjdGVyczp7XCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCImXCI6XCImYW1wO1wifX0saHRtbDQ6e2VudGl0aWVzOntcIiZhcG9zO1wiOlwiJ1wiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImaWV4Y2xcIjpcIsKhXCIsXCImaWV4Y2w7XCI6XCLCoVwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJnllblwiOlwiwqVcIixcIiZ5ZW47XCI6XCLCpVwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJnNlY3RcIjpcIsKnXCIsXCImc2VjdDtcIjpcIsKnXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZub3RcIjpcIsKsXCIsXCImbm90O1wiOlwiwqxcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZyZWdcIjpcIsKuXCIsXCImcmVnO1wiOlwiwq5cIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJnBsdXNtblwiOlwiwrFcIixcIiZwbHVzbW47XCI6XCLCsVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImbWlkZG90XCI6XCLCt1wiLFwiJm1pZGRvdDtcIjpcIsK3XCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImb3JkbVwiOlwiwrpcIixcIiZvcmRtO1wiOlwiwrpcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImZnJhYzE0XCI6XCLCvFwiLFwiJmZyYWMxNDtcIjpcIsK8XCIsXCImZnJhYzEyXCI6XCLCvVwiLFwiJmZyYWMxMjtcIjpcIsK9XCIsXCImZnJhYzM0XCI6XCLCvlwiLFwiJmZyYWMzNDtcIjpcIsK+XCIsXCImaXF1ZXN0XCI6XCLCv1wiLFwiJmlxdWVzdDtcIjpcIsK/XCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWNpcmNcIjpcIsOCXCIsXCImQWNpcmM7XCI6XCLDglwiLFwiJkF0aWxkZVwiOlwiw4NcIixcIiZBdGlsZGU7XCI6XCLDg1wiLFwiJkF1bWxcIjpcIsOEXCIsXCImQXVtbDtcIjpcIsOEXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZFZ3JhdmVcIjpcIsOIXCIsXCImRWdyYXZlO1wiOlwiw4hcIixcIiZFYWN1dGVcIjpcIsOJXCIsXCImRWFjdXRlO1wiOlwiw4lcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZJZ3JhdmVcIjpcIsOMXCIsXCImSWdyYXZlO1wiOlwiw4xcIixcIiZJYWN1dGVcIjpcIsONXCIsXCImSWFjdXRlO1wiOlwiw41cIixcIiZJY2lyY1wiOlwiw45cIixcIiZJY2lyYztcIjpcIsOOXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZFVEhcIjpcIsOQXCIsXCImRVRIO1wiOlwiw5BcIixcIiZOdGlsZGVcIjpcIsORXCIsXCImTnRpbGRlO1wiOlwiw5FcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlV1bWxcIjpcIsOcXCIsXCImVXVtbDtcIjpcIsOcXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhYWN1dGVcIjpcIsOhXCIsXCImYWFjdXRlO1wiOlwiw6FcIixcIiZhY2lyY1wiOlwiw6JcIixcIiZhY2lyYztcIjpcIsOiXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYWVsaWdcIjpcIsOmXCIsXCImYWVsaWc7XCI6XCLDplwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlhY3V0ZVwiOlwiw61cIixcIiZpYWN1dGU7XCI6XCLDrVwiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJm50aWxkZVwiOlwiw7FcIixcIiZudGlsZGU7XCI6XCLDsVwiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9jaXJjXCI6XCLDtFwiLFwiJm9jaXJjO1wiOlwiw7RcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdW1sXCI6XCLDtlwiLFwiJm91bWw7XCI6XCLDtlwiLFwiJmRpdmlkZVwiOlwiw7dcIixcIiZkaXZpZGU7XCI6XCLDt1wiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVhY3V0ZVwiOlwiw7pcIixcIiZ1YWN1dGU7XCI6XCLDulwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnlhY3V0ZVwiOlwiw71cIixcIiZ5YWN1dGU7XCI6XCLDvVwiLFwiJnRob3JuXCI6XCLDvlwiLFwiJnRob3JuO1wiOlwiw75cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZhbXBcIjpcIiZcIixcIiZhbXA7XCI6XCImXCIsXCImbHRcIjpcIjxcIixcIiZsdDtcIjpcIjxcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZzY2Fyb247XCI6XCLFoVwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJmNpcmM7XCI6XCLLhlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW1zcDtcIjpcIuKAg1wiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnp3bmo7XCI6XCLigIxcIixcIiZ6d2o7XCI6XCLigI1cIixcIiZscm07XCI6XCLigI5cIixcIiZybG07XCI6XCLigI9cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImbGRxdW87XCI6XCLigJxcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJmJkcXVvO1wiOlwi4oCeXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImRGFnZ2VyO1wiOlwi4oChXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImcnNhcXVvO1wiOlwi4oC6XCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJkFscGhhO1wiOlwizpFcIixcIiZCZXRhO1wiOlwizpJcIixcIiZHYW1tYTtcIjpcIs6TXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkVwc2lsb247XCI6XCLOlVwiLFwiJlpldGE7XCI6XCLOllwiLFwiJkV0YTtcIjpcIs6XXCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJklvdGE7XCI6XCLOmVwiLFwiJkthcHBhO1wiOlwizppcIixcIiZMYW1iZGE7XCI6XCLOm1wiLFwiJk11O1wiOlwizpxcIixcIiZOdTtcIjpcIs6dXCIsXCImWGk7XCI6XCLOnlwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJlBpO1wiOlwizqBcIixcIiZSaG87XCI6XCLOoVwiLFwiJlNpZ21hO1wiOlwizqNcIixcIiZUYXU7XCI6XCLOpFwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlBoaTtcIjpcIs6mXCIsXCImQ2hpO1wiOlwizqdcIixcIiZQc2k7XCI6XCLOqFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYmV0YTtcIjpcIs6yXCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZ6ZXRhO1wiOlwizrZcIixcIiZldGE7XCI6XCLOt1wiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZpb3RhO1wiOlwizrlcIixcIiZrYXBwYTtcIjpcIs66XCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZtdTtcIjpcIs68XCIsXCImbnU7XCI6XCLOvVwiLFwiJnhpO1wiOlwizr5cIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZwaTtcIjpcIs+AXCIsXCImcmhvO1wiOlwiz4FcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImY2hpO1wiOlwiz4dcIixcIiZwc2k7XCI6XCLPiFwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnBpdjtcIjpcIs+WXCIsXCImYnVsbDtcIjpcIuKAolwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJnByaW1lO1wiOlwi4oCyXCIsXCImUHJpbWU7XCI6XCLigLNcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImd2VpZXJwO1wiOlwi4oSYXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImdHJhZGU7XCI6XCLihKJcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJnVhcnI7XCI6XCLihpFcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZ1QXJyO1wiOlwi4oeRXCIsXCImckFycjtcIjpcIuKHklwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImcGFydDtcIjpcIuKIglwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZuYWJsYTtcIjpcIuKIh1wiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZub3RpbjtcIjpcIuKIiVwiLFwiJm5pO1wiOlwi4oiLXCIsXCImcHJvZDtcIjpcIuKIj1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImcmFkaWM7XCI6XCLiiJpcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImaW5maW47XCI6XCLiiJ5cIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZvcjtcIjpcIuKIqFwiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmN1cDtcIjpcIuKIqlwiLFwiJmludDtcIjpcIuKIq1wiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJmNvbmc7XCI6XCLiiYVcIixcIiZhc3ltcDtcIjpcIuKJiFwiLFwiJm5lO1wiOlwi4omgXCIsXCImZXF1aXY7XCI6XCLiiaFcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmdlO1wiOlwi4omlXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3VwO1wiOlwi4oqDXCIsXCImbnN1YjtcIjpcIuKKhFwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdXBlO1wiOlwi4oqHXCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZwZXJwO1wiOlwi4oqlXCIsXCImc2RvdDtcIjpcIuKLhVwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZyZmxvb3I7XCI6XCLijItcIixcIiZsYW5nO1wiOlwi4oypXCIsXCImcmFuZztcIjpcIuKMqlwiLFwiJmxvejtcIjpcIuKXilwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImaGVhcnRzO1wiOlwi4pmlXCIsXCImZGlhbXM7XCI6XCLimaZcIn0sY2hhcmFjdGVyczp7XCInXCI6XCImYXBvcztcIixcIsKgXCI6XCImbmJzcDtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLCo1wiOlwiJnBvdW5kO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLCpVwiOlwiJnllbjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwiwqdcIjpcIiZzZWN0O1wiLFwiwqhcIjpcIiZ1bWw7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCq1wiOlwiJmxhcXVvO1wiLFwiwqxcIjpcIiZub3Q7XCIsXCLCrVwiOlwiJnNoeTtcIixcIsKuXCI6XCImcmVnO1wiLFwiwq9cIjpcIiZtYWNyO1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLCsVwiOlwiJnBsdXNtbjtcIixcIsKyXCI6XCImc3VwMjtcIixcIsKzXCI6XCImc3VwMztcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLCtVwiOlwiJm1pY3JvO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrpcIjpcIiZvcmRtO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIsK8XCI6XCImZnJhYzE0O1wiLFwiwr1cIjpcIiZmcmFjMTI7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLDgVwiOlwiJkFhY3V0ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLDg1wiOlwiJkF0aWxkZTtcIixcIsOEXCI6XCImQXVtbDtcIixcIsOFXCI6XCImQXJpbmc7XCIsXCLDhlwiOlwiJkFFbGlnO1wiLFwiw4dcIjpcIiZDY2VkaWw7XCIsXCLDiFwiOlwiJkVncmF2ZTtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcIsOLXCI6XCImRXVtbDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwiw49cIjpcIiZJdW1sO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIsOSXCI6XCImT2dyYXZlO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwiw5VcIjpcIiZPdGlsZGU7XCIsXCLDllwiOlwiJk91bWw7XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsOaXCI6XCImVWFjdXRlO1wiLFwiw5tcIjpcIiZVY2lyYztcIixcIsOcXCI6XCImVXVtbDtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsOoXCI6XCImZWdyYXZlO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLDqlwiOlwiJmVjaXJjO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLDsFwiOlwiJmV0aDtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLDs1wiOlwiJm9hY3V0ZTtcIixcIsO0XCI6XCImb2NpcmM7XCIsXCLDtVwiOlwiJm90aWxkZTtcIixcIsO2XCI6XCImb3VtbDtcIixcIsO3XCI6XCImZGl2aWRlO1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIsO6XCI6XCImdWFjdXRlO1wiLFwiw7tcIjpcIiZ1Y2lyYztcIixcIsO8XCI6XCImdXVtbDtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsO/XCI6XCImeXVtbDtcIiwnXCInOlwiJnF1b3Q7XCIsXCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsWTXCI6XCImb2VsaWc7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWhXCI6XCImc2Nhcm9uO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwiy5xcIjpcIiZ0aWxkZTtcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oCMXCI6XCImenduajtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKAj1wiOlwiJnJsbTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKAmVwiOlwiJnJzcXVvO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLigJxcIjpcIiZsZHF1bztcIixcIuKAnVwiOlwiJnJkcXVvO1wiLFwi4oCeXCI6XCImYmRxdW87XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLigKFcIjpcIiZEYWdnZXI7XCIsXCLigLBcIjpcIiZwZXJtaWw7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLigLpcIjpcIiZyc2FxdW87XCIsXCLigqxcIjpcIiZldXJvO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwizpFcIjpcIiZBbHBoYTtcIixcIs6SXCI6XCImQmV0YTtcIixcIs6TXCI6XCImR2FtbWE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwizpZcIjpcIiZaZXRhO1wiLFwizpdcIjpcIiZFdGE7XCIsXCLOmFwiOlwiJlRoZXRhO1wiLFwizplcIjpcIiZJb3RhO1wiLFwizppcIjpcIiZLYXBwYTtcIixcIs6bXCI6XCImTGFtYmRhO1wiLFwizpxcIjpcIiZNdTtcIixcIs6dXCI6XCImTnU7XCIsXCLOnlwiOlwiJlhpO1wiLFwizp9cIjpcIiZPbWljcm9uO1wiLFwizqBcIjpcIiZQaTtcIixcIs6hXCI6XCImUmhvO1wiLFwizqNcIjpcIiZTaWdtYTtcIixcIs6kXCI6XCImVGF1O1wiLFwizqVcIjpcIiZVcHNpbG9uO1wiLFwizqZcIjpcIiZQaGk7XCIsXCLOp1wiOlwiJkNoaTtcIixcIs6oXCI6XCImUHNpO1wiLFwizqlcIjpcIiZPbWVnYTtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLOslwiOlwiJmJldGE7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIs61XCI6XCImZXBzaWxvbjtcIixcIs62XCI6XCImemV0YTtcIixcIs63XCI6XCImZXRhO1wiLFwizrhcIjpcIiZ0aGV0YTtcIixcIs65XCI6XCImaW90YTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIs68XCI6XCImbXU7XCIsXCLOvVwiOlwiJm51O1wiLFwizr5cIjpcIiZ4aTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIs+AXCI6XCImcGk7XCIsXCLPgVwiOlwiJnJobztcIixcIs+CXCI6XCImc2lnbWFmO1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+EXCI6XCImdGF1O1wiLFwiz4VcIjpcIiZ1cHNpbG9uO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPh1wiOlwiJmNoaTtcIixcIs+IXCI6XCImcHNpO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs+RXCI6XCImdGhldGFzeW07XCIsXCLPklwiOlwiJnVwc2loO1wiLFwiz5ZcIjpcIiZwaXY7XCIsXCLigKJcIjpcIiZidWxsO1wiLFwi4oCmXCI6XCImaGVsbGlwO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLigLNcIjpcIiZQcmltZTtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLihJhcIjpcIiZ3ZWllcnA7XCIsXCLihJFcIjpcIiZpbWFnZTtcIixcIuKEnFwiOlwiJnJlYWw7XCIsXCLihKJcIjpcIiZ0cmFkZTtcIixcIuKEtVwiOlwiJmFsZWZzeW07XCIsXCLihpBcIjpcIiZsYXJyO1wiLFwi4oaRXCI6XCImdWFycjtcIixcIuKGklwiOlwiJnJhcnI7XCIsXCLihpNcIjpcIiZkYXJyO1wiLFwi4oaUXCI6XCImaGFycjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHlFwiOlwiJmhBcnI7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLiiIJcIjpcIiZwYXJ0O1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLiiIVcIjpcIiZlbXB0eTtcIixcIuKIh1wiOlwiJm5hYmxhO1wiLFwi4oiIXCI6XCImaXNpbjtcIixcIuKIiVwiOlwiJm5vdGluO1wiLFwi4oiLXCI6XCImbmk7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4oiSXCI6XCImbWludXM7XCIsXCLiiJdcIjpcIiZsb3dhc3Q7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKInVwiOlwiJnByb3A7XCIsXCLiiJ5cIjpcIiZpbmZpbjtcIixcIuKIoFwiOlwiJmFuZztcIixcIuKIp1wiOlwiJmFuZDtcIixcIuKIqFwiOlwiJm9yO1wiLFwi4oipXCI6XCImY2FwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4oirXCI6XCImaW50O1wiLFwi4oi0XCI6XCImdGhlcmU0O1wiLFwi4oi8XCI6XCImc2ltO1wiLFwi4omFXCI6XCImY29uZztcIixcIuKJiFwiOlwiJmFzeW1wO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKJpFwiOlwiJmxlO1wiLFwi4omlXCI6XCImZ2U7XCIsXCLiioJcIjpcIiZzdWI7XCIsXCLiioNcIjpcIiZzdXA7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4oqGXCI6XCImc3ViZTtcIixcIuKKh1wiOlwiJnN1cGU7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLijIlcIjpcIiZyY2VpbDtcIixcIuKMilwiOlwiJmxmbG9vcjtcIixcIuKMi1wiOlwiJnJmbG9vcjtcIixcIuKMqVwiOlwiJmxhbmc7XCIsXCLijKpcIjpcIiZyYW5nO1wiLFwi4peKXCI6XCImbG96O1wiLFwi4pmgXCI6XCImc3BhZGVzO1wiLFwi4pmjXCI6XCImY2x1YnM7XCIsXCLimaVcIjpcIiZoZWFydHM7XCIsXCLimaZcIjpcIiZkaWFtcztcIn19LGh0bWw1OntlbnRpdGllczp7XCImQUVsaWdcIjpcIsOGXCIsXCImQUVsaWc7XCI6XCLDhlwiLFwiJkFNUFwiOlwiJlwiLFwiJkFNUDtcIjpcIiZcIixcIiZBYWN1dGVcIjpcIsOBXCIsXCImQWFjdXRlO1wiOlwiw4FcIixcIiZBYnJldmU7XCI6XCLEglwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBY3k7XCI6XCLQkFwiLFwiJkFmcjtcIjpcIvCdlIRcIixcIiZBZ3JhdmVcIjpcIsOAXCIsXCImQWdyYXZlO1wiOlwiw4BcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQW1hY3I7XCI6XCLEgFwiLFwiJkFuZDtcIjpcIuKpk1wiLFwiJkFvZ29uO1wiOlwixIRcIixcIiZBb3BmO1wiOlwi8J2UuFwiLFwiJkFwcGx5RnVuY3Rpb247XCI6XCLigaFcIixcIiZBcmluZ1wiOlwiw4VcIixcIiZBcmluZztcIjpcIsOFXCIsXCImQXNjcjtcIjpcIvCdkpxcIixcIiZBc3NpZ247XCI6XCLiiZRcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkJhY2tzbGFzaDtcIjpcIuKIllwiLFwiJkJhcnY7XCI6XCLiq6dcIixcIiZCYXJ3ZWQ7XCI6XCLijIZcIixcIiZCY3k7XCI6XCLQkVwiLFwiJkJlY2F1c2U7XCI6XCLiiLVcIixcIiZCZXJub3VsbGlzO1wiOlwi4oSsXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImQmZyO1wiOlwi8J2UhVwiLFwiJkJvcGY7XCI6XCLwnZS5XCIsXCImQnJldmU7XCI6XCLLmFwiLFwiJkJzY3I7XCI6XCLihKxcIixcIiZCdW1wZXE7XCI6XCLiiY5cIixcIiZDSGN5O1wiOlwi0KdcIixcIiZDT1BZXCI6XCLCqVwiLFwiJkNPUFk7XCI6XCLCqVwiLFwiJkNhY3V0ZTtcIjpcIsSGXCIsXCImQ2FwO1wiOlwi4ouSXCIsXCImQ2FwaXRhbERpZmZlcmVudGlhbEQ7XCI6XCLihYVcIixcIiZDYXlsZXlzO1wiOlwi4oStXCIsXCImQ2Nhcm9uO1wiOlwixIxcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZDY2lyYztcIjpcIsSIXCIsXCImQ2NvbmludDtcIjpcIuKIsFwiLFwiJkNkb3Q7XCI6XCLEilwiLFwiJkNlZGlsbGE7XCI6XCLCuFwiLFwiJkNlbnRlckRvdDtcIjpcIsK3XCIsXCImQ2ZyO1wiOlwi4oStXCIsXCImQ2hpO1wiOlwizqdcIixcIiZDaXJjbGVEb3Q7XCI6XCLiiplcIixcIiZDaXJjbGVNaW51cztcIjpcIuKKllwiLFwiJkNpcmNsZVBsdXM7XCI6XCLiipVcIixcIiZDaXJjbGVUaW1lcztcIjpcIuKKl1wiLFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIslwiLFwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIjpcIuKAnVwiLFwiJkNsb3NlQ3VybHlRdW90ZTtcIjpcIuKAmVwiLFwiJkNvbG9uO1wiOlwi4oi3XCIsXCImQ29sb25lO1wiOlwi4qm0XCIsXCImQ29uZ3J1ZW50O1wiOlwi4omhXCIsXCImQ29uaW50O1wiOlwi4oivXCIsXCImQ29udG91ckludGVncmFsO1wiOlwi4oiuXCIsXCImQ29wZjtcIjpcIuKEglwiLFwiJkNvcHJvZHVjdDtcIjpcIuKIkFwiLFwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLNcIixcIiZDcm9zcztcIjpcIuKor1wiLFwiJkNzY3I7XCI6XCLwnZKeXCIsXCImQ3VwO1wiOlwi4ouTXCIsXCImQ3VwQ2FwO1wiOlwi4omNXCIsXCImREQ7XCI6XCLihYVcIixcIiZERG90cmFoZDtcIjpcIuKkkVwiLFwiJkRKY3k7XCI6XCLQglwiLFwiJkRTY3k7XCI6XCLQhVwiLFwiJkRaY3k7XCI6XCLQj1wiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJkRhcnI7XCI6XCLihqFcIixcIiZEYXNodjtcIjpcIuKrpFwiLFwiJkRjYXJvbjtcIjpcIsSOXCIsXCImRGN5O1wiOlwi0JRcIixcIiZEZWw7XCI6XCLiiIdcIixcIiZEZWx0YTtcIjpcIs6UXCIsXCImRGZyO1wiOlwi8J2Uh1wiLFwiJkRpYWNyaXRpY2FsQWN1dGU7XCI6XCLCtFwiLFwiJkRpYWNyaXRpY2FsRG90O1wiOlwiy5lcIixcIiZEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOlwiy51cIixcIiZEaWFjcml0aWNhbEdyYXZlO1wiOlwiYFwiLFwiJkRpYWNyaXRpY2FsVGlsZGU7XCI6XCLLnFwiLFwiJkRpYW1vbmQ7XCI6XCLii4RcIixcIiZEaWZmZXJlbnRpYWxEO1wiOlwi4oWGXCIsXCImRG9wZjtcIjpcIvCdlLtcIixcIiZEb3Q7XCI6XCLCqFwiLFwiJkRvdERvdDtcIjpcIuKDnFwiLFwiJkRvdEVxdWFsO1wiOlwi4omQXCIsXCImRG91YmxlQ29udG91ckludGVncmFsO1wiOlwi4oivXCIsXCImRG91YmxlRG90O1wiOlwiwqhcIixcIiZEb3VibGVEb3duQXJyb3c7XCI6XCLih5NcIixcIiZEb3VibGVMZWZ0QXJyb3c7XCI6XCLih5BcIixcIiZEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjpcIuKHlFwiLFwiJkRvdWJsZUxlZnRUZWU7XCI6XCLiq6RcIixcIiZEb3VibGVMb25nTGVmdEFycm93O1wiOlwi4p+4XCIsXCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOlwi4p+6XCIsXCImRG91YmxlTG9uZ1JpZ2h0QXJyb3c7XCI6XCLin7lcIixcIiZEb3VibGVSaWdodEFycm93O1wiOlwi4oeSXCIsXCImRG91YmxlUmlnaHRUZWU7XCI6XCLiiqhcIixcIiZEb3VibGVVcEFycm93O1wiOlwi4oeRXCIsXCImRG91YmxlVXBEb3duQXJyb3c7XCI6XCLih5VcIixcIiZEb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIpVwiLFwiJkRvd25BcnJvdztcIjpcIuKGk1wiLFwiJkRvd25BcnJvd0JhcjtcIjpcIuKkk1wiLFwiJkRvd25BcnJvd1VwQXJyb3c7XCI6XCLih7VcIixcIiZEb3duQnJldmU7XCI6XCLMkVwiLFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6XCLipZBcIixcIiZEb3duTGVmdFRlZVZlY3RvcjtcIjpcIuKlnlwiLFwiJkRvd25MZWZ0VmVjdG9yO1wiOlwi4oa9XCIsXCImRG93bkxlZnRWZWN0b3JCYXI7XCI6XCLipZZcIixcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCI6XCLipZ9cIixcIiZEb3duUmlnaHRWZWN0b3I7XCI6XCLih4FcIixcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCI6XCLipZdcIixcIiZEb3duVGVlO1wiOlwi4oqkXCIsXCImRG93blRlZUFycm93O1wiOlwi4oanXCIsXCImRG93bmFycm93O1wiOlwi4oeTXCIsXCImRHNjcjtcIjpcIvCdkp9cIixcIiZEc3Ryb2s7XCI6XCLEkFwiLFwiJkVORztcIjpcIsWKXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNhcm9uO1wiOlwixJpcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRWN5O1wiOlwi0K1cIixcIiZFZG90O1wiOlwixJZcIixcIiZFZnI7XCI6XCLwnZSIXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWxlbWVudDtcIjpcIuKIiFwiLFwiJkVtYWNyO1wiOlwixJJcIixcIiZFbXB0eVNtYWxsU3F1YXJlO1wiOlwi4pe7XCIsXCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCI6XCLilqtcIixcIiZFb2dvbjtcIjpcIsSYXCIsXCImRW9wZjtcIjpcIvCdlLxcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZFcXVhbDtcIjpcIuKptVwiLFwiJkVxdWFsVGlsZGU7XCI6XCLiiYJcIixcIiZFcXVpbGlicml1bTtcIjpcIuKHjFwiLFwiJkVzY3I7XCI6XCLihLBcIixcIiZFc2ltO1wiOlwi4qmzXCIsXCImRXRhO1wiOlwizpdcIixcIiZFdW1sXCI6XCLDi1wiLFwiJkV1bWw7XCI6XCLDi1wiLFwiJkV4aXN0cztcIjpcIuKIg1wiLFwiJkV4cG9uZW50aWFsRTtcIjpcIuKFh1wiLFwiJkZjeTtcIjpcItCkXCIsXCImRmZyO1wiOlwi8J2UiVwiLFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiOlwi4pe8XCIsXCImRmlsbGVkVmVyeVNtYWxsU3F1YXJlO1wiOlwi4paqXCIsXCImRm9wZjtcIjpcIvCdlL1cIixcIiZGb3JBbGw7XCI6XCLiiIBcIixcIiZGb3VyaWVydHJmO1wiOlwi4oSxXCIsXCImRnNjcjtcIjpcIuKEsVwiLFwiJkdKY3k7XCI6XCLQg1wiLFwiJkdUXCI6XCI+XCIsXCImR1Q7XCI6XCI+XCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkdhbW1hZDtcIjpcIs+cXCIsXCImR2JyZXZlO1wiOlwixJ5cIixcIiZHY2VkaWw7XCI6XCLEolwiLFwiJkdjaXJjO1wiOlwixJxcIixcIiZHY3k7XCI6XCLQk1wiLFwiJkdkb3Q7XCI6XCLEoFwiLFwiJkdmcjtcIjpcIvCdlIpcIixcIiZHZztcIjpcIuKLmVwiLFwiJkdvcGY7XCI6XCLwnZS+XCIsXCImR3JlYXRlckVxdWFsO1wiOlwi4omlXCIsXCImR3JlYXRlckVxdWFsTGVzcztcIjpcIuKLm1wiLFwiJkdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiadcIixcIiZHcmVhdGVyR3JlYXRlcjtcIjpcIuKqolwiLFwiJkdyZWF0ZXJMZXNzO1wiOlwi4om3XCIsXCImR3JlYXRlclNsYW50RXF1YWw7XCI6XCLiqb5cIixcIiZHcmVhdGVyVGlsZGU7XCI6XCLiibNcIixcIiZHc2NyO1wiOlwi8J2SolwiLFwiJkd0O1wiOlwi4omrXCIsXCImSEFSRGN5O1wiOlwi0KpcIixcIiZIYWNlaztcIjpcIsuHXCIsXCImSGF0O1wiOlwiXlwiLFwiJkhjaXJjO1wiOlwixKRcIixcIiZIZnI7XCI6XCLihIxcIixcIiZIaWxiZXJ0U3BhY2U7XCI6XCLihItcIixcIiZIb3BmO1wiOlwi4oSNXCIsXCImSG9yaXpvbnRhbExpbmU7XCI6XCLilIBcIixcIiZIc2NyO1wiOlwi4oSLXCIsXCImSHN0cm9rO1wiOlwixKZcIixcIiZIdW1wRG93bkh1bXA7XCI6XCLiiY5cIixcIiZIdW1wRXF1YWw7XCI6XCLiiY9cIixcIiZJRWN5O1wiOlwi0JVcIixcIiZJSmxpZztcIjpcIsSyXCIsXCImSU9jeTtcIjpcItCBXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkljeTtcIjpcItCYXCIsXCImSWRvdDtcIjpcIsSwXCIsXCImSWZyO1wiOlwi4oSRXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSW07XCI6XCLihJFcIixcIiZJbWFjcjtcIjpcIsSqXCIsXCImSW1hZ2luYXJ5STtcIjpcIuKFiFwiLFwiJkltcGxpZXM7XCI6XCLih5JcIixcIiZJbnQ7XCI6XCLiiKxcIixcIiZJbnRlZ3JhbDtcIjpcIuKIq1wiLFwiJkludGVyc2VjdGlvbjtcIjpcIuKLglwiLFwiJkludmlzaWJsZUNvbW1hO1wiOlwi4oGjXCIsXCImSW52aXNpYmxlVGltZXM7XCI6XCLigaJcIixcIiZJb2dvbjtcIjpcIsSuXCIsXCImSW9wZjtcIjpcIvCdlYBcIixcIiZJb3RhO1wiOlwizplcIixcIiZJc2NyO1wiOlwi4oSQXCIsXCImSXRpbGRlO1wiOlwixKhcIixcIiZJdWtjeTtcIjpcItCGXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZKY2lyYztcIjpcIsS0XCIsXCImSmN5O1wiOlwi0JlcIixcIiZKZnI7XCI6XCLwnZSNXCIsXCImSm9wZjtcIjpcIvCdlYFcIixcIiZKc2NyO1wiOlwi8J2SpVwiLFwiJkpzZXJjeTtcIjpcItCIXCIsXCImSnVrY3k7XCI6XCLQhFwiLFwiJktIY3k7XCI6XCLQpVwiLFwiJktKY3k7XCI6XCLQjFwiLFwiJkthcHBhO1wiOlwizppcIixcIiZLY2VkaWw7XCI6XCLEtlwiLFwiJktjeTtcIjpcItCaXCIsXCImS2ZyO1wiOlwi8J2UjlwiLFwiJktvcGY7XCI6XCLwnZWCXCIsXCImS3NjcjtcIjpcIvCdkqZcIixcIiZMSmN5O1wiOlwi0IlcIixcIiZMVFwiOlwiPFwiLFwiJkxUO1wiOlwiPFwiLFwiJkxhY3V0ZTtcIjpcIsS5XCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZMYW5nO1wiOlwi4p+qXCIsXCImTGFwbGFjZXRyZjtcIjpcIuKEklwiLFwiJkxhcnI7XCI6XCLihp5cIixcIiZMY2Fyb247XCI6XCLEvVwiLFwiJkxjZWRpbDtcIjpcIsS7XCIsXCImTGN5O1wiOlwi0JtcIixcIiZMZWZ0QW5nbGVCcmFja2V0O1wiOlwi4p+oXCIsXCImTGVmdEFycm93O1wiOlwi4oaQXCIsXCImTGVmdEFycm93QmFyO1wiOlwi4oekXCIsXCImTGVmdEFycm93UmlnaHRBcnJvdztcIjpcIuKHhlwiLFwiJkxlZnRDZWlsaW5nO1wiOlwi4oyIXCIsXCImTGVmdERvdWJsZUJyYWNrZXQ7XCI6XCLin6ZcIixcIiZMZWZ0RG93blRlZVZlY3RvcjtcIjpcIuKloVwiLFwiJkxlZnREb3duVmVjdG9yO1wiOlwi4oeDXCIsXCImTGVmdERvd25WZWN0b3JCYXI7XCI6XCLipZlcIixcIiZMZWZ0Rmxvb3I7XCI6XCLijIpcIixcIiZMZWZ0UmlnaHRBcnJvdztcIjpcIuKGlFwiLFwiJkxlZnRSaWdodFZlY3RvcjtcIjpcIuKljlwiLFwiJkxlZnRUZWU7XCI6XCLiiqNcIixcIiZMZWZ0VGVlQXJyb3c7XCI6XCLihqRcIixcIiZMZWZ0VGVlVmVjdG9yO1wiOlwi4qWaXCIsXCImTGVmdFRyaWFuZ2xlO1wiOlwi4oqyXCIsXCImTGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePXCIsXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLiirRcIixcIiZMZWZ0VXBEb3duVmVjdG9yO1wiOlwi4qWRXCIsXCImTGVmdFVwVGVlVmVjdG9yO1wiOlwi4qWgXCIsXCImTGVmdFVwVmVjdG9yO1wiOlwi4oa/XCIsXCImTGVmdFVwVmVjdG9yQmFyO1wiOlwi4qWYXCIsXCImTGVmdFZlY3RvcjtcIjpcIuKGvFwiLFwiJkxlZnRWZWN0b3JCYXI7XCI6XCLipZJcIixcIiZMZWZ0YXJyb3c7XCI6XCLih5BcIixcIiZMZWZ0cmlnaHRhcnJvdztcIjpcIuKHlFwiLFwiJkxlc3NFcXVhbEdyZWF0ZXI7XCI6XCLii5pcIixcIiZMZXNzRnVsbEVxdWFsO1wiOlwi4ommXCIsXCImTGVzc0dyZWF0ZXI7XCI6XCLiibZcIixcIiZMZXNzTGVzcztcIjpcIuKqoVwiLFwiJkxlc3NTbGFudEVxdWFsO1wiOlwi4qm9XCIsXCImTGVzc1RpbGRlO1wiOlwi4omyXCIsXCImTGZyO1wiOlwi8J2Uj1wiLFwiJkxsO1wiOlwi4ouYXCIsXCImTGxlZnRhcnJvdztcIjpcIuKHmlwiLFwiJkxtaWRvdDtcIjpcIsS/XCIsXCImTG9uZ0xlZnRBcnJvdztcIjpcIuKftVwiLFwiJkxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKft1wiLFwiJkxvbmdSaWdodEFycm93O1wiOlwi4p+2XCIsXCImTG9uZ2xlZnRhcnJvdztcIjpcIuKfuFwiLFwiJkxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKfulwiLFwiJkxvbmdyaWdodGFycm93O1wiOlwi4p+5XCIsXCImTG9wZjtcIjpcIvCdlYNcIixcIiZMb3dlckxlZnRBcnJvdztcIjpcIuKGmVwiLFwiJkxvd2VyUmlnaHRBcnJvdztcIjpcIuKGmFwiLFwiJkxzY3I7XCI6XCLihJJcIixcIiZMc2g7XCI6XCLihrBcIixcIiZMc3Ryb2s7XCI6XCLFgVwiLFwiJkx0O1wiOlwi4omqXCIsXCImTWFwO1wiOlwi4qSFXCIsXCImTWN5O1wiOlwi0JxcIixcIiZNZWRpdW1TcGFjZTtcIjpcIuKBn1wiLFwiJk1lbGxpbnRyZjtcIjpcIuKEs1wiLFwiJk1mcjtcIjpcIvCdlJBcIixcIiZNaW51c1BsdXM7XCI6XCLiiJNcIixcIiZNb3BmO1wiOlwi8J2VhFwiLFwiJk1zY3I7XCI6XCLihLNcIixcIiZNdTtcIjpcIs6cXCIsXCImTkpjeTtcIjpcItCKXCIsXCImTmFjdXRlO1wiOlwixYNcIixcIiZOY2Fyb247XCI6XCLFh1wiLFwiJk5jZWRpbDtcIjpcIsWFXCIsXCImTmN5O1wiOlwi0J1cIixcIiZOZWdhdGl2ZU1lZGl1bVNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGlja1NwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq1wiLFwiJk5lc3RlZExlc3NMZXNzO1wiOlwi4omqXCIsXCImTmV3TGluZTtcIjpcIlxcblwiLFwiJk5mcjtcIjpcIvCdlJFcIixcIiZOb0JyZWFrO1wiOlwi4oGgXCIsXCImTm9uQnJlYWtpbmdTcGFjZTtcIjpcIsKgXCIsXCImTm9wZjtcIjpcIuKElVwiLFwiJk5vdDtcIjpcIuKrrFwiLFwiJk5vdENvbmdydWVudDtcIjpcIuKJolwiLFwiJk5vdEN1cENhcDtcIjpcIuKJrVwiLFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOlwi4oimXCIsXCImTm90RWxlbWVudDtcIjpcIuKIiVwiLFwiJk5vdEVxdWFsO1wiOlwi4omgXCIsXCImTm90RXF1YWxUaWxkZTtcIjpcIuKJgsy4XCIsXCImTm90RXhpc3RzO1wiOlwi4oiEXCIsXCImTm90R3JlYXRlcjtcIjpcIuKJr1wiLFwiJk5vdEdyZWF0ZXJFcXVhbDtcIjpcIuKJsVwiLFwiJk5vdEdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiafMuFwiLFwiJk5vdEdyZWF0ZXJHcmVhdGVyO1wiOlwi4omrzLhcIixcIiZOb3RHcmVhdGVyTGVzcztcIjpcIuKJuVwiLFwiJk5vdEdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+zLhcIixcIiZOb3RHcmVhdGVyVGlsZGU7XCI6XCLiibVcIixcIiZOb3RIdW1wRG93bkh1bXA7XCI6XCLiiY7MuFwiLFwiJk5vdEh1bXBFcXVhbDtcIjpcIuKJj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlO1wiOlwi4ouqXCIsXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePzLhcIixcIiZOb3RMZWZ0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrFwiLFwiJk5vdExlc3M7XCI6XCLiia5cIixcIiZOb3RMZXNzRXF1YWw7XCI6XCLiibBcIixcIiZOb3RMZXNzR3JlYXRlcjtcIjpcIuKJuFwiLFwiJk5vdExlc3NMZXNzO1wiOlwi4omqzLhcIixcIiZOb3RMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvcy4XCIsXCImTm90TGVzc1RpbGRlO1wiOlwi4om0XCIsXCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqLMuFwiLFwiJk5vdE5lc3RlZExlc3NMZXNzO1wiOlwi4qqhzLhcIixcIiZOb3RQcmVjZWRlcztcIjpcIuKKgFwiLFwiJk5vdFByZWNlZGVzRXF1YWw7XCI6XCLiqq/MuFwiLFwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKLoFwiLFwiJk5vdFJldmVyc2VFbGVtZW50O1wiOlwi4oiMXCIsXCImTm90UmlnaHRUcmlhbmdsZTtcIjpcIuKLq1wiLFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5DMuFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrVwiLFwiJk5vdFNxdWFyZVN1YnNldDtcIjpcIuKKj8y4XCIsXCImTm90U3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLii6JcIixcIiZOb3RTcXVhcmVTdXBlcnNldDtcIjpcIuKKkMy4XCIsXCImTm90U3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKLo1wiLFwiJk5vdFN1YnNldDtcIjpcIuKKguKDklwiLFwiJk5vdFN1YnNldEVxdWFsO1wiOlwi4oqIXCIsXCImTm90U3VjY2VlZHM7XCI6XCLiioFcIixcIiZOb3RTdWNjZWVkc0VxdWFsO1wiOlwi4qqwzLhcIixcIiZOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLii6FcIixcIiZOb3RTdWNjZWVkc1RpbGRlO1wiOlwi4om/zLhcIixcIiZOb3RTdXBlcnNldDtcIjpcIuKKg+KDklwiLFwiJk5vdFN1cGVyc2V0RXF1YWw7XCI6XCLiiolcIixcIiZOb3RUaWxkZTtcIjpcIuKJgVwiLFwiJk5vdFRpbGRlRXF1YWw7XCI6XCLiiYRcIixcIiZOb3RUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJh1wiLFwiJk5vdFRpbGRlVGlsZGU7XCI6XCLiiYlcIixcIiZOb3RWZXJ0aWNhbEJhcjtcIjpcIuKIpFwiLFwiJk5zY3I7XCI6XCLwnZKpXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImTnU7XCI6XCLOnVwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT2N5O1wiOlwi0J5cIixcIiZPZGJsYWM7XCI6XCLFkFwiLFwiJk9mcjtcIjpcIvCdlJJcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPbWFjcjtcIjpcIsWMXCIsXCImT21lZ2E7XCI6XCLOqVwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJk9vcGY7XCI6XCLwnZWGXCIsXCImT3BlbkN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJxcIixcIiZPcGVuQ3VybHlRdW90ZTtcIjpcIuKAmFwiLFwiJk9yO1wiOlwi4qmUXCIsXCImT3NjcjtcIjpcIvCdkqpcIixcIiZPc2xhc2hcIjpcIsOYXCIsXCImT3NsYXNoO1wiOlwiw5hcIixcIiZPdGlsZGVcIjpcIsOVXCIsXCImT3RpbGRlO1wiOlwiw5VcIixcIiZPdGltZXM7XCI6XCLiqLdcIixcIiZPdW1sXCI6XCLDllwiLFwiJk91bWw7XCI6XCLDllwiLFwiJk92ZXJCYXI7XCI6XCLigL5cIixcIiZPdmVyQnJhY2U7XCI6XCLij55cIixcIiZPdmVyQnJhY2tldDtcIjpcIuKOtFwiLFwiJk92ZXJQYXJlbnRoZXNpcztcIjpcIuKPnFwiLFwiJlBhcnRpYWxEO1wiOlwi4oiCXCIsXCImUGN5O1wiOlwi0J9cIixcIiZQZnI7XCI6XCLwnZSTXCIsXCImUGhpO1wiOlwizqZcIixcIiZQaTtcIjpcIs6gXCIsXCImUGx1c01pbnVzO1wiOlwiwrFcIixcIiZQb2luY2FyZXBsYW5lO1wiOlwi4oSMXCIsXCImUG9wZjtcIjpcIuKEmVwiLFwiJlByO1wiOlwi4qq7XCIsXCImUHJlY2VkZXM7XCI6XCLiibpcIixcIiZQcmVjZWRlc0VxdWFsO1wiOlwi4qqvXCIsXCImUHJlY2VkZXNTbGFudEVxdWFsO1wiOlwi4om8XCIsXCImUHJlY2VkZXNUaWxkZTtcIjpcIuKJvlwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImUHJvZHVjdDtcIjpcIuKIj1wiLFwiJlByb3BvcnRpb247XCI6XCLiiLdcIixcIiZQcm9wb3J0aW9uYWw7XCI6XCLiiJ1cIixcIiZQc2NyO1wiOlwi8J2Sq1wiLFwiJlBzaTtcIjpcIs6oXCIsXCImUVVPVFwiOidcIicsXCImUVVPVDtcIjonXCInLFwiJlFmcjtcIjpcIvCdlJRcIixcIiZRb3BmO1wiOlwi4oSaXCIsXCImUXNjcjtcIjpcIvCdkqxcIixcIiZSQmFycjtcIjpcIuKkkFwiLFwiJlJFR1wiOlwiwq5cIixcIiZSRUc7XCI6XCLCrlwiLFwiJlJhY3V0ZTtcIjpcIsWUXCIsXCImUmFuZztcIjpcIuKfq1wiLFwiJlJhcnI7XCI6XCLihqBcIixcIiZSYXJydGw7XCI6XCLipJZcIixcIiZSY2Fyb247XCI6XCLFmFwiLFwiJlJjZWRpbDtcIjpcIsWWXCIsXCImUmN5O1wiOlwi0KBcIixcIiZSZTtcIjpcIuKEnFwiLFwiJlJldmVyc2VFbGVtZW50O1wiOlwi4oiLXCIsXCImUmV2ZXJzZUVxdWlsaWJyaXVtO1wiOlwi4oeLXCIsXCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07XCI6XCLipa9cIixcIiZSZnI7XCI6XCLihJxcIixcIiZSaG87XCI6XCLOoVwiLFwiJlJpZ2h0QW5nbGVCcmFja2V0O1wiOlwi4p+pXCIsXCImUmlnaHRBcnJvdztcIjpcIuKGklwiLFwiJlJpZ2h0QXJyb3dCYXI7XCI6XCLih6VcIixcIiZSaWdodEFycm93TGVmdEFycm93O1wiOlwi4oeEXCIsXCImUmlnaHRDZWlsaW5nO1wiOlwi4oyJXCIsXCImUmlnaHREb3VibGVCcmFja2V0O1wiOlwi4p+nXCIsXCImUmlnaHREb3duVGVlVmVjdG9yO1wiOlwi4qWdXCIsXCImUmlnaHREb3duVmVjdG9yO1wiOlwi4oeCXCIsXCImUmlnaHREb3duVmVjdG9yQmFyO1wiOlwi4qWVXCIsXCImUmlnaHRGbG9vcjtcIjpcIuKMi1wiLFwiJlJpZ2h0VGVlO1wiOlwi4oqiXCIsXCImUmlnaHRUZWVBcnJvdztcIjpcIuKGplwiLFwiJlJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWbXCIsXCImUmlnaHRUcmlhbmdsZTtcIjpcIuKKs1wiLFwiJlJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5BcIixcIiZSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLiirVcIixcIiZSaWdodFVwRG93blZlY3RvcjtcIjpcIuKlj1wiLFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCI6XCLipZxcIixcIiZSaWdodFVwVmVjdG9yO1wiOlwi4oa+XCIsXCImUmlnaHRVcFZlY3RvckJhcjtcIjpcIuKllFwiLFwiJlJpZ2h0VmVjdG9yO1wiOlwi4oeAXCIsXCImUmlnaHRWZWN0b3JCYXI7XCI6XCLipZNcIixcIiZSaWdodGFycm93O1wiOlwi4oeSXCIsXCImUm9wZjtcIjpcIuKEnVwiLFwiJlJvdW5kSW1wbGllcztcIjpcIuKlsFwiLFwiJlJyaWdodGFycm93O1wiOlwi4oebXCIsXCImUnNjcjtcIjpcIuKEm1wiLFwiJlJzaDtcIjpcIuKGsVwiLFwiJlJ1bGVEZWxheWVkO1wiOlwi4qe0XCIsXCImU0hDSGN5O1wiOlwi0KlcIixcIiZTSGN5O1wiOlwi0KhcIixcIiZTT0ZUY3k7XCI6XCLQrFwiLFwiJlNhY3V0ZTtcIjpcIsWaXCIsXCImU2M7XCI6XCLiqrxcIixcIiZTY2Fyb247XCI6XCLFoFwiLFwiJlNjZWRpbDtcIjpcIsWeXCIsXCImU2NpcmM7XCI6XCLFnFwiLFwiJlNjeTtcIjpcItChXCIsXCImU2ZyO1wiOlwi8J2UllwiLFwiJlNob3J0RG93bkFycm93O1wiOlwi4oaTXCIsXCImU2hvcnRMZWZ0QXJyb3c7XCI6XCLihpBcIixcIiZTaG9ydFJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZTaG9ydFVwQXJyb3c7XCI6XCLihpFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImU21hbGxDaXJjbGU7XCI6XCLiiJhcIixcIiZTb3BmO1wiOlwi8J2VilwiLFwiJlNxcnQ7XCI6XCLiiJpcIixcIiZTcXVhcmU7XCI6XCLilqFcIixcIiZTcXVhcmVJbnRlcnNlY3Rpb247XCI6XCLiipNcIixcIiZTcXVhcmVTdWJzZXQ7XCI6XCLiio9cIixcIiZTcXVhcmVTdWJzZXRFcXVhbDtcIjpcIuKKkVwiLFwiJlNxdWFyZVN1cGVyc2V0O1wiOlwi4oqQXCIsXCImU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKKklwiLFwiJlNxdWFyZVVuaW9uO1wiOlwi4oqUXCIsXCImU3NjcjtcIjpcIvCdkq5cIixcIiZTdGFyO1wiOlwi4ouGXCIsXCImU3ViO1wiOlwi4ouQXCIsXCImU3Vic2V0O1wiOlwi4ouQXCIsXCImU3Vic2V0RXF1YWw7XCI6XCLiioZcIixcIiZTdWNjZWVkcztcIjpcIuKJu1wiLFwiJlN1Y2NlZWRzRXF1YWw7XCI6XCLiqrBcIixcIiZTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLiib1cIixcIiZTdWNjZWVkc1RpbGRlO1wiOlwi4om/XCIsXCImU3VjaFRoYXQ7XCI6XCLiiItcIixcIiZTdW07XCI6XCLiiJFcIixcIiZTdXA7XCI6XCLii5FcIixcIiZTdXBlcnNldDtcIjpcIuKKg1wiLFwiJlN1cGVyc2V0RXF1YWw7XCI6XCLiiodcIixcIiZTdXBzZXQ7XCI6XCLii5FcIixcIiZUSE9STlwiOlwiw55cIixcIiZUSE9STjtcIjpcIsOeXCIsXCImVFJBREU7XCI6XCLihKJcIixcIiZUU0hjeTtcIjpcItCLXCIsXCImVFNjeTtcIjpcItCmXCIsXCImVGFiO1wiOlwiXFx0XCIsXCImVGF1O1wiOlwizqRcIixcIiZUY2Fyb247XCI6XCLFpFwiLFwiJlRjZWRpbDtcIjpcIsWiXCIsXCImVGN5O1wiOlwi0KJcIixcIiZUZnI7XCI6XCLwnZSXXCIsXCImVGhlcmVmb3JlO1wiOlwi4oi0XCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJlRoaWNrU3BhY2U7XCI6XCLigZ/igIpcIixcIiZUaGluU3BhY2U7XCI6XCLigIlcIixcIiZUaWxkZTtcIjpcIuKIvFwiLFwiJlRpbGRlRXF1YWw7XCI6XCLiiYNcIixcIiZUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJhVwiLFwiJlRpbGRlVGlsZGU7XCI6XCLiiYhcIixcIiZUb3BmO1wiOlwi8J2Vi1wiLFwiJlRyaXBsZURvdDtcIjpcIuKDm1wiLFwiJlRzY3I7XCI6XCLwnZKvXCIsXCImVHN0cm9rO1wiOlwixaZcIixcIiZVYWN1dGVcIjpcIsOaXCIsXCImVWFjdXRlO1wiOlwiw5pcIixcIiZVYXJyO1wiOlwi4oafXCIsXCImVWFycm9jaXI7XCI6XCLipYlcIixcIiZVYnJjeTtcIjpcItCOXCIsXCImVWJyZXZlO1wiOlwixaxcIixcIiZVY2lyY1wiOlwiw5tcIixcIiZVY2lyYztcIjpcIsObXCIsXCImVWN5O1wiOlwi0KNcIixcIiZVZGJsYWM7XCI6XCLFsFwiLFwiJlVmcjtcIjpcIvCdlJhcIixcIiZVZ3JhdmVcIjpcIsOZXCIsXCImVWdyYXZlO1wiOlwiw5lcIixcIiZVbWFjcjtcIjpcIsWqXCIsXCImVW5kZXJCYXI7XCI6XCJfXCIsXCImVW5kZXJCcmFjZTtcIjpcIuKPn1wiLFwiJlVuZGVyQnJhY2tldDtcIjpcIuKOtVwiLFwiJlVuZGVyUGFyZW50aGVzaXM7XCI6XCLij51cIixcIiZVbmlvbjtcIjpcIuKLg1wiLFwiJlVuaW9uUGx1cztcIjpcIuKKjlwiLFwiJlVvZ29uO1wiOlwixbJcIixcIiZVb3BmO1wiOlwi8J2VjFwiLFwiJlVwQXJyb3c7XCI6XCLihpFcIixcIiZVcEFycm93QmFyO1wiOlwi4qSSXCIsXCImVXBBcnJvd0Rvd25BcnJvdztcIjpcIuKHhVwiLFwiJlVwRG93bkFycm93O1wiOlwi4oaVXCIsXCImVXBFcXVpbGlicml1bTtcIjpcIuKlrlwiLFwiJlVwVGVlO1wiOlwi4oqlXCIsXCImVXBUZWVBcnJvdztcIjpcIuKGpVwiLFwiJlVwYXJyb3c7XCI6XCLih5FcIixcIiZVcGRvd25hcnJvdztcIjpcIuKHlVwiLFwiJlVwcGVyTGVmdEFycm93O1wiOlwi4oaWXCIsXCImVXBwZXJSaWdodEFycm93O1wiOlwi4oaXXCIsXCImVXBzaTtcIjpcIs+SXCIsXCImVXBzaWxvbjtcIjpcIs6lXCIsXCImVXJpbmc7XCI6XCLFrlwiLFwiJlVzY3I7XCI6XCLwnZKwXCIsXCImVXRpbGRlO1wiOlwixahcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJlZEYXNoO1wiOlwi4oqrXCIsXCImVmJhcjtcIjpcIuKrq1wiLFwiJlZjeTtcIjpcItCSXCIsXCImVmRhc2g7XCI6XCLiiqlcIixcIiZWZGFzaGw7XCI6XCLiq6ZcIixcIiZWZWU7XCI6XCLii4FcIixcIiZWZXJiYXI7XCI6XCLigJZcIixcIiZWZXJ0O1wiOlwi4oCWXCIsXCImVmVydGljYWxCYXI7XCI6XCLiiKNcIixcIiZWZXJ0aWNhbExpbmU7XCI6XCJ8XCIsXCImVmVydGljYWxTZXBhcmF0b3I7XCI6XCLinZhcIixcIiZWZXJ0aWNhbFRpbGRlO1wiOlwi4omAXCIsXCImVmVyeVRoaW5TcGFjZTtcIjpcIuKAilwiLFwiJlZmcjtcIjpcIvCdlJlcIixcIiZWb3BmO1wiOlwi8J2VjVwiLFwiJlZzY3I7XCI6XCLwnZKxXCIsXCImVnZkYXNoO1wiOlwi4oqqXCIsXCImV2NpcmM7XCI6XCLFtFwiLFwiJldlZGdlO1wiOlwi4ouAXCIsXCImV2ZyO1wiOlwi8J2UmlwiLFwiJldvcGY7XCI6XCLwnZWOXCIsXCImV3NjcjtcIjpcIvCdkrJcIixcIiZYZnI7XCI6XCLwnZSbXCIsXCImWGk7XCI6XCLOnlwiLFwiJlhvcGY7XCI6XCLwnZWPXCIsXCImWHNjcjtcIjpcIvCdkrNcIixcIiZZQWN5O1wiOlwi0K9cIixcIiZZSWN5O1wiOlwi0IdcIixcIiZZVWN5O1wiOlwi0K5cIixcIiZZYWN1dGVcIjpcIsOdXCIsXCImWWFjdXRlO1wiOlwiw51cIixcIiZZY2lyYztcIjpcIsW2XCIsXCImWWN5O1wiOlwi0KtcIixcIiZZZnI7XCI6XCLwnZScXCIsXCImWW9wZjtcIjpcIvCdlZBcIixcIiZZc2NyO1wiOlwi8J2StFwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJlpIY3k7XCI6XCLQllwiLFwiJlphY3V0ZTtcIjpcIsW5XCIsXCImWmNhcm9uO1wiOlwixb1cIixcIiZaY3k7XCI6XCLQl1wiLFwiJlpkb3Q7XCI6XCLFu1wiLFwiJlplcm9XaWR0aFNwYWNlO1wiOlwi4oCLXCIsXCImWmV0YTtcIjpcIs6WXCIsXCImWmZyO1wiOlwi4oSoXCIsXCImWm9wZjtcIjpcIuKEpFwiLFwiJlpzY3I7XCI6XCLwnZK1XCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWJyZXZlO1wiOlwixINcIixcIiZhYztcIjpcIuKIvlwiLFwiJmFjRTtcIjpcIuKIvsyzXCIsXCImYWNkO1wiOlwi4oi/XCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmFjdXRlXCI6XCLCtFwiLFwiJmFjdXRlO1wiOlwiwrRcIixcIiZhY3k7XCI6XCLQsFwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZhZjtcIjpcIuKBoVwiLFwiJmFmcjtcIjpcIvCdlJ5cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImYWxlcGg7XCI6XCLihLVcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYW1hY3I7XCI6XCLEgVwiLFwiJmFtYWxnO1wiOlwi4qi/XCIsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmFuZDtcIjpcIuKIp1wiLFwiJmFuZGFuZDtcIjpcIuKplVwiLFwiJmFuZGQ7XCI6XCLiqZxcIixcIiZhbmRzbG9wZTtcIjpcIuKpmFwiLFwiJmFuZHY7XCI6XCLiqZpcIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmdlO1wiOlwi4qakXCIsXCImYW5nbGU7XCI6XCLiiKBcIixcIiZhbmdtc2Q7XCI6XCLiiKFcIixcIiZhbmdtc2RhYTtcIjpcIuKmqFwiLFwiJmFuZ21zZGFiO1wiOlwi4qapXCIsXCImYW5nbXNkYWM7XCI6XCLipqpcIixcIiZhbmdtc2RhZDtcIjpcIuKmq1wiLFwiJmFuZ21zZGFlO1wiOlwi4qasXCIsXCImYW5nbXNkYWY7XCI6XCLipq1cIixcIiZhbmdtc2RhZztcIjpcIuKmrlwiLFwiJmFuZ21zZGFoO1wiOlwi4qavXCIsXCImYW5ncnQ7XCI6XCLiiJ9cIixcIiZhbmdydHZiO1wiOlwi4oq+XCIsXCImYW5ncnR2YmQ7XCI6XCLipp1cIixcIiZhbmdzcGg7XCI6XCLiiKJcIixcIiZhbmdzdDtcIjpcIsOFXCIsXCImYW5nemFycjtcIjpcIuKNvFwiLFwiJmFvZ29uO1wiOlwixIVcIixcIiZhb3BmO1wiOlwi8J2VklwiLFwiJmFwO1wiOlwi4omIXCIsXCImYXBFO1wiOlwi4qmwXCIsXCImYXBhY2lyO1wiOlwi4qmvXCIsXCImYXBlO1wiOlwi4omKXCIsXCImYXBpZDtcIjpcIuKJi1wiLFwiJmFwb3M7XCI6XCInXCIsXCImYXBwcm94O1wiOlwi4omIXCIsXCImYXBwcm94ZXE7XCI6XCLiiYpcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYXNjcjtcIjpcIvCdkrZcIixcIiZhc3Q7XCI6XCIqXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZhc3ltcGVxO1wiOlwi4omNXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhd2NvbmludDtcIjpcIuKIs1wiLFwiJmF3aW50O1wiOlwi4qiRXCIsXCImYk5vdDtcIjpcIuKrrVwiLFwiJmJhY2tjb25nO1wiOlwi4omMXCIsXCImYmFja2Vwc2lsb247XCI6XCLPtlwiLFwiJmJhY2twcmltZTtcIjpcIuKAtVwiLFwiJmJhY2tzaW07XCI6XCLiiL1cIixcIiZiYWNrc2ltZXE7XCI6XCLii41cIixcIiZiYXJ2ZWU7XCI6XCLiir1cIixcIiZiYXJ3ZWQ7XCI6XCLijIVcIixcIiZiYXJ3ZWRnZTtcIjpcIuKMhVwiLFwiJmJicms7XCI6XCLijrVcIixcIiZiYnJrdGJyaztcIjpcIuKOtlwiLFwiJmJjb25nO1wiOlwi4omMXCIsXCImYmN5O1wiOlwi0LFcIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmJlY2F1cztcIjpcIuKItVwiLFwiJmJlY2F1c2U7XCI6XCLiiLVcIixcIiZiZW1wdHl2O1wiOlwi4qawXCIsXCImYmVwc2k7XCI6XCLPtlwiLFwiJmJlcm5vdTtcIjpcIuKErFwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmJldGg7XCI6XCLihLZcIixcIiZiZXR3ZWVuO1wiOlwi4omsXCIsXCImYmZyO1wiOlwi8J2Un1wiLFwiJmJpZ2NhcDtcIjpcIuKLglwiLFwiJmJpZ2NpcmM7XCI6XCLil69cIixcIiZiaWdjdXA7XCI6XCLii4NcIixcIiZiaWdvZG90O1wiOlwi4qiAXCIsXCImYmlnb3BsdXM7XCI6XCLiqIFcIixcIiZiaWdvdGltZXM7XCI6XCLiqIJcIixcIiZiaWdzcWN1cDtcIjpcIuKohlwiLFwiJmJpZ3N0YXI7XCI6XCLimIVcIixcIiZiaWd0cmlhbmdsZWRvd247XCI6XCLilr1cIixcIiZiaWd0cmlhbmdsZXVwO1wiOlwi4pazXCIsXCImYmlndXBsdXM7XCI6XCLiqIRcIixcIiZiaWd2ZWU7XCI6XCLii4FcIixcIiZiaWd3ZWRnZTtcIjpcIuKLgFwiLFwiJmJrYXJvdztcIjpcIuKkjVwiLFwiJmJsYWNrbG96ZW5nZTtcIjpcIuKnq1wiLFwiJmJsYWNrc3F1YXJlO1wiOlwi4paqXCIsXCImYmxhY2t0cmlhbmdsZTtcIjpcIuKWtFwiLFwiJmJsYWNrdHJpYW5nbGVkb3duO1wiOlwi4pa+XCIsXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCI6XCLil4JcIixcIiZibGFja3RyaWFuZ2xlcmlnaHQ7XCI6XCLilrhcIixcIiZibGFuaztcIjpcIuKQo1wiLFwiJmJsazEyO1wiOlwi4paSXCIsXCImYmxrMTQ7XCI6XCLilpFcIixcIiZibGszNDtcIjpcIuKWk1wiLFwiJmJsb2NrO1wiOlwi4paIXCIsXCImYm5lO1wiOlwiPeKDpVwiLFwiJmJuZXF1aXY7XCI6XCLiiaHig6VcIixcIiZibm90O1wiOlwi4oyQXCIsXCImYm9wZjtcIjpcIvCdlZNcIixcIiZib3Q7XCI6XCLiiqVcIixcIiZib3R0b207XCI6XCLiiqVcIixcIiZib3d0aWU7XCI6XCLii4hcIixcIiZib3hETDtcIjpcIuKVl1wiLFwiJmJveERSO1wiOlwi4pWUXCIsXCImYm94RGw7XCI6XCLilZZcIixcIiZib3hEcjtcIjpcIuKVk1wiLFwiJmJveEg7XCI6XCLilZBcIixcIiZib3hIRDtcIjpcIuKVplwiLFwiJmJveEhVO1wiOlwi4pWpXCIsXCImYm94SGQ7XCI6XCLilaRcIixcIiZib3hIdTtcIjpcIuKVp1wiLFwiJmJveFVMO1wiOlwi4pWdXCIsXCImYm94VVI7XCI6XCLilZpcIixcIiZib3hVbDtcIjpcIuKVnFwiLFwiJmJveFVyO1wiOlwi4pWZXCIsXCImYm94VjtcIjpcIuKVkVwiLFwiJmJveFZIO1wiOlwi4pWsXCIsXCImYm94Vkw7XCI6XCLilaNcIixcIiZib3hWUjtcIjpcIuKVoFwiLFwiJmJveFZoO1wiOlwi4pWrXCIsXCImYm94Vmw7XCI6XCLilaJcIixcIiZib3hWcjtcIjpcIuKVn1wiLFwiJmJveGJveDtcIjpcIuKniVwiLFwiJmJveGRMO1wiOlwi4pWVXCIsXCImYm94ZFI7XCI6XCLilZJcIixcIiZib3hkbDtcIjpcIuKUkFwiLFwiJmJveGRyO1wiOlwi4pSMXCIsXCImYm94aDtcIjpcIuKUgFwiLFwiJmJveGhEO1wiOlwi4pWlXCIsXCImYm94aFU7XCI6XCLilahcIixcIiZib3hoZDtcIjpcIuKUrFwiLFwiJmJveGh1O1wiOlwi4pS0XCIsXCImYm94bWludXM7XCI6XCLiip9cIixcIiZib3hwbHVzO1wiOlwi4oqeXCIsXCImYm94dGltZXM7XCI6XCLiiqBcIixcIiZib3h1TDtcIjpcIuKVm1wiLFwiJmJveHVSO1wiOlwi4pWYXCIsXCImYm94dWw7XCI6XCLilJhcIixcIiZib3h1cjtcIjpcIuKUlFwiLFwiJmJveHY7XCI6XCLilIJcIixcIiZib3h2SDtcIjpcIuKVqlwiLFwiJmJveHZMO1wiOlwi4pWhXCIsXCImYm94dlI7XCI6XCLilZ5cIixcIiZib3h2aDtcIjpcIuKUvFwiLFwiJmJveHZsO1wiOlwi4pSkXCIsXCImYm94dnI7XCI6XCLilJxcIixcIiZicHJpbWU7XCI6XCLigLVcIixcIiZicmV2ZTtcIjpcIsuYXCIsXCImYnJ2YmFyXCI6XCLCplwiLFwiJmJydmJhcjtcIjpcIsKmXCIsXCImYnNjcjtcIjpcIvCdkrdcIixcIiZic2VtaTtcIjpcIuKBj1wiLFwiJmJzaW07XCI6XCLiiL1cIixcIiZic2ltZTtcIjpcIuKLjVwiLFwiJmJzb2w7XCI6XCJcXFxcXCIsXCImYnNvbGI7XCI6XCLip4VcIixcIiZic29saHN1YjtcIjpcIuKfiFwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZidWxsZXQ7XCI6XCLigKJcIixcIiZidW1wO1wiOlwi4omOXCIsXCImYnVtcEU7XCI6XCLiqq5cIixcIiZidW1wZTtcIjpcIuKJj1wiLFwiJmJ1bXBlcTtcIjpcIuKJj1wiLFwiJmNhY3V0ZTtcIjpcIsSHXCIsXCImY2FwO1wiOlwi4oipXCIsXCImY2FwYW5kO1wiOlwi4qmEXCIsXCImY2FwYnJjdXA7XCI6XCLiqYlcIixcIiZjYXBjYXA7XCI6XCLiqYtcIixcIiZjYXBjdXA7XCI6XCLiqYdcIixcIiZjYXBkb3Q7XCI6XCLiqYBcIixcIiZjYXBzO1wiOlwi4oip77iAXCIsXCImY2FyZXQ7XCI6XCLigYFcIixcIiZjYXJvbjtcIjpcIsuHXCIsXCImY2NhcHM7XCI6XCLiqY1cIixcIiZjY2Fyb247XCI6XCLEjVwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmNjaXJjO1wiOlwixIlcIixcIiZjY3VwcztcIjpcIuKpjFwiLFwiJmNjdXBzc207XCI6XCLiqZBcIixcIiZjZG90O1wiOlwixItcIixcIiZjZWRpbFwiOlwiwrhcIixcIiZjZWRpbDtcIjpcIsK4XCIsXCImY2VtcHR5djtcIjpcIuKmslwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImY2VudGVyZG90O1wiOlwiwrdcIixcIiZjZnI7XCI6XCLwnZSgXCIsXCImY2hjeTtcIjpcItGHXCIsXCImY2hlY2s7XCI6XCLinJNcIixcIiZjaGVja21hcms7XCI6XCLinJNcIixcIiZjaGk7XCI6XCLPh1wiLFwiJmNpcjtcIjpcIuKXi1wiLFwiJmNpckU7XCI6XCLip4NcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZjaXJjZXE7XCI6XCLiiZdcIixcIiZjaXJjbGVhcnJvd2xlZnQ7XCI6XCLihrpcIixcIiZjaXJjbGVhcnJvd3JpZ2h0O1wiOlwi4oa7XCIsXCImY2lyY2xlZFI7XCI6XCLCrlwiLFwiJmNpcmNsZWRTO1wiOlwi4pOIXCIsXCImY2lyY2xlZGFzdDtcIjpcIuKKm1wiLFwiJmNpcmNsZWRjaXJjO1wiOlwi4oqaXCIsXCImY2lyY2xlZGRhc2g7XCI6XCLiip1cIixcIiZjaXJlO1wiOlwi4omXXCIsXCImY2lyZm5pbnQ7XCI6XCLiqJBcIixcIiZjaXJtaWQ7XCI6XCLiq69cIixcIiZjaXJzY2lyO1wiOlwi4qeCXCIsXCImY2x1YnM7XCI6XCLimaNcIixcIiZjbHVic3VpdDtcIjpcIuKZo1wiLFwiJmNvbG9uO1wiOlwiOlwiLFwiJmNvbG9uZTtcIjpcIuKJlFwiLFwiJmNvbG9uZXE7XCI6XCLiiZRcIixcIiZjb21tYTtcIjpcIixcIixcIiZjb21tYXQ7XCI6XCJAXCIsXCImY29tcDtcIjpcIuKIgVwiLFwiJmNvbXBmbjtcIjpcIuKImFwiLFwiJmNvbXBsZW1lbnQ7XCI6XCLiiIFcIixcIiZjb21wbGV4ZXM7XCI6XCLihIJcIixcIiZjb25nO1wiOlwi4omFXCIsXCImY29uZ2RvdDtcIjpcIuKprVwiLFwiJmNvbmludDtcIjpcIuKIrlwiLFwiJmNvcGY7XCI6XCLwnZWUXCIsXCImY29wcm9kO1wiOlwi4oiQXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZjb3B5c3I7XCI6XCLihJdcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmNyb3NzO1wiOlwi4pyXXCIsXCImY3NjcjtcIjpcIvCdkrhcIixcIiZjc3ViO1wiOlwi4quPXCIsXCImY3N1YmU7XCI6XCLiq5FcIixcIiZjc3VwO1wiOlwi4quQXCIsXCImY3N1cGU7XCI6XCLiq5JcIixcIiZjdGRvdDtcIjpcIuKLr1wiLFwiJmN1ZGFycmw7XCI6XCLipLhcIixcIiZjdWRhcnJyO1wiOlwi4qS1XCIsXCImY3VlcHI7XCI6XCLii55cIixcIiZjdWVzYztcIjpcIuKLn1wiLFwiJmN1bGFycjtcIjpcIuKGtlwiLFwiJmN1bGFycnA7XCI6XCLipL1cIixcIiZjdXA7XCI6XCLiiKpcIixcIiZjdXBicmNhcDtcIjpcIuKpiFwiLFwiJmN1cGNhcDtcIjpcIuKphlwiLFwiJmN1cGN1cDtcIjpcIuKpilwiLFwiJmN1cGRvdDtcIjpcIuKKjVwiLFwiJmN1cG9yO1wiOlwi4qmFXCIsXCImY3VwcztcIjpcIuKIqu+4gFwiLFwiJmN1cmFycjtcIjpcIuKGt1wiLFwiJmN1cmFycm07XCI6XCLipLxcIixcIiZjdXJseWVxcHJlYztcIjpcIuKLnlwiLFwiJmN1cmx5ZXFzdWNjO1wiOlwi4oufXCIsXCImY3VybHl2ZWU7XCI6XCLii45cIixcIiZjdXJseXdlZGdlO1wiOlwi4ouPXCIsXCImY3VycmVuXCI6XCLCpFwiLFwiJmN1cnJlbjtcIjpcIsKkXCIsXCImY3VydmVhcnJvd2xlZnQ7XCI6XCLihrZcIixcIiZjdXJ2ZWFycm93cmlnaHQ7XCI6XCLihrdcIixcIiZjdXZlZTtcIjpcIuKLjlwiLFwiJmN1d2VkO1wiOlwi4ouPXCIsXCImY3djb25pbnQ7XCI6XCLiiLJcIixcIiZjd2ludDtcIjpcIuKIsVwiLFwiJmN5bGN0eTtcIjpcIuKMrVwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZkSGFyO1wiOlwi4qWlXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImZGFsZXRoO1wiOlwi4oS4XCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmRhc2g7XCI6XCLigJBcIixcIiZkYXNodjtcIjpcIuKKo1wiLFwiJmRia2Fyb3c7XCI6XCLipI9cIixcIiZkYmxhYztcIjpcIsudXCIsXCImZGNhcm9uO1wiOlwixI9cIixcIiZkY3k7XCI6XCLQtFwiLFwiJmRkO1wiOlwi4oWGXCIsXCImZGRhZ2dlcjtcIjpcIuKAoVwiLFwiJmRkYXJyO1wiOlwi4oeKXCIsXCImZGRvdHNlcTtcIjpcIuKpt1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZkZW1wdHl2O1wiOlwi4qaxXCIsXCImZGZpc2h0O1wiOlwi4qW/XCIsXCImZGZyO1wiOlwi8J2UoVwiLFwiJmRoYXJsO1wiOlwi4oeDXCIsXCImZGhhcnI7XCI6XCLih4JcIixcIiZkaWFtO1wiOlwi4ouEXCIsXCImZGlhbW9uZDtcIjpcIuKLhFwiLFwiJmRpYW1vbmRzdWl0O1wiOlwi4pmmXCIsXCImZGlhbXM7XCI6XCLimaZcIixcIiZkaWU7XCI6XCLCqFwiLFwiJmRpZ2FtbWE7XCI6XCLPnVwiLFwiJmRpc2luO1wiOlwi4ouyXCIsXCImZGl2O1wiOlwiw7dcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZkaXZpZGVvbnRpbWVzO1wiOlwi4ouHXCIsXCImZGl2b254O1wiOlwi4ouHXCIsXCImZGpjeTtcIjpcItGSXCIsXCImZGxjb3JuO1wiOlwi4oyeXCIsXCImZGxjcm9wO1wiOlwi4oyNXCIsXCImZG9sbGFyO1wiOlwiJFwiLFwiJmRvcGY7XCI6XCLwnZWVXCIsXCImZG90O1wiOlwiy5lcIixcIiZkb3RlcTtcIjpcIuKJkFwiLFwiJmRvdGVxZG90O1wiOlwi4omRXCIsXCImZG90bWludXM7XCI6XCLiiLhcIixcIiZkb3RwbHVzO1wiOlwi4oiUXCIsXCImZG90c3F1YXJlO1wiOlwi4oqhXCIsXCImZG91YmxlYmFyd2VkZ2U7XCI6XCLijIZcIixcIiZkb3duYXJyb3c7XCI6XCLihpNcIixcIiZkb3duZG93bmFycm93cztcIjpcIuKHilwiLFwiJmRvd25oYXJwb29ubGVmdDtcIjpcIuKHg1wiLFwiJmRvd25oYXJwb29ucmlnaHQ7XCI6XCLih4JcIixcIiZkcmJrYXJvdztcIjpcIuKkkFwiLFwiJmRyY29ybjtcIjpcIuKMn1wiLFwiJmRyY3JvcDtcIjpcIuKMjFwiLFwiJmRzY3I7XCI6XCLwnZK5XCIsXCImZHNjeTtcIjpcItGVXCIsXCImZHNvbDtcIjpcIuKntlwiLFwiJmRzdHJvaztcIjpcIsSRXCIsXCImZHRkb3Q7XCI6XCLii7FcIixcIiZkdHJpO1wiOlwi4pa/XCIsXCImZHRyaWY7XCI6XCLilr5cIixcIiZkdWFycjtcIjpcIuKHtVwiLFwiJmR1aGFyO1wiOlwi4qWvXCIsXCImZHdhbmdsZTtcIjpcIuKmplwiLFwiJmR6Y3k7XCI6XCLRn1wiLFwiJmR6aWdyYXJyO1wiOlwi4p+/XCIsXCImZUREb3Q7XCI6XCLiqbdcIixcIiZlRG90O1wiOlwi4omRXCIsXCImZWFjdXRlXCI6XCLDqVwiLFwiJmVhY3V0ZTtcIjpcIsOpXCIsXCImZWFzdGVyO1wiOlwi4qmuXCIsXCImZWNhcm9uO1wiOlwixJtcIixcIiZlY2lyO1wiOlwi4omWXCIsXCImZWNpcmNcIjpcIsOqXCIsXCImZWNpcmM7XCI6XCLDqlwiLFwiJmVjb2xvbjtcIjpcIuKJlVwiLFwiJmVjeTtcIjpcItGNXCIsXCImZWRvdDtcIjpcIsSXXCIsXCImZWU7XCI6XCLihYdcIixcIiZlZkRvdDtcIjpcIuKJklwiLFwiJmVmcjtcIjpcIvCdlKJcIixcIiZlZztcIjpcIuKqmlwiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVncztcIjpcIuKqllwiLFwiJmVnc2RvdDtcIjpcIuKqmFwiLFwiJmVsO1wiOlwi4qqZXCIsXCImZWxpbnRlcnM7XCI6XCLij6dcIixcIiZlbGw7XCI6XCLihJNcIixcIiZlbHM7XCI6XCLiqpVcIixcIiZlbHNkb3Q7XCI6XCLiqpdcIixcIiZlbWFjcjtcIjpcIsSTXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZlbXB0eXNldDtcIjpcIuKIhVwiLFwiJmVtcHR5djtcIjpcIuKIhVwiLFwiJmVtc3AxMztcIjpcIuKAhFwiLFwiJmVtc3AxNDtcIjpcIuKAhVwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZlbmc7XCI6XCLFi1wiLFwiJmVuc3A7XCI6XCLigIJcIixcIiZlb2dvbjtcIjpcIsSZXCIsXCImZW9wZjtcIjpcIvCdlZZcIixcIiZlcGFyO1wiOlwi4ouVXCIsXCImZXBhcnNsO1wiOlwi4qejXCIsXCImZXBsdXM7XCI6XCLiqbFcIixcIiZlcHNpO1wiOlwizrVcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZlcHNpdjtcIjpcIs+1XCIsXCImZXFjaXJjO1wiOlwi4omWXCIsXCImZXFjb2xvbjtcIjpcIuKJlVwiLFwiJmVxc2ltO1wiOlwi4omCXCIsXCImZXFzbGFudGd0cjtcIjpcIuKqllwiLFwiJmVxc2xhbnRsZXNzO1wiOlwi4qqVXCIsXCImZXF1YWxzO1wiOlwiPVwiLFwiJmVxdWVzdDtcIjpcIuKJn1wiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImZXF1aXZERDtcIjpcIuKpuFwiLFwiJmVxdnBhcnNsO1wiOlwi4qelXCIsXCImZXJEb3Q7XCI6XCLiiZNcIixcIiZlcmFycjtcIjpcIuKlsVwiLFwiJmVzY3I7XCI6XCLihK9cIixcIiZlc2RvdDtcIjpcIuKJkFwiLFwiJmVzaW07XCI6XCLiiYJcIixcIiZldGE7XCI6XCLOt1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJmV1bWxcIjpcIsOrXCIsXCImZXVtbDtcIjpcIsOrXCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmV4Y2w7XCI6XCIhXCIsXCImZXhpc3Q7XCI6XCLiiINcIixcIiZleHBlY3RhdGlvbjtcIjpcIuKEsFwiLFwiJmV4cG9uZW50aWFsZTtcIjpcIuKFh1wiLFwiJmZhbGxpbmdkb3RzZXE7XCI6XCLiiZJcIixcIiZmY3k7XCI6XCLRhFwiLFwiJmZlbWFsZTtcIjpcIuKZgFwiLFwiJmZmaWxpZztcIjpcIu+sg1wiLFwiJmZmbGlnO1wiOlwi76yAXCIsXCImZmZsbGlnO1wiOlwi76yEXCIsXCImZmZyO1wiOlwi8J2Uo1wiLFwiJmZpbGlnO1wiOlwi76yBXCIsXCImZmpsaWc7XCI6XCJmalwiLFwiJmZsYXQ7XCI6XCLima1cIixcIiZmbGxpZztcIjpcIu+sglwiLFwiJmZsdG5zO1wiOlwi4paxXCIsXCImZm5vZjtcIjpcIsaSXCIsXCImZm9wZjtcIjpcIvCdlZdcIixcIiZmb3JhbGw7XCI6XCLiiIBcIixcIiZmb3JrO1wiOlwi4ouUXCIsXCImZm9ya3Y7XCI6XCLiq5lcIixcIiZmcGFydGludDtcIjpcIuKojVwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMxMztcIjpcIuKFk1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxNTtcIjpcIuKFlVwiLFwiJmZyYWMxNjtcIjpcIuKFmVwiLFwiJmZyYWMxODtcIjpcIuKFm1wiLFwiJmZyYWMyMztcIjpcIuKFlFwiLFwiJmZyYWMyNTtcIjpcIuKFllwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmZyYWMzNTtcIjpcIuKFl1wiLFwiJmZyYWMzODtcIjpcIuKFnFwiLFwiJmZyYWM0NTtcIjpcIuKFmFwiLFwiJmZyYWM1NjtcIjpcIuKFmlwiLFwiJmZyYWM1ODtcIjpcIuKFnVwiLFwiJmZyYWM3ODtcIjpcIuKFnlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImZnJvd247XCI6XCLijKJcIixcIiZmc2NyO1wiOlwi8J2Su1wiLFwiJmdFO1wiOlwi4omnXCIsXCImZ0VsO1wiOlwi4qqMXCIsXCImZ2FjdXRlO1wiOlwix7VcIixcIiZnYW1tYTtcIjpcIs6zXCIsXCImZ2FtbWFkO1wiOlwiz51cIixcIiZnYXA7XCI6XCLiqoZcIixcIiZnYnJldmU7XCI6XCLEn1wiLFwiJmdjaXJjO1wiOlwixJ1cIixcIiZnY3k7XCI6XCLQs1wiLFwiJmdkb3Q7XCI6XCLEoVwiLFwiJmdlO1wiOlwi4omlXCIsXCImZ2VsO1wiOlwi4oubXCIsXCImZ2VxO1wiOlwi4omlXCIsXCImZ2VxcTtcIjpcIuKJp1wiLFwiJmdlcXNsYW50O1wiOlwi4qm+XCIsXCImZ2VzO1wiOlwi4qm+XCIsXCImZ2VzY2M7XCI6XCLiqqlcIixcIiZnZXNkb3Q7XCI6XCLiqoBcIixcIiZnZXNkb3RvO1wiOlwi4qqCXCIsXCImZ2VzZG90b2w7XCI6XCLiqoRcIixcIiZnZXNsO1wiOlwi4oub77iAXCIsXCImZ2VzbGVzO1wiOlwi4qqUXCIsXCImZ2ZyO1wiOlwi8J2UpFwiLFwiJmdnO1wiOlwi4omrXCIsXCImZ2dnO1wiOlwi4ouZXCIsXCImZ2ltZWw7XCI6XCLihLdcIixcIiZnamN5O1wiOlwi0ZNcIixcIiZnbDtcIjpcIuKJt1wiLFwiJmdsRTtcIjpcIuKqklwiLFwiJmdsYTtcIjpcIuKqpVwiLFwiJmdsajtcIjpcIuKqpFwiLFwiJmduRTtcIjpcIuKJqVwiLFwiJmduYXA7XCI6XCLiqopcIixcIiZnbmFwcHJveDtcIjpcIuKqilwiLFwiJmduZTtcIjpcIuKqiFwiLFwiJmduZXE7XCI6XCLiqohcIixcIiZnbmVxcTtcIjpcIuKJqVwiLFwiJmduc2ltO1wiOlwi4ounXCIsXCImZ29wZjtcIjpcIvCdlZhcIixcIiZncmF2ZTtcIjpcImBcIixcIiZnc2NyO1wiOlwi4oSKXCIsXCImZ3NpbTtcIjpcIuKJs1wiLFwiJmdzaW1lO1wiOlwi4qqOXCIsXCImZ3NpbWw7XCI6XCLiqpBcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJmd0Y2M7XCI6XCLiqqdcIixcIiZndGNpcjtcIjpcIuKpulwiLFwiJmd0ZG90O1wiOlwi4ouXXCIsXCImZ3RsUGFyO1wiOlwi4qaVXCIsXCImZ3RxdWVzdDtcIjpcIuKpvFwiLFwiJmd0cmFwcHJveDtcIjpcIuKqhlwiLFwiJmd0cmFycjtcIjpcIuKluFwiLFwiJmd0cmRvdDtcIjpcIuKLl1wiLFwiJmd0cmVxbGVzcztcIjpcIuKLm1wiLFwiJmd0cmVxcWxlc3M7XCI6XCLiqoxcIixcIiZndHJsZXNzO1wiOlwi4om3XCIsXCImZ3Ryc2ltO1wiOlwi4omzXCIsXCImZ3ZlcnRuZXFxO1wiOlwi4omp77iAXCIsXCImZ3ZuRTtcIjpcIuKJqe+4gFwiLFwiJmhBcnI7XCI6XCLih5RcIixcIiZoYWlyc3A7XCI6XCLigIpcIixcIiZoYWxmO1wiOlwiwr1cIixcIiZoYW1pbHQ7XCI6XCLihItcIixcIiZoYXJkY3k7XCI6XCLRilwiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZoYXJyY2lyO1wiOlwi4qWIXCIsXCImaGFycnc7XCI6XCLihq1cIixcIiZoYmFyO1wiOlwi4oSPXCIsXCImaGNpcmM7XCI6XCLEpVwiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmhlYXJ0c3VpdDtcIjpcIuKZpVwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJmhlcmNvbjtcIjpcIuKKuVwiLFwiJmhmcjtcIjpcIvCdlKVcIixcIiZoa3NlYXJvdztcIjpcIuKkpVwiLFwiJmhrc3dhcm93O1wiOlwi4qSmXCIsXCImaG9hcnI7XCI6XCLih79cIixcIiZob210aHQ7XCI6XCLiiLtcIixcIiZob29rbGVmdGFycm93O1wiOlwi4oapXCIsXCImaG9va3JpZ2h0YXJyb3c7XCI6XCLihqpcIixcIiZob3BmO1wiOlwi8J2VmVwiLFwiJmhvcmJhcjtcIjpcIuKAlVwiLFwiJmhzY3I7XCI6XCLwnZK9XCIsXCImaHNsYXNoO1wiOlwi4oSPXCIsXCImaHN0cm9rO1wiOlwixKdcIixcIiZoeWJ1bGw7XCI6XCLigYNcIixcIiZoeXBoZW47XCI6XCLigJBcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpYztcIjpcIuKBo1wiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpY3k7XCI6XCLQuFwiLFwiJmllY3k7XCI6XCLQtVwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZpZmY7XCI6XCLih5RcIixcIiZpZnI7XCI6XCLwnZSmXCIsXCImaWdyYXZlXCI6XCLDrFwiLFwiJmlncmF2ZTtcIjpcIsOsXCIsXCImaWk7XCI6XCLihYhcIixcIiZpaWlpbnQ7XCI6XCLiqIxcIixcIiZpaWludDtcIjpcIuKIrVwiLFwiJmlpbmZpbjtcIjpcIuKnnFwiLFwiJmlpb3RhO1wiOlwi4oSpXCIsXCImaWpsaWc7XCI6XCLEs1wiLFwiJmltYWNyO1wiOlwixKtcIixcIiZpbWFnZTtcIjpcIuKEkVwiLFwiJmltYWdsaW5lO1wiOlwi4oSQXCIsXCImaW1hZ3BhcnQ7XCI6XCLihJFcIixcIiZpbWF0aDtcIjpcIsSxXCIsXCImaW1vZjtcIjpcIuKKt1wiLFwiJmltcGVkO1wiOlwixrVcIixcIiZpbjtcIjpcIuKIiFwiLFwiJmluY2FyZTtcIjpcIuKEhVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImaW5maW50aWU7XCI6XCLip51cIixcIiZpbm9kb3Q7XCI6XCLEsVwiLFwiJmludDtcIjpcIuKIq1wiLFwiJmludGNhbDtcIjpcIuKKulwiLFwiJmludGVnZXJzO1wiOlwi4oSkXCIsXCImaW50ZXJjYWw7XCI6XCLiirpcIixcIiZpbnRsYXJoaztcIjpcIuKol1wiLFwiJmludHByb2Q7XCI6XCLiqLxcIixcIiZpb2N5O1wiOlwi0ZFcIixcIiZpb2dvbjtcIjpcIsSvXCIsXCImaW9wZjtcIjpcIvCdlZpcIixcIiZpb3RhO1wiOlwizrlcIixcIiZpcHJvZDtcIjpcIuKovFwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJmlzY3I7XCI6XCLwnZK+XCIsXCImaXNpbjtcIjpcIuKIiFwiLFwiJmlzaW5FO1wiOlwi4ou5XCIsXCImaXNpbmRvdDtcIjpcIuKLtVwiLFwiJmlzaW5zO1wiOlwi4ou0XCIsXCImaXNpbnN2O1wiOlwi4ouzXCIsXCImaXNpbnY7XCI6XCLiiIhcIixcIiZpdDtcIjpcIuKBolwiLFwiJml0aWxkZTtcIjpcIsSpXCIsXCImaXVrY3k7XCI6XCLRllwiLFwiJml1bWxcIjpcIsOvXCIsXCImaXVtbDtcIjpcIsOvXCIsXCImamNpcmM7XCI6XCLEtVwiLFwiJmpjeTtcIjpcItC5XCIsXCImamZyO1wiOlwi8J2Up1wiLFwiJmptYXRoO1wiOlwiyLdcIixcIiZqb3BmO1wiOlwi8J2Vm1wiLFwiJmpzY3I7XCI6XCLwnZK/XCIsXCImanNlcmN5O1wiOlwi0ZhcIixcIiZqdWtjeTtcIjpcItGUXCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmthcHBhdjtcIjpcIs+wXCIsXCIma2NlZGlsO1wiOlwixLdcIixcIiZrY3k7XCI6XCLQulwiLFwiJmtmcjtcIjpcIvCdlKhcIixcIiZrZ3JlZW47XCI6XCLEuFwiLFwiJmtoY3k7XCI6XCLRhVwiLFwiJmtqY3k7XCI6XCLRnFwiLFwiJmtvcGY7XCI6XCLwnZWcXCIsXCIma3NjcjtcIjpcIvCdk4BcIixcIiZsQWFycjtcIjpcIuKHmlwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZsQXRhaWw7XCI6XCLipJtcIixcIiZsQmFycjtcIjpcIuKkjlwiLFwiJmxFO1wiOlwi4ommXCIsXCImbEVnO1wiOlwi4qqLXCIsXCImbEhhcjtcIjpcIuKlolwiLFwiJmxhY3V0ZTtcIjpcIsS6XCIsXCImbGFlbXB0eXY7XCI6XCLiprRcIixcIiZsYWdyYW47XCI6XCLihJJcIixcIiZsYW1iZGE7XCI6XCLOu1wiLFwiJmxhbmc7XCI6XCLin6hcIixcIiZsYW5nZDtcIjpcIuKmkVwiLFwiJmxhbmdsZTtcIjpcIuKfqFwiLFwiJmxhcDtcIjpcIuKqhVwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZsYXJyO1wiOlwi4oaQXCIsXCImbGFycmI7XCI6XCLih6RcIixcIiZsYXJyYmZzO1wiOlwi4qSfXCIsXCImbGFycmZzO1wiOlwi4qSdXCIsXCImbGFycmhrO1wiOlwi4oapXCIsXCImbGFycmxwO1wiOlwi4oarXCIsXCImbGFycnBsO1wiOlwi4qS5XCIsXCImbGFycnNpbTtcIjpcIuKls1wiLFwiJmxhcnJ0bDtcIjpcIuKGolwiLFwiJmxhdDtcIjpcIuKqq1wiLFwiJmxhdGFpbDtcIjpcIuKkmVwiLFwiJmxhdGU7XCI6XCLiqq1cIixcIiZsYXRlcztcIjpcIuKqre+4gFwiLFwiJmxiYXJyO1wiOlwi4qSMXCIsXCImbGJicms7XCI6XCLinbJcIixcIiZsYnJhY2U7XCI6XCJ7XCIsXCImbGJyYWNrO1wiOlwiW1wiLFwiJmxicmtlO1wiOlwi4qaLXCIsXCImbGJya3NsZDtcIjpcIuKmj1wiLFwiJmxicmtzbHU7XCI6XCLipo1cIixcIiZsY2Fyb247XCI6XCLEvlwiLFwiJmxjZWRpbDtcIjpcIsS8XCIsXCImbGNlaWw7XCI6XCLijIhcIixcIiZsY3ViO1wiOlwie1wiLFwiJmxjeTtcIjpcItC7XCIsXCImbGRjYTtcIjpcIuKktlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImbGRxdW9yO1wiOlwi4oCeXCIsXCImbGRyZGhhcjtcIjpcIuKlp1wiLFwiJmxkcnVzaGFyO1wiOlwi4qWLXCIsXCImbGRzaDtcIjpcIuKGslwiLFwiJmxlO1wiOlwi4omkXCIsXCImbGVmdGFycm93O1wiOlwi4oaQXCIsXCImbGVmdGFycm93dGFpbDtcIjpcIuKGolwiLFwiJmxlZnRoYXJwb29uZG93bjtcIjpcIuKGvVwiLFwiJmxlZnRoYXJwb29udXA7XCI6XCLihrxcIixcIiZsZWZ0bGVmdGFycm93cztcIjpcIuKHh1wiLFwiJmxlZnRyaWdodGFycm93O1wiOlwi4oaUXCIsXCImbGVmdHJpZ2h0YXJyb3dzO1wiOlwi4oeGXCIsXCImbGVmdHJpZ2h0aGFycG9vbnM7XCI6XCLih4tcIixcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiOlwi4oatXCIsXCImbGVmdHRocmVldGltZXM7XCI6XCLii4tcIixcIiZsZWc7XCI6XCLii5pcIixcIiZsZXE7XCI6XCLiiaRcIixcIiZsZXFxO1wiOlwi4ommXCIsXCImbGVxc2xhbnQ7XCI6XCLiqb1cIixcIiZsZXM7XCI6XCLiqb1cIixcIiZsZXNjYztcIjpcIuKqqFwiLFwiJmxlc2RvdDtcIjpcIuKpv1wiLFwiJmxlc2RvdG87XCI6XCLiqoFcIixcIiZsZXNkb3RvcjtcIjpcIuKqg1wiLFwiJmxlc2c7XCI6XCLii5rvuIBcIixcIiZsZXNnZXM7XCI6XCLiqpNcIixcIiZsZXNzYXBwcm94O1wiOlwi4qqFXCIsXCImbGVzc2RvdDtcIjpcIuKLllwiLFwiJmxlc3NlcWd0cjtcIjpcIuKLmlwiLFwiJmxlc3NlcXFndHI7XCI6XCLiqotcIixcIiZsZXNzZ3RyO1wiOlwi4om2XCIsXCImbGVzc3NpbTtcIjpcIuKJslwiLFwiJmxmaXNodDtcIjpcIuKlvFwiLFwiJmxmbG9vcjtcIjpcIuKMilwiLFwiJmxmcjtcIjpcIvCdlKlcIixcIiZsZztcIjpcIuKJtlwiLFwiJmxnRTtcIjpcIuKqkVwiLFwiJmxoYXJkO1wiOlwi4oa9XCIsXCImbGhhcnU7XCI6XCLihrxcIixcIiZsaGFydWw7XCI6XCLipapcIixcIiZsaGJsaztcIjpcIuKWhFwiLFwiJmxqY3k7XCI6XCLRmVwiLFwiJmxsO1wiOlwi4omqXCIsXCImbGxhcnI7XCI6XCLih4dcIixcIiZsbGNvcm5lcjtcIjpcIuKMnlwiLFwiJmxsaGFyZDtcIjpcIuKlq1wiLFwiJmxsdHJpO1wiOlwi4pe6XCIsXCImbG1pZG90O1wiOlwixYBcIixcIiZsbW91c3Q7XCI6XCLijrBcIixcIiZsbW91c3RhY2hlO1wiOlwi4o6wXCIsXCImbG5FO1wiOlwi4omoXCIsXCImbG5hcDtcIjpcIuKqiVwiLFwiJmxuYXBwcm94O1wiOlwi4qqJXCIsXCImbG5lO1wiOlwi4qqHXCIsXCImbG5lcTtcIjpcIuKqh1wiLFwiJmxuZXFxO1wiOlwi4omoXCIsXCImbG5zaW07XCI6XCLii6ZcIixcIiZsb2FuZztcIjpcIuKfrFwiLFwiJmxvYXJyO1wiOlwi4oe9XCIsXCImbG9icms7XCI6XCLin6ZcIixcIiZsb25nbGVmdGFycm93O1wiOlwi4p+1XCIsXCImbG9uZ2xlZnRyaWdodGFycm93O1wiOlwi4p+3XCIsXCImbG9uZ21hcHN0bztcIjpcIuKfvFwiLFwiJmxvbmdyaWdodGFycm93O1wiOlwi4p+2XCIsXCImbG9vcGFycm93bGVmdDtcIjpcIuKGq1wiLFwiJmxvb3BhcnJvd3JpZ2h0O1wiOlwi4oasXCIsXCImbG9wYXI7XCI6XCLipoVcIixcIiZsb3BmO1wiOlwi8J2VnVwiLFwiJmxvcGx1cztcIjpcIuKorVwiLFwiJmxvdGltZXM7XCI6XCLiqLRcIixcIiZsb3dhc3Q7XCI6XCLiiJdcIixcIiZsb3diYXI7XCI6XCJfXCIsXCImbG96O1wiOlwi4peKXCIsXCImbG96ZW5nZTtcIjpcIuKXilwiLFwiJmxvemY7XCI6XCLip6tcIixcIiZscGFyO1wiOlwiKFwiLFwiJmxwYXJsdDtcIjpcIuKmk1wiLFwiJmxyYXJyO1wiOlwi4oeGXCIsXCImbHJjb3JuZXI7XCI6XCLijJ9cIixcIiZscmhhcjtcIjpcIuKHi1wiLFwiJmxyaGFyZDtcIjpcIuKlrVwiLFwiJmxybTtcIjpcIuKAjlwiLFwiJmxydHJpO1wiOlwi4oq/XCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImbHNjcjtcIjpcIvCdk4FcIixcIiZsc2g7XCI6XCLihrBcIixcIiZsc2ltO1wiOlwi4omyXCIsXCImbHNpbWU7XCI6XCLiqo1cIixcIiZsc2ltZztcIjpcIuKqj1wiLFwiJmxzcWI7XCI6XCJbXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZsc3F1b3I7XCI6XCLigJpcIixcIiZsc3Ryb2s7XCI6XCLFglwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImbHRjYztcIjpcIuKqplwiLFwiJmx0Y2lyO1wiOlwi4qm5XCIsXCImbHRkb3Q7XCI6XCLii5ZcIixcIiZsdGhyZWU7XCI6XCLii4tcIixcIiZsdGltZXM7XCI6XCLii4lcIixcIiZsdGxhcnI7XCI6XCLipbZcIixcIiZsdHF1ZXN0O1wiOlwi4qm7XCIsXCImbHRyUGFyO1wiOlwi4qaWXCIsXCImbHRyaTtcIjpcIuKXg1wiLFwiJmx0cmllO1wiOlwi4oq0XCIsXCImbHRyaWY7XCI6XCLil4JcIixcIiZsdXJkc2hhcjtcIjpcIuKlilwiLFwiJmx1cnVoYXI7XCI6XCLipaZcIixcIiZsdmVydG5lcXE7XCI6XCLiiajvuIBcIixcIiZsdm5FO1wiOlwi4omo77iAXCIsXCImbUREb3Q7XCI6XCLiiLpcIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJm1hbGU7XCI6XCLimYJcIixcIiZtYWx0O1wiOlwi4pygXCIsXCImbWFsdGVzZTtcIjpcIuKcoFwiLFwiJm1hcDtcIjpcIuKGplwiLFwiJm1hcHN0bztcIjpcIuKGplwiLFwiJm1hcHN0b2Rvd247XCI6XCLihqdcIixcIiZtYXBzdG9sZWZ0O1wiOlwi4oakXCIsXCImbWFwc3RvdXA7XCI6XCLihqVcIixcIiZtYXJrZXI7XCI6XCLilq5cIixcIiZtY29tbWE7XCI6XCLiqKlcIixcIiZtY3k7XCI6XCLQvFwiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbWVhc3VyZWRhbmdsZTtcIjpcIuKIoVwiLFwiJm1mcjtcIjpcIvCdlKpcIixcIiZtaG87XCI6XCLihKdcIixcIiZtaWNyb1wiOlwiwrVcIixcIiZtaWNybztcIjpcIsK1XCIsXCImbWlkO1wiOlwi4oijXCIsXCImbWlkYXN0O1wiOlwiKlwiLFwiJm1pZGNpcjtcIjpcIuKrsFwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbWludXNiO1wiOlwi4oqfXCIsXCImbWludXNkO1wiOlwi4oi4XCIsXCImbWludXNkdTtcIjpcIuKoqlwiLFwiJm1sY3A7XCI6XCLiq5tcIixcIiZtbGRyO1wiOlwi4oCmXCIsXCImbW5wbHVzO1wiOlwi4oiTXCIsXCImbW9kZWxzO1wiOlwi4oqnXCIsXCImbW9wZjtcIjpcIvCdlZ5cIixcIiZtcDtcIjpcIuKIk1wiLFwiJm1zY3I7XCI6XCLwnZOCXCIsXCImbXN0cG9zO1wiOlwi4oi+XCIsXCImbXU7XCI6XCLOvFwiLFwiJm11bHRpbWFwO1wiOlwi4oq4XCIsXCImbXVtYXA7XCI6XCLiirhcIixcIiZuR2c7XCI6XCLii5nMuFwiLFwiJm5HdDtcIjpcIuKJq+KDklwiLFwiJm5HdHY7XCI6XCLiiavMuFwiLFwiJm5MZWZ0YXJyb3c7XCI6XCLih41cIixcIiZuTGVmdHJpZ2h0YXJyb3c7XCI6XCLih45cIixcIiZuTGw7XCI6XCLii5jMuFwiLFwiJm5MdDtcIjpcIuKJquKDklwiLFwiJm5MdHY7XCI6XCLiiarMuFwiLFwiJm5SaWdodGFycm93O1wiOlwi4oePXCIsXCImblZEYXNoO1wiOlwi4oqvXCIsXCImblZkYXNoO1wiOlwi4oquXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZuYWN1dGU7XCI6XCLFhFwiLFwiJm5hbmc7XCI6XCLiiKDig5JcIixcIiZuYXA7XCI6XCLiiYlcIixcIiZuYXBFO1wiOlwi4qmwzLhcIixcIiZuYXBpZDtcIjpcIuKJi8y4XCIsXCImbmFwb3M7XCI6XCLFiVwiLFwiJm5hcHByb3g7XCI6XCLiiYlcIixcIiZuYXR1cjtcIjpcIuKZrlwiLFwiJm5hdHVyYWw7XCI6XCLima5cIixcIiZuYXR1cmFscztcIjpcIuKElVwiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImbmJ1bXA7XCI6XCLiiY7MuFwiLFwiJm5idW1wZTtcIjpcIuKJj8y4XCIsXCImbmNhcDtcIjpcIuKpg1wiLFwiJm5jYXJvbjtcIjpcIsWIXCIsXCImbmNlZGlsO1wiOlwixYZcIixcIiZuY29uZztcIjpcIuKJh1wiLFwiJm5jb25nZG90O1wiOlwi4qmtzLhcIixcIiZuY3VwO1wiOlwi4qmCXCIsXCImbmN5O1wiOlwi0L1cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm5lO1wiOlwi4omgXCIsXCImbmVBcnI7XCI6XCLih5dcIixcIiZuZWFyaGs7XCI6XCLipKRcIixcIiZuZWFycjtcIjpcIuKGl1wiLFwiJm5lYXJyb3c7XCI6XCLihpdcIixcIiZuZWRvdDtcIjpcIuKJkMy4XCIsXCImbmVxdWl2O1wiOlwi4omiXCIsXCImbmVzZWFyO1wiOlwi4qSoXCIsXCImbmVzaW07XCI6XCLiiYLMuFwiLFwiJm5leGlzdDtcIjpcIuKIhFwiLFwiJm5leGlzdHM7XCI6XCLiiIRcIixcIiZuZnI7XCI6XCLwnZSrXCIsXCImbmdFO1wiOlwi4omnzLhcIixcIiZuZ2U7XCI6XCLiibFcIixcIiZuZ2VxO1wiOlwi4omxXCIsXCImbmdlcXE7XCI6XCLiiafMuFwiLFwiJm5nZXFzbGFudDtcIjpcIuKpvsy4XCIsXCImbmdlcztcIjpcIuKpvsy4XCIsXCImbmdzaW07XCI6XCLiibVcIixcIiZuZ3Q7XCI6XCLiia9cIixcIiZuZ3RyO1wiOlwi4omvXCIsXCImbmhBcnI7XCI6XCLih45cIixcIiZuaGFycjtcIjpcIuKGrlwiLFwiJm5ocGFyO1wiOlwi4quyXCIsXCImbmk7XCI6XCLiiItcIixcIiZuaXM7XCI6XCLii7xcIixcIiZuaXNkO1wiOlwi4ou6XCIsXCImbml2O1wiOlwi4oiLXCIsXCImbmpjeTtcIjpcItGaXCIsXCImbmxBcnI7XCI6XCLih41cIixcIiZubEU7XCI6XCLiiabMuFwiLFwiJm5sYXJyO1wiOlwi4oaaXCIsXCImbmxkcjtcIjpcIuKApVwiLFwiJm5sZTtcIjpcIuKJsFwiLFwiJm5sZWZ0YXJyb3c7XCI6XCLihppcIixcIiZubGVmdHJpZ2h0YXJyb3c7XCI6XCLihq5cIixcIiZubGVxO1wiOlwi4omwXCIsXCImbmxlcXE7XCI6XCLiiabMuFwiLFwiJm5sZXFzbGFudDtcIjpcIuKpvcy4XCIsXCImbmxlcztcIjpcIuKpvcy4XCIsXCImbmxlc3M7XCI6XCLiia5cIixcIiZubHNpbTtcIjpcIuKJtFwiLFwiJm5sdDtcIjpcIuKJrlwiLFwiJm5sdHJpO1wiOlwi4ouqXCIsXCImbmx0cmllO1wiOlwi4ousXCIsXCImbm1pZDtcIjpcIuKIpFwiLFwiJm5vcGY7XCI6XCLwnZWfXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZub3RpbkU7XCI6XCLii7nMuFwiLFwiJm5vdGluZG90O1wiOlwi4ou1zLhcIixcIiZub3RpbnZhO1wiOlwi4oiJXCIsXCImbm90aW52YjtcIjpcIuKLt1wiLFwiJm5vdGludmM7XCI6XCLii7ZcIixcIiZub3RuaTtcIjpcIuKIjFwiLFwiJm5vdG5pdmE7XCI6XCLiiIxcIixcIiZub3RuaXZiO1wiOlwi4ou+XCIsXCImbm90bml2YztcIjpcIuKLvVwiLFwiJm5wYXI7XCI6XCLiiKZcIixcIiZucGFyYWxsZWw7XCI6XCLiiKZcIixcIiZucGFyc2w7XCI6XCLiq73ig6VcIixcIiZucGFydDtcIjpcIuKIgsy4XCIsXCImbnBvbGludDtcIjpcIuKolFwiLFwiJm5wcjtcIjpcIuKKgFwiLFwiJm5wcmN1ZTtcIjpcIuKLoFwiLFwiJm5wcmU7XCI6XCLiqq/MuFwiLFwiJm5wcmVjO1wiOlwi4oqAXCIsXCImbnByZWNlcTtcIjpcIuKqr8y4XCIsXCImbnJBcnI7XCI6XCLih49cIixcIiZucmFycjtcIjpcIuKGm1wiLFwiJm5yYXJyYztcIjpcIuKks8y4XCIsXCImbnJhcnJ3O1wiOlwi4oadzLhcIixcIiZucmlnaHRhcnJvdztcIjpcIuKGm1wiLFwiJm5ydHJpO1wiOlwi4ourXCIsXCImbnJ0cmllO1wiOlwi4outXCIsXCImbnNjO1wiOlwi4oqBXCIsXCImbnNjY3VlO1wiOlwi4ouhXCIsXCImbnNjZTtcIjpcIuKqsMy4XCIsXCImbnNjcjtcIjpcIvCdk4NcIixcIiZuc2hvcnRtaWQ7XCI6XCLiiKRcIixcIiZuc2hvcnRwYXJhbGxlbDtcIjpcIuKIplwiLFwiJm5zaW07XCI6XCLiiYFcIixcIiZuc2ltZTtcIjpcIuKJhFwiLFwiJm5zaW1lcTtcIjpcIuKJhFwiLFwiJm5zbWlkO1wiOlwi4oikXCIsXCImbnNwYXI7XCI6XCLiiKZcIixcIiZuc3FzdWJlO1wiOlwi4ouiXCIsXCImbnNxc3VwZTtcIjpcIuKLo1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZuc3ViRTtcIjpcIuKrhcy4XCIsXCImbnN1YmU7XCI6XCLiiohcIixcIiZuc3Vic2V0O1wiOlwi4oqC4oOSXCIsXCImbnN1YnNldGVxO1wiOlwi4oqIXCIsXCImbnN1YnNldGVxcTtcIjpcIuKrhcy4XCIsXCImbnN1Y2M7XCI6XCLiioFcIixcIiZuc3VjY2VxO1wiOlwi4qqwzLhcIixcIiZuc3VwO1wiOlwi4oqFXCIsXCImbnN1cEU7XCI6XCLiq4bMuFwiLFwiJm5zdXBlO1wiOlwi4oqJXCIsXCImbnN1cHNldDtcIjpcIuKKg+KDklwiLFwiJm5zdXBzZXRlcTtcIjpcIuKKiVwiLFwiJm5zdXBzZXRlcXE7XCI6XCLiq4bMuFwiLFwiJm50Z2w7XCI6XCLiiblcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZudGxnO1wiOlwi4om4XCIsXCImbnRyaWFuZ2xlbGVmdDtcIjpcIuKLqlwiLFwiJm50cmlhbmdsZWxlZnRlcTtcIjpcIuKLrFwiLFwiJm50cmlhbmdsZXJpZ2h0O1wiOlwi4ourXCIsXCImbnRyaWFuZ2xlcmlnaHRlcTtcIjpcIuKLrVwiLFwiJm51O1wiOlwizr1cIixcIiZudW07XCI6XCIjXCIsXCImbnVtZXJvO1wiOlwi4oSWXCIsXCImbnVtc3A7XCI6XCLigIdcIixcIiZudkRhc2g7XCI6XCLiiq1cIixcIiZudkhhcnI7XCI6XCLipIRcIixcIiZudmFwO1wiOlwi4omN4oOSXCIsXCImbnZkYXNoO1wiOlwi4oqsXCIsXCImbnZnZTtcIjpcIuKJpeKDklwiLFwiJm52Z3Q7XCI6XCI+4oOSXCIsXCImbnZpbmZpbjtcIjpcIuKnnlwiLFwiJm52bEFycjtcIjpcIuKkglwiLFwiJm52bGU7XCI6XCLiiaTig5JcIixcIiZudmx0O1wiOlwiPOKDklwiLFwiJm52bHRyaWU7XCI6XCLiirTig5JcIixcIiZudnJBcnI7XCI6XCLipINcIixcIiZudnJ0cmllO1wiOlwi4oq14oOSXCIsXCImbnZzaW07XCI6XCLiiLzig5JcIixcIiZud0FycjtcIjpcIuKHllwiLFwiJm53YXJoaztcIjpcIuKko1wiLFwiJm53YXJyO1wiOlwi4oaWXCIsXCImbndhcnJvdztcIjpcIuKGllwiLFwiJm53bmVhcjtcIjpcIuKkp1wiLFwiJm9TO1wiOlwi4pOIXCIsXCImb2FjdXRlXCI6XCLDs1wiLFwiJm9hY3V0ZTtcIjpcIsOzXCIsXCImb2FzdDtcIjpcIuKKm1wiLFwiJm9jaXI7XCI6XCLiippcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb2N5O1wiOlwi0L5cIixcIiZvZGFzaDtcIjpcIuKKnVwiLFwiJm9kYmxhYztcIjpcIsWRXCIsXCImb2RpdjtcIjpcIuKouFwiLFwiJm9kb3Q7XCI6XCLiiplcIixcIiZvZHNvbGQ7XCI6XCLiprxcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImb2ZjaXI7XCI6XCLipr9cIixcIiZvZnI7XCI6XCLwnZSsXCIsXCImb2dvbjtcIjpcIsubXCIsXCImb2dyYXZlXCI6XCLDslwiLFwiJm9ncmF2ZTtcIjpcIsOyXCIsXCImb2d0O1wiOlwi4qeBXCIsXCImb2hiYXI7XCI6XCLiprVcIixcIiZvaG07XCI6XCLOqVwiLFwiJm9pbnQ7XCI6XCLiiK5cIixcIiZvbGFycjtcIjpcIuKGulwiLFwiJm9sY2lyO1wiOlwi4qa+XCIsXCImb2xjcm9zcztcIjpcIuKmu1wiLFwiJm9saW5lO1wiOlwi4oC+XCIsXCImb2x0O1wiOlwi4qeAXCIsXCImb21hY3I7XCI6XCLFjVwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZvbWlkO1wiOlwi4qa2XCIsXCImb21pbnVzO1wiOlwi4oqWXCIsXCImb29wZjtcIjpcIvCdlaBcIixcIiZvcGFyO1wiOlwi4qa3XCIsXCImb3BlcnA7XCI6XCLiprlcIixcIiZvcGx1cztcIjpcIuKKlVwiLFwiJm9yO1wiOlwi4oioXCIsXCImb3JhcnI7XCI6XCLihrtcIixcIiZvcmQ7XCI6XCLiqZ1cIixcIiZvcmRlcjtcIjpcIuKEtFwiLFwiJm9yZGVyb2Y7XCI6XCLihLRcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImb3JpZ29mO1wiOlwi4oq2XCIsXCImb3JvcjtcIjpcIuKpllwiLFwiJm9yc2xvcGU7XCI6XCLiqZdcIixcIiZvcnY7XCI6XCLiqZtcIixcIiZvc2NyO1wiOlwi4oS0XCIsXCImb3NsYXNoXCI6XCLDuFwiLFwiJm9zbGFzaDtcIjpcIsO4XCIsXCImb3NvbDtcIjpcIuKKmFwiLFwiJm90aWxkZVwiOlwiw7VcIixcIiZvdGlsZGU7XCI6XCLDtVwiLFwiJm90aW1lcztcIjpcIuKKl1wiLFwiJm90aW1lc2FzO1wiOlwi4qi2XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZvdmJhcjtcIjpcIuKMvVwiLFwiJnBhcjtcIjpcIuKIpVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImcGFyYWxsZWw7XCI6XCLiiKVcIixcIiZwYXJzaW07XCI6XCLiq7NcIixcIiZwYXJzbDtcIjpcIuKrvVwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZwY3k7XCI6XCLQv1wiLFwiJnBlcmNudDtcIjpcIiVcIixcIiZwZXJpb2Q7XCI6XCIuXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnBlcnRlbms7XCI6XCLigLFcIixcIiZwZnI7XCI6XCLwnZStXCIsXCImcGhpO1wiOlwiz4ZcIixcIiZwaGl2O1wiOlwiz5VcIixcIiZwaG1tYXQ7XCI6XCLihLNcIixcIiZwaG9uZTtcIjpcIuKYjlwiLFwiJnBpO1wiOlwiz4BcIixcIiZwaXRjaGZvcms7XCI6XCLii5RcIixcIiZwaXY7XCI6XCLPllwiLFwiJnBsYW5jaztcIjpcIuKEj1wiLFwiJnBsYW5ja2g7XCI6XCLihI5cIixcIiZwbGFua3Y7XCI6XCLihI9cIixcIiZwbHVzO1wiOlwiK1wiLFwiJnBsdXNhY2lyO1wiOlwi4qijXCIsXCImcGx1c2I7XCI6XCLiip5cIixcIiZwbHVzY2lyO1wiOlwi4qiiXCIsXCImcGx1c2RvO1wiOlwi4oiUXCIsXCImcGx1c2R1O1wiOlwi4qilXCIsXCImcGx1c2U7XCI6XCLiqbJcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZwbHVzc2ltO1wiOlwi4qimXCIsXCImcGx1c3R3bztcIjpcIuKop1wiLFwiJnBtO1wiOlwiwrFcIixcIiZwb2ludGludDtcIjpcIuKolVwiLFwiJnBvcGY7XCI6XCLwnZWhXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJnByO1wiOlwi4om6XCIsXCImcHJFO1wiOlwi4qqzXCIsXCImcHJhcDtcIjpcIuKqt1wiLFwiJnByY3VlO1wiOlwi4om8XCIsXCImcHJlO1wiOlwi4qqvXCIsXCImcHJlYztcIjpcIuKJulwiLFwiJnByZWNhcHByb3g7XCI6XCLiqrdcIixcIiZwcmVjY3VybHllcTtcIjpcIuKJvFwiLFwiJnByZWNlcTtcIjpcIuKqr1wiLFwiJnByZWNuYXBwcm94O1wiOlwi4qq5XCIsXCImcHJlY25lcXE7XCI6XCLiqrVcIixcIiZwcmVjbnNpbTtcIjpcIuKLqFwiLFwiJnByZWNzaW07XCI6XCLiib5cIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJnByaW1lcztcIjpcIuKEmVwiLFwiJnBybkU7XCI6XCLiqrVcIixcIiZwcm5hcDtcIjpcIuKquVwiLFwiJnBybnNpbTtcIjpcIuKLqFwiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZwcm9mYWxhcjtcIjpcIuKMrlwiLFwiJnByb2ZsaW5lO1wiOlwi4oySXCIsXCImcHJvZnN1cmY7XCI6XCLijJNcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImcHJvcHRvO1wiOlwi4oidXCIsXCImcHJzaW07XCI6XCLiib5cIixcIiZwcnVyZWw7XCI6XCLiirBcIixcIiZwc2NyO1wiOlwi8J2ThVwiLFwiJnBzaTtcIjpcIs+IXCIsXCImcHVuY3NwO1wiOlwi4oCIXCIsXCImcWZyO1wiOlwi8J2UrlwiLFwiJnFpbnQ7XCI6XCLiqIxcIixcIiZxb3BmO1wiOlwi8J2VolwiLFwiJnFwcmltZTtcIjpcIuKBl1wiLFwiJnFzY3I7XCI6XCLwnZOGXCIsXCImcXVhdGVybmlvbnM7XCI6XCLihI1cIixcIiZxdWF0aW50O1wiOlwi4qiWXCIsXCImcXVlc3Q7XCI6XCI/XCIsXCImcXVlc3RlcTtcIjpcIuKJn1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZyQWFycjtcIjpcIuKHm1wiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZyQXRhaWw7XCI6XCLipJxcIixcIiZyQmFycjtcIjpcIuKkj1wiLFwiJnJIYXI7XCI6XCLipaRcIixcIiZyYWNlO1wiOlwi4oi9zLFcIixcIiZyYWN1dGU7XCI6XCLFlVwiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcmFlbXB0eXY7XCI6XCLiprNcIixcIiZyYW5nO1wiOlwi4p+pXCIsXCImcmFuZ2Q7XCI6XCLippJcIixcIiZyYW5nZTtcIjpcIuKmpVwiLFwiJnJhbmdsZTtcIjpcIuKfqVwiLFwiJnJhcXVvXCI6XCLCu1wiLFwiJnJhcXVvO1wiOlwiwrtcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImcmFycmFwO1wiOlwi4qW1XCIsXCImcmFycmI7XCI6XCLih6VcIixcIiZyYXJyYmZzO1wiOlwi4qSgXCIsXCImcmFycmM7XCI6XCLipLNcIixcIiZyYXJyZnM7XCI6XCLipJ5cIixcIiZyYXJyaGs7XCI6XCLihqpcIixcIiZyYXJybHA7XCI6XCLihqxcIixcIiZyYXJycGw7XCI6XCLipYVcIixcIiZyYXJyc2ltO1wiOlwi4qW0XCIsXCImcmFycnRsO1wiOlwi4oajXCIsXCImcmFycnc7XCI6XCLihp1cIixcIiZyYXRhaWw7XCI6XCLipJpcIixcIiZyYXRpbztcIjpcIuKItlwiLFwiJnJhdGlvbmFscztcIjpcIuKEmlwiLFwiJnJiYXJyO1wiOlwi4qSNXCIsXCImcmJicms7XCI6XCLinbNcIixcIiZyYnJhY2U7XCI6XCJ9XCIsXCImcmJyYWNrO1wiOlwiXVwiLFwiJnJicmtlO1wiOlwi4qaMXCIsXCImcmJya3NsZDtcIjpcIuKmjlwiLFwiJnJicmtzbHU7XCI6XCLippBcIixcIiZyY2Fyb247XCI6XCLFmVwiLFwiJnJjZWRpbDtcIjpcIsWXXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZyY3ViO1wiOlwifVwiLFwiJnJjeTtcIjpcItGAXCIsXCImcmRjYTtcIjpcIuKkt1wiLFwiJnJkbGRoYXI7XCI6XCLipalcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJnJkcXVvcjtcIjpcIuKAnVwiLFwiJnJkc2g7XCI6XCLihrNcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImcmVhbGluZTtcIjpcIuKEm1wiLFwiJnJlYWxwYXJ0O1wiOlwi4oScXCIsXCImcmVhbHM7XCI6XCLihJ1cIixcIiZyZWN0O1wiOlwi4patXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImcmZpc2h0O1wiOlwi4qW9XCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImcmZyO1wiOlwi8J2Ur1wiLFwiJnJoYXJkO1wiOlwi4oeBXCIsXCImcmhhcnU7XCI6XCLih4BcIixcIiZyaGFydWw7XCI6XCLipaxcIixcIiZyaG87XCI6XCLPgVwiLFwiJnJob3Y7XCI6XCLPsVwiLFwiJnJpZ2h0YXJyb3c7XCI6XCLihpJcIixcIiZyaWdodGFycm93dGFpbDtcIjpcIuKGo1wiLFwiJnJpZ2h0aGFycG9vbmRvd247XCI6XCLih4FcIixcIiZyaWdodGhhcnBvb251cDtcIjpcIuKHgFwiLFwiJnJpZ2h0bGVmdGFycm93cztcIjpcIuKHhFwiLFwiJnJpZ2h0bGVmdGhhcnBvb25zO1wiOlwi4oeMXCIsXCImcmlnaHRyaWdodGFycm93cztcIjpcIuKHiVwiLFwiJnJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGnVwiLFwiJnJpZ2h0dGhyZWV0aW1lcztcIjpcIuKLjFwiLFwiJnJpbmc7XCI6XCLLmlwiLFwiJnJpc2luZ2RvdHNlcTtcIjpcIuKJk1wiLFwiJnJsYXJyO1wiOlwi4oeEXCIsXCImcmxoYXI7XCI6XCLih4xcIixcIiZybG07XCI6XCLigI9cIixcIiZybW91c3Q7XCI6XCLijrFcIixcIiZybW91c3RhY2hlO1wiOlwi4o6xXCIsXCImcm5taWQ7XCI6XCLiq65cIixcIiZyb2FuZztcIjpcIuKfrVwiLFwiJnJvYXJyO1wiOlwi4oe+XCIsXCImcm9icms7XCI6XCLin6dcIixcIiZyb3BhcjtcIjpcIuKmhlwiLFwiJnJvcGY7XCI6XCLwnZWjXCIsXCImcm9wbHVzO1wiOlwi4qiuXCIsXCImcm90aW1lcztcIjpcIuKotVwiLFwiJnJwYXI7XCI6XCIpXCIsXCImcnBhcmd0O1wiOlwi4qaUXCIsXCImcnBwb2xpbnQ7XCI6XCLiqJJcIixcIiZycmFycjtcIjpcIuKHiVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJnJzY3I7XCI6XCLwnZOHXCIsXCImcnNoO1wiOlwi4oaxXCIsXCImcnNxYjtcIjpcIl1cIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnJzcXVvcjtcIjpcIuKAmVwiLFwiJnJ0aHJlZTtcIjpcIuKLjFwiLFwiJnJ0aW1lcztcIjpcIuKLilwiLFwiJnJ0cmk7XCI6XCLilrlcIixcIiZydHJpZTtcIjpcIuKKtVwiLFwiJnJ0cmlmO1wiOlwi4pa4XCIsXCImcnRyaWx0cmk7XCI6XCLip45cIixcIiZydWx1aGFyO1wiOlwi4qWoXCIsXCImcng7XCI6XCLihJ5cIixcIiZzYWN1dGU7XCI6XCLFm1wiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImc2M7XCI6XCLiibtcIixcIiZzY0U7XCI6XCLiqrRcIixcIiZzY2FwO1wiOlwi4qq4XCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZzY2N1ZTtcIjpcIuKJvVwiLFwiJnNjZTtcIjpcIuKqsFwiLFwiJnNjZWRpbDtcIjpcIsWfXCIsXCImc2NpcmM7XCI6XCLFnVwiLFwiJnNjbkU7XCI6XCLiqrZcIixcIiZzY25hcDtcIjpcIuKqulwiLFwiJnNjbnNpbTtcIjpcIuKLqVwiLFwiJnNjcG9saW50O1wiOlwi4qiTXCIsXCImc2NzaW07XCI6XCLiib9cIixcIiZzY3k7XCI6XCLRgVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZzZG90YjtcIjpcIuKKoVwiLFwiJnNkb3RlO1wiOlwi4qmmXCIsXCImc2VBcnI7XCI6XCLih5hcIixcIiZzZWFyaGs7XCI6XCLipKVcIixcIiZzZWFycjtcIjpcIuKGmFwiLFwiJnNlYXJyb3c7XCI6XCLihphcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnNlbWk7XCI6XCI7XCIsXCImc2Vzd2FyO1wiOlwi4qSpXCIsXCImc2V0bWludXM7XCI6XCLiiJZcIixcIiZzZXRtbjtcIjpcIuKIllwiLFwiJnNleHQ7XCI6XCLinLZcIixcIiZzZnI7XCI6XCLwnZSwXCIsXCImc2Zyb3duO1wiOlwi4oyiXCIsXCImc2hhcnA7XCI6XCLima9cIixcIiZzaGNoY3k7XCI6XCLRiVwiLFwiJnNoY3k7XCI6XCLRiFwiLFwiJnNob3J0bWlkO1wiOlwi4oijXCIsXCImc2hvcnRwYXJhbGxlbDtcIjpcIuKIpVwiLFwiJnNoeVwiOlwiwq1cIixcIiZzaHk7XCI6XCLCrVwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hdjtcIjpcIs+CXCIsXCImc2ltO1wiOlwi4oi8XCIsXCImc2ltZG90O1wiOlwi4qmqXCIsXCImc2ltZTtcIjpcIuKJg1wiLFwiJnNpbWVxO1wiOlwi4omDXCIsXCImc2ltZztcIjpcIuKqnlwiLFwiJnNpbWdFO1wiOlwi4qqgXCIsXCImc2ltbDtcIjpcIuKqnVwiLFwiJnNpbWxFO1wiOlwi4qqfXCIsXCImc2ltbmU7XCI6XCLiiYZcIixcIiZzaW1wbHVzO1wiOlwi4qikXCIsXCImc2ltcmFycjtcIjpcIuKlslwiLFwiJnNsYXJyO1wiOlwi4oaQXCIsXCImc21hbGxzZXRtaW51cztcIjpcIuKIllwiLFwiJnNtYXNocDtcIjpcIuKos1wiLFwiJnNtZXBhcnNsO1wiOlwi4qekXCIsXCImc21pZDtcIjpcIuKIo1wiLFwiJnNtaWxlO1wiOlwi4oyjXCIsXCImc210O1wiOlwi4qqqXCIsXCImc210ZTtcIjpcIuKqrFwiLFwiJnNtdGVzO1wiOlwi4qqs77iAXCIsXCImc29mdGN5O1wiOlwi0YxcIixcIiZzb2w7XCI6XCIvXCIsXCImc29sYjtcIjpcIuKnhFwiLFwiJnNvbGJhcjtcIjpcIuKMv1wiLFwiJnNvcGY7XCI6XCLwnZWkXCIsXCImc3BhZGVzO1wiOlwi4pmgXCIsXCImc3BhZGVzdWl0O1wiOlwi4pmgXCIsXCImc3BhcjtcIjpcIuKIpVwiLFwiJnNxY2FwO1wiOlwi4oqTXCIsXCImc3FjYXBzO1wiOlwi4oqT77iAXCIsXCImc3FjdXA7XCI6XCLiipRcIixcIiZzcWN1cHM7XCI6XCLiipTvuIBcIixcIiZzcXN1YjtcIjpcIuKKj1wiLFwiJnNxc3ViZTtcIjpcIuKKkVwiLFwiJnNxc3Vic2V0O1wiOlwi4oqPXCIsXCImc3FzdWJzZXRlcTtcIjpcIuKKkVwiLFwiJnNxc3VwO1wiOlwi4oqQXCIsXCImc3FzdXBlO1wiOlwi4oqSXCIsXCImc3FzdXBzZXQ7XCI6XCLiipBcIixcIiZzcXN1cHNldGVxO1wiOlwi4oqSXCIsXCImc3F1O1wiOlwi4pahXCIsXCImc3F1YXJlO1wiOlwi4pahXCIsXCImc3F1YXJmO1wiOlwi4paqXCIsXCImc3F1ZjtcIjpcIuKWqlwiLFwiJnNyYXJyO1wiOlwi4oaSXCIsXCImc3NjcjtcIjpcIvCdk4hcIixcIiZzc2V0bW47XCI6XCLiiJZcIixcIiZzc21pbGU7XCI6XCLijKNcIixcIiZzc3RhcmY7XCI6XCLii4ZcIixcIiZzdGFyO1wiOlwi4piGXCIsXCImc3RhcmY7XCI6XCLimIVcIixcIiZzdHJhaWdodGVwc2lsb247XCI6XCLPtVwiLFwiJnN0cmFpZ2h0cGhpO1wiOlwiz5VcIixcIiZzdHJucztcIjpcIsKvXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3ViRTtcIjpcIuKrhVwiLFwiJnN1YmRvdDtcIjpcIuKqvVwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdWJlZG90O1wiOlwi4quDXCIsXCImc3VibXVsdDtcIjpcIuKrgVwiLFwiJnN1Ym5FO1wiOlwi4quLXCIsXCImc3VibmU7XCI6XCLiiopcIixcIiZzdWJwbHVzO1wiOlwi4qq/XCIsXCImc3VicmFycjtcIjpcIuKluVwiLFwiJnN1YnNldDtcIjpcIuKKglwiLFwiJnN1YnNldGVxO1wiOlwi4oqGXCIsXCImc3Vic2V0ZXFxO1wiOlwi4quFXCIsXCImc3Vic2V0bmVxO1wiOlwi4oqKXCIsXCImc3Vic2V0bmVxcTtcIjpcIuKri1wiLFwiJnN1YnNpbTtcIjpcIuKrh1wiLFwiJnN1YnN1YjtcIjpcIuKrlVwiLFwiJnN1YnN1cDtcIjpcIuKrk1wiLFwiJnN1Y2M7XCI6XCLiibtcIixcIiZzdWNjYXBwcm94O1wiOlwi4qq4XCIsXCImc3VjY2N1cmx5ZXE7XCI6XCLiib1cIixcIiZzdWNjZXE7XCI6XCLiqrBcIixcIiZzdWNjbmFwcHJveDtcIjpcIuKqulwiLFwiJnN1Y2NuZXFxO1wiOlwi4qq2XCIsXCImc3VjY25zaW07XCI6XCLii6lcIixcIiZzdWNjc2ltO1wiOlwi4om/XCIsXCImc3VtO1wiOlwi4oiRXCIsXCImc3VuZztcIjpcIuKZqlwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImc3VwMlwiOlwiwrJcIixcIiZzdXAyO1wiOlwiwrJcIixcIiZzdXAzXCI6XCLCs1wiLFwiJnN1cDM7XCI6XCLCs1wiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJnN1cEU7XCI6XCLiq4ZcIixcIiZzdXBkb3Q7XCI6XCLiqr5cIixcIiZzdXBkc3ViO1wiOlwi4quYXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJnN1cGVkb3Q7XCI6XCLiq4RcIixcIiZzdXBoc29sO1wiOlwi4p+JXCIsXCImc3VwaHN1YjtcIjpcIuKrl1wiLFwiJnN1cGxhcnI7XCI6XCLipbtcIixcIiZzdXBtdWx0O1wiOlwi4quCXCIsXCImc3VwbkU7XCI6XCLiq4xcIixcIiZzdXBuZTtcIjpcIuKKi1wiLFwiJnN1cHBsdXM7XCI6XCLiq4BcIixcIiZzdXBzZXQ7XCI6XCLiioNcIixcIiZzdXBzZXRlcTtcIjpcIuKKh1wiLFwiJnN1cHNldGVxcTtcIjpcIuKrhlwiLFwiJnN1cHNldG5lcTtcIjpcIuKKi1wiLFwiJnN1cHNldG5lcXE7XCI6XCLiq4xcIixcIiZzdXBzaW07XCI6XCLiq4hcIixcIiZzdXBzdWI7XCI6XCLiq5RcIixcIiZzdXBzdXA7XCI6XCLiq5ZcIixcIiZzd0FycjtcIjpcIuKHmVwiLFwiJnN3YXJoaztcIjpcIuKkplwiLFwiJnN3YXJyO1wiOlwi4oaZXCIsXCImc3dhcnJvdztcIjpcIuKGmVwiLFwiJnN3bndhcjtcIjpcIuKkqlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZ0YXJnZXQ7XCI6XCLijJZcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnRicms7XCI6XCLijrRcIixcIiZ0Y2Fyb247XCI6XCLFpVwiLFwiJnRjZWRpbDtcIjpcIsWjXCIsXCImdGN5O1wiOlwi0YJcIixcIiZ0ZG90O1wiOlwi4oObXCIsXCImdGVscmVjO1wiOlwi4oyVXCIsXCImdGZyO1wiOlwi8J2UsVwiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdGhldGF2O1wiOlwiz5FcIixcIiZ0aGlja2FwcHJveDtcIjpcIuKJiFwiLFwiJnRoaWNrc2ltO1wiOlwi4oi8XCIsXCImdGhpbnNwO1wiOlwi4oCJXCIsXCImdGhrYXA7XCI6XCLiiYhcIixcIiZ0aGtzaW07XCI6XCLiiLxcIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImdGlsZGU7XCI6XCLLnFwiLFwiJnRpbWVzXCI6XCLDl1wiLFwiJnRpbWVzO1wiOlwiw5dcIixcIiZ0aW1lc2I7XCI6XCLiiqBcIixcIiZ0aW1lc2JhcjtcIjpcIuKosVwiLFwiJnRpbWVzZDtcIjpcIuKosFwiLFwiJnRpbnQ7XCI6XCLiiK1cIixcIiZ0b2VhO1wiOlwi4qSoXCIsXCImdG9wO1wiOlwi4oqkXCIsXCImdG9wYm90O1wiOlwi4oy2XCIsXCImdG9wY2lyO1wiOlwi4quxXCIsXCImdG9wZjtcIjpcIvCdlaVcIixcIiZ0b3Bmb3JrO1wiOlwi4quaXCIsXCImdG9zYTtcIjpcIuKkqVwiLFwiJnRwcmltZTtcIjpcIuKAtFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImdHJpYW5nbGU7XCI6XCLilrVcIixcIiZ0cmlhbmdsZWRvd247XCI6XCLilr9cIixcIiZ0cmlhbmdsZWxlZnQ7XCI6XCLil4NcIixcIiZ0cmlhbmdsZWxlZnRlcTtcIjpcIuKKtFwiLFwiJnRyaWFuZ2xlcTtcIjpcIuKJnFwiLFwiJnRyaWFuZ2xlcmlnaHQ7XCI6XCLilrlcIixcIiZ0cmlhbmdsZXJpZ2h0ZXE7XCI6XCLiirVcIixcIiZ0cmlkb3Q7XCI6XCLil6xcIixcIiZ0cmllO1wiOlwi4omcXCIsXCImdHJpbWludXM7XCI6XCLiqLpcIixcIiZ0cmlwbHVzO1wiOlwi4qi5XCIsXCImdHJpc2I7XCI6XCLip41cIixcIiZ0cml0aW1lO1wiOlwi4qi7XCIsXCImdHJwZXppdW07XCI6XCLij6JcIixcIiZ0c2NyO1wiOlwi8J2TiVwiLFwiJnRzY3k7XCI6XCLRhlwiLFwiJnRzaGN5O1wiOlwi0ZtcIixcIiZ0c3Ryb2s7XCI6XCLFp1wiLFwiJnR3aXh0O1wiOlwi4omsXCIsXCImdHdvaGVhZGxlZnRhcnJvdztcIjpcIuKGnlwiLFwiJnR3b2hlYWRyaWdodGFycm93O1wiOlwi4oagXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnVIYXI7XCI6XCLipaNcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImdWJyY3k7XCI6XCLRnlwiLFwiJnVicmV2ZTtcIjpcIsWtXCIsXCImdWNpcmNcIjpcIsO7XCIsXCImdWNpcmM7XCI6XCLDu1wiLFwiJnVjeTtcIjpcItGDXCIsXCImdWRhcnI7XCI6XCLih4VcIixcIiZ1ZGJsYWM7XCI6XCLFsVwiLFwiJnVkaGFyO1wiOlwi4qWuXCIsXCImdWZpc2h0O1wiOlwi4qW+XCIsXCImdWZyO1wiOlwi8J2UslwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVoYXJsO1wiOlwi4oa/XCIsXCImdWhhcnI7XCI6XCLihr5cIixcIiZ1aGJsaztcIjpcIuKWgFwiLFwiJnVsY29ybjtcIjpcIuKMnFwiLFwiJnVsY29ybmVyO1wiOlwi4oycXCIsXCImdWxjcm9wO1wiOlwi4oyPXCIsXCImdWx0cmk7XCI6XCLil7hcIixcIiZ1bWFjcjtcIjpcIsWrXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImdW9nb247XCI6XCLFs1wiLFwiJnVvcGY7XCI6XCLwnZWmXCIsXCImdXBhcnJvdztcIjpcIuKGkVwiLFwiJnVwZG93bmFycm93O1wiOlwi4oaVXCIsXCImdXBoYXJwb29ubGVmdDtcIjpcIuKGv1wiLFwiJnVwaGFycG9vbnJpZ2h0O1wiOlwi4oa+XCIsXCImdXBsdXM7XCI6XCLiio5cIixcIiZ1cHNpO1wiOlwiz4VcIixcIiZ1cHNpaDtcIjpcIs+SXCIsXCImdXBzaWxvbjtcIjpcIs+FXCIsXCImdXB1cGFycm93cztcIjpcIuKHiFwiLFwiJnVyY29ybjtcIjpcIuKMnVwiLFwiJnVyY29ybmVyO1wiOlwi4oydXCIsXCImdXJjcm9wO1wiOlwi4oyOXCIsXCImdXJpbmc7XCI6XCLFr1wiLFwiJnVydHJpO1wiOlwi4pe5XCIsXCImdXNjcjtcIjpcIvCdk4pcIixcIiZ1dGRvdDtcIjpcIuKLsFwiLFwiJnV0aWxkZTtcIjpcIsWpXCIsXCImdXRyaTtcIjpcIuKWtVwiLFwiJnV0cmlmO1wiOlwi4pa0XCIsXCImdXVhcnI7XCI6XCLih4hcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnV3YW5nbGU7XCI6XCLipqdcIixcIiZ2QXJyO1wiOlwi4oeVXCIsXCImdkJhcjtcIjpcIuKrqFwiLFwiJnZCYXJ2O1wiOlwi4qupXCIsXCImdkRhc2g7XCI6XCLiiqhcIixcIiZ2YW5ncnQ7XCI6XCLippxcIixcIiZ2YXJlcHNpbG9uO1wiOlwiz7VcIixcIiZ2YXJrYXBwYTtcIjpcIs+wXCIsXCImdmFybm90aGluZztcIjpcIuKIhVwiLFwiJnZhcnBoaTtcIjpcIs+VXCIsXCImdmFycGk7XCI6XCLPllwiLFwiJnZhcnByb3B0bztcIjpcIuKInVwiLFwiJnZhcnI7XCI6XCLihpVcIixcIiZ2YXJyaG87XCI6XCLPsVwiLFwiJnZhcnNpZ21hO1wiOlwiz4JcIixcIiZ2YXJzdWJzZXRuZXE7XCI6XCLiiorvuIBcIixcIiZ2YXJzdWJzZXRuZXFxO1wiOlwi4quL77iAXCIsXCImdmFyc3Vwc2V0bmVxO1wiOlwi4oqL77iAXCIsXCImdmFyc3Vwc2V0bmVxcTtcIjpcIuKrjO+4gFwiLFwiJnZhcnRoZXRhO1wiOlwiz5FcIixcIiZ2YXJ0cmlhbmdsZWxlZnQ7XCI6XCLiirJcIixcIiZ2YXJ0cmlhbmdsZXJpZ2h0O1wiOlwi4oqzXCIsXCImdmN5O1wiOlwi0LJcIixcIiZ2ZGFzaDtcIjpcIuKKolwiLFwiJnZlZTtcIjpcIuKIqFwiLFwiJnZlZWJhcjtcIjpcIuKKu1wiLFwiJnZlZWVxO1wiOlwi4omaXCIsXCImdmVsbGlwO1wiOlwi4ouuXCIsXCImdmVyYmFyO1wiOlwifFwiLFwiJnZlcnQ7XCI6XCJ8XCIsXCImdmZyO1wiOlwi8J2Us1wiLFwiJnZsdHJpO1wiOlwi4oqyXCIsXCImdm5zdWI7XCI6XCLiioLig5JcIixcIiZ2bnN1cDtcIjpcIuKKg+KDklwiLFwiJnZvcGY7XCI6XCLwnZWnXCIsXCImdnByb3A7XCI6XCLiiJ1cIixcIiZ2cnRyaTtcIjpcIuKKs1wiLFwiJnZzY3I7XCI6XCLwnZOLXCIsXCImdnN1Ym5FO1wiOlwi4quL77iAXCIsXCImdnN1Ym5lO1wiOlwi4oqK77iAXCIsXCImdnN1cG5FO1wiOlwi4quM77iAXCIsXCImdnN1cG5lO1wiOlwi4oqL77iAXCIsXCImdnppZ3phZztcIjpcIuKmmlwiLFwiJndjaXJjO1wiOlwixbVcIixcIiZ3ZWRiYXI7XCI6XCLiqZ9cIixcIiZ3ZWRnZTtcIjpcIuKIp1wiLFwiJndlZGdlcTtcIjpcIuKJmVwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJndmcjtcIjpcIvCdlLRcIixcIiZ3b3BmO1wiOlwi8J2VqFwiLFwiJndwO1wiOlwi4oSYXCIsXCImd3I7XCI6XCLiiYBcIixcIiZ3cmVhdGg7XCI6XCLiiYBcIixcIiZ3c2NyO1wiOlwi8J2TjFwiLFwiJnhjYXA7XCI6XCLii4JcIixcIiZ4Y2lyYztcIjpcIuKXr1wiLFwiJnhjdXA7XCI6XCLii4NcIixcIiZ4ZHRyaTtcIjpcIuKWvVwiLFwiJnhmcjtcIjpcIvCdlLVcIixcIiZ4aEFycjtcIjpcIuKfulwiLFwiJnhoYXJyO1wiOlwi4p+3XCIsXCImeGk7XCI6XCLOvlwiLFwiJnhsQXJyO1wiOlwi4p+4XCIsXCImeGxhcnI7XCI6XCLin7VcIixcIiZ4bWFwO1wiOlwi4p+8XCIsXCImeG5pcztcIjpcIuKLu1wiLFwiJnhvZG90O1wiOlwi4qiAXCIsXCImeG9wZjtcIjpcIvCdlalcIixcIiZ4b3BsdXM7XCI6XCLiqIFcIixcIiZ4b3RpbWU7XCI6XCLiqIJcIixcIiZ4ckFycjtcIjpcIuKfuVwiLFwiJnhyYXJyO1wiOlwi4p+2XCIsXCImeHNjcjtcIjpcIvCdk41cIixcIiZ4c3FjdXA7XCI6XCLiqIZcIixcIiZ4dXBsdXM7XCI6XCLiqIRcIixcIiZ4dXRyaTtcIjpcIuKWs1wiLFwiJnh2ZWU7XCI6XCLii4FcIixcIiZ4d2VkZ2U7XCI6XCLii4BcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ5YWN5O1wiOlwi0Y9cIixcIiZ5Y2lyYztcIjpcIsW3XCIsXCImeWN5O1wiOlwi0YtcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZ5ZnI7XCI6XCLwnZS2XCIsXCImeWljeTtcIjpcItGXXCIsXCImeW9wZjtcIjpcIvCdlapcIixcIiZ5c2NyO1wiOlwi8J2TjlwiLFwiJnl1Y3k7XCI6XCLRjlwiLFwiJnl1bWxcIjpcIsO/XCIsXCImeXVtbDtcIjpcIsO/XCIsXCImemFjdXRlO1wiOlwixbpcIixcIiZ6Y2Fyb247XCI6XCLFvlwiLFwiJnpjeTtcIjpcItC3XCIsXCImemRvdDtcIjpcIsW8XCIsXCImemVldHJmO1wiOlwi4oSoXCIsXCImemV0YTtcIjpcIs62XCIsXCImemZyO1wiOlwi8J2Ut1wiLFwiJnpoY3k7XCI6XCLQtlwiLFwiJnppZ3JhcnI7XCI6XCLih51cIixcIiZ6b3BmO1wiOlwi8J2Vq1wiLFwiJnpzY3I7XCI6XCLwnZOPXCIsXCImendqO1wiOlwi4oCNXCIsXCImenduajtcIjpcIuKAjFwifSxjaGFyYWN0ZXJzOntcIsOGXCI6XCImQUVsaWc7XCIsXCImXCI6XCImYW1wO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLEglwiOlwiJkFicmV2ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLQkFwiOlwiJkFjeTtcIixcIvCdlIRcIjpcIiZBZnI7XCIsXCLDgFwiOlwiJkFncmF2ZTtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLEgFwiOlwiJkFtYWNyO1wiLFwi4qmTXCI6XCImQW5kO1wiLFwixIRcIjpcIiZBb2dvbjtcIixcIvCdlLhcIjpcIiZBb3BmO1wiLFwi4oGhXCI6XCImYWY7XCIsXCLDhVwiOlwiJmFuZ3N0O1wiLFwi8J2SnFwiOlwiJkFzY3I7XCIsXCLiiZRcIjpcIiZjb2xvbmVxO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLiiJZcIjpcIiZzc2V0bW47XCIsXCLiq6dcIjpcIiZCYXJ2O1wiLFwi4oyGXCI6XCImZG91YmxlYmFyd2VkZ2U7XCIsXCLQkVwiOlwiJkJjeTtcIixcIuKItVwiOlwiJmJlY2F1c2U7XCIsXCLihKxcIjpcIiZiZXJub3U7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLwnZSFXCI6XCImQmZyO1wiLFwi8J2UuVwiOlwiJkJvcGY7XCIsXCLLmFwiOlwiJmJyZXZlO1wiLFwi4omOXCI6XCImYnVtcDtcIixcItCnXCI6XCImQ0hjeTtcIixcIsKpXCI6XCImY29weTtcIixcIsSGXCI6XCImQ2FjdXRlO1wiLFwi4ouSXCI6XCImQ2FwO1wiLFwi4oWFXCI6XCImREQ7XCIsXCLihK1cIjpcIiZDZnI7XCIsXCLEjFwiOlwiJkNjYXJvbjtcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwixIhcIjpcIiZDY2lyYztcIixcIuKIsFwiOlwiJkNjb25pbnQ7XCIsXCLEilwiOlwiJkNkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLOp1wiOlwiJkNoaTtcIixcIuKKmVwiOlwiJm9kb3Q7XCIsXCLiipZcIjpcIiZvbWludXM7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKIslwiOlwiJmN3Y29uaW50O1wiLFwi4oCdXCI6XCImcmRxdW9yO1wiLFwi4oCZXCI6XCImcnNxdW9yO1wiLFwi4oi3XCI6XCImUHJvcG9ydGlvbjtcIixcIuKptFwiOlwiJkNvbG9uZTtcIixcIuKJoVwiOlwiJmVxdWl2O1wiLFwi4oivXCI6XCImRG91YmxlQ29udG91ckludGVncmFsO1wiLFwi4oiuXCI6XCImb2ludDtcIixcIuKEglwiOlwiJmNvbXBsZXhlcztcIixcIuKIkFwiOlwiJmNvcHJvZDtcIixcIuKIs1wiOlwiJmF3Y29uaW50O1wiLFwi4qivXCI6XCImQ3Jvc3M7XCIsXCLwnZKeXCI6XCImQ3NjcjtcIixcIuKLk1wiOlwiJkN1cDtcIixcIuKJjVwiOlwiJmFzeW1wZXE7XCIsXCLipJFcIjpcIiZERG90cmFoZDtcIixcItCCXCI6XCImREpjeTtcIixcItCFXCI6XCImRFNjeTtcIixcItCPXCI6XCImRFpjeTtcIixcIuKAoVwiOlwiJmRkYWdnZXI7XCIsXCLihqFcIjpcIiZEYXJyO1wiLFwi4qukXCI6XCImRG91YmxlTGVmdFRlZTtcIixcIsSOXCI6XCImRGNhcm9uO1wiLFwi0JRcIjpcIiZEY3k7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIs6UXCI6XCImRGVsdGE7XCIsXCLwnZSHXCI6XCImRGZyO1wiLFwiwrRcIjpcIiZhY3V0ZTtcIixcIsuZXCI6XCImZG90O1wiLFwiy51cIjpcIiZkYmxhYztcIixcImBcIjpcIiZncmF2ZTtcIixcIsucXCI6XCImdGlsZGU7XCIsXCLii4RcIjpcIiZkaWFtb25kO1wiLFwi4oWGXCI6XCImZGQ7XCIsXCLwnZS7XCI6XCImRG9wZjtcIixcIsKoXCI6XCImdW1sO1wiLFwi4oOcXCI6XCImRG90RG90O1wiLFwi4omQXCI6XCImZXNkb3Q7XCIsXCLih5NcIjpcIiZkQXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHlFwiOlwiJmlmZjtcIixcIuKfuFwiOlwiJnhsQXJyO1wiLFwi4p+6XCI6XCImeGhBcnI7XCIsXCLin7lcIjpcIiZ4ckFycjtcIixcIuKHklwiOlwiJnJBcnI7XCIsXCLiiqhcIjpcIiZ2RGFzaDtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5VcIjpcIiZ2QXJyO1wiLFwi4oilXCI6XCImc3BhcjtcIixcIuKGk1wiOlwiJmRvd25hcnJvdztcIixcIuKkk1wiOlwiJkRvd25BcnJvd0JhcjtcIixcIuKHtVwiOlwiJmR1YXJyO1wiLFwizJFcIjpcIiZEb3duQnJldmU7XCIsXCLipZBcIjpcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiLFwi4qWeXCI6XCImRG93bkxlZnRUZWVWZWN0b3I7XCIsXCLihr1cIjpcIiZsaGFyZDtcIixcIuKlllwiOlwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiLFwi4qWfXCI6XCImRG93blJpZ2h0VGVlVmVjdG9yO1wiLFwi4oeBXCI6XCImcmlnaHRoYXJwb29uZG93bjtcIixcIuKll1wiOlwiJkRvd25SaWdodFZlY3RvckJhcjtcIixcIuKKpFwiOlwiJnRvcDtcIixcIuKGp1wiOlwiJm1hcHN0b2Rvd247XCIsXCLwnZKfXCI6XCImRHNjcjtcIixcIsSQXCI6XCImRHN0cm9rO1wiLFwixYpcIjpcIiZFTkc7XCIsXCLDkFwiOlwiJkVUSDtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwixJpcIjpcIiZFY2Fyb247XCIsXCLDilwiOlwiJkVjaXJjO1wiLFwi0K1cIjpcIiZFY3k7XCIsXCLEllwiOlwiJkVkb3Q7XCIsXCLwnZSIXCI6XCImRWZyO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLiiIhcIjpcIiZpc2ludjtcIixcIsSSXCI6XCImRW1hY3I7XCIsXCLil7tcIjpcIiZFbXB0eVNtYWxsU3F1YXJlO1wiLFwi4parXCI6XCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCIsXCLEmFwiOlwiJkVvZ29uO1wiLFwi8J2UvFwiOlwiJkVvcGY7XCIsXCLOlVwiOlwiJkVwc2lsb247XCIsXCLiqbVcIjpcIiZFcXVhbDtcIixcIuKJglwiOlwiJmVzaW07XCIsXCLih4xcIjpcIiZybGhhcjtcIixcIuKEsFwiOlwiJmV4cGVjdGF0aW9uO1wiLFwi4qmzXCI6XCImRXNpbTtcIixcIs6XXCI6XCImRXRhO1wiLFwiw4tcIjpcIiZFdW1sO1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLihYdcIjpcIiZleHBvbmVudGlhbGU7XCIsXCLQpFwiOlwiJkZjeTtcIixcIvCdlIlcIjpcIiZGZnI7XCIsXCLil7xcIjpcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIixcIuKWqlwiOlwiJnNxdWY7XCIsXCLwnZS9XCI6XCImRm9wZjtcIixcIuKIgFwiOlwiJmZvcmFsbDtcIixcIuKEsVwiOlwiJkZzY3I7XCIsXCLQg1wiOlwiJkdKY3k7XCIsXCI+XCI6XCImZ3Q7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwiz5xcIjpcIiZHYW1tYWQ7XCIsXCLEnlwiOlwiJkdicmV2ZTtcIixcIsSiXCI6XCImR2NlZGlsO1wiLFwixJxcIjpcIiZHY2lyYztcIixcItCTXCI6XCImR2N5O1wiLFwixKBcIjpcIiZHZG90O1wiLFwi8J2UilwiOlwiJkdmcjtcIixcIuKLmVwiOlwiJmdnZztcIixcIvCdlL5cIjpcIiZHb3BmO1wiLFwi4omlXCI6XCImZ2VxO1wiLFwi4oubXCI6XCImZ3RyZXFsZXNzO1wiLFwi4omnXCI6XCImZ2VxcTtcIixcIuKqolwiOlwiJkdyZWF0ZXJHcmVhdGVyO1wiLFwi4om3XCI6XCImZ3RybGVzcztcIixcIuKpvlwiOlwiJmdlcztcIixcIuKJs1wiOlwiJmd0cnNpbTtcIixcIvCdkqJcIjpcIiZHc2NyO1wiLFwi4omrXCI6XCImZ2c7XCIsXCLQqlwiOlwiJkhBUkRjeTtcIixcIsuHXCI6XCImY2Fyb247XCIsXCJeXCI6XCImSGF0O1wiLFwixKRcIjpcIiZIY2lyYztcIixcIuKEjFwiOlwiJlBvaW5jYXJlcGxhbmU7XCIsXCLihItcIjpcIiZoYW1pbHQ7XCIsXCLihI1cIjpcIiZxdWF0ZXJuaW9ucztcIixcIuKUgFwiOlwiJmJveGg7XCIsXCLEplwiOlwiJkhzdHJvaztcIixcIuKJj1wiOlwiJmJ1bXBlcTtcIixcItCVXCI6XCImSUVjeTtcIixcIsSyXCI6XCImSUpsaWc7XCIsXCLQgVwiOlwiJklPY3k7XCIsXCLDjVwiOlwiJklhY3V0ZTtcIixcIsOOXCI6XCImSWNpcmM7XCIsXCLQmFwiOlwiJkljeTtcIixcIsSwXCI6XCImSWRvdDtcIixcIuKEkVwiOlwiJmltYWdwYXJ0O1wiLFwiw4xcIjpcIiZJZ3JhdmU7XCIsXCLEqlwiOlwiJkltYWNyO1wiLFwi4oWIXCI6XCImaWk7XCIsXCLiiKxcIjpcIiZJbnQ7XCIsXCLiiKtcIjpcIiZpbnQ7XCIsXCLii4JcIjpcIiZ4Y2FwO1wiLFwi4oGjXCI6XCImaWM7XCIsXCLigaJcIjpcIiZpdDtcIixcIsSuXCI6XCImSW9nb247XCIsXCLwnZWAXCI6XCImSW9wZjtcIixcIs6ZXCI6XCImSW90YTtcIixcIuKEkFwiOlwiJmltYWdsaW5lO1wiLFwixKhcIjpcIiZJdGlsZGU7XCIsXCLQhlwiOlwiJkl1a2N5O1wiLFwiw49cIjpcIiZJdW1sO1wiLFwixLRcIjpcIiZKY2lyYztcIixcItCZXCI6XCImSmN5O1wiLFwi8J2UjVwiOlwiJkpmcjtcIixcIvCdlYFcIjpcIiZKb3BmO1wiLFwi8J2SpVwiOlwiJkpzY3I7XCIsXCLQiFwiOlwiJkpzZXJjeTtcIixcItCEXCI6XCImSnVrY3k7XCIsXCLQpVwiOlwiJktIY3k7XCIsXCLQjFwiOlwiJktKY3k7XCIsXCLOmlwiOlwiJkthcHBhO1wiLFwixLZcIjpcIiZLY2VkaWw7XCIsXCLQmlwiOlwiJktjeTtcIixcIvCdlI5cIjpcIiZLZnI7XCIsXCLwnZWCXCI6XCImS29wZjtcIixcIvCdkqZcIjpcIiZLc2NyO1wiLFwi0IlcIjpcIiZMSmN5O1wiLFwiPFwiOlwiJmx0O1wiLFwixLlcIjpcIiZMYWN1dGU7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIuKfqlwiOlwiJkxhbmc7XCIsXCLihJJcIjpcIiZsYWdyYW47XCIsXCLihp5cIjpcIiZ0d29oZWFkbGVmdGFycm93O1wiLFwixL1cIjpcIiZMY2Fyb247XCIsXCLEu1wiOlwiJkxjZWRpbDtcIixcItCbXCI6XCImTGN5O1wiLFwi4p+oXCI6XCImbGFuZ2xlO1wiLFwi4oaQXCI6XCImc2xhcnI7XCIsXCLih6RcIjpcIiZsYXJyYjtcIixcIuKHhlwiOlwiJmxyYXJyO1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLin6ZcIjpcIiZsb2JyaztcIixcIuKloVwiOlwiJkxlZnREb3duVGVlVmVjdG9yO1wiLFwi4oeDXCI6XCImZG93bmhhcnBvb25sZWZ0O1wiLFwi4qWZXCI6XCImTGVmdERvd25WZWN0b3JCYXI7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLihpRcIjpcIiZsZWZ0cmlnaHRhcnJvdztcIixcIuKljlwiOlwiJkxlZnRSaWdodFZlY3RvcjtcIixcIuKKo1wiOlwiJmRhc2h2O1wiLFwi4oakXCI6XCImbWFwc3RvbGVmdDtcIixcIuKlmlwiOlwiJkxlZnRUZWVWZWN0b3I7XCIsXCLiirJcIjpcIiZ2bHRyaTtcIixcIuKnj1wiOlwiJkxlZnRUcmlhbmdsZUJhcjtcIixcIuKKtFwiOlwiJnRyaWFuZ2xlbGVmdGVxO1wiLFwi4qWRXCI6XCImTGVmdFVwRG93blZlY3RvcjtcIixcIuKloFwiOlwiJkxlZnRVcFRlZVZlY3RvcjtcIixcIuKGv1wiOlwiJnVwaGFycG9vbmxlZnQ7XCIsXCLipZhcIjpcIiZMZWZ0VXBWZWN0b3JCYXI7XCIsXCLihrxcIjpcIiZsaGFydTtcIixcIuKlklwiOlwiJkxlZnRWZWN0b3JCYXI7XCIsXCLii5pcIjpcIiZsZXNzZXFndHI7XCIsXCLiiaZcIjpcIiZsZXFxO1wiLFwi4om2XCI6XCImbGc7XCIsXCLiqqFcIjpcIiZMZXNzTGVzcztcIixcIuKpvVwiOlwiJmxlcztcIixcIuKJslwiOlwiJmxzaW07XCIsXCLwnZSPXCI6XCImTGZyO1wiLFwi4ouYXCI6XCImTGw7XCIsXCLih5pcIjpcIiZsQWFycjtcIixcIsS/XCI6XCImTG1pZG90O1wiLFwi4p+1XCI6XCImeGxhcnI7XCIsXCLin7dcIjpcIiZ4aGFycjtcIixcIuKftlwiOlwiJnhyYXJyO1wiLFwi8J2Vg1wiOlwiJkxvcGY7XCIsXCLihplcIjpcIiZzd2Fycm93O1wiLFwi4oaYXCI6XCImc2VhcnJvdztcIixcIuKGsFwiOlwiJmxzaDtcIixcIsWBXCI6XCImTHN0cm9rO1wiLFwi4omqXCI6XCImbGw7XCIsXCLipIVcIjpcIiZNYXA7XCIsXCLQnFwiOlwiJk1jeTtcIixcIuKBn1wiOlwiJk1lZGl1bVNwYWNlO1wiLFwi4oSzXCI6XCImcGhtbWF0O1wiLFwi8J2UkFwiOlwiJk1mcjtcIixcIuKIk1wiOlwiJm1wO1wiLFwi8J2VhFwiOlwiJk1vcGY7XCIsXCLOnFwiOlwiJk11O1wiLFwi0IpcIjpcIiZOSmN5O1wiLFwixYNcIjpcIiZOYWN1dGU7XCIsXCLFh1wiOlwiJk5jYXJvbjtcIixcIsWFXCI6XCImTmNlZGlsO1wiLFwi0J1cIjpcIiZOY3k7XCIsXCLigItcIjpcIiZaZXJvV2lkdGhTcGFjZTtcIixcIlxcblwiOlwiJk5ld0xpbmU7XCIsXCLwnZSRXCI6XCImTmZyO1wiLFwi4oGgXCI6XCImTm9CcmVhaztcIixcIsKgXCI6XCImbmJzcDtcIixcIuKElVwiOlwiJm5hdHVyYWxzO1wiLFwi4qusXCI6XCImTm90O1wiLFwi4omiXCI6XCImbmVxdWl2O1wiLFwi4omtXCI6XCImTm90Q3VwQ2FwO1wiLFwi4oimXCI6XCImbnNwYXI7XCIsXCLiiIlcIjpcIiZub3RpbnZhO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiYLMuFwiOlwiJm5lc2ltO1wiLFwi4oiEXCI6XCImbmV4aXN0cztcIixcIuKJr1wiOlwiJm5ndHI7XCIsXCLiibFcIjpcIiZuZ2VxO1wiLFwi4omnzLhcIjpcIiZuZ2VxcTtcIixcIuKJq8y4XCI6XCImbkd0djtcIixcIuKJuVwiOlwiJm50Z2w7XCIsXCLiqb7MuFwiOlwiJm5nZXM7XCIsXCLiibVcIjpcIiZuZ3NpbTtcIixcIuKJjsy4XCI6XCImbmJ1bXA7XCIsXCLiiY/MuFwiOlwiJm5idW1wZTtcIixcIuKLqlwiOlwiJm50cmlhbmdsZWxlZnQ7XCIsXCLip4/MuFwiOlwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIixcIuKLrFwiOlwiJm50cmlhbmdsZWxlZnRlcTtcIixcIuKJrlwiOlwiJm5sdDtcIixcIuKJsFwiOlwiJm5sZXE7XCIsXCLiibhcIjpcIiZudGxnO1wiLFwi4omqzLhcIjpcIiZuTHR2O1wiLFwi4qm9zLhcIjpcIiZubGVzO1wiLFwi4om0XCI6XCImbmxzaW07XCIsXCLiqqLMuFwiOlwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiLFwi4qqhzLhcIjpcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIixcIuKKgFwiOlwiJm5wcmVjO1wiLFwi4qqvzLhcIjpcIiZucHJlY2VxO1wiLFwi4ougXCI6XCImbnByY3VlO1wiLFwi4oiMXCI6XCImbm90bml2YTtcIixcIuKLq1wiOlwiJm50cmlhbmdsZXJpZ2h0O1wiLFwi4qeQzLhcIjpcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4outXCI6XCImbnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKKj8y4XCI6XCImTm90U3F1YXJlU3Vic2V0O1wiLFwi4ouiXCI6XCImbnNxc3ViZTtcIixcIuKKkMy4XCI6XCImTm90U3F1YXJlU3VwZXJzZXQ7XCIsXCLii6NcIjpcIiZuc3FzdXBlO1wiLFwi4oqC4oOSXCI6XCImdm5zdWI7XCIsXCLiiohcIjpcIiZuc3Vic2V0ZXE7XCIsXCLiioFcIjpcIiZuc3VjYztcIixcIuKqsMy4XCI6XCImbnN1Y2NlcTtcIixcIuKLoVwiOlwiJm5zY2N1ZTtcIixcIuKJv8y4XCI6XCImTm90U3VjY2VlZHNUaWxkZTtcIixcIuKKg+KDklwiOlwiJnZuc3VwO1wiLFwi4oqJXCI6XCImbnN1cHNldGVxO1wiLFwi4omBXCI6XCImbnNpbTtcIixcIuKJhFwiOlwiJm5zaW1lcTtcIixcIuKJh1wiOlwiJm5jb25nO1wiLFwi4omJXCI6XCImbmFwcHJveDtcIixcIuKIpFwiOlwiJm5zbWlkO1wiLFwi8J2SqVwiOlwiJk5zY3I7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIs6dXCI6XCImTnU7XCIsXCLFklwiOlwiJk9FbGlnO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwi0J5cIjpcIiZPY3k7XCIsXCLFkFwiOlwiJk9kYmxhYztcIixcIvCdlJJcIjpcIiZPZnI7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsWMXCI6XCImT21hY3I7XCIsXCLOqVwiOlwiJm9obTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIvCdlYZcIjpcIiZPb3BmO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKplFwiOlwiJk9yO1wiLFwi8J2SqlwiOlwiJk9zY3I7XCIsXCLDmFwiOlwiJk9zbGFzaDtcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwi4qi3XCI6XCImT3RpbWVzO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwi4oC+XCI6XCImb2xpbmU7XCIsXCLij55cIjpcIiZPdmVyQnJhY2U7XCIsXCLijrRcIjpcIiZ0YnJrO1wiLFwi4o+cXCI6XCImT3ZlclBhcmVudGhlc2lzO1wiLFwi4oiCXCI6XCImcGFydDtcIixcItCfXCI6XCImUGN5O1wiLFwi8J2Uk1wiOlwiJlBmcjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqBcIjpcIiZQaTtcIixcIsKxXCI6XCImcG07XCIsXCLihJlcIjpcIiZwcmltZXM7XCIsXCLiqrtcIjpcIiZQcjtcIixcIuKJulwiOlwiJnByZWM7XCIsXCLiqq9cIjpcIiZwcmVjZXE7XCIsXCLiibxcIjpcIiZwcmVjY3VybHllcTtcIixcIuKJvlwiOlwiJnByc2ltO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oidXCI6XCImdnByb3A7XCIsXCLwnZKrXCI6XCImUHNjcjtcIixcIs6oXCI6XCImUHNpO1wiLCdcIic6XCImcXVvdDtcIixcIvCdlJRcIjpcIiZRZnI7XCIsXCLihJpcIjpcIiZyYXRpb25hbHM7XCIsXCLwnZKsXCI6XCImUXNjcjtcIixcIuKkkFwiOlwiJmRyYmthcm93O1wiLFwiwq5cIjpcIiZyZWc7XCIsXCLFlFwiOlwiJlJhY3V0ZTtcIixcIuKfq1wiOlwiJlJhbmc7XCIsXCLihqBcIjpcIiZ0d29oZWFkcmlnaHRhcnJvdztcIixcIuKkllwiOlwiJlJhcnJ0bDtcIixcIsWYXCI6XCImUmNhcm9uO1wiLFwixZZcIjpcIiZSY2VkaWw7XCIsXCLQoFwiOlwiJlJjeTtcIixcIuKEnFwiOlwiJnJlYWxwYXJ0O1wiLFwi4oiLXCI6XCImbml2O1wiLFwi4oeLXCI6XCImbHJoYXI7XCIsXCLipa9cIjpcIiZkdWhhcjtcIixcIs6hXCI6XCImUmhvO1wiLFwi4p+pXCI6XCImcmFuZ2xlO1wiLFwi4oaSXCI6XCImc3JhcnI7XCIsXCLih6VcIjpcIiZyYXJyYjtcIixcIuKHhFwiOlwiJnJsYXJyO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLin6dcIjpcIiZyb2JyaztcIixcIuKlnVwiOlwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIixcIuKHglwiOlwiJmRvd25oYXJwb29ucmlnaHQ7XCIsXCLipZVcIjpcIiZSaWdodERvd25WZWN0b3JCYXI7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLiiqJcIjpcIiZ2ZGFzaDtcIixcIuKGplwiOlwiJm1hcHN0bztcIixcIuKlm1wiOlwiJlJpZ2h0VGVlVmVjdG9yO1wiLFwi4oqzXCI6XCImdnJ0cmk7XCIsXCLip5BcIjpcIiZSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4oq1XCI6XCImdHJpYW5nbGVyaWdodGVxO1wiLFwi4qWPXCI6XCImUmlnaHRVcERvd25WZWN0b3I7XCIsXCLipZxcIjpcIiZSaWdodFVwVGVlVmVjdG9yO1wiLFwi4oa+XCI6XCImdXBoYXJwb29ucmlnaHQ7XCIsXCLipZRcIjpcIiZSaWdodFVwVmVjdG9yQmFyO1wiLFwi4oeAXCI6XCImcmlnaHRoYXJwb29udXA7XCIsXCLipZNcIjpcIiZSaWdodFZlY3RvckJhcjtcIixcIuKEnVwiOlwiJnJlYWxzO1wiLFwi4qWwXCI6XCImUm91bmRJbXBsaWVzO1wiLFwi4oebXCI6XCImckFhcnI7XCIsXCLihJtcIjpcIiZyZWFsaW5lO1wiLFwi4oaxXCI6XCImcnNoO1wiLFwi4qe0XCI6XCImUnVsZURlbGF5ZWQ7XCIsXCLQqVwiOlwiJlNIQ0hjeTtcIixcItCoXCI6XCImU0hjeTtcIixcItCsXCI6XCImU09GVGN5O1wiLFwixZpcIjpcIiZTYWN1dGU7XCIsXCLiqrxcIjpcIiZTYztcIixcIsWgXCI6XCImU2Nhcm9uO1wiLFwixZ5cIjpcIiZTY2VkaWw7XCIsXCLFnFwiOlwiJlNjaXJjO1wiLFwi0KFcIjpcIiZTY3k7XCIsXCLwnZSWXCI6XCImU2ZyO1wiLFwi4oaRXCI6XCImdXBhcnJvdztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLiiJhcIjpcIiZjb21wZm47XCIsXCLwnZWKXCI6XCImU29wZjtcIixcIuKImlwiOlwiJnJhZGljO1wiLFwi4pahXCI6XCImc3F1YXJlO1wiLFwi4oqTXCI6XCImc3FjYXA7XCIsXCLiio9cIjpcIiZzcXN1YnNldDtcIixcIuKKkVwiOlwiJnNxc3Vic2V0ZXE7XCIsXCLiipBcIjpcIiZzcXN1cHNldDtcIixcIuKKklwiOlwiJnNxc3Vwc2V0ZXE7XCIsXCLiipRcIjpcIiZzcWN1cDtcIixcIvCdkq5cIjpcIiZTc2NyO1wiLFwi4ouGXCI6XCImc3N0YXJmO1wiLFwi4ouQXCI6XCImU3Vic2V0O1wiLFwi4oqGXCI6XCImc3Vic2V0ZXE7XCIsXCLiibtcIjpcIiZzdWNjO1wiLFwi4qqwXCI6XCImc3VjY2VxO1wiLFwi4om9XCI6XCImc3VjY2N1cmx5ZXE7XCIsXCLiib9cIjpcIiZzdWNjc2ltO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4ouRXCI6XCImU3Vwc2V0O1wiLFwi4oqDXCI6XCImc3Vwc2V0O1wiLFwi4oqHXCI6XCImc3Vwc2V0ZXE7XCIsXCLDnlwiOlwiJlRIT1JOO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLQi1wiOlwiJlRTSGN5O1wiLFwi0KZcIjpcIiZUU2N5O1wiLFwiXFx0XCI6XCImVGFiO1wiLFwizqRcIjpcIiZUYXU7XCIsXCLFpFwiOlwiJlRjYXJvbjtcIixcIsWiXCI6XCImVGNlZGlsO1wiLFwi0KJcIjpcIiZUY3k7XCIsXCLwnZSXXCI6XCImVGZyO1wiLFwi4oi0XCI6XCImdGhlcmVmb3JlO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIuKBn+KAilwiOlwiJlRoaWNrU3BhY2U7XCIsXCLigIlcIjpcIiZ0aGluc3A7XCIsXCLiiLxcIjpcIiZ0aGtzaW07XCIsXCLiiYNcIjpcIiZzaW1lcTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZ0aGthcDtcIixcIvCdlYtcIjpcIiZUb3BmO1wiLFwi4oObXCI6XCImdGRvdDtcIixcIvCdkq9cIjpcIiZUc2NyO1wiLFwixaZcIjpcIiZUc3Ryb2s7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIuKGn1wiOlwiJlVhcnI7XCIsXCLipYlcIjpcIiZVYXJyb2NpcjtcIixcItCOXCI6XCImVWJyY3k7XCIsXCLFrFwiOlwiJlVicmV2ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLQo1wiOlwiJlVjeTtcIixcIsWwXCI6XCImVWRibGFjO1wiLFwi8J2UmFwiOlwiJlVmcjtcIixcIsOZXCI6XCImVWdyYXZlO1wiLFwixapcIjpcIiZVbWFjcjtcIixfOlwiJmxvd2JhcjtcIixcIuKPn1wiOlwiJlVuZGVyQnJhY2U7XCIsXCLijrVcIjpcIiZiYnJrO1wiLFwi4o+dXCI6XCImVW5kZXJQYXJlbnRoZXNpcztcIixcIuKLg1wiOlwiJnhjdXA7XCIsXCLiio5cIjpcIiZ1cGx1cztcIixcIsWyXCI6XCImVW9nb247XCIsXCLwnZWMXCI6XCImVW9wZjtcIixcIuKkklwiOlwiJlVwQXJyb3dCYXI7XCIsXCLih4VcIjpcIiZ1ZGFycjtcIixcIuKGlVwiOlwiJnZhcnI7XCIsXCLipa5cIjpcIiZ1ZGhhcjtcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLihqVcIjpcIiZtYXBzdG91cDtcIixcIuKGllwiOlwiJm53YXJyb3c7XCIsXCLihpdcIjpcIiZuZWFycm93O1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIsWuXCI6XCImVXJpbmc7XCIsXCLwnZKwXCI6XCImVXNjcjtcIixcIsWoXCI6XCImVXRpbGRlO1wiLFwiw5xcIjpcIiZVdW1sO1wiLFwi4oqrXCI6XCImVkRhc2g7XCIsXCLiq6tcIjpcIiZWYmFyO1wiLFwi0JJcIjpcIiZWY3k7XCIsXCLiiqlcIjpcIiZWZGFzaDtcIixcIuKrplwiOlwiJlZkYXNobDtcIixcIuKLgVwiOlwiJnh2ZWU7XCIsXCLigJZcIjpcIiZWZXJ0O1wiLFwi4oijXCI6XCImc21pZDtcIixcInxcIjpcIiZ2ZXJ0O1wiLFwi4p2YXCI6XCImVmVydGljYWxTZXBhcmF0b3I7XCIsXCLiiYBcIjpcIiZ3cmVhdGg7XCIsXCLigIpcIjpcIiZoYWlyc3A7XCIsXCLwnZSZXCI6XCImVmZyO1wiLFwi8J2VjVwiOlwiJlZvcGY7XCIsXCLwnZKxXCI6XCImVnNjcjtcIixcIuKKqlwiOlwiJlZ2ZGFzaDtcIixcIsW0XCI6XCImV2NpcmM7XCIsXCLii4BcIjpcIiZ4d2VkZ2U7XCIsXCLwnZSaXCI6XCImV2ZyO1wiLFwi8J2VjlwiOlwiJldvcGY7XCIsXCLwnZKyXCI6XCImV3NjcjtcIixcIvCdlJtcIjpcIiZYZnI7XCIsXCLOnlwiOlwiJlhpO1wiLFwi8J2Vj1wiOlwiJlhvcGY7XCIsXCLwnZKzXCI6XCImWHNjcjtcIixcItCvXCI6XCImWUFjeTtcIixcItCHXCI6XCImWUljeTtcIixcItCuXCI6XCImWVVjeTtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwixbZcIjpcIiZZY2lyYztcIixcItCrXCI6XCImWWN5O1wiLFwi8J2UnFwiOlwiJllmcjtcIixcIvCdlZBcIjpcIiZZb3BmO1wiLFwi8J2StFwiOlwiJllzY3I7XCIsXCLFuFwiOlwiJll1bWw7XCIsXCLQllwiOlwiJlpIY3k7XCIsXCLFuVwiOlwiJlphY3V0ZTtcIixcIsW9XCI6XCImWmNhcm9uO1wiLFwi0JdcIjpcIiZaY3k7XCIsXCLFu1wiOlwiJlpkb3Q7XCIsXCLOllwiOlwiJlpldGE7XCIsXCLihKhcIjpcIiZ6ZWV0cmY7XCIsXCLihKRcIjpcIiZpbnRlZ2VycztcIixcIvCdkrVcIjpcIiZac2NyO1wiLFwiw6FcIjpcIiZhYWN1dGU7XCIsXCLEg1wiOlwiJmFicmV2ZTtcIixcIuKIvlwiOlwiJm1zdHBvcztcIixcIuKIvsyzXCI6XCImYWNFO1wiLFwi4oi/XCI6XCImYWNkO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcItCwXCI6XCImYWN5O1wiLFwiw6ZcIjpcIiZhZWxpZztcIixcIvCdlJ5cIjpcIiZhZnI7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIuKEtVwiOlwiJmFsZXBoO1wiLFwizrFcIjpcIiZhbHBoYTtcIixcIsSBXCI6XCImYW1hY3I7XCIsXCLiqL9cIjpcIiZhbWFsZztcIixcIuKIp1wiOlwiJndlZGdlO1wiLFwi4qmVXCI6XCImYW5kYW5kO1wiLFwi4qmcXCI6XCImYW5kZDtcIixcIuKpmFwiOlwiJmFuZHNsb3BlO1wiLFwi4qmaXCI6XCImYW5kdjtcIixcIuKIoFwiOlwiJmFuZ2xlO1wiLFwi4qakXCI6XCImYW5nZTtcIixcIuKIoVwiOlwiJm1lYXN1cmVkYW5nbGU7XCIsXCLipqhcIjpcIiZhbmdtc2RhYTtcIixcIuKmqVwiOlwiJmFuZ21zZGFiO1wiLFwi4qaqXCI6XCImYW5nbXNkYWM7XCIsXCLipqtcIjpcIiZhbmdtc2RhZDtcIixcIuKmrFwiOlwiJmFuZ21zZGFlO1wiLFwi4qatXCI6XCImYW5nbXNkYWY7XCIsXCLipq5cIjpcIiZhbmdtc2RhZztcIixcIuKmr1wiOlwiJmFuZ21zZGFoO1wiLFwi4oifXCI6XCImYW5ncnQ7XCIsXCLiir5cIjpcIiZhbmdydHZiO1wiLFwi4qadXCI6XCImYW5ncnR2YmQ7XCIsXCLiiKJcIjpcIiZhbmdzcGg7XCIsXCLijbxcIjpcIiZhbmd6YXJyO1wiLFwixIVcIjpcIiZhb2dvbjtcIixcIvCdlZJcIjpcIiZhb3BmO1wiLFwi4qmwXCI6XCImYXBFO1wiLFwi4qmvXCI6XCImYXBhY2lyO1wiLFwi4omKXCI6XCImYXBwcm94ZXE7XCIsXCLiiYtcIjpcIiZhcGlkO1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCLDpVwiOlwiJmFyaW5nO1wiLFwi8J2StlwiOlwiJmFzY3I7XCIsXCIqXCI6XCImbWlkYXN0O1wiLFwiw6NcIjpcIiZhdGlsZGU7XCIsXCLDpFwiOlwiJmF1bWw7XCIsXCLiqJFcIjpcIiZhd2ludDtcIixcIuKrrVwiOlwiJmJOb3Q7XCIsXCLiiYxcIjpcIiZiY29uZztcIixcIs+2XCI6XCImYmVwc2k7XCIsXCLigLVcIjpcIiZicHJpbWU7XCIsXCLiiL1cIjpcIiZic2ltO1wiLFwi4ouNXCI6XCImYnNpbWU7XCIsXCLiir1cIjpcIiZiYXJ2ZWU7XCIsXCLijIVcIjpcIiZiYXJ3ZWRnZTtcIixcIuKOtlwiOlwiJmJicmt0YnJrO1wiLFwi0LFcIjpcIiZiY3k7XCIsXCLigJ5cIjpcIiZsZHF1b3I7XCIsXCLiprBcIjpcIiZiZW1wdHl2O1wiLFwizrJcIjpcIiZiZXRhO1wiLFwi4oS2XCI6XCImYmV0aDtcIixcIuKJrFwiOlwiJnR3aXh0O1wiLFwi8J2Un1wiOlwiJmJmcjtcIixcIuKXr1wiOlwiJnhjaXJjO1wiLFwi4qiAXCI6XCImeG9kb3Q7XCIsXCLiqIFcIjpcIiZ4b3BsdXM7XCIsXCLiqIJcIjpcIiZ4b3RpbWU7XCIsXCLiqIZcIjpcIiZ4c3FjdXA7XCIsXCLimIVcIjpcIiZzdGFyZjtcIixcIuKWvVwiOlwiJnhkdHJpO1wiLFwi4pazXCI6XCImeHV0cmk7XCIsXCLiqIRcIjpcIiZ4dXBsdXM7XCIsXCLipI1cIjpcIiZyYmFycjtcIixcIuKnq1wiOlwiJmxvemY7XCIsXCLilrRcIjpcIiZ1dHJpZjtcIixcIuKWvlwiOlwiJmR0cmlmO1wiLFwi4peCXCI6XCImbHRyaWY7XCIsXCLilrhcIjpcIiZydHJpZjtcIixcIuKQo1wiOlwiJmJsYW5rO1wiLFwi4paSXCI6XCImYmxrMTI7XCIsXCLilpFcIjpcIiZibGsxNDtcIixcIuKWk1wiOlwiJmJsazM0O1wiLFwi4paIXCI6XCImYmxvY2s7XCIsXCI94oOlXCI6XCImYm5lO1wiLFwi4omh4oOlXCI6XCImYm5lcXVpdjtcIixcIuKMkFwiOlwiJmJub3Q7XCIsXCLwnZWTXCI6XCImYm9wZjtcIixcIuKLiFwiOlwiJmJvd3RpZTtcIixcIuKVl1wiOlwiJmJveERMO1wiLFwi4pWUXCI6XCImYm94RFI7XCIsXCLilZZcIjpcIiZib3hEbDtcIixcIuKVk1wiOlwiJmJveERyO1wiLFwi4pWQXCI6XCImYm94SDtcIixcIuKVplwiOlwiJmJveEhEO1wiLFwi4pWpXCI6XCImYm94SFU7XCIsXCLilaRcIjpcIiZib3hIZDtcIixcIuKVp1wiOlwiJmJveEh1O1wiLFwi4pWdXCI6XCImYm94VUw7XCIsXCLilZpcIjpcIiZib3hVUjtcIixcIuKVnFwiOlwiJmJveFVsO1wiLFwi4pWZXCI6XCImYm94VXI7XCIsXCLilZFcIjpcIiZib3hWO1wiLFwi4pWsXCI6XCImYm94Vkg7XCIsXCLilaNcIjpcIiZib3hWTDtcIixcIuKVoFwiOlwiJmJveFZSO1wiLFwi4pWrXCI6XCImYm94Vmg7XCIsXCLilaJcIjpcIiZib3hWbDtcIixcIuKVn1wiOlwiJmJveFZyO1wiLFwi4qeJXCI6XCImYm94Ym94O1wiLFwi4pWVXCI6XCImYm94ZEw7XCIsXCLilZJcIjpcIiZib3hkUjtcIixcIuKUkFwiOlwiJmJveGRsO1wiLFwi4pSMXCI6XCImYm94ZHI7XCIsXCLilaVcIjpcIiZib3hoRDtcIixcIuKVqFwiOlwiJmJveGhVO1wiLFwi4pSsXCI6XCImYm94aGQ7XCIsXCLilLRcIjpcIiZib3hodTtcIixcIuKKn1wiOlwiJm1pbnVzYjtcIixcIuKKnlwiOlwiJnBsdXNiO1wiLFwi4oqgXCI6XCImdGltZXNiO1wiLFwi4pWbXCI6XCImYm94dUw7XCIsXCLilZhcIjpcIiZib3h1UjtcIixcIuKUmFwiOlwiJmJveHVsO1wiLFwi4pSUXCI6XCImYm94dXI7XCIsXCLilIJcIjpcIiZib3h2O1wiLFwi4pWqXCI6XCImYm94dkg7XCIsXCLilaFcIjpcIiZib3h2TDtcIixcIuKVnlwiOlwiJmJveHZSO1wiLFwi4pS8XCI6XCImYm94dmg7XCIsXCLilKRcIjpcIiZib3h2bDtcIixcIuKUnFwiOlwiJmJveHZyO1wiLFwiwqZcIjpcIiZicnZiYXI7XCIsXCLwnZK3XCI6XCImYnNjcjtcIixcIuKBj1wiOlwiJmJzZW1pO1wiLFwiXFxcXFwiOlwiJmJzb2w7XCIsXCLip4VcIjpcIiZic29sYjtcIixcIuKfiFwiOlwiJmJzb2xoc3ViO1wiLFwi4oCiXCI6XCImYnVsbGV0O1wiLFwi4qquXCI6XCImYnVtcEU7XCIsXCLEh1wiOlwiJmNhY3V0ZTtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKphFwiOlwiJmNhcGFuZDtcIixcIuKpiVwiOlwiJmNhcGJyY3VwO1wiLFwi4qmLXCI6XCImY2FwY2FwO1wiLFwi4qmHXCI6XCImY2FwY3VwO1wiLFwi4qmAXCI6XCImY2FwZG90O1wiLFwi4oip77iAXCI6XCImY2FwcztcIixcIuKBgVwiOlwiJmNhcmV0O1wiLFwi4qmNXCI6XCImY2NhcHM7XCIsXCLEjVwiOlwiJmNjYXJvbjtcIixcIsOnXCI6XCImY2NlZGlsO1wiLFwixIlcIjpcIiZjY2lyYztcIixcIuKpjFwiOlwiJmNjdXBzO1wiLFwi4qmQXCI6XCImY2N1cHNzbTtcIixcIsSLXCI6XCImY2RvdDtcIixcIuKmslwiOlwiJmNlbXB0eXY7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLwnZSgXCI6XCImY2ZyO1wiLFwi0YdcIjpcIiZjaGN5O1wiLFwi4pyTXCI6XCImY2hlY2ttYXJrO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLil4tcIjpcIiZjaXI7XCIsXCLip4NcIjpcIiZjaXJFO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwi4omXXCI6XCImY2lyZTtcIixcIuKGulwiOlwiJm9sYXJyO1wiLFwi4oa7XCI6XCImb3JhcnI7XCIsXCLik4hcIjpcIiZvUztcIixcIuKKm1wiOlwiJm9hc3Q7XCIsXCLiippcIjpcIiZvY2lyO1wiLFwi4oqdXCI6XCImb2Rhc2g7XCIsXCLiqJBcIjpcIiZjaXJmbmludDtcIixcIuKrr1wiOlwiJmNpcm1pZDtcIixcIuKnglwiOlwiJmNpcnNjaXI7XCIsXCLimaNcIjpcIiZjbHVic3VpdDtcIixcIjpcIjpcIiZjb2xvbjtcIixcIixcIjpcIiZjb21tYTtcIixcIkBcIjpcIiZjb21tYXQ7XCIsXCLiiIFcIjpcIiZjb21wbGVtZW50O1wiLFwi4qmtXCI6XCImY29uZ2RvdDtcIixcIvCdlZRcIjpcIiZjb3BmO1wiLFwi4oSXXCI6XCImY29weXNyO1wiLFwi4oa1XCI6XCImY3JhcnI7XCIsXCLinJdcIjpcIiZjcm9zcztcIixcIvCdkrhcIjpcIiZjc2NyO1wiLFwi4quPXCI6XCImY3N1YjtcIixcIuKrkVwiOlwiJmNzdWJlO1wiLFwi4quQXCI6XCImY3N1cDtcIixcIuKrklwiOlwiJmNzdXBlO1wiLFwi4ouvXCI6XCImY3Rkb3Q7XCIsXCLipLhcIjpcIiZjdWRhcnJsO1wiLFwi4qS1XCI6XCImY3VkYXJycjtcIixcIuKLnlwiOlwiJmN1cmx5ZXFwcmVjO1wiLFwi4oufXCI6XCImY3VybHllcXN1Y2M7XCIsXCLihrZcIjpcIiZjdXJ2ZWFycm93bGVmdDtcIixcIuKkvVwiOlwiJmN1bGFycnA7XCIsXCLiiKpcIjpcIiZjdXA7XCIsXCLiqYhcIjpcIiZjdXBicmNhcDtcIixcIuKphlwiOlwiJmN1cGNhcDtcIixcIuKpilwiOlwiJmN1cGN1cDtcIixcIuKKjVwiOlwiJmN1cGRvdDtcIixcIuKphVwiOlwiJmN1cG9yO1wiLFwi4oiq77iAXCI6XCImY3VwcztcIixcIuKGt1wiOlwiJmN1cnZlYXJyb3dyaWdodDtcIixcIuKkvFwiOlwiJmN1cmFycm07XCIsXCLii45cIjpcIiZjdXZlZTtcIixcIuKLj1wiOlwiJmN1d2VkO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLiiLFcIjpcIiZjd2ludDtcIixcIuKMrVwiOlwiJmN5bGN0eTtcIixcIuKlpVwiOlwiJmRIYXI7XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLihLhcIjpcIiZkYWxldGg7XCIsXCLigJBcIjpcIiZoeXBoZW47XCIsXCLipI9cIjpcIiZyQmFycjtcIixcIsSPXCI6XCImZGNhcm9uO1wiLFwi0LRcIjpcIiZkY3k7XCIsXCLih4pcIjpcIiZkb3duZG93bmFycm93cztcIixcIuKpt1wiOlwiJmVERG90O1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLOtFwiOlwiJmRlbHRhO1wiLFwi4qaxXCI6XCImZGVtcHR5djtcIixcIuKlv1wiOlwiJmRmaXNodDtcIixcIvCdlKFcIjpcIiZkZnI7XCIsXCLimaZcIjpcIiZkaWFtcztcIixcIs+dXCI6XCImZ2FtbWFkO1wiLFwi4ouyXCI6XCImZGlzaW47XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIuKLh1wiOlwiJmRpdm9ueDtcIixcItGSXCI6XCImZGpjeTtcIixcIuKMnlwiOlwiJmxsY29ybmVyO1wiLFwi4oyNXCI6XCImZGxjcm9wO1wiLCQ6XCImZG9sbGFyO1wiLFwi8J2VlVwiOlwiJmRvcGY7XCIsXCLiiZFcIjpcIiZlRG90O1wiLFwi4oi4XCI6XCImbWludXNkO1wiLFwi4oiUXCI6XCImcGx1c2RvO1wiLFwi4oqhXCI6XCImc2RvdGI7XCIsXCLijJ9cIjpcIiZscmNvcm5lcjtcIixcIuKMjFwiOlwiJmRyY3JvcDtcIixcIvCdkrlcIjpcIiZkc2NyO1wiLFwi0ZVcIjpcIiZkc2N5O1wiLFwi4qe2XCI6XCImZHNvbDtcIixcIsSRXCI6XCImZHN0cm9rO1wiLFwi4ouxXCI6XCImZHRkb3Q7XCIsXCLilr9cIjpcIiZ0cmlhbmdsZWRvd247XCIsXCLipqZcIjpcIiZkd2FuZ2xlO1wiLFwi0Z9cIjpcIiZkemN5O1wiLFwi4p+/XCI6XCImZHppZ3JhcnI7XCIsXCLDqVwiOlwiJmVhY3V0ZTtcIixcIuKprlwiOlwiJmVhc3RlcjtcIixcIsSbXCI6XCImZWNhcm9uO1wiLFwi4omWXCI6XCImZXFjaXJjO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIuKJlVwiOlwiJmVxY29sb247XCIsXCLRjVwiOlwiJmVjeTtcIixcIsSXXCI6XCImZWRvdDtcIixcIuKJklwiOlwiJmZhbGxpbmdkb3RzZXE7XCIsXCLwnZSiXCI6XCImZWZyO1wiLFwi4qqaXCI6XCImZWc7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIuKqllwiOlwiJmVxc2xhbnRndHI7XCIsXCLiqphcIjpcIiZlZ3Nkb3Q7XCIsXCLiqplcIjpcIiZlbDtcIixcIuKPp1wiOlwiJmVsaW50ZXJzO1wiLFwi4oSTXCI6XCImZWxsO1wiLFwi4qqVXCI6XCImZXFzbGFudGxlc3M7XCIsXCLiqpdcIjpcIiZlbHNkb3Q7XCIsXCLEk1wiOlwiJmVtYWNyO1wiLFwi4oiFXCI6XCImdmFybm90aGluZztcIixcIuKAhFwiOlwiJmVtc3AxMztcIixcIuKAhVwiOlwiJmVtc3AxNDtcIixcIuKAg1wiOlwiJmVtc3A7XCIsXCLFi1wiOlwiJmVuZztcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLEmVwiOlwiJmVvZ29uO1wiLFwi8J2VllwiOlwiJmVvcGY7XCIsXCLii5VcIjpcIiZlcGFyO1wiLFwi4qejXCI6XCImZXBhcnNsO1wiLFwi4qmxXCI6XCImZXBsdXM7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLPtVwiOlwiJnZhcmVwc2lsb247XCIsXCI9XCI6XCImZXF1YWxzO1wiLFwi4omfXCI6XCImcXVlc3RlcTtcIixcIuKpuFwiOlwiJmVxdWl2REQ7XCIsXCLip6VcIjpcIiZlcXZwYXJzbDtcIixcIuKJk1wiOlwiJnJpc2luZ2RvdHNlcTtcIixcIuKlsVwiOlwiJmVyYXJyO1wiLFwi4oSvXCI6XCImZXNjcjtcIixcIs63XCI6XCImZXRhO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDq1wiOlwiJmV1bWw7XCIsXCLigqxcIjpcIiZldXJvO1wiLFwiIVwiOlwiJmV4Y2w7XCIsXCLRhFwiOlwiJmZjeTtcIixcIuKZgFwiOlwiJmZlbWFsZTtcIixcIu+sg1wiOlwiJmZmaWxpZztcIixcIu+sgFwiOlwiJmZmbGlnO1wiLFwi76yEXCI6XCImZmZsbGlnO1wiLFwi8J2Uo1wiOlwiJmZmcjtcIixcIu+sgVwiOlwiJmZpbGlnO1wiLGZqOlwiJmZqbGlnO1wiLFwi4pmtXCI6XCImZmxhdDtcIixcIu+sglwiOlwiJmZsbGlnO1wiLFwi4paxXCI6XCImZmx0bnM7XCIsXCLGklwiOlwiJmZub2Y7XCIsXCLwnZWXXCI6XCImZm9wZjtcIixcIuKLlFwiOlwiJnBpdGNoZm9yaztcIixcIuKrmVwiOlwiJmZvcmt2O1wiLFwi4qiNXCI6XCImZnBhcnRpbnQ7XCIsXCLCvVwiOlwiJmhhbGY7XCIsXCLihZNcIjpcIiZmcmFjMTM7XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIuKFlVwiOlwiJmZyYWMxNTtcIixcIuKFmVwiOlwiJmZyYWMxNjtcIixcIuKFm1wiOlwiJmZyYWMxODtcIixcIuKFlFwiOlwiJmZyYWMyMztcIixcIuKFllwiOlwiJmZyYWMyNTtcIixcIsK+XCI6XCImZnJhYzM0O1wiLFwi4oWXXCI6XCImZnJhYzM1O1wiLFwi4oWcXCI6XCImZnJhYzM4O1wiLFwi4oWYXCI6XCImZnJhYzQ1O1wiLFwi4oWaXCI6XCImZnJhYzU2O1wiLFwi4oWdXCI6XCImZnJhYzU4O1wiLFwi4oWeXCI6XCImZnJhYzc4O1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLijKJcIjpcIiZzZnJvd247XCIsXCLwnZK7XCI6XCImZnNjcjtcIixcIuKqjFwiOlwiJmd0cmVxcWxlc3M7XCIsXCLHtVwiOlwiJmdhY3V0ZTtcIixcIs6zXCI6XCImZ2FtbWE7XCIsXCLiqoZcIjpcIiZndHJhcHByb3g7XCIsXCLEn1wiOlwiJmdicmV2ZTtcIixcIsSdXCI6XCImZ2NpcmM7XCIsXCLQs1wiOlwiJmdjeTtcIixcIsShXCI6XCImZ2RvdDtcIixcIuKqqVwiOlwiJmdlc2NjO1wiLFwi4qqAXCI6XCImZ2VzZG90O1wiLFwi4qqCXCI6XCImZ2VzZG90bztcIixcIuKqhFwiOlwiJmdlc2RvdG9sO1wiLFwi4oub77iAXCI6XCImZ2VzbDtcIixcIuKqlFwiOlwiJmdlc2xlcztcIixcIvCdlKRcIjpcIiZnZnI7XCIsXCLihLdcIjpcIiZnaW1lbDtcIixcItGTXCI6XCImZ2pjeTtcIixcIuKqklwiOlwiJmdsRTtcIixcIuKqpVwiOlwiJmdsYTtcIixcIuKqpFwiOlwiJmdsajtcIixcIuKJqVwiOlwiJmduZXFxO1wiLFwi4qqKXCI6XCImZ25hcHByb3g7XCIsXCLiqohcIjpcIiZnbmVxO1wiLFwi4ounXCI6XCImZ25zaW07XCIsXCLwnZWYXCI6XCImZ29wZjtcIixcIuKEilwiOlwiJmdzY3I7XCIsXCLiqo5cIjpcIiZnc2ltZTtcIixcIuKqkFwiOlwiJmdzaW1sO1wiLFwi4qqnXCI6XCImZ3RjYztcIixcIuKpulwiOlwiJmd0Y2lyO1wiLFwi4ouXXCI6XCImZ3RyZG90O1wiLFwi4qaVXCI6XCImZ3RsUGFyO1wiLFwi4qm8XCI6XCImZ3RxdWVzdDtcIixcIuKluFwiOlwiJmd0cmFycjtcIixcIuKJqe+4gFwiOlwiJmd2bkU7XCIsXCLRilwiOlwiJmhhcmRjeTtcIixcIuKliFwiOlwiJmhhcnJjaXI7XCIsXCLihq1cIjpcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiLFwi4oSPXCI6XCImcGxhbmt2O1wiLFwixKVcIjpcIiZoY2lyYztcIixcIuKZpVwiOlwiJmhlYXJ0c3VpdDtcIixcIuKAplwiOlwiJm1sZHI7XCIsXCLiirlcIjpcIiZoZXJjb247XCIsXCLwnZSlXCI6XCImaGZyO1wiLFwi4qSlXCI6XCImc2VhcmhrO1wiLFwi4qSmXCI6XCImc3dhcmhrO1wiLFwi4oe/XCI6XCImaG9hcnI7XCIsXCLiiLtcIjpcIiZob210aHQ7XCIsXCLihqlcIjpcIiZsYXJyaGs7XCIsXCLihqpcIjpcIiZyYXJyaGs7XCIsXCLwnZWZXCI6XCImaG9wZjtcIixcIuKAlVwiOlwiJmhvcmJhcjtcIixcIvCdkr1cIjpcIiZoc2NyO1wiLFwixKdcIjpcIiZoc3Ryb2s7XCIsXCLigYNcIjpcIiZoeWJ1bGw7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLQuFwiOlwiJmljeTtcIixcItC1XCI6XCImaWVjeTtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLwnZSmXCI6XCImaWZyO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLiqIxcIjpcIiZxaW50O1wiLFwi4oitXCI6XCImdGludDtcIixcIuKnnFwiOlwiJmlpbmZpbjtcIixcIuKEqVwiOlwiJmlpb3RhO1wiLFwixLNcIjpcIiZpamxpZztcIixcIsSrXCI6XCImaW1hY3I7XCIsXCLEsVwiOlwiJmlub2RvdDtcIixcIuKKt1wiOlwiJmltb2Y7XCIsXCLGtVwiOlwiJmltcGVkO1wiLFwi4oSFXCI6XCImaW5jYXJlO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLip51cIjpcIiZpbmZpbnRpZTtcIixcIuKKulwiOlwiJmludGVyY2FsO1wiLFwi4qiXXCI6XCImaW50bGFyaGs7XCIsXCLiqLxcIjpcIiZpcHJvZDtcIixcItGRXCI6XCImaW9jeTtcIixcIsSvXCI6XCImaW9nb247XCIsXCLwnZWaXCI6XCImaW9wZjtcIixcIs65XCI6XCImaW90YTtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwi8J2SvlwiOlwiJmlzY3I7XCIsXCLii7lcIjpcIiZpc2luRTtcIixcIuKLtVwiOlwiJmlzaW5kb3Q7XCIsXCLii7RcIjpcIiZpc2lucztcIixcIuKLs1wiOlwiJmlzaW5zdjtcIixcIsSpXCI6XCImaXRpbGRlO1wiLFwi0ZZcIjpcIiZpdWtjeTtcIixcIsOvXCI6XCImaXVtbDtcIixcIsS1XCI6XCImamNpcmM7XCIsXCLQuVwiOlwiJmpjeTtcIixcIvCdlKdcIjpcIiZqZnI7XCIsXCLIt1wiOlwiJmptYXRoO1wiLFwi8J2Vm1wiOlwiJmpvcGY7XCIsXCLwnZK/XCI6XCImanNjcjtcIixcItGYXCI6XCImanNlcmN5O1wiLFwi0ZRcIjpcIiZqdWtjeTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLPsFwiOlwiJnZhcmthcHBhO1wiLFwixLdcIjpcIiZrY2VkaWw7XCIsXCLQulwiOlwiJmtjeTtcIixcIvCdlKhcIjpcIiZrZnI7XCIsXCLEuFwiOlwiJmtncmVlbjtcIixcItGFXCI6XCIma2hjeTtcIixcItGcXCI6XCIma2pjeTtcIixcIvCdlZxcIjpcIiZrb3BmO1wiLFwi8J2TgFwiOlwiJmtzY3I7XCIsXCLipJtcIjpcIiZsQXRhaWw7XCIsXCLipI5cIjpcIiZsQmFycjtcIixcIuKqi1wiOlwiJmxlc3NlcXFndHI7XCIsXCLipaJcIjpcIiZsSGFyO1wiLFwixLpcIjpcIiZsYWN1dGU7XCIsXCLiprRcIjpcIiZsYWVtcHR5djtcIixcIs67XCI6XCImbGFtYmRhO1wiLFwi4qaRXCI6XCImbGFuZ2Q7XCIsXCLiqoVcIjpcIiZsZXNzYXBwcm94O1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIuKkn1wiOlwiJmxhcnJiZnM7XCIsXCLipJ1cIjpcIiZsYXJyZnM7XCIsXCLihqtcIjpcIiZsb29wYXJyb3dsZWZ0O1wiLFwi4qS5XCI6XCImbGFycnBsO1wiLFwi4qWzXCI6XCImbGFycnNpbTtcIixcIuKGolwiOlwiJmxlZnRhcnJvd3RhaWw7XCIsXCLiqqtcIjpcIiZsYXQ7XCIsXCLipJlcIjpcIiZsYXRhaWw7XCIsXCLiqq1cIjpcIiZsYXRlO1wiLFwi4qqt77iAXCI6XCImbGF0ZXM7XCIsXCLipIxcIjpcIiZsYmFycjtcIixcIuKdslwiOlwiJmxiYnJrO1wiLFwie1wiOlwiJmxjdWI7XCIsXCJbXCI6XCImbHNxYjtcIixcIuKmi1wiOlwiJmxicmtlO1wiLFwi4qaPXCI6XCImbGJya3NsZDtcIixcIuKmjVwiOlwiJmxicmtzbHU7XCIsXCLEvlwiOlwiJmxjYXJvbjtcIixcIsS8XCI6XCImbGNlZGlsO1wiLFwi0LtcIjpcIiZsY3k7XCIsXCLipLZcIjpcIiZsZGNhO1wiLFwi4qWnXCI6XCImbGRyZGhhcjtcIixcIuKli1wiOlwiJmxkcnVzaGFyO1wiLFwi4oayXCI6XCImbGRzaDtcIixcIuKJpFwiOlwiJmxlcTtcIixcIuKHh1wiOlwiJmxsYXJyO1wiLFwi4ouLXCI6XCImbHRocmVlO1wiLFwi4qqoXCI6XCImbGVzY2M7XCIsXCLiqb9cIjpcIiZsZXNkb3Q7XCIsXCLiqoFcIjpcIiZsZXNkb3RvO1wiLFwi4qqDXCI6XCImbGVzZG90b3I7XCIsXCLii5rvuIBcIjpcIiZsZXNnO1wiLFwi4qqTXCI6XCImbGVzZ2VzO1wiLFwi4ouWXCI6XCImbHRkb3Q7XCIsXCLipbxcIjpcIiZsZmlzaHQ7XCIsXCLwnZSpXCI6XCImbGZyO1wiLFwi4qqRXCI6XCImbGdFO1wiLFwi4qWqXCI6XCImbGhhcnVsO1wiLFwi4paEXCI6XCImbGhibGs7XCIsXCLRmVwiOlwiJmxqY3k7XCIsXCLipatcIjpcIiZsbGhhcmQ7XCIsXCLil7pcIjpcIiZsbHRyaTtcIixcIsWAXCI6XCImbG1pZG90O1wiLFwi4o6wXCI6XCImbG1vdXN0YWNoZTtcIixcIuKJqFwiOlwiJmxuZXFxO1wiLFwi4qqJXCI6XCImbG5hcHByb3g7XCIsXCLiqodcIjpcIiZsbmVxO1wiLFwi4oumXCI6XCImbG5zaW07XCIsXCLin6xcIjpcIiZsb2FuZztcIixcIuKHvVwiOlwiJmxvYXJyO1wiLFwi4p+8XCI6XCImeG1hcDtcIixcIuKGrFwiOlwiJnJhcnJscDtcIixcIuKmhVwiOlwiJmxvcGFyO1wiLFwi8J2VnVwiOlwiJmxvcGY7XCIsXCLiqK1cIjpcIiZsb3BsdXM7XCIsXCLiqLRcIjpcIiZsb3RpbWVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4peKXCI6XCImbG96ZW5nZTtcIixcIihcIjpcIiZscGFyO1wiLFwi4qaTXCI6XCImbHBhcmx0O1wiLFwi4qWtXCI6XCImbHJoYXJkO1wiLFwi4oCOXCI6XCImbHJtO1wiLFwi4oq/XCI6XCImbHJ0cmk7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLwnZOBXCI6XCImbHNjcjtcIixcIuKqjVwiOlwiJmxzaW1lO1wiLFwi4qqPXCI6XCImbHNpbWc7XCIsXCLigJpcIjpcIiZzYnF1bztcIixcIsWCXCI6XCImbHN0cm9rO1wiLFwi4qqmXCI6XCImbHRjYztcIixcIuKpuVwiOlwiJmx0Y2lyO1wiLFwi4ouJXCI6XCImbHRpbWVzO1wiLFwi4qW2XCI6XCImbHRsYXJyO1wiLFwi4qm7XCI6XCImbHRxdWVzdDtcIixcIuKmllwiOlwiJmx0clBhcjtcIixcIuKXg1wiOlwiJnRyaWFuZ2xlbGVmdDtcIixcIuKlilwiOlwiJmx1cmRzaGFyO1wiLFwi4qWmXCI6XCImbHVydWhhcjtcIixcIuKJqO+4gFwiOlwiJmx2bkU7XCIsXCLiiLpcIjpcIiZtRERvdDtcIixcIsKvXCI6XCImc3RybnM7XCIsXCLimYJcIjpcIiZtYWxlO1wiLFwi4pygXCI6XCImbWFsdGVzZTtcIixcIuKWrlwiOlwiJm1hcmtlcjtcIixcIuKoqVwiOlwiJm1jb21tYTtcIixcItC8XCI6XCImbWN5O1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLwnZSqXCI6XCImbWZyO1wiLFwi4oSnXCI6XCImbWhvO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIuKrsFwiOlwiJm1pZGNpcjtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4qiqXCI6XCImbWludXNkdTtcIixcIuKrm1wiOlwiJm1sY3A7XCIsXCLiiqdcIjpcIiZtb2RlbHM7XCIsXCLwnZWeXCI6XCImbW9wZjtcIixcIvCdk4JcIjpcIiZtc2NyO1wiLFwizrxcIjpcIiZtdTtcIixcIuKKuFwiOlwiJm11bWFwO1wiLFwi4ouZzLhcIjpcIiZuR2c7XCIsXCLiiavig5JcIjpcIiZuR3Q7XCIsXCLih41cIjpcIiZubEFycjtcIixcIuKHjlwiOlwiJm5oQXJyO1wiLFwi4ouYzLhcIjpcIiZuTGw7XCIsXCLiiarig5JcIjpcIiZuTHQ7XCIsXCLih49cIjpcIiZuckFycjtcIixcIuKKr1wiOlwiJm5WRGFzaDtcIixcIuKKrlwiOlwiJm5WZGFzaDtcIixcIsWEXCI6XCImbmFjdXRlO1wiLFwi4oig4oOSXCI6XCImbmFuZztcIixcIuKpsMy4XCI6XCImbmFwRTtcIixcIuKJi8y4XCI6XCImbmFwaWQ7XCIsXCLFiVwiOlwiJm5hcG9zO1wiLFwi4pmuXCI6XCImbmF0dXJhbDtcIixcIuKpg1wiOlwiJm5jYXA7XCIsXCLFiFwiOlwiJm5jYXJvbjtcIixcIsWGXCI6XCImbmNlZGlsO1wiLFwi4qmtzLhcIjpcIiZuY29uZ2RvdDtcIixcIuKpglwiOlwiJm5jdXA7XCIsXCLQvVwiOlwiJm5jeTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oeXXCI6XCImbmVBcnI7XCIsXCLipKRcIjpcIiZuZWFyaGs7XCIsXCLiiZDMuFwiOlwiJm5lZG90O1wiLFwi4qSoXCI6XCImdG9lYTtcIixcIvCdlKtcIjpcIiZuZnI7XCIsXCLihq5cIjpcIiZubGVmdHJpZ2h0YXJyb3c7XCIsXCLiq7JcIjpcIiZuaHBhcjtcIixcIuKLvFwiOlwiJm5pcztcIixcIuKLulwiOlwiJm5pc2Q7XCIsXCLRmlwiOlwiJm5qY3k7XCIsXCLiiabMuFwiOlwiJm5sZXFxO1wiLFwi4oaaXCI6XCImbmxlZnRhcnJvdztcIixcIuKApVwiOlwiJm5sZHI7XCIsXCLwnZWfXCI6XCImbm9wZjtcIixcIsKsXCI6XCImbm90O1wiLFwi4ou5zLhcIjpcIiZub3RpbkU7XCIsXCLii7XMuFwiOlwiJm5vdGluZG90O1wiLFwi4ou3XCI6XCImbm90aW52YjtcIixcIuKLtlwiOlwiJm5vdGludmM7XCIsXCLii75cIjpcIiZub3RuaXZiO1wiLFwi4ou9XCI6XCImbm90bml2YztcIixcIuKrveKDpVwiOlwiJm5wYXJzbDtcIixcIuKIgsy4XCI6XCImbnBhcnQ7XCIsXCLiqJRcIjpcIiZucG9saW50O1wiLFwi4oabXCI6XCImbnJpZ2h0YXJyb3c7XCIsXCLipLPMuFwiOlwiJm5yYXJyYztcIixcIuKGncy4XCI6XCImbnJhcnJ3O1wiLFwi8J2Tg1wiOlwiJm5zY3I7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4quFzLhcIjpcIiZuc3Vic2V0ZXFxO1wiLFwi4oqFXCI6XCImbnN1cDtcIixcIuKrhsy4XCI6XCImbnN1cHNldGVxcTtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwizr1cIjpcIiZudTtcIixcIiNcIjpcIiZudW07XCIsXCLihJZcIjpcIiZudW1lcm87XCIsXCLigIdcIjpcIiZudW1zcDtcIixcIuKKrVwiOlwiJm52RGFzaDtcIixcIuKkhFwiOlwiJm52SGFycjtcIixcIuKJjeKDklwiOlwiJm52YXA7XCIsXCLiiqxcIjpcIiZudmRhc2g7XCIsXCLiiaXig5JcIjpcIiZudmdlO1wiLFwiPuKDklwiOlwiJm52Z3Q7XCIsXCLip55cIjpcIiZudmluZmluO1wiLFwi4qSCXCI6XCImbnZsQXJyO1wiLFwi4omk4oOSXCI6XCImbnZsZTtcIixcIjzig5JcIjpcIiZudmx0O1wiLFwi4oq04oOSXCI6XCImbnZsdHJpZTtcIixcIuKkg1wiOlwiJm52ckFycjtcIixcIuKKteKDklwiOlwiJm52cnRyaWU7XCIsXCLiiLzig5JcIjpcIiZudnNpbTtcIixcIuKHllwiOlwiJm53QXJyO1wiLFwi4qSjXCI6XCImbndhcmhrO1wiLFwi4qSnXCI6XCImbnduZWFyO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwi0L5cIjpcIiZvY3k7XCIsXCLFkVwiOlwiJm9kYmxhYztcIixcIuKouFwiOlwiJm9kaXY7XCIsXCLiprxcIjpcIiZvZHNvbGQ7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwi4qa/XCI6XCImb2ZjaXI7XCIsXCLwnZSsXCI6XCImb2ZyO1wiLFwiy5tcIjpcIiZvZ29uO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLip4FcIjpcIiZvZ3Q7XCIsXCLiprVcIjpcIiZvaGJhcjtcIixcIuKmvlwiOlwiJm9sY2lyO1wiLFwi4qa7XCI6XCImb2xjcm9zcztcIixcIuKngFwiOlwiJm9sdDtcIixcIsWNXCI6XCImb21hY3I7XCIsXCLPiVwiOlwiJm9tZWdhO1wiLFwizr9cIjpcIiZvbWljcm9uO1wiLFwi4qa2XCI6XCImb21pZDtcIixcIvCdlaBcIjpcIiZvb3BmO1wiLFwi4qa3XCI6XCImb3BhcjtcIixcIuKmuVwiOlwiJm9wZXJwO1wiLFwi4oioXCI6XCImdmVlO1wiLFwi4qmdXCI6XCImb3JkO1wiLFwi4oS0XCI6XCImb3NjcjtcIixcIsKqXCI6XCImb3JkZjtcIixcIsK6XCI6XCImb3JkbTtcIixcIuKKtlwiOlwiJm9yaWdvZjtcIixcIuKpllwiOlwiJm9yb3I7XCIsXCLiqZdcIjpcIiZvcnNsb3BlO1wiLFwi4qmbXCI6XCImb3J2O1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLiiphcIjpcIiZvc29sO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLiqLZcIjpcIiZvdGltZXNhcztcIixcIsO2XCI6XCImb3VtbDtcIixcIuKMvVwiOlwiJm92YmFyO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwi4quzXCI6XCImcGFyc2ltO1wiLFwi4qu9XCI6XCImcGFyc2w7XCIsXCLQv1wiOlwiJnBjeTtcIixcIiVcIjpcIiZwZXJjbnQ7XCIsXCIuXCI6XCImcGVyaW9kO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oCxXCI6XCImcGVydGVuaztcIixcIvCdlK1cIjpcIiZwZnI7XCIsXCLPhlwiOlwiJnBoaTtcIixcIs+VXCI6XCImdmFycGhpO1wiLFwi4piOXCI6XCImcGhvbmU7XCIsXCLPgFwiOlwiJnBpO1wiLFwiz5ZcIjpcIiZ2YXJwaTtcIixcIuKEjlwiOlwiJnBsYW5ja2g7XCIsXCIrXCI6XCImcGx1cztcIixcIuKoo1wiOlwiJnBsdXNhY2lyO1wiLFwi4qiiXCI6XCImcGx1c2NpcjtcIixcIuKopVwiOlwiJnBsdXNkdTtcIixcIuKpslwiOlwiJnBsdXNlO1wiLFwi4qimXCI6XCImcGx1c3NpbTtcIixcIuKop1wiOlwiJnBsdXN0d287XCIsXCLiqJVcIjpcIiZwb2ludGludDtcIixcIvCdlaFcIjpcIiZwb3BmO1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIuKqs1wiOlwiJnByRTtcIixcIuKqt1wiOlwiJnByZWNhcHByb3g7XCIsXCLiqrlcIjpcIiZwcm5hcDtcIixcIuKqtVwiOlwiJnBybkU7XCIsXCLii6hcIjpcIiZwcm5zaW07XCIsXCLigLJcIjpcIiZwcmltZTtcIixcIuKMrlwiOlwiJnByb2ZhbGFyO1wiLFwi4oySXCI6XCImcHJvZmxpbmU7XCIsXCLijJNcIjpcIiZwcm9mc3VyZjtcIixcIuKKsFwiOlwiJnBydXJlbDtcIixcIvCdk4VcIjpcIiZwc2NyO1wiLFwiz4hcIjpcIiZwc2k7XCIsXCLigIhcIjpcIiZwdW5jc3A7XCIsXCLwnZSuXCI6XCImcWZyO1wiLFwi8J2VolwiOlwiJnFvcGY7XCIsXCLigZdcIjpcIiZxcHJpbWU7XCIsXCLwnZOGXCI6XCImcXNjcjtcIixcIuKollwiOlwiJnF1YXRpbnQ7XCIsXCI/XCI6XCImcXVlc3Q7XCIsXCLipJxcIjpcIiZyQXRhaWw7XCIsXCLipaRcIjpcIiZySGFyO1wiLFwi4oi9zLFcIjpcIiZyYWNlO1wiLFwixZVcIjpcIiZyYWN1dGU7XCIsXCLiprNcIjpcIiZyYWVtcHR5djtcIixcIuKmklwiOlwiJnJhbmdkO1wiLFwi4qalXCI6XCImcmFuZ2U7XCIsXCLCu1wiOlwiJnJhcXVvO1wiLFwi4qW1XCI6XCImcmFycmFwO1wiLFwi4qSgXCI6XCImcmFycmJmcztcIixcIuKks1wiOlwiJnJhcnJjO1wiLFwi4qSeXCI6XCImcmFycmZzO1wiLFwi4qWFXCI6XCImcmFycnBsO1wiLFwi4qW0XCI6XCImcmFycnNpbTtcIixcIuKGo1wiOlwiJnJpZ2h0YXJyb3d0YWlsO1wiLFwi4oadXCI6XCImcmlnaHRzcXVpZ2Fycm93O1wiLFwi4qSaXCI6XCImcmF0YWlsO1wiLFwi4oi2XCI6XCImcmF0aW87XCIsXCLinbNcIjpcIiZyYmJyaztcIixcIn1cIjpcIiZyY3ViO1wiLFwiXVwiOlwiJnJzcWI7XCIsXCLipoxcIjpcIiZyYnJrZTtcIixcIuKmjlwiOlwiJnJicmtzbGQ7XCIsXCLippBcIjpcIiZyYnJrc2x1O1wiLFwixZlcIjpcIiZyY2Fyb247XCIsXCLFl1wiOlwiJnJjZWRpbDtcIixcItGAXCI6XCImcmN5O1wiLFwi4qS3XCI6XCImcmRjYTtcIixcIuKlqVwiOlwiJnJkbGRoYXI7XCIsXCLihrNcIjpcIiZyZHNoO1wiLFwi4patXCI6XCImcmVjdDtcIixcIuKlvVwiOlwiJnJmaXNodDtcIixcIvCdlK9cIjpcIiZyZnI7XCIsXCLipaxcIjpcIiZyaGFydWw7XCIsXCLPgVwiOlwiJnJobztcIixcIs+xXCI6XCImdmFycmhvO1wiLFwi4oeJXCI6XCImcnJhcnI7XCIsXCLii4xcIjpcIiZydGhyZWU7XCIsXCLLmlwiOlwiJnJpbmc7XCIsXCLigI9cIjpcIiZybG07XCIsXCLijrFcIjpcIiZybW91c3RhY2hlO1wiLFwi4quuXCI6XCImcm5taWQ7XCIsXCLin61cIjpcIiZyb2FuZztcIixcIuKHvlwiOlwiJnJvYXJyO1wiLFwi4qaGXCI6XCImcm9wYXI7XCIsXCLwnZWjXCI6XCImcm9wZjtcIixcIuKorlwiOlwiJnJvcGx1cztcIixcIuKotVwiOlwiJnJvdGltZXM7XCIsXCIpXCI6XCImcnBhcjtcIixcIuKmlFwiOlwiJnJwYXJndDtcIixcIuKoklwiOlwiJnJwcG9saW50O1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi8J2Th1wiOlwiJnJzY3I7XCIsXCLii4pcIjpcIiZydGltZXM7XCIsXCLilrlcIjpcIiZ0cmlhbmdsZXJpZ2h0O1wiLFwi4qeOXCI6XCImcnRyaWx0cmk7XCIsXCLipahcIjpcIiZydWx1aGFyO1wiLFwi4oSeXCI6XCImcng7XCIsXCLFm1wiOlwiJnNhY3V0ZTtcIixcIuKqtFwiOlwiJnNjRTtcIixcIuKquFwiOlwiJnN1Y2NhcHByb3g7XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsWfXCI6XCImc2NlZGlsO1wiLFwixZ1cIjpcIiZzY2lyYztcIixcIuKqtlwiOlwiJnN1Y2NuZXFxO1wiLFwi4qq6XCI6XCImc3VjY25hcHByb3g7XCIsXCLii6lcIjpcIiZzdWNjbnNpbTtcIixcIuKok1wiOlwiJnNjcG9saW50O1wiLFwi0YFcIjpcIiZzY3k7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4qmmXCI6XCImc2RvdGU7XCIsXCLih5hcIjpcIiZzZUFycjtcIixcIsKnXCI6XCImc2VjdDtcIixcIjtcIjpcIiZzZW1pO1wiLFwi4qSpXCI6XCImdG9zYTtcIixcIuKctlwiOlwiJnNleHQ7XCIsXCLwnZSwXCI6XCImc2ZyO1wiLFwi4pmvXCI6XCImc2hhcnA7XCIsXCLRiVwiOlwiJnNoY2hjeTtcIixcItGIXCI6XCImc2hjeTtcIixcIsKtXCI6XCImc2h5O1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+CXCI6XCImdmFyc2lnbWE7XCIsXCLiqapcIjpcIiZzaW1kb3Q7XCIsXCLiqp5cIjpcIiZzaW1nO1wiLFwi4qqgXCI6XCImc2ltZ0U7XCIsXCLiqp1cIjpcIiZzaW1sO1wiLFwi4qqfXCI6XCImc2ltbEU7XCIsXCLiiYZcIjpcIiZzaW1uZTtcIixcIuKopFwiOlwiJnNpbXBsdXM7XCIsXCLipbJcIjpcIiZzaW1yYXJyO1wiLFwi4qizXCI6XCImc21hc2hwO1wiLFwi4qekXCI6XCImc21lcGFyc2w7XCIsXCLijKNcIjpcIiZzc21pbGU7XCIsXCLiqqpcIjpcIiZzbXQ7XCIsXCLiqqxcIjpcIiZzbXRlO1wiLFwi4qqs77iAXCI6XCImc210ZXM7XCIsXCLRjFwiOlwiJnNvZnRjeTtcIixcIi9cIjpcIiZzb2w7XCIsXCLip4RcIjpcIiZzb2xiO1wiLFwi4oy/XCI6XCImc29sYmFyO1wiLFwi8J2VpFwiOlwiJnNvcGY7XCIsXCLimaBcIjpcIiZzcGFkZXN1aXQ7XCIsXCLiipPvuIBcIjpcIiZzcWNhcHM7XCIsXCLiipTvuIBcIjpcIiZzcWN1cHM7XCIsXCLwnZOIXCI6XCImc3NjcjtcIixcIuKYhlwiOlwiJnN0YXI7XCIsXCLiioJcIjpcIiZzdWJzZXQ7XCIsXCLiq4VcIjpcIiZzdWJzZXRlcXE7XCIsXCLiqr1cIjpcIiZzdWJkb3Q7XCIsXCLiq4NcIjpcIiZzdWJlZG90O1wiLFwi4quBXCI6XCImc3VibXVsdDtcIixcIuKri1wiOlwiJnN1YnNldG5lcXE7XCIsXCLiiopcIjpcIiZzdWJzZXRuZXE7XCIsXCLiqr9cIjpcIiZzdWJwbHVzO1wiLFwi4qW5XCI6XCImc3VicmFycjtcIixcIuKrh1wiOlwiJnN1YnNpbTtcIixcIuKrlVwiOlwiJnN1YnN1YjtcIixcIuKrk1wiOlwiJnN1YnN1cDtcIixcIuKZqlwiOlwiJnN1bmc7XCIsXCLCuVwiOlwiJnN1cDE7XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLiq4ZcIjpcIiZzdXBzZXRlcXE7XCIsXCLiqr5cIjpcIiZzdXBkb3Q7XCIsXCLiq5hcIjpcIiZzdXBkc3ViO1wiLFwi4quEXCI6XCImc3VwZWRvdDtcIixcIuKfiVwiOlwiJnN1cGhzb2w7XCIsXCLiq5dcIjpcIiZzdXBoc3ViO1wiLFwi4qW7XCI6XCImc3VwbGFycjtcIixcIuKrglwiOlwiJnN1cG11bHQ7XCIsXCLiq4xcIjpcIiZzdXBzZXRuZXFxO1wiLFwi4oqLXCI6XCImc3Vwc2V0bmVxO1wiLFwi4quAXCI6XCImc3VwcGx1cztcIixcIuKriFwiOlwiJnN1cHNpbTtcIixcIuKrlFwiOlwiJnN1cHN1YjtcIixcIuKrllwiOlwiJnN1cHN1cDtcIixcIuKHmVwiOlwiJnN3QXJyO1wiLFwi4qSqXCI6XCImc3dud2FyO1wiLFwiw59cIjpcIiZzemxpZztcIixcIuKMllwiOlwiJnRhcmdldDtcIixcIs+EXCI6XCImdGF1O1wiLFwixaVcIjpcIiZ0Y2Fyb247XCIsXCLFo1wiOlwiJnRjZWRpbDtcIixcItGCXCI6XCImdGN5O1wiLFwi4oyVXCI6XCImdGVscmVjO1wiLFwi8J2UsVwiOlwiJnRmcjtcIixcIs64XCI6XCImdGhldGE7XCIsXCLPkVwiOlwiJnZhcnRoZXRhO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsOXXCI6XCImdGltZXM7XCIsXCLiqLFcIjpcIiZ0aW1lc2JhcjtcIixcIuKosFwiOlwiJnRpbWVzZDtcIixcIuKMtlwiOlwiJnRvcGJvdDtcIixcIuKrsVwiOlwiJnRvcGNpcjtcIixcIvCdlaVcIjpcIiZ0b3BmO1wiLFwi4quaXCI6XCImdG9wZm9yaztcIixcIuKAtFwiOlwiJnRwcmltZTtcIixcIuKWtVwiOlwiJnV0cmk7XCIsXCLiiZxcIjpcIiZ0cmllO1wiLFwi4pesXCI6XCImdHJpZG90O1wiLFwi4qi6XCI6XCImdHJpbWludXM7XCIsXCLiqLlcIjpcIiZ0cmlwbHVzO1wiLFwi4qeNXCI6XCImdHJpc2I7XCIsXCLiqLtcIjpcIiZ0cml0aW1lO1wiLFwi4o+iXCI6XCImdHJwZXppdW07XCIsXCLwnZOJXCI6XCImdHNjcjtcIixcItGGXCI6XCImdHNjeTtcIixcItGbXCI6XCImdHNoY3k7XCIsXCLFp1wiOlwiJnRzdHJvaztcIixcIuKlo1wiOlwiJnVIYXI7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcItGeXCI6XCImdWJyY3k7XCIsXCLFrVwiOlwiJnVicmV2ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLRg1wiOlwiJnVjeTtcIixcIsWxXCI6XCImdWRibGFjO1wiLFwi4qW+XCI6XCImdWZpc2h0O1wiLFwi8J2UslwiOlwiJnVmcjtcIixcIsO5XCI6XCImdWdyYXZlO1wiLFwi4paAXCI6XCImdWhibGs7XCIsXCLijJxcIjpcIiZ1bGNvcm5lcjtcIixcIuKMj1wiOlwiJnVsY3JvcDtcIixcIuKXuFwiOlwiJnVsdHJpO1wiLFwixatcIjpcIiZ1bWFjcjtcIixcIsWzXCI6XCImdW9nb247XCIsXCLwnZWmXCI6XCImdW9wZjtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIuKHiFwiOlwiJnV1YXJyO1wiLFwi4oydXCI6XCImdXJjb3JuZXI7XCIsXCLijI5cIjpcIiZ1cmNyb3A7XCIsXCLFr1wiOlwiJnVyaW5nO1wiLFwi4pe5XCI6XCImdXJ0cmk7XCIsXCLwnZOKXCI6XCImdXNjcjtcIixcIuKLsFwiOlwiJnV0ZG90O1wiLFwixalcIjpcIiZ1dGlsZGU7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLipqdcIjpcIiZ1d2FuZ2xlO1wiLFwi4quoXCI6XCImdkJhcjtcIixcIuKrqVwiOlwiJnZCYXJ2O1wiLFwi4qacXCI6XCImdmFuZ3J0O1wiLFwi4oqK77iAXCI6XCImdnN1Ym5lO1wiLFwi4quL77iAXCI6XCImdnN1Ym5FO1wiLFwi4oqL77iAXCI6XCImdnN1cG5lO1wiLFwi4quM77iAXCI6XCImdnN1cG5FO1wiLFwi0LJcIjpcIiZ2Y3k7XCIsXCLiirtcIjpcIiZ2ZWViYXI7XCIsXCLiiZpcIjpcIiZ2ZWVlcTtcIixcIuKLrlwiOlwiJnZlbGxpcDtcIixcIvCdlLNcIjpcIiZ2ZnI7XCIsXCLwnZWnXCI6XCImdm9wZjtcIixcIvCdk4tcIjpcIiZ2c2NyO1wiLFwi4qaaXCI6XCImdnppZ3phZztcIixcIsW1XCI6XCImd2NpcmM7XCIsXCLiqZ9cIjpcIiZ3ZWRiYXI7XCIsXCLiiZlcIjpcIiZ3ZWRnZXE7XCIsXCLihJhcIjpcIiZ3cDtcIixcIvCdlLRcIjpcIiZ3ZnI7XCIsXCLwnZWoXCI6XCImd29wZjtcIixcIvCdk4xcIjpcIiZ3c2NyO1wiLFwi8J2UtVwiOlwiJnhmcjtcIixcIs6+XCI6XCImeGk7XCIsXCLii7tcIjpcIiZ4bmlzO1wiLFwi8J2VqVwiOlwiJnhvcGY7XCIsXCLwnZONXCI6XCImeHNjcjtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwi0Y9cIjpcIiZ5YWN5O1wiLFwixbdcIjpcIiZ5Y2lyYztcIixcItGLXCI6XCImeWN5O1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLwnZS2XCI6XCImeWZyO1wiLFwi0ZdcIjpcIiZ5aWN5O1wiLFwi8J2VqlwiOlwiJnlvcGY7XCIsXCLwnZOOXCI6XCImeXNjcjtcIixcItGOXCI6XCImeXVjeTtcIixcIsO/XCI6XCImeXVtbDtcIixcIsW6XCI6XCImemFjdXRlO1wiLFwixb5cIjpcIiZ6Y2Fyb247XCIsXCLQt1wiOlwiJnpjeTtcIixcIsW8XCI6XCImemRvdDtcIixcIs62XCI6XCImemV0YTtcIixcIvCdlLdcIjpcIiZ6ZnI7XCIsXCLQtlwiOlwiJnpoY3k7XCIsXCLih51cIjpcIiZ6aWdyYXJyO1wiLFwi8J2Vq1wiOlwiJnpvcGY7XCIsXCLwnZOPXCI6XCImenNjcjtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjFwiOlwiJnp3bmo7XCJ9fX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0uL25hbWVkLXJlZmVyZW5jZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLm51bWVyaWNVbmljb2RlTWFwPXswOjY1NTMzLDEyODo4MzY0LDEzMDo4MjE4LDEzMTo0MDIsMTMyOjgyMjIsMTMzOjgyMzAsMTM0OjgyMjQsMTM1OjgyMjUsMTM2OjcxMCwxMzc6ODI0MCwxMzg6MzUyLDEzOTo4MjQ5LDE0MDozMzgsMTQyOjM4MSwxNDU6ODIxNiwxNDY6ODIxNywxNDc6ODIyMCwxNDg6ODIyMSwxNDk6ODIyNiwxNTA6ODIxMSwxNTE6ODIxMiwxNTI6NzMyLDE1Mzo4NDgyLDE1NDozNTMsMTU1OjgyNTAsMTU2OjMzOSwxNTg6MzgyLDE1OTozNzZ9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Li9udW1lcmljLXVuaWNvZGUtbWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPS4vc3Vycm9nYXRlLXBhaXJzLmpzLm1hcCIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXA7XG4iLCJ2YXIgYmFzZUlzTWF0Y2ggPSByZXF1aXJlKCcuL19iYXNlSXNNYXRjaCcpLFxuICAgIGdldE1hdGNoRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hdGNoRGF0YScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXM7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpLFxuICAgIGdldCA9IHJlcXVpcmUoJy4vZ2V0JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RGdW5jdGlvbjtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VGb3I7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRjaERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JFYWNoJyk7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBhbGlhcyBlYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAqXG4gKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG5cbi8qKiBAdHlwZWRlZiB7YW55fSBUT0RPICovXG5cbnZhciBub3JtYWxpemVVcmwgPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdXJsXCIpO1xudmFyIHNyY0J5TW9kdWxlSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudmFyIG5vRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICogQHJldHVybnMgeyhmdW5jdGlvbigpOiB2b2lkKXwqfVxuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogQHBhcmFtIHtUT0RPfSBtb2R1bGVJZFxuICogQHJldHVybnMge1RPRE99XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpIHtcbiAgdmFyIHNyYyA9IHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdO1xuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSAoIC8qKiBAdHlwZSB7SFRNTFNjcmlwdEVsZW1lbnR9ICovZG9jdW1lbnQuY3VycmVudFNjcmlwdCkuc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdFNjcmlwdFRhZykge1xuICAgICAgICBzcmMgPSBsYXN0U2NyaXB0VGFnLnNyYztcbiAgICAgIH1cbiAgICB9XG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVNYXBcbiAgICogQHJldHVybnMge251bGwgfCBzdHJpbmdbXX1cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoZmlsZU1hcCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoXCIuanNcIiwgXCIuY3NzXCIpXTtcbiAgICB9XG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKFwiLmpzXCIsIFwiLmNzc1wiKV07XG4gICAgfVxuICAgIHJldHVybiBmaWxlTWFwLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCBcImdcIik7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtUT0RPfSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdChcIj9cIilbMF07XG4gIH1cbiAgaWYgKCFpc1VybFJlcXVlc3QoIC8qKiBAdHlwZSB7c3RyaW5nfSAqL3VybCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZihcIi5jc3NcIikgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZlxuICogQHBhcmFtIHtUT0RPfSBzcmNcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZik7XG4gIHNyYy5zb21lKFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICBmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3JjXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG4gICAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5mdW5jdGlvbiByZWxvYWRBbGwoKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHVwZGF0ZUNzcyhlbCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1VybFJlcXVlc3QodXJsKSB7XG4gIC8vIEFuIFVSTCBpcyBub3QgYW4gcmVxdWVzdCBpZlxuXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15bYS16QS1aXVthLXpBLVpcXGQrXFwtLl0qOi8udGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gbW9kdWxlSWRcbiAqIEBwYXJhbSB7VE9ET30gb3B0aW9uc1xuICogQHJldHVybnMge1RPRE99XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHNyYyA9IGdldFNjcmlwdFNyYyhvcHRpb25zLmZpbGVuYW1lKTtcbiAgICB2YXIgcmVsb2FkZWQgPSByZWxvYWRTdHlsZShzcmMpO1xuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIiwgc3JjLmpvaW4oXCIgXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBSZWxvYWQgYWxsIGNzc1wiKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhDb21wb25lbnRzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgXCIuLlwiOlxuICAgICAgICBhY2N1bXVsYXRvci5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9bXSkuam9pbihcIi9cIik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG4gIGlmICgvXmRhdGE6L2kudGVzdCh1cmxTdHJpbmcpKSB7XG4gICAgcmV0dXJuIHVybFN0cmluZztcbiAgfVxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZihcIi8vXCIpICE9PSAtMSA/IHVybFN0cmluZy5zcGxpdChcIi8vXCIpWzBdICsgXCIvL1wiIDogXCJcIjtcbiAgdmFyIGNvbXBvbmVudHMgPSB1cmxTdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHByb3RvY29sLCBcImlcIiksIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgdmFyIGhvc3QgPSBjb21wb25lbnRzWzBdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFwuJC8sIFwiXCIpO1xuICBjb21wb25lbnRzWzBdID0gXCJcIjtcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsb2NhbHNKc29uU3RyaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAxNzMxOTY0MjA5MjUwXG4gICAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiXCJ9KTtcbiAgICAgICAgLy8gb25seSBpbnZhbGlkYXRlIHdoZW4gbG9jYWxzIGNoYW5nZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICE9PSBsb2NhbHNKc29uU3RyaW5nXG4gICAgICAgICkge1xuICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICBkYXRhLnZhbHVlID0gbG9jYWxzSnNvblN0cmluZztcbiAgICAgICAgICBjc3NSZWxvYWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3JtYWxpemVXaGVlbC5qcycpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBVc2VyQWdlbnRfREVQUkVDQVRFRFxuICovXG5cbi8qKlxuICogIFByb3ZpZGVzIGVudGlyZWx5IGNsaWVudC1zaWRlIFVzZXIgQWdlbnQgYW5kIE9TIGRldGVjdGlvbi4gWW91IHNob3VsZCBwcmVmZXJcbiAqICB0aGUgbm9uLWRlcHJlY2F0ZWQgVXNlckFnZW50IG1vZHVsZSB3aGVuIHBvc3NpYmxlLCB3aGljaCBleHBvc2VzIG91clxuICogIGF1dGhvcml0YXRpdmUgc2VydmVyLXNpZGUgUEhQLWJhc2VkIGRldGVjdGlvbiB0byB0aGUgY2xpZW50LlxuICpcbiAqICBVc2FnZSBpcyBzdHJhaWdodGZvcndhcmQ6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkpIHtcbiAqICAgICAgLy8gIElFXG4gKiAgICB9XG4gKlxuICogIFlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNoZWNrczpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA+PSA3KSB7XG4gKiAgICAgIC8vICBJRTcgb3IgYmV0dGVyXG4gKiAgICB9XG4gKlxuICogIFRoZSBicm93c2VyIGZ1bmN0aW9ucyB3aWxsIHJldHVybiBOYU4gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3QgbWF0Y2gsIHNvXG4gKiAgeW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY29tcGFyZXMgdGhlIG90aGVyIHdheTpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA8IDcpIHtcbiAqICAgICAgLy8gIElFNiBvciB3b3JzZVxuICogICAgfVxuICpcbiAqICBOb3RlIHRoYXQgdGhlIHZlcnNpb24gaXMgYSBmbG9hdCBhbmQgbWF5IGluY2x1ZGUgYSBtaW5vciB2ZXJzaW9uIG51bWJlcixcbiAqICBzbyB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgcmFuZ2Ugb3BlcmF0b3JzIHRvIHBlcmZvcm0gY29tcGFyaXNvbnMsIG5vdFxuICogIHN0cmljdCBlcXVhbGl0eS5cbiAqXG4gKiAgKipOb3RlOioqIFlvdSBzaG91bGQgKipzdHJvbmdseSoqIHByZWZlciBjYXBhYmlsaXR5IGRldGVjdGlvbiB0byBicm93c2VyXG4gKiAgdmVyc2lvbiBkZXRlY3Rpb24gd2hlcmUgaXQncyByZWFzb25hYmxlOlxuICpcbiAqICAgIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvc3VwcG9ydC5odG1sXG4gKlxuICogIEZ1cnRoZXIsIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgbWF0dXJlIHdyYXBwZXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gKiAgd2hpY2ggYWJzdHJhY3QgYXdheSBtYW55IGJyb3dzZXIgaXJyZWd1bGFyaXRpZXMuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uLFxuICogIGdyZXAgZm9yIHRoaW5ncywgb3IgYXNrIG9uIGphdmFzY3JpcHRAbGlzdHMuZmFjZWJvb2suY29tIGJlZm9yZSB3cml0aW5nIHlldFxuICogIGFub3RoZXIgY29weSBvZiBcImV2ZW50IHx8IHdpbmRvdy5ldmVudFwiLlxuICpcbiAqL1xuXG52YXIgX3BvcHVsYXRlZCA9IGZhbHNlO1xuXG4vLyBCcm93c2Vyc1xudmFyIF9pZSwgX2ZpcmVmb3gsIF9vcGVyYSwgX3dlYmtpdCwgX2Nocm9tZTtcblxuLy8gQWN0dWFsIElFIGJyb3dzZXIgZm9yIGNvbXBhdGliaWxpdHkgbW9kZVxudmFyIF9pZV9yZWFsX3ZlcnNpb247XG5cbi8vIFBsYXRmb3Jtc1xudmFyIF9vc3gsIF93aW5kb3dzLCBfbGludXgsIF9hbmRyb2lkO1xuXG4vLyBBcmNoaXRlY3R1cmVzXG52YXIgX3dpbjY0O1xuXG4vLyBEZXZpY2VzXG52YXIgX2lwaG9uZSwgX2lwYWQsIF9uYXRpdmU7XG5cbnZhciBfbW9iaWxlO1xuXG5mdW5jdGlvbiBfcG9wdWxhdGUoKSB7XG4gIGlmIChfcG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3BvcHVsYXRlZCA9IHRydWU7XG5cbiAgLy8gVG8gd29yayBhcm91bmQgYnVnZ3kgSlMgbGlicmFyaWVzIHRoYXQgY2FuJ3QgaGFuZGxlIG11bHRpLWRpZ2l0XG4gIC8vIHZlcnNpb24gbnVtYmVycywgT3BlcmEgMTAncyB1c2VyIGFnZW50IHN0cmluZyBjbGFpbXMgaXQncyBPcGVyYVxuICAvLyA5LCB0aGVuIGxhdGVyIGluY2x1ZGVzIGEgVmVyc2lvbi9YLlkgZmllbGQ6XG4gIC8vXG4gIC8vIE9wZXJhLzkuODAgKGZvbykgUHJlc3RvLzIuMi4xNSBWZXJzaW9uLzEwLjEwXG4gIHZhciB1YXMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgYWdlbnQgPSAvKD86TVNJRS4oXFxkK1xcLlxcZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcXGQrXFwuXFxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcXGQrXFwuXFxkKykpfCg/OkFwcGxlV2ViS2l0LihcXGQrKD86XFwuXFxkKyk/KSl8KD86VHJpZGVudFxcL1xcZCtcXC5cXGQrLipydjooXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICB2YXIgb3MgICAgPSAvKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyh1YXMpO1xuXG4gIF9pcGhvbmUgPSAvXFxiKGlQaG9uZXxpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfaXBhZCA9IC9cXGIoaVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2FuZHJvaWQgPSAvQW5kcm9pZC9pLmV4ZWModWFzKTtcbiAgX25hdGl2ZSA9IC9GQkFOXFwvXFx3KzsvaS5leGVjKHVhcyk7XG4gIF9tb2JpbGUgPSAvTW9iaWxlL2kuZXhlYyh1YXMpO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgSUUgdGVhbSBibG9nIHdvdWxkIGhhdmUgeW91IGJlbGlldmUgeW91IHNob3VsZCBiZSBjaGVja2luZ1xuICAvLyBmb3IgJ1dpbjY0OyB4NjQnLiAgQnV0IE1TRE4gdGhlbiByZXZlYWxzIHRoYXQgeW91IGNhbiBhY3R1YWxseSBiZSBjb21pbmdcbiAgLy8gZnJvbSBlaXRoZXIgeDY0IG9yIGlhNjQ7ICBzbyB1bHRpbWF0ZWx5LCB5b3Ugc2hvdWxkIGp1c3QgY2hlY2sgZm9yIFdpbjY0XG4gIC8vIGFzIGluIGluZGljYXRvciBvZiB3aGV0aGVyIHlvdSdyZSBpbiA2NC1iaXQgSUUuICAzMi1iaXQgSUUgb24gNjQtYml0XG4gIC8vIFdpbmRvd3Mgd2lsbCBzZW5kICdXT1c2NCcgaW5zdGVhZC5cbiAgX3dpbjY0ID0gISEoL1dpbjY0Ly5leGVjKHVhcykpO1xuXG4gIGlmIChhZ2VudCkge1xuICAgIF9pZSA9IGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiAoXG4gICAgICAgICAgYWdlbnRbNV0gPyBwYXJzZUZsb2F0KGFnZW50WzVdKSA6IE5hTik7XG4gICAgLy8gSUUgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgaWYgKF9pZSAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcbiAgICAgIF9pZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICB9XG4gICAgLy8gZ3JhYiB0aGUgXCJ0cnVlXCIgaWUgdmVyc2lvbiBmcm9tIHRoZSB0cmlkZW50IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIHZhciB0cmlkZW50ID0gLyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICBfaWVfcmVhbF92ZXJzaW9uID0gdHJpZGVudCA/IHBhcnNlRmxvYXQodHJpZGVudFsxXSkgKyA0IDogX2llO1xuXG4gICAgX2ZpcmVmb3ggPSBhZ2VudFsyXSA/IHBhcnNlRmxvYXQoYWdlbnRbMl0pIDogTmFOO1xuICAgIF9vcGVyYSAgID0gYWdlbnRbM10gPyBwYXJzZUZsb2F0KGFnZW50WzNdKSA6IE5hTjtcbiAgICBfd2Via2l0ICA9IGFnZW50WzRdID8gcGFyc2VGbG9hdChhZ2VudFs0XSkgOiBOYU47XG4gICAgaWYgKF93ZWJraXQpIHtcbiAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhlIHJlZ2V4cCB0byB0aGUgYWJvdmUgdGVzdCwgYmVjYXVzZSBpdCB3aWxsIGFsd2F5c1xuICAgICAgLy8gbWF0Y2ggJ3NhZmFyaScgb25seSBzaW5jZSAnQXBwbGVXZWJLaXQnIGFwcGVhcnMgYmVmb3JlICdDaHJvbWUnIGluXG4gICAgICAvLyB0aGUgdXNlckFnZW50IHN0cmluZy5cbiAgICAgIGFnZW50ID0gLyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgICBfY2hyb21lID0gYWdlbnQgJiYgYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IE5hTjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2Nocm9tZSA9IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX2llID0gX2ZpcmVmb3ggPSBfb3BlcmEgPSBfY2hyb21lID0gX3dlYmtpdCA9IE5hTjtcbiAgfVxuXG4gIGlmIChvcykge1xuICAgIGlmIChvc1sxXSkge1xuICAgICAgLy8gRGV0ZWN0IE9TIFggdmVyc2lvbi4gIElmIG5vIHZlcnNpb24gbnVtYmVyIG1hdGNoZXMsIHNldCBfb3N4IHRvIHRydWUuXG4gICAgICAvLyBWZXJzaW9uIGV4YW1wbGVzOiAgMTAsIDEwXzZfMSwgMTAuN1xuICAgICAgLy8gUGFyc2VzIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXQsIHRha2luZyBvbmx5IGZpcnN0IHR3byBzZXRzIG9mXG4gICAgICAvLyBkaWdpdHMuICBJZiBvbmx5IG9uZSBzZXQgb2YgZGlnaXRzIGlzIGZvdW5kLCByZXR1cm5zIGp1c3QgdGhlIG1ham9yXG4gICAgICAvLyB2ZXJzaW9uIG51bWJlci5cbiAgICAgIHZhciB2ZXIgPSAvKD86TWFjIE9TIFggKFxcZCsoPzpbLl9dXFxkKyk/KSkvLmV4ZWModWFzKTtcblxuICAgICAgX29zeCA9IHZlciA/IHBhcnNlRmxvYXQodmVyWzFdLnJlcGxhY2UoJ18nLCAnLicpKSA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vc3ggPSBmYWxzZTtcbiAgICB9XG4gICAgX3dpbmRvd3MgPSAhIW9zWzJdO1xuICAgIF9saW51eCAgID0gISFvc1szXTtcbiAgfSBlbHNlIHtcbiAgICBfb3N4ID0gX3dpbmRvd3MgPSBfbGludXggPSBmYWxzZTtcbiAgfVxufVxuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSB7XG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGllOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2llO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB3ZSdyZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBjb21wYXRpYmlsaXR5IG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGluIGNvbXBhdGliaWxpdHkgbW9kZSwgZmFsc2UgaWZcbiAgICogbm90IGNvbXBhdGliaWxpdHkgbW9kZSBvciBub3QgaWVcbiAgICovXG4gIGllQ29tcGF0aWJpbGl0eU1vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2llX3JlYWxfdmVyc2lvbiA+IF9pZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyA2NC1iaXQgSUUuICBSZWFsbHksIHRoaXMgaXMga2luZCBvZiB3ZWFrIHNhdWNlOyAgd2VcbiAgICogb25seSBuZWVkIHRoaXMgYmVjYXVzZSBTa3lwZSBjYW4ndCBoYW5kbGUgNjQtYml0IElFIHlldC4gIFdlIG5lZWQgdG8gcmVtb3ZlXG4gICAqIHRoaXMgd2hlbiB3ZSBkb24ndCBuZWVkIGl0IC0tIHRyYWNrZWQgYnkgIzYwMTk1Ny5cbiAgICovXG4gIGllNjQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpICYmIF93aW42NDtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBGaXJlZm94LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBmaXJlZm94OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2ZpcmVmb3g7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBPcGVyYS5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgb3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3BlcmE7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBXZWJLaXQuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIHdlYmtpdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93ZWJraXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBGb3IgUHVzaFxuICAgKiAgV0lMTCBCRSBSRU1PVkVEIFZFUlkgU09PTi4gVXNlIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdFxuICAgKi9cbiAgc2FmYXJpOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgYSBDaHJvbWUgYnJvd3Nlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgY2hyb21lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9jaHJvbWU7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgV2luZG93cy5cbiAgICpcbiAgICogIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBXaW5kb3dzLlxuICAgKi9cbiAgd2luZG93czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93aW5kb3dzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIE1hYyBPUyBYLlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxib29sICAgUmV0dXJucyBhIGZsb2F0IGlmIGEgdmVyc2lvbiBudW1iZXIgaXMgZGV0ZWN0ZWQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdHJ1ZS9mYWxzZS5cbiAgICovXG4gIG9zeDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vc3g7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTGludXguXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBzb21lIGZsYXZvciBvZiBMaW51eC5cbiAgICovXG4gIGxpbnV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2xpbnV4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHBsYXRmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgc29tZSBmbGF2b3Igb2YgdGhlXG4gICAqICAgIGlQaG9uZSBPUy5cbiAgICovXG4gIGlwaG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGhvbmU7XG4gIH0sXG5cbiAgbW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pcGhvbmUgfHwgX2lwYWQgfHwgX2FuZHJvaWQgfHwgX21vYmlsZSk7XG4gIH0sXG5cbiAgbmF0aXZlQXBwOiBmdW5jdGlvbigpIHtcbiAgICAvLyB3ZWJ2aWV3cyBpbnNpZGUgb2YgdGhlIG5hdGl2ZSBhcHBzXG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9uYXRpdmU7XG4gIH0sXG5cbiAgYW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9hbmRyb2lkO1xuICB9LFxuXG4gIGlwYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBhZDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQWdlbnRfREVQUkVDQVRFRDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG5vcm1hbGl6ZVdoZWVsXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRfREVQUkVDQVRFRCcpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG5cbi8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbnZhciBQSVhFTF9TVEVQICA9IDEwO1xudmFyIExJTkVfSEVJR0hUID0gNDA7XG52YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbi8qKlxuICogTW91c2Ugd2hlZWwgKGFuZCAyLWZpbmdlciB0cmFja3BhZCkgc3VwcG9ydCBvbiB0aGUgd2ViIHN1Y2tzLiAgSXQgaXNcbiAqIGNvbXBsaWNhdGVkLCB0aHVzIHRoaXMgZG9jIGlzIGxvbmcgYW5kIChob3BlZnVsbHkpIGRldGFpbGVkIGVub3VnaCB0byBhbnN3ZXJcbiAqIHlvdXIgcXVlc3Rpb25zLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIHJlYWN0IHRvIHRoZSBtb3VzZSB3aGVlbCBpbiBhIHByZWRpY3RhYmxlIHdheSwgdGhpcyBjb2RlIGlzXG4gKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gKlxuICogQXMgb2YgdG9kYXksIHRoZXJlIGFyZSA0IERPTSBldmVudCB0eXBlcyB5b3UgY2FuIGxpc3RlbiB0bzpcbiAqXG4gKiAgICd3aGVlbCcgICAgICAgICAgICAgICAgLS0gQ2hyb21lKDMxKyksIEZGKDE3KyksIElFKDkrKVxuICogICAnbW91c2V3aGVlbCcgICAgICAgICAgIC0tIENocm9tZSwgSUUoNispLCBPcGVyYSwgU2FmYXJpXG4gKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gKiAgICdET01Nb3VzZVNjcm9sbCcgICAgICAgLS0gRkYoMC45LjcrKSBzaW5jZSAyMDAzXG4gKlxuICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAqXG4gKiAgIG5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSgpO1xuICpcbiAqIEluIHlvdXIgZXZlbnQgY2FsbGJhY2ssIHVzZSB0aGlzIGNvZGUgdG8gZ2V0IHNhbmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlXG4gKiBkZWx0YXMuICBUaGlzIGNvZGUgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczpcbiAqXG4gKiAgIHNwaW5YICAgLS0gbm9ybWFsaXplZCBzcGluIHNwZWVkICh1c2UgZm9yIHpvb20pIC0geCBwbGFuZVxuICogICBzcGluWSAgIC0tIFwiIC0geSBwbGFuZVxuICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gKiAgIHBpeGVsWSAgLS0gXCIgLSB5IHBsYW5lXG4gKlxuICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICogc2Nyb2xsIGEgd2ViIHBhZ2UgYnkgYSBudW1iZXIgb2YgbGluZXMgb3IgcGl4ZWxzIChvciBwYWdlcykuICBWYWx1ZXMgY2FuIHZhcnlcbiAqIHNpZ25pZmljYW50bHkgb24gZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgYnJvd3NlcnMsIGZvcmdldHRpbmcgdGhhdCB5b3UgY2FuXG4gKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAqIGF0IHNtYWxsZXIgaW5jcmVtZW50cyB3aXRoIGZpbmUgZ3JhbnVsYXJpdHksIGFuZCBzb21lIGVtaXQgbWFzc2l2ZSBqdW1wcyB3aXRoXG4gKiBsaW5lYXIgc3BlZWQgb3IgYWNjZWxlcmF0aW9uLlxuICpcbiAqIFRoaXMgY29kZSBkb2VzIGl0cyBiZXN0IHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGFzIGZvciB5b3U6XG4gKlxuICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAqICAgICBkcmFnZ2VkKS4gIFRoaXMgaXMgc3VwZXIgdXNlZnVsIGZvciB6b29tIHN1cHBvcnQgd2hlcmUgeW91IHdhbnQgdG9cbiAqICAgICB0aHJvdyBhd2F5IHRoZSBjaHVua3kgc2Nyb2xsIHN0ZXBzIG9uIHRoZSBQQyBhbmQgbWFrZSB0aG9zZSBlcXVhbCB0b1xuICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gKiAgICAgcmVzb2x2ZSBhIHNpbmdsZSBzbG93IHN0ZXAgb24gYSB3aGVlbCB0byAxLlxuICpcbiAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAqICAgICBnZXQgdGhlIGNyYXp5IGRpZmZlcmVuY2VzIGJldHdlZW4gYnJvd3NlcnMsIGJ1dCBhdCBsZWFzdCBpdCdsbCBiZSBpblxuICogICAgIHBpeGVscyFcbiAqXG4gKiAgIC0gcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHNjcm9sbGluZyBET1dOL1JJR0hULCBuZWdhdGl2ZSBVUC9MRUZULiAgVGhpc1xuICogICAgIHNob3VsZCB0cmFuc2xhdGUgdG8gcG9zaXRpdmUgdmFsdWUgem9vbWluZyBJTiwgbmVnYXRpdmUgem9vbWluZyBPVVQuXG4gKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICpcbiAqIFdoeSBhcmUgdGhlcmUgc3BpblgsIHNwaW5ZIChvciBwaXhlbHMpP1xuICpcbiAqICAgLSBzcGluWCBpcyBhIDItZmluZ2VyIHNpZGUgZHJhZyBvbiB0aGUgdHJhY2twYWQsIGFuZCBhIHNoaWZ0ICsgd2hlZWwgdHVyblxuICogICAgIHdpdGggYSBtb3VzZS4gIEl0IHJlc3VsdHMgaW4gc2lkZS1zY3JvbGxpbmcgaW4gdGhlIGJyb3dzZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiAgIC0gc3BpblkgaXMgd2hhdCB5b3UgZXhwZWN0IC0tIGl0J3MgdGhlIGNsYXNzaWMgYXhpcyBvZiBhIG1vdXNlIHdoZWVsLlxuICpcbiAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICogICAgIHByb2JhYmx5IGlzIGJ5IGJyb3dzZXJzIGluIGNvbmp1bmN0aW9uIHdpdGggZmFuY3kgM0QgY29udHJvbGxlcnMgLi4gYnV0XG4gKiAgICAgeW91IGtub3cuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaW5mbzpcbiAqXG4gKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gKiBhdmVyYWdlIG1vdXNlOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIE9TIFggKyBTYWZhcmkgIChtb3VzZSkgICAgIC0gIE4vQSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgLTEyKVxuICogICBPUyBYICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDAuMSBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIFdpbjggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMyAgIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICpcbiAqIE9uIHRoZSB0cmFja3BhZDpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgICh0cmFja3BhZCkgIC0gICAgMiAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgIC02KVxuICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqXG4gKiBPbiBvdGhlci9vbGRlciBicm93c2Vycy4uIGl0J3MgbW9yZSBjb21wbGljYXRlZCBhcyB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgYW5kXG4gKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICpcbiAqIFRoZSAnd2hlZWwnIGV2ZW50IGlzIG1vcmUgc3RhbmRhcmQ6XG4gKlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtd2hlZWxldmVudHNcbiAqXG4gKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gKiBkZWx0YVgsIGRlbHRhWSBhbmQgZGVsdGFaLiAgU29tZSBicm93c2VycyBwcm92aWRlIG90aGVyIHZhbHVlcyB0byBtYWludGFpblxuICogYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGV2ZW50cy4gIFRob3NlIG90aGVyIHZhbHVlcyBoZWxwIHVzXG4gKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgZXZlbnQud2hlZWxEZWx0YSB8IGV2ZW50LmRldGFpbFxuICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgIFNhZmFyaSB2NS9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICBTYWZhcmkgdjUvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICAgICAgICBJRTkvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICB1bmRlZmluZWRcbiAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvV2luNyAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgM1xuICpcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2hlZWwoLypvYmplY3QqLyBldmVudCkgLypvYmplY3QqLyB7XG4gIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBwWCA9IDAsIHBZID0gMDsgICAgICAgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAvLyBMZWdhY3lcbiAgaWYgKCdkZXRhaWwnICAgICAgaW4gZXZlbnQpIHsgc1kgPSBldmVudC5kZXRhaWw7IH1cbiAgaWYgKCd3aGVlbERlbHRhJyAgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBldmVudCkgeyBzWCA9IC1ldmVudC53aGVlbERlbHRhWCAvIDEyMDsgfVxuXG4gIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgaWYgKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgIHNYID0gc1k7XG4gICAgc1kgPSAwO1xuICB9XG5cbiAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gIGlmICgnZGVsdGFZJyBpbiBldmVudCkgeyBwWSA9IGV2ZW50LmRlbHRhWTsgfVxuICBpZiAoJ2RlbHRhWCcgaW4gZXZlbnQpIHsgcFggPSBldmVudC5kZWx0YVg7IH1cblxuICBpZiAoKHBYIHx8IHBZKSAmJiBldmVudC5kZWx0YU1vZGUpIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IDEpIHsgICAgICAgICAgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICBpZiAocFggJiYgIXNYKSB7IHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7IH1cbiAgaWYgKHBZICYmICFzWSkgeyBzWSA9IChwWSA8IDEpID8gLTEgOiAxOyB9XG5cbiAgcmV0dXJuIHsgc3BpblggIDogc1gsXG4gICAgICAgICAgIHNwaW5ZICA6IHNZLFxuICAgICAgICAgICBwaXhlbFggOiBwWCxcbiAgICAgICAgICAgcGl4ZWxZIDogcFkgfTtcbn1cblxuXG4vKipcbiAqIFRoZSBiZXN0IGNvbWJpbmF0aW9uIGlmIHlvdSBwcmVmZXIgc3BpblggKyBzcGluWSBub3JtYWxpemF0aW9uLiAgSXQgZmF2b3JzXG4gKiB0aGUgb2xkZXIgRE9NTW91c2VTY3JvbGwgZm9yIEZpcmVmb3gsIGFzIEZGIGRvZXMgbm90IGluY2x1ZGUgd2hlZWxEZWx0YSB3aXRoXG4gKiAnd2hlZWwnIGV2ZW50LCBtYWtpbmcgc3BpbiBzcGVlZCBkZXRlcm1pbmF0aW9uIGltcG9zc2libGUuXG4gKi9cbm5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uKCkgLypzdHJpbmcqLyB7XG4gIHJldHVybiAoVXNlckFnZW50X0RFUFJFQ0FURUQuZmlyZWZveCgpKVxuICAgICAgICAgICA/ICdET01Nb3VzZVNjcm9sbCdcbiAgICAgICAgICAgOiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSlcbiAgICAgICAgICAgICAgID8gJ3doZWVsJ1xuICAgICAgICAgICAgICAgOiAnbW91c2V3aGVlbCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVdoZWVsO1xuIiwiLy8gY2hlY2sgZG9jdW1lbnQgZmlyc3Qgc28gaXQgZG9lc24ndCBlcnJvciBpbiBub2RlLmpzXG52YXIgc3R5bGUgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGVcbiAgOiB7fVxuXG52YXIgcHJlZml4ZXMgPSBbJ08nLCAnbXMnLCAnTW96JywgJ1dlYmtpdCddXG52YXIgdXBwZXIgPSAvKFtBLVpdKS9nXG52YXIgbWVtbyA9IHt9XG5cbi8qKlxuICogcHJlZml4IGBrZXlgXG4gKlxuICogICBwcmVmaXgoJ3RyYW5zZm9ybScpIC8vID0+IFdlYmtpdFRyYW5zZm9ybVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeChrZXkpe1xuICAvLyBDYW1lbCBjYXNlXG4gIGtleSA9IGtleS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihfLCBjaGFyKXtcbiAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gV2l0aG91dCBwcmVmaXhcbiAgaWYgKHN0eWxlW2tleV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGtleVxuXG4gIC8vIFdpdGggcHJlZml4XG4gIHZhciBLZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSlcbiAgdmFyIGkgPSBwcmVmaXhlcy5sZW5ndGhcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ZXNbaV0gKyBLZXlcbiAgICBpZiAoc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG5hbWVcbiAgfVxuXG4gIHJldHVybiBrZXlcbn1cblxuLyoqXG4gKiBNZW1vaXplZCB2ZXJzaW9uIG9mIGBwcmVmaXhgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4TWVtb3ppZWQoa2V5KXtcbiAgcmV0dXJuIGtleSBpbiBtZW1vXG4gICAgPyBtZW1vW2tleV1cbiAgICA6IG1lbW9ba2V5XSA9IHByZWZpeChrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGFzaGVkIHByZWZpeFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeERhc2hlZChrZXkpe1xuICBrZXkgPSBwcmVmaXgoa2V5KVxuICBpZiAodXBwZXIudGVzdChrZXkpKSB7XG4gICAga2V5ID0gJy0nICsga2V5LnJlcGxhY2UodXBwZXIsICctJDEnKVxuICAgIHVwcGVyLmxhc3RJbmRleCA9IDBcbiAgfVxuICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmaXhNZW1vemllZFxubW9kdWxlLmV4cG9ydHMuZGFzaCA9IHByZWZpeERhc2hlZFxuIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgLy8gRm9yIHRoZSBhbHBoYSBvZiB0aGUgdGV4dHVyZVxcbiAgICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBmbG9hdCB1VGltZTtcXG51bmlmb3JtIGZsb2F0IHVTcGVlZDtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7XFxuICAgIHZlYzQgbmV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcblxcbiAgICBuZXdQb3NpdGlvbi56ICs9IChzaW4obmV3UG9zaXRpb24ueCAqIDQuMCArIHVUaW1lKSAqIDEuNSArIGNvcyhuZXdQb3NpdGlvbi55ICogMi4wICsgdVRpbWUpICogMS41KSAqICgwLjEgKyB1U3BlZWQgKiAwLjUpO1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBuZXdQb3NpdGlvbjtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcblxcbnZhcnlpbmcgdmVjNCB2UG9zaXRpb247XFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcblxcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbiAgICAvLyBGb3IgdGhlIGFscGhhIG9mIHRoZSB0ZXh0dXJlXFxuICAgIGdsX0ZyYWdDb2xvci5hID0gdUFscGhhO1xcbn1cIjsiLCJleHBvcnQgZGVmYXVsdCBcIiNkZWZpbmUgR0xTTElGWSAxXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuXFxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2VXYgPSB1djtcXG5cXG4gICAgdmVjNCBuZXdQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxuXFxuICAgIHZQb3NpdGlvbiA9IG5ld1Bvc2l0aW9uO1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBuZXdQb3NpdGlvbjtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgLy8gRm9yIHRoZSBhbHBoYSBvZiB0aGUgdGV4dHVyZVxcbiAgICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1XFxuXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuXFxudW5pZm9ybSBmbG9hdCB1U3BlZWQ7XFxudW5pZm9ybSB2ZWMyIHVWaWV3cG9ydFNpemVzO1xcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcbiAgICB2ZWM0IG5ld1Bvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgLy8gbmV3UG9zaXRpb24ueiArPSBzaW4obmV3UG9zaXRpb24ueSAvIHVWaWV3cG9ydFNpemVzLnkgKiAoUEkpICogKFBJKSAvIDIuMCkgKiBhYnModVNwZWVkKTtcXG4gICAgLy8gdVNwZWVkIGNhdXNlcyBkaXN0b3J0aW9ub24gdGhlIGZyYW1lIHdoZW4gYSB1c2VyIGRyYWdzIHRoZSBwYWdlXFxuICAgIG5ld1Bvc2l0aW9uLnogLT0gKHNpbigobmV3UG9zaXRpb24ueSAvIHVWaWV3cG9ydFNpemVzLnkpICogKFBJKSArIChQSSkgLyAyLjApICsgc2luKChuZXdQb3NpdGlvbi54IC8gdVZpZXdwb3J0U2l6ZXMueCkgKiAoUEkpICsgKFBJKSAvIDIuMCkpICogYWJzKHVTcGVlZCk7XFxuXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG5ld1Bvc2l0aW9uO1xcbn1cIjsiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4jZGVmaW5lIEdMU0xJRlkgMVxcbnVuaWZvcm0gc2FtcGxlcjJEIHRNYXA7XFxudW5pZm9ybSBmbG9hdCB1QWxwaGE7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbiAgICAvLyBGb3IgdGhlIGFscGhhIG9mIHRoZSB0ZXh0dXJlXFxuICAgIGdsX0ZyYWdDb2xvci5hID0gdUFscGhhO1xcbn1cIjsiLCJleHBvcnQgZGVmYXVsdCBcIiNkZWZpbmUgR0xTTElGWSAxXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuXFxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7XFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVwiOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL3V0aWxzL2xvZy5qc1wiO1xudmFyIFdlYlNvY2tldENsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqL1xuICBmdW5jdGlvbiBXZWJTb2NrZXRDbGllbnQodXJsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYlNvY2tldENsaWVudCk7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7XG4gICAgdGhpcy5jbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAqL1xuICBfY3JlYXRlQ2xhc3MoV2ViU29ja2V0Q2xpZW50LCBbe1xuICAgIGtleTogXCJvbk9wZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ub3BlbiA9IGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7XG4gICAgfVxuXG4gICAgLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gV2ViU29ja2V0Q2xpZW50O1xufSgpO1xuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmICh0eXBlb2YgcmVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnksIF9fd2VicGFja19oYXNoX18gKi9cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwid2VicGFjay9tb2R1bGVcIiAvPlxuaW1wb3J0IHdlYnBhY2tIb3RMb2cgZnJvbSBcIndlYnBhY2svaG90L2xvZy5qc1wiO1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tIFwiLi91dGlscy9zdHJpcEFuc2kuanNcIjtcbmltcG9ydCBwYXJzZVVSTCBmcm9tIFwiLi91dGlscy9wYXJzZVVSTC5qc1wiO1xuaW1wb3J0IHNvY2tldCBmcm9tIFwiLi9zb2NrZXQuanNcIjtcbmltcG9ydCB7IGZvcm1hdFByb2JsZW0sIGNyZWF0ZU92ZXJsYXkgfSBmcm9tIFwiLi9vdmVybGF5LmpzXCI7XG5pbXBvcnQgeyBsb2csIGxvZ0VuYWJsZWRGZWF0dXJlcywgc2V0TG9nTGV2ZWwgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjtcbmltcG9ydCBzZW5kTWVzc2FnZSBmcm9tIFwiLi91dGlscy9zZW5kTWVzc2FnZS5qc1wiO1xuaW1wb3J0IHJlbG9hZEFwcCBmcm9tIFwiLi91dGlscy9yZWxvYWRBcHAuanNcIjtcbmltcG9ydCBjcmVhdGVTb2NrZXRVUkwgZnJvbSBcIi4vdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzXCI7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3ZlcmxheU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IGJvb2xlYW59IFt3YXJuaW5nc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IGJvb2xlYW59IFtlcnJvcnNdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCAoZXJyb3I6IEVycm9yKSA9PiBib29sZWFufSBbcnVudGltZUVycm9yc11cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHJ1c3RlZFR5cGVzUG9saWN5TmFtZV1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaG90XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxpdmVSZWxvYWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcHJvZ3Jlc3NcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IE92ZXJsYXlPcHRpb25zfSBvdmVybGF5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xvZ2dpbmddXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3JlY29ubmVjdF1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXR1c1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc1VubG9hZGluZ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnJlbnRIYXNoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ByZXZpb3VzSGFzaF1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IHsgd2FybmluZ3M/OiBib29sZWFuIHwgc3RyaW5nOyBlcnJvcnM/OiBib29sZWFuIHwgc3RyaW5nOyBydW50aW1lRXJyb3JzPzogYm9vbGVhbiB8IHN0cmluZzsgfX0gb3ZlcmxheU9wdGlvbnNcbiAqL1xudmFyIGRlY29kZU92ZXJsYXlPcHRpb25zID0gZnVuY3Rpb24gZGVjb2RlT3ZlcmxheU9wdGlvbnMob3ZlcmxheU9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvdmVybGF5T3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgIFtcIndhcm5pbmdzXCIsIFwiZXJyb3JzXCIsIFwicnVudGltZUVycm9yc1wiXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgaWYgKHR5cGVvZiBvdmVybGF5T3B0aW9uc1twcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG92ZXJsYXlGaWx0ZXJGdW5jdGlvblN0cmluZyA9IGRlY29kZVVSSUNvbXBvbmVudChvdmVybGF5T3B0aW9uc1twcm9wZXJ0eV0pO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgICB2YXIgb3ZlcmxheUZpbHRlckZ1bmN0aW9uID0gbmV3IEZ1bmN0aW9uKFwibWVzc2FnZVwiLCBcInZhciBjYWxsYmFjayA9IFwiLmNvbmNhdChvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmcsIFwiXFxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSlcIikpO1xuICAgICAgICBvdmVybGF5T3B0aW9uc1twcm9wZXJ0eV0gPSBvdmVybGF5RmlsdGVyRnVuY3Rpb247XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGUge1N0YXR1c31cbiAqL1xudmFyIHN0YXR1cyA9IHtcbiAgaXNVbmxvYWRpbmc6IGZhbHNlLFxuICAvLyBUT0RPIFdvcmthcm91bmQgZm9yIHdlYnBhY2sgdjQsIGBfX3dlYnBhY2tfaGFzaF9fYCBpcyBub3QgcmVwbGFjZWQgd2l0aG91dCBIb3RNb2R1bGVSZXBsYWNlbWVudFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIGN1cnJlbnRIYXNoOiB0eXBlb2YgX193ZWJwYWNrX2hhc2hfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19oYXNoX18gOiBcIlwiXG59O1xuXG4vKiogQHR5cGUge09wdGlvbnN9ICovXG52YXIgb3B0aW9ucyA9IHtcbiAgaG90OiBmYWxzZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIHByb2dyZXNzOiBmYWxzZSxcbiAgb3ZlcmxheTogZmFsc2Vcbn07XG52YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9IHBhcnNlVVJMKF9fcmVzb3VyY2VRdWVyeSk7XG52YXIgZW5hYmxlZEZlYXR1cmVzID0ge1xuICBcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcIjogZmFsc2UsXG4gIFwiTGl2ZSBSZWxvYWRpbmdcIjogZmFsc2UsXG4gIFByb2dyZXNzOiBmYWxzZSxcbiAgT3ZlcmxheTogZmFsc2Vcbn07XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgZW5hYmxlZEZlYXR1cmVzW1wiSG90IE1vZHVsZSBSZXBsYWNlbWVudFwiXSA9IHRydWU7XG59XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcInRydWVcIikge1xuICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlO1xuICBlbmFibGVkRmVhdHVyZXNbXCJMaXZlIFJlbG9hZGluZ1wiXSA9IHRydWU7XG59XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5wcm9ncmVzcyA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5wcm9ncmVzcyA9IHRydWU7XG4gIGVuYWJsZWRGZWF0dXJlcy5Qcm9ncmVzcyA9IHRydWU7XG59XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5vdmVybGF5KSB7XG4gIHRyeSB7XG4gICAgb3B0aW9ucy5vdmVybGF5ID0gSlNPTi5wYXJzZShwYXJzZWRSZXNvdXJjZVF1ZXJ5Lm92ZXJsYXkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yKFwiRXJyb3IgcGFyc2luZyBvdmVybGF5IG9wdGlvbnMgZnJvbSByZXNvdXJjZSBxdWVyeTpcIiwgZSk7XG4gIH1cblxuICAvLyBGaWxsIGluIGRlZmF1bHQgXCJ0cnVlXCIgcGFyYW1zIGZvciBwYXJ0aWFsbHktc3BlY2lmaWVkIG9iamVjdHMuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0aW9ucy5vdmVybGF5ID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBlcnJvcnM6IHRydWUsXG4gICAgICB3YXJuaW5nczogdHJ1ZSxcbiAgICAgIHJ1bnRpbWVFcnJvcnM6IHRydWVcbiAgICB9LCBvcHRpb25zLm92ZXJsYXkpO1xuICAgIGRlY29kZU92ZXJsYXlPcHRpb25zKG9wdGlvbnMub3ZlcmxheSk7XG4gIH1cbiAgZW5hYmxlZEZlYXR1cmVzLk92ZXJsYXkgPSB0cnVlO1xufVxuaWYgKHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZykge1xuICBvcHRpb25zLmxvZ2dpbmcgPSBwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmc7XG59XG5pZiAodHlwZW9mIHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIG9wdGlvbnMucmVjb25uZWN0ID0gTnVtYmVyKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxcbiAqL1xuZnVuY3Rpb24gc2V0QWxsTG9nTGV2ZWwobGV2ZWwpIHtcbiAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgSE1SIGxvZ2dlciBvcGVyYXRlIHNlcGFyYXRlbHkgZnJvbSBkZXYgc2VydmVyIGxvZ2dlclxuICB3ZWJwYWNrSG90TG9nLnNldExvZ0xldmVsKGxldmVsID09PSBcInZlcmJvc2VcIiB8fCBsZXZlbCA9PT0gXCJsb2dcIiA/IFwiaW5mb1wiIDogbGV2ZWwpO1xuICBzZXRMb2dMZXZlbChsZXZlbCk7XG59XG5pZiAob3B0aW9ucy5sb2dnaW5nKSB7XG4gIHNldEFsbExvZ0xldmVsKG9wdGlvbnMubG9nZ2luZyk7XG59XG5sb2dFbmFibGVkRmVhdHVyZXMoZW5hYmxlZEZlYXR1cmVzKTtcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcbnZhciBvdmVybGF5ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IGNyZWF0ZU92ZXJsYXkodHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJvYmplY3RcIiA/IHtcbiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogb3B0aW9ucy5vdmVybGF5LnRydXN0ZWRUeXBlc1BvbGljeU5hbWUsXG4gIGNhdGNoUnVudGltZUVycm9yOiBvcHRpb25zLm92ZXJsYXkucnVudGltZUVycm9yc1xufSA6IHtcbiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogZmFsc2UsXG4gIGNhdGNoUnVudGltZUVycm9yOiBvcHRpb25zLm92ZXJsYXlcbn0pIDoge1xuICBzZW5kOiBmdW5jdGlvbiBzZW5kKCkge31cbn07XG52YXIgb25Tb2NrZXRNZXNzYWdlID0ge1xuICBob3Q6IGZ1bmN0aW9uIGhvdCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvcHRpb25zLmhvdCA9IHRydWU7XG4gIH0sXG4gIGxpdmVSZWxvYWQ6IGZ1bmN0aW9uIGxpdmVSZWxvYWQoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbXCJsaXZlLXJlbG9hZFwiXSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIH0sXG4gIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7XG4gICAgbG9nLmluZm8oXCJBcHAgdXBkYXRlZC4gUmVjb21waWxpbmcuLi5cIik7XG5cbiAgICAvLyBGaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBvdmVybGF5LnNlbmQoe1xuICAgICAgICB0eXBlOiBcIkRJU01JU1NcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKFwiSW52YWxpZFwiKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoXG4gICAqL1xuICBoYXNoOiBmdW5jdGlvbiBoYXNoKF9oYXNoKSB7XG4gICAgc3RhdHVzLnByZXZpb3VzSGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaDtcbiAgICBzdGF0dXMuY3VycmVudEhhc2ggPSBfaGFzaDtcbiAgfSxcbiAgbG9nZ2luZzogc2V0QWxsTG9nTGV2ZWwsXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvcHRpb25zLm92ZXJsYXkgPSB2YWx1ZTtcbiAgICBkZWNvZGVPdmVybGF5T3B0aW9ucyhvcHRpb25zLm92ZXJsYXkpO1xuICB9LFxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqL1xuICByZWNvbm5lY3Q6IGZ1bmN0aW9uIHJlY29ubmVjdCh2YWx1ZSkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMucmVjb25uZWN0ID0gdmFsdWU7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBvcHRpb25zLnByb2dyZXNzID0gdmFsdWU7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge3sgcGx1Z2luTmFtZT86IHN0cmluZywgcGVyY2VudDogbnVtYmVyLCBtc2c6IHN0cmluZyB9fSBkYXRhXG4gICAqL1xuICBcInByb2dyZXNzLXVwZGF0ZVwiOiBmdW5jdGlvbiBwcm9ncmVzc1VwZGF0ZShkYXRhKSB7XG4gICAgaWYgKG9wdGlvbnMucHJvZ3Jlc3MpIHtcbiAgICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSA/IFwiW1wiLmNvbmNhdChkYXRhLnBsdWdpbk5hbWUsIFwiXSBcIikgOiBcIlwiKS5jb25jYXQoZGF0YS5wZXJjZW50LCBcIiUgLSBcIikuY29uY2F0KGRhdGEubXNnLCBcIi5cIikpO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcIlByb2dyZXNzXCIsIGRhdGEpO1xuICB9LFxuICBcInN0aWxsLW9rXCI6IGZ1bmN0aW9uIHN0aWxsT2soKSB7XG4gICAgbG9nLmluZm8oXCJOb3RoaW5nIGNoYW5nZWQuXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJTdGlsbE9rXCIpO1xuICB9LFxuICBvazogZnVuY3Rpb24gb2soKSB7XG4gICAgc2VuZE1lc3NhZ2UoXCJPa1wiKTtcbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBvdmVybGF5LnNlbmQoe1xuICAgICAgICB0eXBlOiBcIkRJU01JU1NcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAvLyBUT0RPOiByZW1vdmUgaW4gdjUgaW4gZmF2b3Igb2YgJ3N0YXRpYy1jaGFuZ2VkJ1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVcbiAgICovXG4gIFwiY29udGVudC1jaGFuZ2VkXCI6IGZ1bmN0aW9uIGNvbnRlbnRDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlXG4gICAqL1xuICBcInN0YXRpYy1jaGFuZ2VkXCI6IGZ1bmN0aW9uIHN0YXRpY0NoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcltdfSB3YXJuaW5nc1xuICAgKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gICAqL1xuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzLCBwYXJhbXMpIHtcbiAgICBsb2cud2FybihcIldhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy5cIik7XG4gICAgdmFyIHByaW50YWJsZVdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbSA9IGZvcm1hdFByb2JsZW0oXCJ3YXJuaW5nXCIsIGVycm9yKSxcbiAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0uaGVhZGVyLFxuICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXIsIFwiXFxuXCIpLmNvbmNhdChzdHJpcEFuc2koYm9keSkpO1xuICAgIH0pO1xuICAgIHNlbmRNZXNzYWdlKFwiV2FybmluZ3NcIiwgcHJpbnRhYmxlV2FybmluZ3MpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlV2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy53YXJuKHByaW50YWJsZVdhcm5pbmdzW2ldKTtcbiAgICB9XG4gICAgdmFyIG92ZXJsYXlXYXJuaW5nc1NldHRpbmcgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkud2FybmluZ3M7XG4gICAgaWYgKG92ZXJsYXlXYXJuaW5nc1NldHRpbmcpIHtcbiAgICAgIHZhciB3YXJuaW5nc1RvRGlzcGxheSA9IHR5cGVvZiBvdmVybGF5V2FybmluZ3NTZXR0aW5nID09PSBcImZ1bmN0aW9uXCIgPyBfd2FybmluZ3MuZmlsdGVyKG92ZXJsYXlXYXJuaW5nc1NldHRpbmcpIDogX3dhcm5pbmdzO1xuICAgICAgaWYgKHdhcm5pbmdzVG9EaXNwbGF5Lmxlbmd0aCkge1xuICAgICAgICBvdmVybGF5LnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiQlVJTERfRVJST1JcIixcbiAgICAgICAgICBsZXZlbDogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgbWVzc2FnZXM6IF93YXJuaW5nc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMucHJldmVudFJlbG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gZXJyb3JzXG4gICAqL1xuICBlcnJvcnM6IGZ1bmN0aW9uIGVycm9ycyhfZXJyb3JzKSB7XG4gICAgbG9nLmVycm9yKFwiRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC5cIik7XG4gICAgdmFyIHByaW50YWJsZUVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtMiA9IGZvcm1hdFByb2JsZW0oXCJlcnJvclwiLCBlcnJvciksXG4gICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtMi5oZWFkZXIsXG4gICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbTIuYm9keTtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXIsIFwiXFxuXCIpLmNvbmNhdChzdHJpcEFuc2koYm9keSkpO1xuICAgIH0pO1xuICAgIHNlbmRNZXNzYWdlKFwiRXJyb3JzXCIsIHByaW50YWJsZUVycm9ycyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVFcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy5lcnJvcihwcmludGFibGVFcnJvcnNbaV0pO1xuICAgIH1cbiAgICB2YXIgb3ZlcmxheUVycm9yc1NldHRpbmdzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5LmVycm9ycztcbiAgICBpZiAob3ZlcmxheUVycm9yc1NldHRpbmdzKSB7XG4gICAgICB2YXIgZXJyb3JzVG9EaXNwbGF5ID0gdHlwZW9mIG92ZXJsYXlFcnJvcnNTZXR0aW5ncyA9PT0gXCJmdW5jdGlvblwiID8gX2Vycm9ycy5maWx0ZXIob3ZlcmxheUVycm9yc1NldHRpbmdzKSA6IF9lcnJvcnM7XG4gICAgICBpZiAoZXJyb3JzVG9EaXNwbGF5Lmxlbmd0aCkge1xuICAgICAgICBvdmVybGF5LnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiQlVJTERfRVJST1JcIixcbiAgICAgICAgICBsZXZlbDogXCJlcnJvclwiLFxuICAgICAgICAgIG1lc3NhZ2VzOiBfZXJyb3JzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAqL1xuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgbG9nLmVycm9yKF9lcnJvcik7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBsb2cuaW5mbyhcIkRpc2Nvbm5lY3RlZCFcIik7XG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJESVNNSVNTXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcIkNsb3NlXCIpO1xuICB9XG59O1xudmFyIHNvY2tldFVSTCA9IGNyZWF0ZVNvY2tldFVSTChwYXJzZWRSZXNvdXJjZVF1ZXJ5KTtcbnNvY2tldChzb2NrZXRVUkwsIG9uU29ja2V0TWVzc2FnZSwgb3B0aW9ucy5yZWNvbm5lY3QpOyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cblxuLyoqXG4gKiBDbGllbnQgc3R1YiBmb3IgdGFwYWJsZSBTeW5jQmFpbEhvb2tcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyWyh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpO1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG52YXIgTG9nVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICBlcnJvcjogLyoqIEB0eXBlIHtcImVycm9yXCJ9ICovXCJlcnJvclwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB3YXJuOiAvKiogQHR5cGUge1wid2FyblwifSAqL1wid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOiAvKiogQHR5cGUge1wiaW5mb1wifSAqL1wiaW5mb1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBsb2c6IC8qKiBAdHlwZSB7XCJsb2dcIn0gKi9cImxvZ1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBkZWJ1ZzogLyoqIEB0eXBlIHtcImRlYnVnXCJ9ICovXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuXG4gIHRyYWNlOiAvKiogQHR5cGUge1widHJhY2VcIn0gKi9cInRyYWNlXCIsXG4gIC8vIG5vIGFyZ3VtZW50c1xuXG4gIGdyb3VwOiAvKiogQHR5cGUge1wiZ3JvdXBcIn0gKi9cImdyb3VwXCIsXG4gIC8vIFtsYWJlbF1cbiAgZ3JvdXBDb2xsYXBzZWQ6IC8qKiBAdHlwZSB7XCJncm91cENvbGxhcHNlZFwifSAqL1wiZ3JvdXBDb2xsYXBzZWRcIixcbiAgLy8gW2xhYmVsXVxuICBncm91cEVuZDogLyoqIEB0eXBlIHtcImdyb3VwRW5kXCJ9ICovXCJncm91cEVuZFwiLFxuICAvLyBbbGFiZWxdXG5cbiAgcHJvZmlsZTogLyoqIEB0eXBlIHtcInByb2ZpbGVcIn0gKi9cInByb2ZpbGVcIixcbiAgLy8gW3Byb2ZpbGVOYW1lXVxuICBwcm9maWxlRW5kOiAvKiogQHR5cGUge1wicHJvZmlsZUVuZFwifSAqL1wicHJvZmlsZUVuZFwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG5cbiAgdGltZTogLyoqIEB0eXBlIHtcInRpbWVcIn0gKi9cInRpbWVcIixcbiAgLy8gbmFtZSwgdGltZSBhcyBbc2Vjb25kcywgbmFub3NlY29uZHNdXG5cbiAgY2xlYXI6IC8qKiBAdHlwZSB7XCJjbGVhclwifSAqL1wiY2xlYXJcIixcbiAgLy8gbm8gYXJndW1lbnRzXG4gIHN0YXR1czogLyoqIEB0eXBlIHtcInN0YXR1c1wifSAqL1wic3RhdHVzXCIgLy8gbWVzc2FnZSwgYXJndW1lbnRzXG59KTtcblxuZXhwb3J0cy5Mb2dUeXBlID0gTG9nVHlwZTtcblxuLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovXG5cbnZhciBMT0dfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciByYXcgbG9nIG1ldGhvZFwiKTtcbnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciB0aW1lc1wiKTtcbnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXNcIik7XG52YXIgV2VicGFja0xvZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvZ1R5cGVFbnVtLCBhbnlbXT0pOiB2b2lkfSBsb2cgbG9nIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nIHwgZnVuY3Rpb24oKTogc3RyaW5nKTogV2VicGFja0xvZ2dlcn0gZ2V0Q2hpbGRMb2dnZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGNoaWxkIGxvZ2dlclxuICAgKi9cbiAgZnVuY3Rpb24gV2VicGFja0xvZ2dlcihsb2csIGdldENoaWxkTG9nZ2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYnBhY2tMb2dnZXIpO1xuICAgIHRoaXNbTE9HX1NZTUJPTF0gPSBsb2c7XG4gICAgdGhpcy5nZXRDaGlsZExvZ2dlciA9IGdldENoaWxkTG9nZ2VyO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhXZWJwYWNrTG9nZ2VyLCBbe1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmVycm9yLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid2FyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3YXJuKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS53YXJuLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmZvKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5pbmZvLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUubG9nLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVidWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmRlYnVnLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXNzZXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24pIHtcbiAgICAgIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDEgPyBfbGVuNiAtIDEgOiAwKSwgX2tleTYgPSAxOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NiAtIDFdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgW1wiVHJhY2VcIl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnN0YXR1cywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwQ29sbGFwc2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VkKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwRW5kLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZSwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZUVuZChsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGVFbmQsIFtsYWJlbF0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uc2V0KGxhYmVsLCBwcm9jZXNzLmhydGltZSgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lTG9nKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVMb2coKVwiKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUVuZCgpXCIpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVBZ2dyZWdhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZShsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lQWdncmVnYXRlKClcIikpO1xuICAgICAgfVxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGltZVsxXSArIGN1cnJlbnRbMV0gPiAxZTkpIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF0gKyAxO1xuICAgICAgICAgIHRpbWVbMV0gPSB0aW1lWzFdIC0gMWU5ICsgY3VycmVudFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF07XG4gICAgICAgICAgdGltZVsxXSArPSBjdXJyZW50WzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7XG4gICAgICBpZiAodGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFdlYnBhY2tMb2dnZXI7XG59KCk7XG5leHBvcnRzLkxvZ2dlciA9IFdlYnBhY2tMb2dnZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG5cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcbiAgcmV0dXJuIGFycjI7XG59XG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICBMb2dUeXBlID0gX3JlcXVpcmUuTG9nVHlwZTtcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlclR5cGVzfSBGaWx0ZXJUeXBlcyAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuL0xvZ2dlclwiKS5Mb2dUeXBlRW51bX0gTG9nVHlwZUVudW0gKi9cblxuLyoqIEB0eXBlZGVmIHtmdW5jdGlvbihzdHJpbmcpOiBib29sZWFufSBGaWx0ZXJGdW5jdGlvbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlckNvbnNvbGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogdm9pZH0gY2xlYXJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogdm9pZH0gdHJhY2VcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBpbmZvXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gbG9nXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gd2FyblxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGVycm9yXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGRlYnVnXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGdyb3VwXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGdyb3VwQ29sbGFwc2VkXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGdyb3VwRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IHN0YXR1c1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IHByb2ZpbGVFbmRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gbG9nVGltZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTG9nZ2VyT3B0aW9uc1xuICogQHByb3BlcnR5IHtmYWxzZXx0cnVlfFwibm9uZVwifFwiZXJyb3JcInxcIndhcm5cInxcImluZm9cInxcImxvZ1wifFwidmVyYm9zZVwifSBsZXZlbCBsb2dsZXZlbFxuICogQHByb3BlcnR5IHtGaWx0ZXJUeXBlc3xib29sZWFufSBkZWJ1ZyBmaWx0ZXIgZm9yIGRlYnVnIGxvZ2dpbmdcbiAqIEBwcm9wZXJ0eSB7TG9nZ2VyQ29uc29sZX0gY29uc29sZSB0aGUgY29uc29sZSB0byBsb2cgdG9cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RmlsdGVySXRlbVR5cGVzfSBpdGVtIGFuIGlucHV0IGl0ZW1cbiAqIEByZXR1cm5zIHtGaWx0ZXJGdW5jdGlvbn0gZmlsdGVyIGZ1bmN0aW9uXG4gKi9cbnZhciBmaWx0ZXJUb0Z1bmN0aW9uID0gZnVuY3Rpb24gZmlsdGVyVG9GdW5jdGlvbihpdGVtKSB7XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKFwiW1xcXFxcXFxcL11cIi5jb25jYXQoaXRlbS5yZXBsYWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cbiAgaWYgKGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGl0ZW0udGVzdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpZGVudCkge1xuICAgICAgcmV0dXJuIGl0ZW0udGVzdChpZGVudCk7XG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG52YXIgTG9nTGV2ZWwgPSB7XG4gIG5vbmU6IDYsXG4gIGZhbHNlOiA2LFxuICBlcnJvcjogNSxcbiAgd2FybjogNCxcbiAgaW5mbzogMyxcbiAgbG9nOiAyLFxuICB0cnVlOiAyLFxuICB2ZXJib3NlOiAxXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBfcmVmJGxldmVsID0gX3JlZi5sZXZlbCxcbiAgICBsZXZlbCA9IF9yZWYkbGV2ZWwgPT09IHZvaWQgMCA/IFwiaW5mb1wiIDogX3JlZiRsZXZlbCxcbiAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICBkZWJ1ZyA9IF9yZWYkZGVidWcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkZWJ1ZyxcbiAgICBjb25zb2xlID0gX3JlZi5jb25zb2xlO1xuICB2YXIgZGVidWdGaWx0ZXJzID0gdHlwZW9mIGRlYnVnID09PSBcImJvb2xlYW5cIiA/IFtmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlYnVnO1xuICB9XSA6IC8qKiBAdHlwZSB7RmlsdGVySXRlbVR5cGVzW119ICovW10uY29uY2F0KGRlYnVnKS5tYXAoZmlsdGVyVG9GdW5jdGlvbik7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB2YXIgbG9nbGV2ZWwgPSBMb2dMZXZlbFtcIlwiLmNvbmNhdChsZXZlbCldIHx8IDA7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlclxuICAgKiBAcGFyYW0ge0xvZ1R5cGVFbnVtfSB0eXBlIHR5cGUgb2YgdGhlIGxvZyBlbnRyeVxuICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIGFyZ3VtZW50cyBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdmFyIGxvZ2dlciA9IGZ1bmN0aW9uIGxvZ2dlcihuYW1lLCB0eXBlLCBhcmdzKSB7XG4gICAgdmFyIGxhYmVsZWRBcmdzID0gZnVuY3Rpb24gbGFiZWxlZEFyZ3MoKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuIFtcIltcIi5jb25jYXQobmFtZSwgXCJdIFwiKS5jb25jYXQoYXJnc1swXSldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncy5zbGljZSgxKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXVwiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgTG9nVHlwZS5kZWJ1ZzpcbiAgICAgICAgaWYgKCFkZWJ1ZykgcmV0dXJuO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5kZWJ1ZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLmxvZzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5pbmZvOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLmVycm9yOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuZXJyb3IpIHJldHVybjtcbiAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS50cmFjZTpcbiAgICAgICAgaWYgKCFkZWJ1ZykgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC52ZXJib3NlKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cENvbGxhcHNlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXA6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cEVuZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cEVuZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS50aW1lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAgIHZhciBtcyA9IGFyZ3NbMV0gKiAxMDAwICsgYXJnc1syXSAvIDEwMDAwMDA7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiW1wiLmNvbmNhdChuYW1lLCBcIl0gXCIpLmNvbmNhdChhcmdzWzBdLCBcIjogXCIpLmNvbmNhdChtcywgXCIgbXNcIik7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmxvZ1RpbWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2dUaW1lKG1zZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIExvZ1R5cGUucHJvZmlsZTpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUucHJvZmlsZS5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5jbGVhcjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5zdGF0dXM6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5pbmZvKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIExvZ1R5cGUgXCIuY29uY2F0KHR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxudmFyIFN5bmNCYWlsSG9vayA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHRhcGFibGUvbGliL1N5bmNCYWlsSG9vayAqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCIpO1xudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xudmFyIGNyZWF0ZUNvbnNvbGVMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NyZWF0ZUNvbnNvbGVMb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIik7XG5cbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyA9IHtcbiAgbGV2ZWw6IFwiaW5mb1wiLFxuICBkZWJ1ZzogZmFsc2UsXG4gIGNvbnNvbGU6IGNvbnNvbGVcbn07XG52YXIgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gKiBAcmV0dXJucyB7TG9nZ2VyfSBhIGxvZ2dlclxuICovXG5leHBvcnRzLmdldExvZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuZXcgTG9nZ2VyKGZ1bmN0aW9uICh0eXBlLCBhcmdzKSB7XG4gICAgaWYgKGV4cG9ydHMuaG9va3MubG9nLmNhbGwobmFtZSwgdHlwZSwgYXJncykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudERlZmF1bHRMb2dnZXIobmFtZSwgdHlwZSwgYXJncyk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZ2V0TG9nZ2VyKFwiXCIuY29uY2F0KG5hbWUsIFwiL1wiKS5jb25jYXQoY2hpbGROYW1lKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9uc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG4gIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xufTtcbmV4cG9ydHMuaG9va3MgPSB7XG4gIGxvZzogbmV3IFN5bmNCYWlsSG9vayhbXCJvcmlnaW5cIiwgXCJ0eXBlXCIsIFwiYXJnc1wiXSlcbn07XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIFx0fSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH1cbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbiFmdW5jdGlvbigpIHtcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImRlZmF1bHRcIjogZnVuY3Rpb24oKSB7IHJldHVybiAvKiByZWV4cG9ydCBkZWZhdWx0IGV4cG9ydCBmcm9tIG5hbWVkIG1vZHVsZSAqLyB3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXzsgfVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB3ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanMgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIik7XG5cbn0oKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0cztcbmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTtcbmlmKF9fd2VicGFja19leHBvcnRzX18uX19lc01vZHVsZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gfSkoKVxuOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuLy8gVGhlIGVycm9yIG92ZXJsYXkgaXMgaW5zcGlyZWQgKGFuZCBtb3N0bHkgY29waWVkKSBmcm9tIENyZWF0ZSBSZWFjdCBBcHAgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwKVxuLy8gVGhleSwgaW4gdHVybiwgZ290IGluc3BpcmVkIGJ5IHdlYnBhY2staG90LW1pZGRsZXdhcmUgKGh0dHBzOi8vZ2l0aHViLmNvbS9nbGVuamFtaW4vd2VicGFjay1ob3QtbWlkZGxld2FyZSkuXG5cbmltcG9ydCBhbnNpSFRNTCBmcm9tIFwiYW5zaS1odG1sLWNvbW11bml0eVwiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcImh0bWwtZW50aXRpZXNcIjtcbmltcG9ydCB7IGxpc3RlblRvUnVudGltZUVycm9yLCBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiwgcGFyc2VFcnJvclRvU3RhY2tzIH0gZnJvbSBcIi4vb3ZlcmxheS9ydW50aW1lLWVycm9yLmpzXCI7XG5pbXBvcnQgY3JlYXRlT3ZlcmxheU1hY2hpbmUgZnJvbSBcIi4vb3ZlcmxheS9zdGF0ZS1tYWNoaW5lLmpzXCI7XG5pbXBvcnQgeyBjb250YWluZXJTdHlsZSwgZGlzbWlzc0J1dHRvblN0eWxlLCBoZWFkZXJTdHlsZSwgaWZyYW1lU3R5bGUsIG1zZ1N0eWxlcywgbXNnVGV4dFN0eWxlLCBtc2dUeXBlU3R5bGUgfSBmcm9tIFwiLi9vdmVybGF5L3N0eWxlcy5qc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nW10gfX0gaXRlbVxuICogQHJldHVybnMge3sgaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB9fVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHtcbiAgdmFyIGhlYWRlciA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gXCJXQVJOSU5HXCIgOiBcIkVSUk9SXCI7XG4gIHZhciBib2R5ID0gXCJcIjtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgYm9keSArPSBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHZhciBmaWxlID0gaXRlbS5maWxlIHx8IFwiXCI7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZihcIiFcIikgIT09IC0xID8gXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXFxzfFxcUykqIS8sIFwiXCIpLCBcIiAoXCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSkgOiBcIlwiO1xuICAgIHZhciBsb2MgPSBpdGVtLmxvYztcbiAgICBoZWFkZXIgKz0gXCJcIi5jb25jYXQobW9kdWxlTmFtZSB8fCBmaWxlID8gXCIgaW4gXCIuY29uY2F0KG1vZHVsZU5hbWUgPyBcIlwiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/IFwiIChcIi5jb25jYXQoZmlsZSwgXCIpXCIpIDogXCJcIikgOiBmaWxlKS5jb25jYXQobG9jID8gXCIgXCIuY29uY2F0KGxvYykgOiBcIlwiKSA6IFwiXCIpO1xuICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8IFwiXCI7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS5zdGFjaykpIHtcbiAgICBpdGVtLnN0YWNrLmZvckVhY2goZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJvZHkgKz0gXCJcXHJcXG5cIi5jb25jYXQoc3RhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgYm9keTogYm9keVxuICB9O1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENyZWF0ZU92ZXJsYXlPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IHZvaWR9IFtjYXRjaFJ1bnRpbWVFcnJvcl1cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5ID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheShvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbiAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gIHZhciBjb250YWluZXJFbGVtZW50O1xuICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgdmFyIGhlYWRlckVsZW1lbnQ7XG4gIC8qKiBAdHlwZSB7QXJyYXk8KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkPn0gKi9cbiAgdmFyIG9uTG9hZFF1ZXVlID0gW107XG4gIC8qKiBAdHlwZSB7VHJ1c3RlZFR5cGVQb2xpY3kgfCB1bmRlZmluZWR9ICovXG4gIHZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5U3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlW3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICAvLyBFbmFibGUgVHJ1c3RlZCBUeXBlcyBpZiB0aGV5IGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xuICAgICAgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgXCJ3ZWJwYWNrLWRldi1zZXJ2ZXIjb3ZlcmxheVwiLCB7XG4gICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXlcIjtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICBhcHBseVN0eWxlKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQsIGlmcmFtZVN0eWxlKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjb250ZW50RWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgICAgYXBwbHlTdHlsZShjb250ZW50RWxlbWVudCwgY29udGFpbmVyU3R5bGUpO1xuICAgICAgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICAgIGFwcGx5U3R5bGUoaGVhZGVyRWxlbWVudCwgaGVhZGVyU3R5bGUpO1xuICAgICAgdmFyIGNsb3NlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBhcHBseVN0eWxlKGNsb3NlQnV0dG9uRWxlbWVudCwgZGlzbWlzc0J1dHRvblN0eWxlKTtcbiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5pbm5lclRleHQgPSBcIsOXXCI7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuYXJpYUxhYmVsID0gXCJEaXNtaXNzXCI7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG92ZXJsYXlTZXJ2aWNlLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTtcbiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXJFbGVtZW50KTtcblxuICAgICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cbiAgICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRlbnRFbGVtZW50KTtcbiAgICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgICBvbkxvYWQoIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovY29udGVudEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgICBvbkxvYWRRdWV1ZSA9IFtdO1xuXG4gICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyhlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXG4gICAqL1xuICBmdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7XG4gICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgaWYgKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpO1xuICB9XG5cbiAgLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBpZiAoIWlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8vIENvbXBpbGF0aW9uIHdpdGggZXJyb3JzIChlLmcuIHN5bnRheCBlcnJvciBvciBtaXNzaW5nIG1vZHVsZXMpLlxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmcgIHwgeyBtb2R1bGVJZGVudGlmaWVyPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfT59IG1lc3NhZ2VzXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKiBAcGFyYW0geydidWlsZCcgfCAncnVudGltZSd9IG1lc3NhZ2VTb3VyY2VcbiAgICovXG4gIGZ1bmN0aW9uIHNob3codHlwZSwgbWVzc2FnZXMsIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUsIG1lc3NhZ2VTb3VyY2UpIHtcbiAgICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGhlYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gbWVzc2FnZVNvdXJjZSA9PT0gXCJydW50aW1lXCIgPyBcIlVuY2F1Z2h0IHJ1bnRpbWUgZXJyb3JzOlwiIDogXCJDb21waWxlZCB3aXRoIHByb2JsZW1zOlwiO1xuICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zZ1N0eWxlID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBtc2dTdHlsZXMud2FybmluZyA6IG1zZ1N0eWxlcy5lcnJvcjtcbiAgICAgICAgYXBwbHlTdHlsZShlbnRyeUVsZW1lbnQsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbXNnU3R5bGUpLCB7fSwge1xuICAgICAgICAgIHBhZGRpbmc6IFwiMXJlbSAxcmVtIDEuNXJlbSAxcmVtXCJcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgdHlwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcbiAgICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgICBhcHBseVN0eWxlKHR5cGVFbGVtZW50LCBtc2dUeXBlU3R5bGUpO1xuICAgICAgICBpZiAobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwge1xuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIGVsZW1lbnQuZGF0YXNldCBub3Qgc3VwcG9ydGVkIGluIElFXG4gICAgICAgICAgdHlwZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jYW4tb3BlblwiLCB0cnVlKTtcbiAgICAgICAgICB0eXBlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZmV0Y2goXCIvd2VicGFjay1kZXYtc2VydmVyL29wZW4tZWRpdG9yP2ZpbGVOYW1lPVwiLmNvbmNhdChtZXNzYWdlLm1vZHVsZUlkZW50aWZpZXIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cbiAgICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgICB2YXIgbWVzc2FnZVRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYXBwbHlTdHlsZShtZXNzYWdlVGV4dE5vZGUsIG1zZ1RleHRTdHlsZSk7XG4gICAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKHRleHQpIDogdGV4dDtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VUZXh0Tm9kZSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cbiAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbnRyeUVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7XG4gIH1cbiAgdmFyIG92ZXJsYXlTZXJ2aWNlID0gY3JlYXRlT3ZlcmxheU1hY2hpbmUoe1xuICAgIHNob3dPdmVybGF5OiBmdW5jdGlvbiBzaG93T3ZlcmxheShfcmVmKSB7XG4gICAgICB2YXIgX3JlZiRsZXZlbCA9IF9yZWYubGV2ZWwsXG4gICAgICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gXCJlcnJvclwiIDogX3JlZiRsZXZlbCxcbiAgICAgICAgbWVzc2FnZXMgPSBfcmVmLm1lc3NhZ2VzLFxuICAgICAgICBtZXNzYWdlU291cmNlID0gX3JlZi5tZXNzYWdlU291cmNlO1xuICAgICAgcmV0dXJuIHNob3cobGV2ZWwsIG1lc3NhZ2VzLCBvcHRpb25zLnRydXN0ZWRUeXBlc1BvbGljeU5hbWUsIG1lc3NhZ2VTb3VyY2UpO1xuICAgIH0sXG4gICAgaGlkZU92ZXJsYXk6IGhpZGVcbiAgfSk7XG4gIGlmIChvcHRpb25zLmNhdGNoUnVudGltZUVycm9yKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFcnJvciB8IHVuZGVmaW5lZH0gZXJyb3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmFsbGJhY2tNZXNzYWdlXG4gICAgICovXG4gICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IsIGZhbGxiYWNrTWVzc2FnZSkge1xuICAgICAgdmFyIGVycm9yT2JqZWN0ID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKGVycm9yIHx8IGZhbGxiYWNrTWVzc2FnZSk7XG4gICAgICB2YXIgc2hvdWxkRGlzcGxheSA9IHR5cGVvZiBvcHRpb25zLmNhdGNoUnVudGltZUVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmNhdGNoUnVudGltZUVycm9yKGVycm9yT2JqZWN0KSA6IHRydWU7XG4gICAgICBpZiAoc2hvdWxkRGlzcGxheSkge1xuICAgICAgICBvdmVybGF5U2VydmljZS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIlJVTlRJTUVfRVJST1JcIixcbiAgICAgICAgICBtZXNzYWdlczogW3tcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yT2JqZWN0Lm1lc3NhZ2UsXG4gICAgICAgICAgICBzdGFjazogcGFyc2VFcnJvclRvU3RhY2tzKGVycm9yT2JqZWN0KVxuICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgbGlzdGVuVG9SdW50aW1lRXJyb3IoZnVuY3Rpb24gKGVycm9yRXZlbnQpIHtcbiAgICAgIC8vIGVycm9yIHByb3BlcnR5IG1heSBiZSBlbXB0eSBpbiBvbGRlciBicm93c2VyIGxpa2UgSUVcbiAgICAgIHZhciBlcnJvciA9IGVycm9yRXZlbnQuZXJyb3IsXG4gICAgICAgIG1lc3NhZ2UgPSBlcnJvckV2ZW50Lm1lc3NhZ2U7XG4gICAgICBpZiAoIWVycm9yICYmICFtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGhhbmRsZUVycm9yKGVycm9yLCBtZXNzYWdlKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbihmdW5jdGlvbiAocHJvbWlzZVJlamVjdGlvbkV2ZW50KSB7XG4gICAgICB2YXIgcmVhc29uID0gcHJvbWlzZVJlamVjdGlvbkV2ZW50LnJlYXNvbjtcbiAgICAgIGhhbmRsZUVycm9yKHJlYXNvbiwgXCJVbmtub3duIHByb21pc2UgcmVqZWN0aW9uIHJlYXNvblwiKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3ZlcmxheVNlcnZpY2U7XG59O1xuZXhwb3J0IHsgZm9ybWF0UHJvYmxlbSwgY3JlYXRlT3ZlcmxheSB9OyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0ZURlZmluaXRpb25zXG4gKiBAcHJvcGVydHkge3tbZXZlbnQ6IHN0cmluZ106IHsgdGFyZ2V0OiBzdHJpbmc7IGFjdGlvbnM/OiBBcnJheTxzdHJpbmc+IH19fSBbb25dXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge3tbc3RhdGU6IHN0cmluZ106IFN0YXRlRGVmaW5pdGlvbnN9fSBzdGF0ZXNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0O1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGluaXRpYWxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEltcGxlbWVudGF0aW9uXG4gKiBAcHJvcGVydHkge3tbYWN0aW9uTmFtZTogc3RyaW5nXTogKGN0eDogb2JqZWN0LCBldmVudDogYW55KSA9PiBvYmplY3R9fSBhY3Rpb25zXG4gKi9cblxuLyoqXG4gKiBBIHNpbXBsaWZpZWQgYGNyZWF0ZU1hY2hpbmVgIGZyb20gYEB4c3RhdGUvZnNtYCB3aXRoIHRoZSBmb2xsb3dpbmcgZGlmZmVyZW5jZXM6XG4gKlxuICogIC0gdGhlIHJldHVybmVkIG1hY2hpbmUgaXMgdGVjaG5pY2FsbHkgYSBcInNlcnZpY2VcIi4gTm8gYGludGVycHJldChtYWNoaW5lKS5zdGFydCgpYCBpcyBuZWVkZWQuXG4gKiAgLSB0aGUgc3RhdGUgZGVmaW5pdGlvbiBvbmx5IHN1cHBvcnQgYG9uYCBhbmQgdGFyZ2V0IG11c3QgYmUgZGVjbGFyZWQgd2l0aCB7IHRhcmdldDogJ25leHRTdGF0ZScsIGFjdGlvbnM6IFtdIH0gZXhwbGljaXRseS5cbiAqICAtIGV2ZW50IHBhc3NlZCB0byBgc2VuZGAgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBgdHlwZWAgcHJvcGVydHkuXG4gKiAgLSBhY3Rpb25zIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgW2Fzc2lnbiBhY3Rpb25dKGh0dHBzOi8veHN0YXRlLmpzLm9yZy9kb2NzL2d1aWRlcy9jb250ZXh0Lmh0bWwjYXNzaWduLWFjdGlvbikgaWYgeW91IHJldHVybiBhbnkgdmFsdWUuXG4gKiAgRG8gbm90IHJldHVybiBhbnl0aGluZyBpZiB5b3UganVzdCB3YW50IHRvIGludm9rZSBzaWRlIGVmZmVjdC5cbiAqXG4gKiBUaGUgZ29hbCBvZiB0aGlzIGN1c3RvbSBmdW5jdGlvbiBpcyB0byBhdm9pZCBpbnN0YWxsaW5nIHRoZSBlbnRpcmUgYCd4c3RhdGUvZnNtJ2AgcGFja2FnZSwgd2hpbGUgZW5hYmxpbmcgbW9kZWxpbmcgdXNpbmdcbiAqIHN0YXRlIG1hY2hpbmUuIFlvdSBjYW4gY29weSB0aGUgZmlyc3QgcGFyYW1ldGVyIGludG8gdGhlIGVkaXRvciBhdCBodHRwczovL3N0YXRlbHkuYWkvdml6IHRvIHZpc3VhbGl6ZSB0aGUgc3RhdGUgbWFjaGluZS5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7SW1wbGVtZW50YXRpb259IGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgaW5pdGlhbCA9IF9yZWYuaW5pdGlhbDtcbiAgdmFyIGFjdGlvbnMgPSBfcmVmMi5hY3Rpb25zO1xuICB2YXIgY3VycmVudFN0YXRlID0gaW5pdGlhbDtcbiAgdmFyIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIHtcbiAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKGV2ZW50KSB7XG4gICAgICB2YXIgY3VycmVudFN0YXRlT24gPSBzdGF0ZXNbY3VycmVudFN0YXRlXS5vbjtcbiAgICAgIHZhciB0cmFuc2l0aW9uQ29uZmlnID0gY3VycmVudFN0YXRlT24gJiYgY3VycmVudFN0YXRlT25bZXZlbnQudHlwZV07XG4gICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZykge1xuICAgICAgICBjdXJyZW50U3RhdGUgPSB0cmFuc2l0aW9uQ29uZmlnLnRhcmdldDtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25Db25maWcuYWN0aW9ucykge1xuICAgICAgICAgIHRyYW5zaXRpb25Db25maWcuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3ROYW1lKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uSW1wbCA9IGFjdGlvbnNbYWN0TmFtZV07XG4gICAgICAgICAgICB2YXIgbmV4dENvbnRleHRWYWx1ZSA9IGFjdGlvbkltcGwgJiYgYWN0aW9uSW1wbChjdXJyZW50Q29udGV4dCwgZXZlbnQpO1xuICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0VmFsdWUpIHtcbiAgICAgICAgICAgICAgY3VycmVudENvbnRleHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRDb250ZXh0KSwgbmV4dENvbnRleHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNYWNoaW5lOyIsIi8qKlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvcikge1xuICBpZiAoIWVycm9yIHx8ICEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZUVycm9yVG9TdGFja3MgZXhwZWN0cyBFcnJvciBvYmplY3RcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvci5zdGFjayA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBlcnJvci5zdGFjay5zcGxpdChcIlxcblwiKS5maWx0ZXIoZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICByZXR1cm4gc3RhY2sgIT09IFwiRXJyb3I6IFwiLmNvbmNhdChlcnJvci5tZXNzYWdlKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayBFcnJvckNhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGVycm9yXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3JDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gbGlzdGVuVG9SdW50aW1lRXJyb3IoY2FsbGJhY2spIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgY2FsbGJhY2spO1xuICB9O1xufVxuXG4vKipcbiAqIEBjYWxsYmFjayBVbmhhbmRsZWRSZWplY3Rpb25DYWxsYmFja1xuICogQHBhcmFtIHtQcm9taXNlUmVqZWN0aW9uRXZlbnR9IHJlamVjdGlvbkV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VW5oYW5kbGVkUmVqZWN0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGNhbGxiYWNrKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIiwgY2FsbGJhY2spO1xuICB9O1xufVxuZXhwb3J0IHsgbGlzdGVuVG9SdW50aW1lRXJyb3IsIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uLCBwYXJzZUVycm9yVG9TdGFja3MgfTsiLCJpbXBvcnQgY3JlYXRlTWFjaGluZSBmcm9tIFwiLi9mc20uanNcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaG93T3ZlcmxheURhdGFcbiAqIEBwcm9wZXJ0eSB7J3dhcm5pbmcnIHwgJ2Vycm9yJ30gbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICogQHByb3BlcnR5IHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5TWFjaGluZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7KGRhdGE6IFNob3dPdmVybGF5RGF0YSkgPT4gdm9pZH0gc2hvd092ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gaGlkZU92ZXJsYXlcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5TWFjaGluZSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlNYWNoaW5lKG9wdGlvbnMpIHtcbiAgdmFyIGhpZGVPdmVybGF5ID0gb3B0aW9ucy5oaWRlT3ZlcmxheSxcbiAgICBzaG93T3ZlcmxheSA9IG9wdGlvbnMuc2hvd092ZXJsYXk7XG4gIHZhciBvdmVybGF5TWFjaGluZSA9IGNyZWF0ZU1hY2hpbmUoe1xuICAgIGluaXRpYWw6IFwiaGlkZGVuXCIsXG4gICAgY29udGV4dDoge1xuICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgIG1lc3NhZ2VTb3VyY2U6IFwiYnVpbGRcIlxuICAgIH0sXG4gICAgc3RhdGVzOiB7XG4gICAgICBoaWRkZW46IHtcbiAgICAgICAgb246IHtcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzZXRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSVU5USU1FX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheVJ1bnRpbWVFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXlCdWlsZEVycm9yOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgRElTTUlTUzoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImhpZGRlblwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiZGlzbWlzc01lc3NhZ2VzXCIsIFwiaGlkZU92ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIEJVSUxEX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheUJ1aWxkRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImFwcGVuZE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNwbGF5UnVudGltZUVycm9yOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgRElTTUlTUzoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImhpZGRlblwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiZGlzbWlzc01lc3NhZ2VzXCIsIFwiaGlkZU92ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJVTlRJTUVfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5UnVudGltZUVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJhcHBlbmRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzZXRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgYWN0aW9uczoge1xuICAgICAgZGlzbWlzc01lc3NhZ2VzOiBmdW5jdGlvbiBkaXNtaXNzTWVzc2FnZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgIGxldmVsOiBcImVycm9yXCIsXG4gICAgICAgICAgbWVzc2FnZVNvdXJjZTogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgYXBwZW5kTWVzc2FnZXM6IGZ1bmN0aW9uIGFwcGVuZE1lc3NhZ2VzKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IGNvbnRleHQubWVzc2FnZXMuY29uY2F0KGV2ZW50Lm1lc3NhZ2VzKSxcbiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbCxcbiAgICAgICAgICBtZXNzYWdlU291cmNlOiBldmVudC50eXBlID09PSBcIlJVTlRJTUVfRVJST1JcIiA/IFwicnVudGltZVwiIDogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc2V0TWVzc2FnZXM6IGZ1bmN0aW9uIHNldE1lc3NhZ2VzKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IGV2ZW50Lm1lc3NhZ2VzLFxuICAgICAgICAgIGxldmVsOiBldmVudC5sZXZlbCB8fCBjb250ZXh0LmxldmVsLFxuICAgICAgICAgIG1lc3NhZ2VTb3VyY2U6IGV2ZW50LnR5cGUgPT09IFwiUlVOVElNRV9FUlJPUlwiID8gXCJydW50aW1lXCIgOiBcImJ1aWxkXCJcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBoaWRlT3ZlcmxheTogaGlkZU92ZXJsYXksXG4gICAgICBzaG93T3ZlcmxheTogc2hvd092ZXJsYXlcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3ZlcmxheU1hY2hpbmU7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlT3ZlcmxheU1hY2hpbmU7IiwiLy8gc3R5bGVzIGFyZSBpbnNwaXJlZCBieSBgcmVhY3QtZXJyb3Itb3ZlcmxheWBcblxudmFyIG1zZ1N0eWxlcyA9IHtcbiAgZXJyb3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyMDYsIDE3LCAzOCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmY2NmY2ZcIlxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjUxLCAyNDUsIDE4MCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmYmY1YjRcIlxuICB9XG59O1xudmFyIGlmcmFtZVN0eWxlID0ge1xuICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHdpZHRoOiBcIjEwMHZ3XCIsXG4gIGhlaWdodDogXCIxMDB2aFwiLFxuICBib3JkZXI6IFwibm9uZVwiLFxuICBcInotaW5kZXhcIjogOTk5OTk5OTk5OVxufTtcbnZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDB2d1wiLFxuICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgZm9udFNpemU6IFwibGFyZ2VcIixcbiAgcGFkZGluZzogXCIycmVtIDJyZW0gNHJlbSAycmVtXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMS4yXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gIGNvbG9yOiBcIndoaXRlXCJcbn07XG52YXIgaGVhZGVyU3R5bGUgPSB7XG4gIGNvbG9yOiBcIiNlODNiNDZcIixcbiAgZm9udFNpemU6IFwiMmVtXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCIsXG4gIG1hcmdpbjogXCIwIDJyZW0gMnJlbSAwXCIsXG4gIGZsZXg6IFwiMCAwIGF1dG9cIixcbiAgbWF4SGVpZ2h0OiBcIjUwJVwiLFxuICBvdmVyZmxvdzogXCJhdXRvXCJcbn07XG52YXIgZGlzbWlzc0J1dHRvblN0eWxlID0ge1xuICBjb2xvcjogXCIjZmZmZmZmXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMXJlbVwiLFxuICBmb250U2l6ZTogXCIxLjVyZW1cIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG4gIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHJpZ2h0OiAwLFxuICB0b3A6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICBib3JkZXI6IFwibm9uZVwiXG59O1xudmFyIG1zZ1R5cGVTdHlsZSA9IHtcbiAgY29sb3I6IFwiI2U4M2I0NlwiLFxuICBmb250U2l6ZTogXCIxLjJlbVwiLFxuICBtYXJnaW5Cb3R0b206IFwiMXJlbVwiLFxuICBmb250RmFtaWx5OiBcInNhbnMtc2VyaWZcIlxufTtcbnZhciBtc2dUZXh0U3R5bGUgPSB7XG4gIGxpbmVIZWlnaHQ6IFwiMS41XCIsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgZm9udEZhbWlseTogXCJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZVwiXG59O1xuZXhwb3J0IHsgbXNnU3R5bGVzLCBpZnJhbWVTdHlsZSwgY29udGFpbmVyU3R5bGUsIGhlYWRlclN0eWxlLCBkaXNtaXNzQnV0dG9uU3R5bGUsIG1zZ1R5cGVTdHlsZSwgbXNnVGV4dFN0eWxlIH07IiwiLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovXG5cbmltcG9ydCBXZWJTb2NrZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuXG4vLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZFxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG52YXIgQ2xpZW50ID1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0IDogX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gOiBXZWJTb2NrZXRDbGllbnQ7XG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgcmV0cmllcyA9IDA7XG52YXIgbWF4UmV0cmllcyA9IDEwO1xuXG4vLyBJbml0aWFsaXplZCBjbGllbnQgaXMgZXhwb3J0ZWQgc28gZXh0ZXJuYWwgY29uc3VtZXJzIGNhbiB1dGlsaXplIHRoZSBzYW1lIGluc3RhbmNlXG4vLyBJdCBpcyBtdXRhYmxlIHRvIGVuZm9yY2Ugc2luZ2xldG9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xuZXhwb3J0IHZhciBjbGllbnQgPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7eyBbaGFuZGxlcjogc3RyaW5nXTogKGRhdGE/OiBhbnksIHBhcmFtcz86IGFueSkgPT4gYW55IH19IGhhbmRsZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gW3JlY29ubmVjdF1cbiAqL1xudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KSB7XG4gIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTtcbiAgY2xpZW50Lm9uT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0cmllcyA9IDA7XG4gICAgaWYgKHR5cGVvZiByZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG1heFJldHJpZXMgPSByZWNvbm5lY3Q7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byByZWNvbm5lY3QuXG4gICAgY2xpZW50ID0gbnVsbDtcblxuICAgIC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cbiAgICBpZiAocmV0cmllcyA8IG1heFJldHJpZXMpIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIGxvZy5pbmZvKFwiVHJ5aW5nIHRvIHJlY29ubmVjdC4uLlwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhXG4gICAqL1xuICBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICBpZiAoaGFuZGxlcnNbbWVzc2FnZS50eXBlXSkge1xuICAgICAgaGFuZGxlcnNbbWVzc2FnZS50eXBlXShtZXNzYWdlLmRhdGEsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHNvY2tldDsiLCIvKipcbiAqIEBwYXJhbSB7eyBwcm90b2NvbD86IHN0cmluZywgYXV0aD86IHN0cmluZywgaG9zdG5hbWU/OiBzdHJpbmcsIHBvcnQ/OiBzdHJpbmcsIHBhdGhuYW1lPzogc3RyaW5nLCBzZWFyY2g/OiBzdHJpbmcsIGhhc2g/OiBzdHJpbmcsIHNsYXNoZXM/OiBib29sZWFuIH19IG9ialVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZm9ybWF0KG9ialVSTCkge1xuICB2YXIgcHJvdG9jb2wgPSBvYmpVUkwucHJvdG9jb2wgfHwgXCJcIjtcbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09IFwiOlwiKSB7XG4gICAgcHJvdG9jb2wgKz0gXCI6XCI7XG4gIH1cbiAgdmFyIGF1dGggPSBvYmpVUkwuYXV0aCB8fCBcIlwiO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksIFwiOlwiKTtcbiAgICBhdXRoICs9IFwiQFwiO1xuICB9XG4gIHZhciBob3N0ID0gXCJcIjtcbiAgaWYgKG9ialVSTC5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKG9ialVSTC5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSA9PT0gLTEgPyBvYmpVUkwuaG9zdG5hbWUgOiBcIltcIi5jb25jYXQob2JqVVJMLmhvc3RuYW1lLCBcIl1cIikpO1xuICAgIGlmIChvYmpVUkwucG9ydCkge1xuICAgICAgaG9zdCArPSBcIjpcIi5jb25jYXQob2JqVVJMLnBvcnQpO1xuICAgIH1cbiAgfVxuICB2YXIgcGF0aG5hbWUgPSBvYmpVUkwucGF0aG5hbWUgfHwgXCJcIjtcbiAgaWYgKG9ialVSTC5zbGFzaGVzKSB7XG4gICAgaG9zdCA9IFwiLy9cIi5jb25jYXQoaG9zdCB8fCBcIlwiKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSBcIi9cIikge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIi5jb25jYXQocGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSBcIlwiO1xuICB9XG4gIHZhciBzZWFyY2ggPSBvYmpVUkwuc2VhcmNoIHx8IFwiXCI7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gXCI/XCIpIHtcbiAgICBzZWFyY2ggPSBcIj9cIi5jb25jYXQoc2VhcmNoKTtcbiAgfVxuICB2YXIgaGFzaCA9IG9ialVSTC5oYXNoIHx8IFwiXCI7XG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSBcIiNcIikge1xuICAgIGhhc2ggPSBcIiNcIi5jb25jYXQoaGFzaCk7XG4gIH1cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2hcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoXCIjXCIsIFwiJTIzXCIpO1xuICByZXR1cm4gXCJcIi5jb25jYXQocHJvdG9jb2wpLmNvbmNhdChob3N0KS5jb25jYXQocGF0aG5hbWUpLmNvbmNhdChzZWFyY2gpLmNvbmNhdChoYXNoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFVSTCkge1xuICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVUkwuaG9zdG5hbWU7XG5cbiAgLy8gTm9kZS5qcyBtb2R1bGUgcGFyc2VzIGl0IGFzIGA6OmBcbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTFN0cmluZ10pYCBwYXJzZXMgaXQgYXMgJ1s6Ol0nXG4gIHZhciBpc0luQWRkckFueSA9IGhvc3RuYW1lID09PSBcIjAuMC4wLjBcIiB8fCBob3N0bmFtZSA9PT0gXCI6OlwiIHx8IGhvc3RuYW1lID09PSBcIls6Ol1cIjtcblxuICAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrP1xuICAvLyBob3N0bmFtZSBuL2EgZm9yIGZpbGUgcHJvdG9jb2wgKGV4YW1wbGUsIHdoZW4gdXNpbmcgZWxlY3Ryb24sIGlvbmljKVxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NFxuICBpZiAoaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lO1xuICB9XG4gIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuXG4gIC8vIFdoZW4gaHR0cHMgaXMgdXNlZCBpbiB0aGUgYXBwLCBzZWN1cmUgd2ViIHNvY2tldHMgYXJlIGFsd2F5cyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGFjY2VwdCBub24tc2VjdXJlIHdlYiBzb2NrZXRzLlxuICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09IFwiYXV0bzpcIiB8fCBob3N0bmFtZSAmJiBpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgc29ja2V0VVJMUHJvdG9jb2wgPSBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG4gIHNvY2tldFVSTFByb3RvY29sID0gc29ja2V0VVJMUHJvdG9jb2wucmVwbGFjZSgvXig/Omh0dHB8ListZXh0ZW5zaW9ufGZpbGUpL2ksIFwid3NcIik7XG4gIHZhciBzb2NrZXRVUkxBdXRoID0gXCJcIjtcblxuICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIGRvZXNuJ3QgaGF2ZSBgYXV0aGAgcHJvcGVydHlcbiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW1cbiAgaWYgKHBhcnNlZFVSTC51c2VybmFtZSkge1xuICAgIHNvY2tldFVSTEF1dGggPSBwYXJzZWRVUkwudXNlcm5hbWU7XG5cbiAgICAvLyBTaW5jZSBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uIGRvZXMgbm90IGFsbG93IGVtcHR5IHVzZXJuYW1lLFxuICAgIC8vIHdlIG9ubHkgaW5jbHVkZSBwYXNzd29yZCBpZiB0aGUgdXNlcm5hbWUgaXMgbm90IGVtcHR5LlxuICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHtcbiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+XG4gICAgICBzb2NrZXRVUkxBdXRoID0gc29ja2V0VVJMQXV0aC5jb25jYXQoXCI6XCIsIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSW4gY2FzZSB0aGUgaG9zdCBpcyBhIHJhdyBJUHY2IGFkZHJlc3MsIGl0IGNhbiBiZSBlbmNsb3NlZCBpblxuICAvLyB0aGUgYnJhY2tldHMgYXMgdGhlIGJyYWNrZXRzIGFyZSBuZWVkZWQgaW4gdGhlIGZpbmFsIFVSTCBzdHJpbmcuXG4gIC8vIE5lZWQgdG8gcmVtb3ZlIHRob3NlIGFzIHVybC5mb3JtYXQgYmxpbmRseSBhZGRzIGl0cyBvd24gc2V0IG9mIGJyYWNrZXRzXG4gIC8vIGlmIHRoZSBob3N0IHN0cmluZyBjb250YWlucyBjb2xvbnMuIFRoYXQgd291bGQgbGVhZCB0byBub24td29ya2luZ1xuICAvLyBkb3VibGUgYnJhY2tldHMgKGUuZy4gW1s6Ol1dKSBob3N0XG4gIC8vXG4gIC8vIEFsbCBvZiB0aGVzZSB3ZWIgc29ja2V0IHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2ggcmVzb3VyY2VRdWVyeSxcbiAgLy8gc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWYgdGhleSBhcmUgbm90IHByb3ZpZGVkXG4gIHZhciBzb2NrZXRVUkxIb3N0bmFtZSA9IChob3N0bmFtZSB8fCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lIHx8IFwibG9jYWxob3N0XCIpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIik7XG4gIHZhciBzb2NrZXRVUkxQb3J0ID0gcGFyc2VkVVJMLnBvcnQ7XG4gIGlmICghc29ja2V0VVJMUG9ydCB8fCBzb2NrZXRVUkxQb3J0ID09PSBcIjBcIikge1xuICAgIHNvY2tldFVSTFBvcnQgPSBzZWxmLmxvY2F0aW9uLnBvcnQ7XG4gIH1cblxuICAvLyBJZiBwYXRoIGlzIHByb3ZpZGVkIGl0J2xsIGJlIHBhc3NlZCBpbiB2aWEgdGhlIHJlc291cmNlUXVlcnkgYXMgYVxuICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZVxuICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSBcIi93c1wiO1xuICBpZiAocGFyc2VkVVJMLnBhdGhuYW1lICYmICFwYXJzZWRVUkwuZnJvbUN1cnJlbnRTY3JpcHQpIHtcbiAgICBzb2NrZXRVUkxQYXRobmFtZSA9IHBhcnNlZFVSTC5wYXRobmFtZTtcbiAgfVxuICByZXR1cm4gZm9ybWF0KHtcbiAgICBwcm90b2NvbDogc29ja2V0VVJMUHJvdG9jb2wsXG4gICAgYXV0aDogc29ja2V0VVJMQXV0aCxcbiAgICBob3N0bmFtZTogc29ja2V0VVJMSG9zdG5hbWUsXG4gICAgcG9ydDogc29ja2V0VVJMUG9ydCxcbiAgICBwYXRobmFtZTogc29ja2V0VVJMUGF0aG5hbWUsXG4gICAgc2xhc2hlczogdHJ1ZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNvY2tldFVSTDsiLCIvKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSk7XG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59XG5leHBvcnQgZGVmYXVsdCBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzXCI7XG52YXIgbmFtZSA9IFwid2VicGFjay1kZXYtc2VydmVyXCI7XG4vLyBkZWZhdWx0IGxldmVsIGlzIHNldCBvbiB0aGUgY2xpZW50IHNpZGUsIHNvIGl0IGRvZXMgbm90IG5lZWRcbi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSVxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiO1xuXG4vLyBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4vKipcbiAqIEBwYXJhbSB7ZmFsc2UgfCB0cnVlIHwgXCJub25lXCIgfCBcImVycm9yXCIgfCBcIndhcm5cIiB8IFwiaW5mb1wiIHwgXCJsb2dcIiB8IFwidmVyYm9zZVwifSBsZXZlbFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZ2dlci5jb25maWd1cmVEZWZhdWx0TG9nZ2VyKHtcbiAgICBsZXZlbDogbGV2ZWxcbiAgfSk7XG59XG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG52YXIgbG9nRW5hYmxlZEZlYXR1cmVzID0gZnVuY3Rpb24gbG9nRW5hYmxlZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gIHZhciBlbmFibGVkRmVhdHVyZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlcyk7XG4gIGlmICghZmVhdHVyZXMgfHwgZW5hYmxlZEZlYXR1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbG9nU3RyaW5nID0gXCJTZXJ2ZXIgc3RhcnRlZDpcIjtcblxuICAvLyBTZXJ2ZXIgc3RhcnRlZDogSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLCBMaXZlIFJlbG9hZGluZyBlbmFibGVkLCBPdmVybGF5IGRpc2FibGVkLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuYWJsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBlbmFibGVkRmVhdHVyZXNbaV07XG4gICAgbG9nU3RyaW5nICs9IFwiIFwiLmNvbmNhdChrZXksIFwiIFwiKS5jb25jYXQoZmVhdHVyZXNba2V5XSA/IFwiZW5hYmxlZFwiIDogXCJkaXNhYmxlZFwiLCBcIixcIik7XG4gIH1cbiAgLy8gcmVwbGFjZSBsYXN0IGNvbW1hIHdpdGggYSBwZXJpb2RcbiAgbG9nU3RyaW5nID0gbG9nU3RyaW5nLnNsaWNlKDAsIC0xKS5jb25jYXQoXCIuXCIpO1xuICBsb2cuaW5mbyhsb2dTdHJpbmcpO1xufTtcbmV4cG9ydCB7IGxvZywgbG9nRW5hYmxlZEZlYXR1cmVzLCBzZXRMb2dMZXZlbCB9OyIsImltcG9ydCBnZXRDdXJyZW50U2NyaXB0U291cmNlIGZyb20gXCIuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanNcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VRdWVyeVxuICogQHJldHVybnMge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgYm9vbGVhbiB9fVxuICovXG5mdW5jdGlvbiBwYXJzZVVSTChyZXNvdXJjZVF1ZXJ5KSB7XG4gIC8qKiBAdHlwZSB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfX0gKi9cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSBcInN0cmluZ1wiICYmIHJlc291cmNlUXVlcnkgIT09IFwiXCIpIHtcbiAgICB2YXIgc2VhcmNoUGFyYW1zID0gcmVzb3VyY2VRdWVyeS5zbGljZSgxKS5zcGxpdChcIiZcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWFyY2hQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYWlyID0gc2VhcmNoUGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcbiAgICAgIG9wdGlvbnNbcGFpclswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdFNvdXJjZSA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTtcbiAgICB2YXIgc2NyaXB0U291cmNlVVJMO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLlxuICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9jZWVkIHRvIHNlZSBpZiB3ZSBjYW4gcmVjb3ZlciB1c2luZyBgcmVzb3VyY2VRdWVyeWBcbiAgICB9XG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgb3B0aW9ucyA9IHNjcmlwdFNvdXJjZVVSTDtcbiAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmV4cG9ydCBkZWZhdWx0IHBhcnNlVVJMOyIsImltcG9ydCBob3RFbWl0dGVyIGZyb20gXCJ3ZWJwYWNrL2hvdC9lbWl0dGVyLmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi9sb2cuanNcIjtcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5PcHRpb25zfSBPcHRpb25zXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLlN0YXR1c30gU3RhdHVzXG5cbi8qKlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0YXR1c30gc3RhdHVzXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBzdGF0dXMpIHtcbiAgdmFyIGhvdCA9IF9yZWYuaG90LFxuICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGN1cnJlbnRIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoLFxuICAgIHByZXZpb3VzSGFzaCA9IHN0YXR1cy5wcmV2aW91c0hhc2g7XG4gIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKCAvKiogQHR5cGUge3N0cmluZ30gKi9wcmV2aW91c0hhc2gpID49IDA7XG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtXaW5kb3d9IHJvb3RXaW5kb3dcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsSWRcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG4gIHZhciBzZWFyY2ggPSBzZWxmLmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWxsb3dUb0hvdCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWhvdD1mYWxzZVwiKSA9PT0gLTE7XG4gIHZhciBhbGxvd1RvTGl2ZVJlbG9hZCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWxpdmUtcmVsb2FkPWZhbHNlXCIpID09PSAtMTtcbiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7XG4gICAgbG9nLmluZm8oXCJBcHAgaG90IHVwZGF0ZS4uLlwiKTtcbiAgICBob3RFbWl0dGVyLmVtaXQoXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIHN0YXR1cy5jdXJyZW50SGFzaCk7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgXCIqXCIpO1xuICAgIH1cbiAgfVxuICAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7XG4gICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmO1xuXG4gICAgLy8gdXNlIHBhcmVudCB3aW5kb3cgZm9yIHJlbG9hZCAoaW4gY2FzZSB3ZSdyZSBpbiBhbiBpZnJhbWUgd2l0aCBubyB2YWxpZCBzcmMpXG4gICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyb290V2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSBcImFib3V0OlwiKSB7XG4gICAgICAgIC8vIHJlbG9hZCBpbW1lZGlhdGVseSBpZiBwcm90b2NvbCBpcyB2YWxpZFxuICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RXaW5kb3cgPSByb290V2luZG93LnBhcmVudDtcbiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgLy8gaWYgcGFyZW50IGVxdWFscyBjdXJyZW50IHdpbmRvdyB3ZSd2ZSByZWFjaGVkIHRoZSByb290IHdoaWNoIHdvdWxkIGNvbnRpbnVlIGZvcmV2ZXIsIHNvIHRyaWdnZXIgYSByZWxvYWQgYW55d2F5c1xuICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHJlbG9hZEFwcDsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlICovXG5cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge2FueX0gW2RhdGFdXG4gKi9cbmZ1bmN0aW9uIHNlbmRNc2codHlwZSwgZGF0YSkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgXCIqXCIpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsInZhciBhbnNpUmVnZXggPSBuZXcgUmVnRXhwKFtcIltcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNylcIiwgXCIoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW5xLXV5PT48fl0pKVwiXS5qb2luKFwifFwiKSwgXCJnXCIpO1xuXG4vKipcbiAqXG4gKiBTdHJpcCBbQU5TSSBlc2NhcGUgY29kZXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUpIGZyb20gYSBzdHJpbmcuXG4gKiBBZGFwdGVkIGZyb20gY29kZSBvcmlnaW5hbGx5IHJlbGVhc2VkIGJ5IFNpbmRyZSBTb3JodXNcbiAqIExpY2Vuc2VkIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIGBzdHJpbmdgLCBnb3QgYFwiLmNvbmNhdCh0eXBlb2Ygc3RyaW5nLCBcImBcIikpO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgsIFwiXCIpO1xufVxuZXhwb3J0IGRlZmF1bHQgc3RyaXBBbnNpOyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vKiBnbG9iYWxzIF9fd2VicGFja19oYXNoX18gKi9cbmlmIChtb2R1bGUuaG90KSB7XG5cdC8qKiBAdHlwZSB7dW5kZWZpbmVkfHN0cmluZ30gKi9cblx0dmFyIGxhc3RIYXNoO1xuXHR2YXIgdXBUb0RhdGUgPSBmdW5jdGlvbiB1cFRvRGF0ZSgpIHtcblx0XHRyZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChsYXN0SGFzaCkuaW5kZXhPZihfX3dlYnBhY2tfaGFzaF9fKSA+PSAwO1xuXHR9O1xuXHR2YXIgbG9nID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcblx0XHRtb2R1bGUuaG90XG5cdFx0XHQuY2hlY2sodHJ1ZSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcykge1xuXHRcdFx0XHRpZiAoIXVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSAoUHJvYmFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXF1aXJlKFwiLi9sb2ctYXBwbHktcmVzdWx0XCIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7XG5cblx0XHRcdFx0aWYgKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0dmFyIHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cdFx0XHRcdGlmIChbXCJhYm9ydFwiLCBcImZhaWxcIl0uaW5kZXhPZihzdGF0dXMpID49IDApIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gVXBkYXRlIGZhaWxlZDogXCIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9O1xuXHR2YXIgaG90RW1pdHRlciA9IHJlcXVpcmUoXCIuL2VtaXR0ZXJcIik7XG5cdGhvdEVtaXR0ZXIub24oXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIGZ1bmN0aW9uIChjdXJyZW50SGFzaCkge1xuXHRcdGxhc3RIYXNoID0gY3VycmVudEhhc2g7XG5cdFx0aWYgKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdGNoZWNrKCk7XG5cdFx0fVxuXHR9KTtcblx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLlwiKTtcbn1cbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG4vKipcbiAqIEBwYXJhbSB7KHN0cmluZyB8IG51bWJlcilbXX0gdXBkYXRlZE1vZHVsZXMgdXBkYXRlZCBtb2R1bGVzXG4gKiBAcGFyYW0geyhzdHJpbmcgfCBudW1iZXIpW10gfCBudWxsfSByZW5ld2VkTW9kdWxlcyByZW5ld2VkIG1vZHVsZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMsIHJlbmV3ZWRNb2R1bGVzKSB7XG5cdHZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHR9KTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblxuXHRpZiAodW5hY2NlcHRlZE1vZHVsZXMubGVuZ3RoID4gMCkge1xuXHRcdGxvZyhcblx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCJcblx0XHQpO1xuXHRcdHVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0fSBlbHNlIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gVXBkYXRlZCBtb2R1bGVzOlwiKTtcblx0XHRyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0aWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJzdHJpbmdcIiAmJiBtb2R1bGVJZC5pbmRleE9mKFwiIVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gbW9kdWxlSWQuc3BsaXQoXCIhXCIpO1xuXHRcdFx0XHRsb2cuZ3JvdXBDb2xsYXBzZWQoXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBwYXJ0cy5wb3AoKSk7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdFx0bG9nLmdyb3VwRW5kKFwiaW5mb1wiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgbnVtYmVySWRzID0gcmVuZXdlZE1vZHVsZXMuZXZlcnkoZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSBcIm51bWJlclwiO1xuXHRcdH0pO1xuXHRcdGlmIChudW1iZXJJZHMpXG5cdFx0XHRsb2coXG5cdFx0XHRcdFwiaW5mb1wiLFxuXHRcdFx0XHQnW0hNUl0gQ29uc2lkZXIgdXNpbmcgdGhlIG9wdGltaXphdGlvbi5tb2R1bGVJZHM6IFwibmFtZWRcIiBmb3IgbW9kdWxlIG5hbWVzLidcblx0XHRcdCk7XG5cdH1cbn07XG4iLCIvKiogQHR5cGVkZWYge1wiaW5mb1wiIHwgXCJ3YXJuaW5nXCIgfCBcImVycm9yXCJ9IExvZ0xldmVsICovXG5cbi8qKiBAdHlwZSB7TG9nTGV2ZWx9ICovXG52YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUsIGlmIHNob3VsZCBsb2dcbiAqL1xuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KG1zZz86IHN0cmluZykgPT4gdm9pZH0gbG9nRm4gbG9nIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7KGxldmVsOiBMb2dMZXZlbCwgbXNnPzogc3RyaW5nKSA9PiB2b2lkfSBmdW5jdGlvbiB0aGF0IGxvZ3Mgd2hlbiBsb2cgbGV2ZWwgaXMgc3VmZmljaWVudFxuICovXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gbXNnIG1lc3NhZ2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTtcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XG52YXIgZ3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kIHx8IGR1bW15O1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICovXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgZXJyb3JcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCBlcnJvclxuICovXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wTWF0NCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWF0NCgpO1xuY29uc3QgdGVtcFZlYzNhID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWMzKCk7XG5jb25zdCB0ZW1wVmVjM2IgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcblxuZXhwb3J0IGNsYXNzIENhbWVyYSBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgbmVhciA9IDAuMSwgZmFyID0gMTAwLCBmb3YgPSA0NSwgYXNwZWN0ID0gMSwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tID0gMSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tIH0pO1xuXG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMudmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkUG9zaXRpb24gPSBuZXcgVmVjMygpO1xuXG4gICAgICAgIC8vIFVzZSBvcnRob2dyYXBoaWMgaWYgbGVmdC9yaWdodCBzZXQsIGVsc2UgZGVmYXVsdCB0byBwZXJzcGVjdGl2ZSBjYW1lcmFcbiAgICAgICAgdGhpcy50eXBlID0gbGVmdCB8fCByaWdodCA/ICdvcnRob2dyYXBoaWMnIDogJ3BlcnNwZWN0aXZlJztcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnb3J0aG9ncmFwaGljJykgdGhpcy5vcnRob2dyYXBoaWMoKTtcbiAgICAgICAgZWxzZSB0aGlzLnBlcnNwZWN0aXZlKCk7XG4gICAgfVxuXG4gICAgcGVyc3BlY3RpdmUoeyBuZWFyID0gdGhpcy5uZWFyLCBmYXIgPSB0aGlzLmZhciwgZm92ID0gdGhpcy5mb3YsIGFzcGVjdCA9IHRoaXMuYXNwZWN0IH0gPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCB9KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21QZXJzcGVjdGl2ZSh7IGZvdjogZm92ICogKE1hdGguUEkgLyAxODApLCBhc3BlY3QsIG5lYXIsIGZhciB9KTtcbiAgICAgICAgdGhpcy50eXBlID0gJ3BlcnNwZWN0aXZlJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb3J0aG9ncmFwaGljKHtcbiAgICAgICAgbmVhciA9IHRoaXMubmVhcixcbiAgICAgICAgZmFyID0gdGhpcy5mYXIsXG4gICAgICAgIGxlZnQgPSB0aGlzLmxlZnQgfHwgLTEsXG4gICAgICAgIHJpZ2h0ID0gdGhpcy5yaWdodCB8fCAxLFxuICAgICAgICBib3R0b20gPSB0aGlzLmJvdHRvbSB8fCAtMSxcbiAgICAgICAgdG9wID0gdGhpcy50b3AgfHwgMSxcbiAgICAgICAgem9vbSA9IHRoaXMuem9vbSxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IG5lYXIsIGZhciwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tIH0pO1xuICAgICAgICBsZWZ0IC89IHpvb207XG4gICAgICAgIHJpZ2h0IC89IHpvb207XG4gICAgICAgIGJvdHRvbSAvPSB6b29tO1xuICAgICAgICB0b3AgLz0gem9vbTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21PcnRob2dvbmFsKHsgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIgfSk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdvcnRob2dyYXBoaWMnO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1cGRhdGVNYXRyaXhXb3JsZCgpIHtcbiAgICAgICAgc3VwZXIudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICAgICAgdGhpcy52aWV3TWF0cml4LmludmVyc2UodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgIHRoaXMud29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24odGhpcy53b3JsZFBvc2l0aW9uKTtcblxuICAgICAgICAvLyB1c2VkIGZvciBzb3J0aW5nXG4gICAgICAgIHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXgubXVsdGlwbHkodGhpcy5wcm9qZWN0aW9uTWF0cml4LCB0aGlzLnZpZXdNYXRyaXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkge1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAncGVyc3BlY3RpdmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wZXJzcGVjdGl2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3J0aG9ncmFwaGljKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb29rQXQodGFyZ2V0KSB7XG4gICAgICAgIHN1cGVyLmxvb2tBdCh0YXJnZXQsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBQcm9qZWN0IDNEIGNvb3JkaW5hdGUgdG8gMkQgcG9pbnRcbiAgICBwcm9qZWN0KHYpIHtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy52aWV3TWF0cml4KTtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gVW5wcm9qZWN0IDJEIHBvaW50IHRvIDNEIGNvb3JkaW5hdGVcbiAgICB1bnByb2plY3Qodikge1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0ZW1wTWF0NC5pbnZlcnNlKHRoaXMucHJvamVjdGlvbk1hdHJpeCkpO1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlRnJ1c3R1bSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZydXN0dW0pIHtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bSA9IFtuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4O1xuICAgICAgICB0aGlzLmZydXN0dW1bMF0uc2V0KG1bM10gLSBtWzBdLCBtWzddIC0gbVs0XSwgbVsxMV0gLSBtWzhdKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxMl07IC8vIC14XG4gICAgICAgIHRoaXMuZnJ1c3R1bVsxXS5zZXQobVszXSArIG1bMF0sIG1bN10gKyBtWzRdLCBtWzExXSArIG1bOF0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzEyXTsgLy8gK3hcbiAgICAgICAgdGhpcy5mcnVzdHVtWzJdLnNldChtWzNdICsgbVsxXSwgbVs3XSArIG1bNV0sIG1bMTFdICsgbVs5XSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTNdOyAvLyAreVxuICAgICAgICB0aGlzLmZydXN0dW1bM10uc2V0KG1bM10gLSBtWzFdLCBtWzddIC0gbVs1XSwgbVsxMV0gLSBtWzldKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxM107IC8vIC15XG4gICAgICAgIHRoaXMuZnJ1c3R1bVs0XS5zZXQobVszXSAtIG1bMl0sIG1bN10gLSBtWzZdLCBtWzExXSAtIG1bMTBdKS5jb25zdGFudCA9IG1bMTVdIC0gbVsxNF07IC8vICt6IChmYXIpXG4gICAgICAgIHRoaXMuZnJ1c3R1bVs1XS5zZXQobVszXSArIG1bMl0sIG1bN10gKyBtWzZdLCBtWzExXSArIG1bMTBdKS5jb25zdGFudCA9IG1bMTVdICsgbVsxNF07IC8vIC16IChuZWFyKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbnZMZW4gPSAxLjAgLyB0aGlzLmZydXN0dW1baV0uZGlzdGFuY2UoKTtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bVtpXS5tdWx0aXBseShpbnZMZW4pO1xuICAgICAgICAgICAgdGhpcy5mcnVzdHVtW2ldLmNvbnN0YW50ICo9IGludkxlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZydXN0dW1JbnRlcnNlY3RzTWVzaChub2RlLCB3b3JsZE1hdHJpeCA9IG5vZGUud29ybGRNYXRyaXgpIHtcbiAgICAgICAgLy8gSWYgbm8gcG9zaXRpb24gYXR0cmlidXRlLCB0cmVhdCBhcyBmcnVzdHVtQ3VsbGVkIGZhbHNlXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYm91bmRzIHx8IG5vZGUuZ2VvbWV0cnkuYm91bmRzLnJhZGl1cyA9PT0gSW5maW5pdHkpIG5vZGUuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmJvdW5kcykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgY2VudGVyID0gdGVtcFZlYzNhO1xuICAgICAgICBjZW50ZXIuY29weShub2RlLmdlb21ldHJ5LmJvdW5kcy5jZW50ZXIpO1xuICAgICAgICBjZW50ZXIuYXBwbHlNYXRyaXg0KHdvcmxkTWF0cml4KTtcblxuICAgICAgICBjb25zdCByYWRpdXMgPSBub2RlLmdlb21ldHJ5LmJvdW5kcy5yYWRpdXMgKiB3b3JsZE1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZydXN0dW1JbnRlcnNlY3RzU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cykge1xuICAgICAgICBjb25zdCBub3JtYWwgPSB0ZW1wVmVjM2I7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYW5lID0gdGhpcy5mcnVzdHVtW2ldO1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBub3JtYWwuY29weShwbGFuZSkuZG90KGNlbnRlcikgKyBwbGFuZS5jb25zdGFudDtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IC1yYWRpdXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iLCIvLyBhdHRyaWJ1dGUgcGFyYW1zXG4vLyB7XG4vLyAgICAgZGF0YSAtIHR5cGVkIGFycmF5IGVnIFVJbnQxNkFycmF5IGZvciBpbmRpY2VzLCBGbG9hdDMyQXJyYXlcbi8vICAgICBzaXplIC0gaW50IGRlZmF1bHQgMVxuLy8gICAgIGluc3RhbmNlZCAtIGRlZmF1bHQgbnVsbC4gUGFzcyBkaXZpc29yIGFtb3VudFxuLy8gICAgIHR5cGUgLSBnbCBlbnVtIGRlZmF1bHQgZ2wuVU5TSUdORURfU0hPUlQgZm9yICdpbmRleCcsIGdsLkZMT0FUIGZvciBvdGhlcnNcbi8vICAgICBub3JtYWxpemVkIC0gYm9vbGVhbiBkZWZhdWx0IGZhbHNlXG5cbi8vICAgICBidWZmZXIgLSBnbCBidWZmZXIsIGlmIGJ1ZmZlciBleGlzdHMsIGRvbid0IG5lZWQgdG8gcHJvdmlkZSBkYXRhIC0gYWx0aG91Z2ggbmVlZHMgcG9zaXRpb24gZGF0YSBmb3IgYm91bmRzIGNhbGN1bGF0aW9uXG4vLyAgICAgc3RyaWRlIC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBvZmZzZXQgLSBkZWZhdWx0IDAgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIGNvdW50IC0gZGVmYXVsdCBudWxsIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBtaW4gLSBhcnJheSAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWF4IC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gfVxuXG4vLyBUT0RPOiBmaXQgaW4gdHJhbnNmb3JtIGZlZWRiYWNrXG5cbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wVmVjMyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjMygpO1xuXG5sZXQgSUQgPSAxO1xubGV0IEFUVFJfSUQgPSAxO1xuXG4vLyBUbyBzdG9wIGluaWZpbml0ZSB3YXJuaW5nc1xubGV0IGlzQm91bmRzV2FybmVkID0gZmFsc2U7XG5cbmV4cG9ydCBjbGFzcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBHZW9tZXRyeScpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIFN0b3JlIG9uZSBWQU8gcGVyIHByb2dyYW0gYXR0cmlidXRlIGxvY2F0aW9ucyBvcmRlclxuICAgICAgICB0aGlzLlZBT3MgPSB7fTtcblxuICAgICAgICB0aGlzLmRyYXdSYW5nZSA9IHsgc3RhcnQ6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIFVuYmluZCBjdXJyZW50IFZBTyBzbyB0aGF0IG5ldyBidWZmZXJzIGRvbid0IGdldCBhZGRlZCB0byBhY3RpdmUgbWVzaFxuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBudWxsO1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgYnVmZmVyc1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQXR0cmlidXRlKGtleSwgYXR0cikge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHI7XG5cbiAgICAgICAgLy8gU2V0IG9wdGlvbnNcbiAgICAgICAgYXR0ci5pZCA9IEFUVFJfSUQrKzsgLy8gVE9ETzogY3VycmVudGx5IHVudXNlZCwgcmVtb3ZlP1xuICAgICAgICBhdHRyLnNpemUgPSBhdHRyLnNpemUgfHwgMTtcbiAgICAgICAgYXR0ci50eXBlID1cbiAgICAgICAgICAgIGF0dHIudHlwZSB8fFxuICAgICAgICAgICAgKGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLkZMT0FUXG4gICAgICAgICAgICAgICAgOiBhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLlVOU0lHTkVEX1NIT1JUXG4gICAgICAgICAgICAgICAgOiB0aGlzLmdsLlVOU0lHTkVEX0lOVCk7IC8vIFVpbnQzMkFycmF5XG4gICAgICAgIGF0dHIudGFyZ2V0ID0ga2V5ID09PSAnaW5kZXgnID8gdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiA6IHRoaXMuZ2wuQVJSQVlfQlVGRkVSO1xuICAgICAgICBhdHRyLm5vcm1hbGl6ZWQgPSBhdHRyLm5vcm1hbGl6ZWQgfHwgZmFsc2U7XG4gICAgICAgIGF0dHIuc3RyaWRlID0gYXR0ci5zdHJpZGUgfHwgMDtcbiAgICAgICAgYXR0ci5vZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwO1xuICAgICAgICBhdHRyLmNvdW50ID0gYXR0ci5jb3VudCB8fCAoYXR0ci5zdHJpZGUgPyBhdHRyLmRhdGEuYnl0ZUxlbmd0aCAvIGF0dHIuc3RyaWRlIDogYXR0ci5kYXRhLmxlbmd0aCAvIGF0dHIuc2l6ZSk7XG4gICAgICAgIGF0dHIuZGl2aXNvciA9IGF0dHIuaW5zdGFuY2VkIHx8IDA7XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgYXR0ci51c2FnZSA9IGF0dHIudXNhZ2UgfHwgdGhpcy5nbC5TVEFUSUNfRFJBVztcblxuICAgICAgICBpZiAoIWF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICAvLyBQdXNoIGRhdGEgdG8gYnVmZmVyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBnZW9tZXRyeSBjb3VudHMuIElmIGluZGV4ZWQsIGlnbm9yZSByZWd1bGFyIGF0dHJpYnV0ZXNcbiAgICAgICAgaWYgKGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgdGhpcy5pc0luc3RhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZWRDb3VudCAmJiB0aGlzLmluc3RhbmNlZENvdW50ICE9PSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnZW9tZXRyeSBoYXMgbXVsdGlwbGUgaW5zdGFuY2VkIGJ1ZmZlcnMgb2YgZGlmZmVyZW50IGxlbmd0aCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5pbnN0YW5jZWRDb3VudCA9IE1hdGgubWluKHRoaXMuaW5zdGFuY2VkQ291bnQsIGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2luZGV4Jykge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBhdHRyLmNvdW50O1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gTWF0aC5tYXgodGhpcy5kcmF3UmFuZ2UuY291bnQsIGF0dHIuY291bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQXR0cmlidXRlKGF0dHIpIHtcbiAgICAgICAgY29uc3QgaXNOZXdCdWZmZXIgPSAhYXR0ci5idWZmZXI7XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikgYXR0ci5idWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyICE9PSBhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShhdHRyLnRhcmdldCwgYXR0ci5kYXRhLCBhdHRyLnVzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyU3ViRGF0YShhdHRyLnRhcmdldCwgMCwgYXR0ci5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0SW5kZXgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoJ2luZGV4JywgdmFsdWUpO1xuICAgIH1cblxuICAgIHNldERyYXdSYW5nZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcbiAgICB9XG5cbiAgICBzZXRJbnN0YW5jZWRDb3VudCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY3JlYXRlVkFPKHByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdID0gdGhpcy5nbC5yZW5kZXJlci5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICB0aGlzLmJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pO1xuICAgIH1cblxuICAgIGJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pIHtcbiAgICAgICAgLy8gTGluayBhbGwgYXR0cmlidXRlcyB0byBwcm9ncmFtIHVzaW5nIGdsLnZlcnRleEF0dHJpYlBvaW50ZXJcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSwgdHlwZSB9KSA9PiB7XG4gICAgICAgICAgICAvLyBJZiBnZW9tZXRyeSBtaXNzaW5nIGEgcmVxdWlyZWQgc2hhZGVyIGF0dHJpYnV0ZVxuICAgICAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGFjdGl2ZSBhdHRyaWJ1dGUgJHtuYW1lfSBub3QgYmVpbmcgc3VwcGxpZWRgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG5cbiAgICAgICAgICAgIC8vIEZvciBtYXRyaXggYXR0cmlidXRlcywgYnVmZmVyIG5lZWRzIHRvIGJlIGRlZmluZWQgcGVyIGNvbHVtblxuICAgICAgICAgICAgbGV0IG51bUxvYyA9IDE7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzQpIG51bUxvYyA9IDI7IC8vIG1hdDJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NSkgbnVtTG9jID0gMzsgLy8gbWF0M1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc2KSBudW1Mb2MgPSA0OyAvLyBtYXQ0XG5cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBhdHRyLnNpemUgLyBudW1Mb2M7XG4gICAgICAgICAgICBjb25zdCBzdHJpZGUgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogbnVtTG9jICogNDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG51bUxvYyA9PT0gMSA/IDAgOiBudW1Mb2MgKiA0O1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUxvYzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uICsgaSwgc2l6ZSwgYXR0ci50eXBlLCBhdHRyLm5vcm1hbGl6ZWQsIGF0dHIuc3RyaWRlICsgc3RyaWRlLCBhdHRyLm9mZnNldCArIGkgKiBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24gKyBpKTtcblxuICAgICAgICAgICAgICAgIC8vIEZvciBpbnN0YW5jZWQgYXR0cmlidXRlcywgZGl2aXNvciBuZWVkcyB0byBiZSBzZXQuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGZpcmVmb3gsIG5lZWQgdG8gc2V0IGJhY2sgdG8gMCBpZiBub24taW5zdGFuY2VkIGRyYXduIGFmdGVyIGluc3RhbmNlZC4gRWxzZSB3b24ndCByZW5kZXJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnZlcnRleEF0dHJpYkRpdmlzb3IobG9jYXRpb24gKyBpLCBhdHRyLmRpdmlzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCaW5kIGluZGljZXMgaWYgZ2VvbWV0cnkgaW5kZXhlZFxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZHJhdyh7IHByb2dyYW0sIG1vZGUgPSB0aGlzLmdsLlRSSUFOR0xFUyB9KSB7XG4gICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSAhPT0gYCR7dGhpcy5pZH1fJHtwcm9ncmFtLmF0dHJpYnV0ZU9yZGVyfWApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKSB0aGlzLmNyZWF0ZVZBTyhwcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGF0dHJpYnV0ZXMgbmVlZCB1cGRhdGluZ1xuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgICAgICBpZiAoYXR0ci5uZWVkc1VwZGF0ZSkgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZvciBkcmF3RWxlbWVudHMsIG9mZnNldCBuZWVkcyB0byBiZSBtdWx0aXBsZSBvZiB0eXBlIHNpemVcbiAgICAgICAgbGV0IGluZGV4Qnl0ZXNQZXJFbGVtZW50ID0gMjtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleD8udHlwZSA9PT0gdGhpcy5nbC5VTlNJR05FRF9JTlQpIGluZGV4Qnl0ZXNQZXJFbGVtZW50ID0gNDtcblxuICAgICAgICBpZiAodGhpcy5pc0luc3RhbmNlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIGluZGV4Qnl0ZXNQZXJFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kcmF3QXJyYXlzSW5zdGFuY2VkKG1vZGUsIHRoaXMuZHJhd1JhbmdlLnN0YXJ0LCB0aGlzLmRyYXdSYW5nZS5jb3VudCwgdGhpcy5pbnN0YW5jZWRDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kcmF3RWxlbWVudHMoXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogaW5kZXhCeXRlc1BlckVsZW1lbnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFBvc2l0aW9uKCkge1xuICAgICAgICAvLyBVc2UgcG9zaXRpb24gYnVmZmVyLCBvciBtaW4vbWF4IGlmIGF2YWlsYWJsZVxuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuICAgICAgICAvLyBpZiAoYXR0ci5taW4pIHJldHVybiBbLi4uYXR0ci5taW4sIC4uLmF0dHIubWF4XTtcbiAgICAgICAgaWYgKGF0dHIuZGF0YSkgcmV0dXJuIGF0dHI7XG4gICAgICAgIGlmIChpc0JvdW5kc1dhcm5lZCkgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIHBvc2l0aW9uIGJ1ZmZlciBkYXRhIGZvdW5kIHRvIGNvbXB1dGUgYm91bmRzJyk7XG4gICAgICAgIHJldHVybiAoaXNCb3VuZHNXYXJuZWQgPSB0cnVlKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdCb3goYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICAvLyBEYXRhIGxvYWRlZCBzaG91bGRuJ3QgaGFhdmUgc3RyaWRlLCBvbmx5IGJ1ZmZlcnNcbiAgICAgICAgLy8gY29uc3Qgc3RyaWRlID0gYXR0ci5zdHJpZGUgPyBhdHRyLnN0cmlkZSAvIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogYXR0ci5zaXplO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHMgPSB7XG4gICAgICAgICAgICAgICAgbWluOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIG1heDogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBJbmZpbml0eSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLmJvdW5kcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMuYm91bmRzLm1heDtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5ib3VuZHMuY2VudGVyO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuYm91bmRzLnNjYWxlO1xuXG4gICAgICAgIG1pbi5zZXQoK0luZmluaXR5KTtcbiAgICAgICAgbWF4LnNldCgtSW5maW5pdHkpO1xuXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIHNpemUgb2YgcG9zaXRpb24gKGVnIHRyaWFuZ2xlIHdpdGggVmVjMilcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgY29uc3QgeSA9IGFycmF5W2kgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHogPSBhcnJheVtpICsgMl07XG5cbiAgICAgICAgICAgIG1pbi54ID0gTWF0aC5taW4oeCwgbWluLngpO1xuICAgICAgICAgICAgbWluLnkgPSBNYXRoLm1pbih5LCBtaW4ueSk7XG4gICAgICAgICAgICBtaW4ueiA9IE1hdGgubWluKHosIG1pbi56KTtcblxuICAgICAgICAgICAgbWF4LnggPSBNYXRoLm1heCh4LCBtYXgueCk7XG4gICAgICAgICAgICBtYXgueSA9IE1hdGgubWF4KHksIG1heC55KTtcbiAgICAgICAgICAgIG1heC56ID0gTWF0aC5tYXgoeiwgbWF4LnopO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUuc3ViKG1heCwgbWluKTtcbiAgICAgICAgY2VudGVyLmFkZChtaW4sIG1heCkuZGl2aWRlKDIpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ1NwaGVyZShhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIC8vIERhdGEgbG9hZGVkIHNob3VsZG4ndCBoYWF2ZSBzdHJpZGUsIG9ubHkgYnVmZmVyc1xuICAgICAgICAvLyBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSA/IGF0dHIuc3RyaWRlIC8gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiBhdHRyLnNpemU7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB0aGlzLmNvbXB1dGVCb3VuZGluZ0JveChhdHRyKTtcblxuICAgICAgICBsZXQgbWF4UmFkaXVzU3EgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICB0ZW1wVmVjMy5mcm9tQXJyYXkoYXJyYXksIGkpO1xuICAgICAgICAgICAgbWF4UmFkaXVzU3EgPSBNYXRoLm1heChtYXhSYWRpdXNTcSwgdGhpcy5ib3VuZHMuY2VudGVyLnNxdWFyZWREaXN0YW5jZSh0ZW1wVmVjMykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3VuZHMucmFkaXVzID0gTWF0aC5zcXJ0KG1heFJhZGl1c1NxKTtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLlZBT3MpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZGVsZXRlVmVydGV4QXJyYXkodGhpcy5WQU9zW2tleV0pO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuVkFPc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYXR0cmlidXRlc1trZXldLmJ1ZmZlcik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQzIH0gZnJvbSAnLi4vbWF0aC9NYXQzLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuXG5sZXQgSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgTWVzaCBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0sIG1vZGUgPSBnbC5UUklBTkdMRVMsIGZydXN0dW1DdWxsZWQgPSB0cnVlLCByZW5kZXJPcmRlciA9IDAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIE1lc2gnKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gc2tpcCBmcnVzdHVtIGN1bGxpbmdcbiAgICAgICAgdGhpcy5mcnVzdHVtQ3VsbGVkID0gZnJ1c3R1bUN1bGxlZDtcblxuICAgICAgICAvLyBPdmVycmlkZSBzb3J0aW5nIHRvIGZvcmNlIGFuIG9yZGVyXG4gICAgICAgIHRoaXMucmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlcjtcbiAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeCA9IG5ldyBNYXQzKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICB9XG5cbiAgICBvbkJlZm9yZVJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uQWZ0ZXJSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXcoeyBjYW1lcmEgfSA9IHt9KSB7XG4gICAgICAgIGlmIChjYW1lcmEpIHtcbiAgICAgICAgICAgIC8vIEFkZCBlbXB0eSBtYXRyaXggdW5pZm9ybXMgdG8gcHJvZ3JhbSBpZiB1bnNldFxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB2aWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG1hdHJpeCB1bmlmb3Jtc1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnByb2plY3Rpb25NYXRyaXgudmFsdWUgPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5jYW1lcmFQb3NpdGlvbi52YWx1ZSA9IGNhbWVyYS53b3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnZpZXdNYXRyaXgudmFsdWUgPSBjYW1lcmEudmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5KGNhbWVyYS52aWV3TWF0cml4LCB0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCh0aGlzLm1vZGVsVmlld01hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgudmFsdWUgPSB0aGlzLndvcmxkTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsVmlld01hdHJpeC52YWx1ZSA9IHRoaXMubW9kZWxWaWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm5vcm1hbE1hdHJpeC52YWx1ZSA9IHRoaXMubm9ybWFsTWF0cml4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGZhY2VzIG5lZWQgdG8gYmUgZmxpcHBlZCAtIHdoZW4gbWVzaCBzY2FsZWQgbmVnYXRpdmVseVxuICAgICAgICBsZXQgZmxpcEZhY2VzID0gdGhpcy5wcm9ncmFtLmN1bGxGYWNlICYmIHRoaXMud29ybGRNYXRyaXguZGV0ZXJtaW5hbnQoKSA8IDA7XG4gICAgICAgIHRoaXMucHJvZ3JhbS51c2UoeyBmbGlwRmFjZXMgfSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZHJhdyh7IG1vZGU6IHRoaXMubW9kZSwgcHJvZ3JhbTogdGhpcy5wcm9ncmFtIH0pO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgfVxufVxuIiwiLy8gVE9ETzogdXBsb2FkIGVtcHR5IHRleHR1cmUgaWYgbnVsbCA/IG1heWJlIG5vdFxuLy8gVE9ETzogdXBsb2FkIGlkZW50aXR5IG1hdHJpeCBpZiBudWxsID9cbi8vIFRPRE86IHNhbXBsZXIgQ3ViZVxuXG5sZXQgSUQgPSAxO1xuXG4vLyBjYWNoZSBvZiB0eXBlZCBhcnJheXMgdXNlZCB0byBmbGF0dGVuIHVuaWZvcm0gYXJyYXlzXG5jb25zdCBhcnJheUNhY2hlRjMyID0ge307XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgdW5pZm9ybXMgPSB7fSxcblxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1bGxGYWNlID0gZ2wuQkFDSyxcbiAgICAgICAgICAgIGZyb250RmFjZSA9IGdsLkNDVyxcbiAgICAgICAgICAgIGRlcHRoVGVzdCA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aFdyaXRlID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoRnVuYyA9IGdsLkxFUVVBTCxcbiAgICAgICAgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGJsZW5kRnVuYyBpZiB0cmFuc3BhcmVudCBmbGFnZ2VkXG4gICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50ICYmICF0aGlzLmJsZW5kRnVuYy5zcmMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLnByZW11bHRpcGxpZWRBbHBoYSkgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICBlbHNlIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGVtcHR5IHNoYWRlcnMgYW5kIGF0dGFjaCB0byBwcm9ncmFtXG4gICAgICAgIHRoaXMudmVydGV4U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgdGhpcy52ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB0aGlzLmZyYWdtZW50U2hhZGVyKTtcblxuICAgICAgICAvLyBDb21waWxlIHNoYWRlcnMgd2l0aCBzb3VyY2VcbiAgICAgICAgdGhpcy5zZXRTaGFkZXJzKHsgdmVydGV4LCBmcmFnbWVudCB9KTtcbiAgICB9XG5cbiAgICBzZXRTaGFkZXJzKHsgdmVydGV4LCBmcmFnbWVudCB9KSB7XG4gICAgICAgIGlmICh2ZXJ0ZXgpIHtcbiAgICAgICAgICAgIC8vIGNvbXBpbGUgdmVydGV4IHNoYWRlciBhbmQgbG9nIGVycm9yc1xuICAgICAgICAgICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UodGhpcy52ZXJ0ZXhTaGFkZXIsIHZlcnRleCk7XG4gICAgICAgICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIodGhpcy52ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLnZlcnRleFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3RoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLnZlcnRleFNoYWRlcil9XFxuVmVydGV4IFNoYWRlclxcbiR7YWRkTGluZU51bWJlcnModmVydGV4KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcmFnbWVudCkge1xuICAgICAgICAgICAgLy8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKHRoaXMuZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcih0aGlzLmZyYWdtZW50U2hhZGVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy5mcmFnbWVudFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3RoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLmZyYWdtZW50U2hhZGVyKX1cXG5GcmFnbWVudCBTaGFkZXJcXG4ke2FkZExpbmVOdW1iZXJzKGZyYWdtZW50KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbXBpbGUgcHJvZ3JhbSBhbmQgbG9nIGVycm9yc1xuICAgICAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGlmICghdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5nbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4odGhpcy5nbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhY3RpdmUgdW5pZm9ybSBsb2NhdGlvbnNcbiAgICAgICAgdGhpcy51bmlmb3JtTG9jYXRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICBsZXQgbnVtVW5pZm9ybXMgPSB0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCB0aGlzLmdsLkFDVElWRV9VTklGT1JNUyk7XG4gICAgICAgIGZvciAobGV0IHVJbmRleCA9IDA7IHVJbmRleCA8IG51bVVuaWZvcm1zOyB1SW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IHVuaWZvcm0gPSB0aGlzLmdsLmdldEFjdGl2ZVVuaWZvcm0odGhpcy5wcm9ncmFtLCB1SW5kZXgpO1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtTG9jYXRpb25zLnNldCh1bmlmb3JtLCB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0ubmFtZSkpO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCB1bmlmb3JtcycgbmFtZXMgdG8gc2VwYXJhdGUgYXJyYXkgYW5kIHN0cnVjdCBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdW5pZm9ybS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udW5pZm9ybU5hbWUgPSBzcGxpdFswXTtcbiAgICAgICAgICAgIHVuaWZvcm0ubmFtZUNvbXBvbmVudHMgPSBzcGxpdC5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhY3RpdmUgYXR0cmlidXRlIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IG51bUF0dHJpYnMgPSB0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCB0aGlzLmdsLkFDVElWRV9BVFRSSUJVVEVTKTtcbiAgICAgICAgZm9yIChsZXQgYUluZGV4ID0gMDsgYUluZGV4IDwgbnVtQXR0cmliczsgYUluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuZ2wuZ2V0QWN0aXZlQXR0cmliKHRoaXMucHJvZ3JhbSwgYUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgIC8vIElnbm9yZSBzcGVjaWFsIGJ1aWx0LWluIGlucHV0cy4gZWcgZ2xfVmVydGV4SUQsIGdsX0luc3RhbmNlSURcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbG9jYXRpb25zW2xvY2F0aW9uXSA9IGF0dHJpYnV0ZS5uYW1lO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMuc2V0KGF0dHJpYnV0ZSwgbG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlidXRlT3JkZXIgPSBsb2NhdGlvbnMuam9pbignJyk7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRGdW5jKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpIHtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuc3JjID0gc3JjO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3QgPSBkc3Q7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhID0gc3JjQWxwaGE7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLmRzdEFscGhhID0gZHN0QWxwaGE7XG4gICAgICAgIGlmIChzcmMpIHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHNldEJsZW5kRXF1YXRpb24obW9kZVJHQiwgbW9kZUFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID0gbW9kZVJHQjtcbiAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9IG1vZGVBbHBoYTtcbiAgICB9XG5cbiAgICBhcHBseVN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5kZXB0aFRlc3QpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuXG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkJMRU5EKTtcblxuICAgICAgICBpZiAodGhpcy5jdWxsRmFjZSkgdGhpcy5nbC5yZW5kZXJlci5zZXRDdWxsRmFjZSh0aGlzLmN1bGxGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRGcm9udEZhY2UodGhpcy5mcm9udEZhY2UpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoTWFzayh0aGlzLmRlcHRoV3JpdGUpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoRnVuYyh0aGlzLmRlcHRoRnVuYyk7XG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRGdW5jKHRoaXMuYmxlbmRGdW5jLnNyYywgdGhpcy5ibGVuZEZ1bmMuZHN0LCB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSwgdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRXF1YXRpb24odGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IsIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEpO1xuICAgIH1cblxuICAgIHVzZSh7IGZsaXBGYWNlcyA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBsZXQgdGV4dHVyZVVuaXQgPSAtMTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUFjdGl2ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPT09IHRoaXMuaWQ7XG5cbiAgICAgICAgLy8gQXZvaWQgZ2wgY2FsbCBpZiBwcm9ncmFtIGFscmVhZHkgaW4gdXNlXG4gICAgICAgIGlmICghcHJvZ3JhbUFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlLmN1cnJlbnRQcm9ncmFtID0gdGhpcy5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBvbmx5IHRoZSBhY3RpdmUgdW5pZm9ybXMgZm91bmQgaW4gdGhlIHNoYWRlclxuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIGFjdGl2ZVVuaWZvcm0pID0+IHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1thY3RpdmVVbmlmb3JtLnVuaWZvcm1OYW1lXTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgYWN0aXZlVW5pZm9ybS5uYW1lQ29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIGlmICghdW5pZm9ybSkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50IGluIHVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuaWZvcm1bY29tcG9uZW50XTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodW5pZm9ybS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybihgQWN0aXZlIHVuaWZvcm0gJHthY3RpdmVVbmlmb3JtLm5hbWV9IGhhcyBub3QgYmVlbiBzdXBwbGllZGApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5pZm9ybSAmJiB1bmlmb3JtLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybihgJHthY3RpdmVVbmlmb3JtLm5hbWV9IHVuaWZvcm0gaXMgbWlzc2luZyBhIHZhbHVlIHBhcmFtZXRlcmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0ZXh0dXJlIG5lZWRzIHRvIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICB1bmlmb3JtLnZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3IgdGV4dHVyZSBhcnJheXMsIHNldCB1bmlmb3JtIGFzIGFuIGFycmF5IG9mIHRleHR1cmUgdW5pdHMgaW5zdGVhZCBvZiBqdXN0IG9uZVxuICAgICAgICAgICAgaWYgKHVuaWZvcm0udmFsdWUubGVuZ3RoICYmIHVuaWZvcm0udmFsdWVbMF0udGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmVVbml0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVVbml0cy5wdXNoKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRVbmlmb3JtKHRoaXMuZ2wsIGFjdGl2ZVVuaWZvcm0udHlwZSwgbG9jYXRpb24sIHRleHR1cmVVbml0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwbHlTdGF0ZSgpO1xuICAgICAgICBpZiAoZmxpcEZhY2VzKSB0aGlzLmdsLnJlbmRlcmVyLnNldEZyb250RmFjZSh0aGlzLmZyb250RmFjZSA9PT0gdGhpcy5nbC5DQ1cgPyB0aGlzLmdsLkNXIDogdGhpcy5nbC5DQ1cpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRVbmlmb3JtKGdsLCB0eXBlLCBsb2NhdGlvbiwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmxlbmd0aCA/IGZsYXR0ZW4odmFsdWUpIDogdmFsdWU7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLmdldChsb2NhdGlvbik7XG5cbiAgICAvLyBBdm9pZCByZWR1bmRhbnQgdW5pZm9ybSBjb21tYW5kc1xuICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB1bmRlZmluZWQgfHwgc2V0VmFsdWUubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGNsb25lIGFycmF5IHRvIHN0b3JlIGFzIGNhY2hlXG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUuc2xpY2UoMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFycmF5c0VxdWFsKHNldFZhbHVlLCB2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNhY2hlZCBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIHNldFZhbHVlLnNldCA/IHNldFZhbHVlLnNldCh2YWx1ZSkgOiBzZXRBcnJheShzZXRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHNldFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRWYWx1ZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSA1MTI2OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVFxuICAgICAgICBjYXNlIDM1NjY0OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDMlxuICAgICAgICBjYXNlIDM1NjY1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDM1xuICAgICAgICBjYXNlIDM1NjY2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDNFxuICAgICAgICBjYXNlIDM1NjcwOiAvLyBCT09MXG4gICAgICAgIGNhc2UgNTEyNDogLy8gSU5UXG4gICAgICAgIGNhc2UgMzU2Nzg6IC8vIFNBTVBMRVJfMkRcbiAgICAgICAgY2FzZSAzNjMwNjogLy8gVV9TQU1QTEVSXzJEXG4gICAgICAgIGNhc2UgMzU2ODA6IC8vIFNBTVBMRVJfQ1VCRVxuICAgICAgICBjYXNlIDM2Mjg5OiAvLyBTQU1QTEVSXzJEX0FSUkFZXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIFNBTVBMRVJfQ1VCRVxuICAgICAgICBjYXNlIDM1NjcxOiAvLyBCT09MX1ZFQzJcbiAgICAgICAgY2FzZSAzNTY2NzpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NzI6IC8vIEJPT0xfVkVDM1xuICAgICAgICBjYXNlIDM1NjY4OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzNcbiAgICAgICAgY2FzZSAzNTY3MzogLy8gQk9PTF9WRUM0XG4gICAgICAgIGNhc2UgMzU2Njk6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDNFxuICAgICAgICBjYXNlIDM1Njc0OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXgyZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDJcbiAgICAgICAgY2FzZSAzNTY3NTpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQzXG4gICAgICAgIGNhc2UgMzU2NzY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUNFxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkTGluZU51bWJlcnMoc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVzID0gc3RyaW5nLnNwbGl0KCdcXG4nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpbmVzW2ldID0gaSArIDEgKyAnOiAnICsgbGluZXNbaV07XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihhKSB7XG4gICAgY29uc3QgYXJyYXlMZW4gPSBhLmxlbmd0aDtcbiAgICBjb25zdCB2YWx1ZUxlbiA9IGFbMF0ubGVuZ3RoO1xuICAgIGlmICh2YWx1ZUxlbiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gYTtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheUxlbiAqIHZhbHVlTGVuO1xuICAgIGxldCB2YWx1ZSA9IGFycmF5Q2FjaGVGMzJbbGVuZ3RoXTtcbiAgICBpZiAoIXZhbHVlKSBhcnJheUNhY2hlRjMyW2xlbmd0aF0gPSB2YWx1ZSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuOyBpKyspIHZhbHVlLnNldChhW2ldLCBpICogdmFsdWVMZW4pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRBcnJheShhLCBiKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBhW2ldID0gYltpXTtcbiAgICB9XG59XG5cbmxldCB3YXJuQ291bnQgPSAwO1xuZnVuY3Rpb24gd2FybihtZXNzYWdlKSB7XG4gICAgaWYgKHdhcm5Db3VudCA+IDEwMCkgcmV0dXJuO1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB3YXJuQ291bnQrKztcbiAgICBpZiAod2FybkNvdW50ID4gMTAwKSBjb25zb2xlLndhcm4oJ01vcmUgdGhhbiAxMDAgcHJvZ3JhbSB3YXJuaW5ncyAtIHN0b3BwaW5nIGxvZ3MuJyk7XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuLy8gVE9ETzogSGFuZGxlIGNvbnRleHQgbG9zcyBodHRwczovL3d3dy5raHJvbm9zLm9yZy93ZWJnbC93aWtpL0hhbmRsaW5nQ29udGV4dExvc3RcblxuLy8gTm90IGF1dG9tYXRpYyAtIGRldnMgdG8gdXNlIHRoZXNlIG1ldGhvZHMgbWFudWFsbHlcbi8vIGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG4vLyBnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG4vLyBnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcbi8vIGdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTtcbi8vIGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG4vLyBnbC5jbGVhclN0ZW5jaWwoIHN0ZW5jaWwgKTtcblxuY29uc3QgdGVtcFZlYzMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgd2lkdGggPSAzMDAsXG4gICAgICAgIGhlaWdodCA9IDE1MCxcbiAgICAgICAgZHByID0gMSxcbiAgICAgICAgYWxwaGEgPSBmYWxzZSxcbiAgICAgICAgZGVwdGggPSB0cnVlLFxuICAgICAgICBzdGVuY2lsID0gZmFsc2UsXG4gICAgICAgIGFudGlhbGlhcyA9IGZhbHNlLFxuICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2UsXG4gICAgICAgIHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0JyxcbiAgICAgICAgYXV0b0NsZWFyID0gdHJ1ZSxcbiAgICAgICAgd2ViZ2wgPSAyLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0geyBhbHBoYSwgZGVwdGgsIHN0ZW5jaWwsIGFudGlhbGlhcywgcHJlbXVsdGlwbGllZEFscGhhLCBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIsIHBvd2VyUHJlZmVyZW5jZSB9O1xuICAgICAgICB0aGlzLmRwciA9IGRwcjtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGFscGhhO1xuICAgICAgICB0aGlzLmNvbG9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgICAgICB0aGlzLnN0ZW5jaWwgPSBzdGVuY2lsO1xuICAgICAgICB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcbiAgICAgICAgdGhpcy5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIEF0dGVtcHQgV2ViR0wyIHVubGVzcyBmb3JjZWQgdG8gMSwgaWYgbm90IHN1cHBvcnRlZCBmYWxsYmFjayB0byBXZWJHTDFcbiAgICAgICAgaWYgKHdlYmdsID09PSAyKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIGF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmlzV2ViZ2wyID0gISF0aGlzLmdsO1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSBjb25zb2xlLmVycm9yKCd1bmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHQnKTtcblxuICAgICAgICAvLyBBdHRhY2ggcmVuZGVyZXIgdG8gZ2wgc28gdGhhdCBhbGwgY2xhc3NlcyBoYXZlIGFjY2VzcyB0byBpbnRlcm5hbCBzdGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlciA9IHRoaXM7XG5cbiAgICAgICAgLy8gaW5pdGlhbGlzZSBzaXplIHZhbHVlc1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gZ2wgc3RhdGUgc3RvcmVzIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBvbiBtZXRob2RzIHVzZWQgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jID0geyBzcmM6IHRoaXMuZ2wuT05FLCBkc3Q6IHRoaXMuZ2wuWkVSTyB9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24gPSB7IG1vZGVSR0I6IHRoaXMuZ2wuRlVOQ19BREQgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZyb250RmFjZSA9IHRoaXMuZ2wuQ0NXO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhGdW5jID0gdGhpcy5nbC5MRVFVQUw7XG4gICAgICAgIHRoaXMuc3RhdGUucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUudW5wYWNrQWxpZ25tZW50ID0gNDtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQgPSB7IHg6IDAsIHk6IDAsIHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS50ZXh0dXJlVW5pdHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IDA7XG4gICAgICAgIHRoaXMuc3RhdGUuYm91bmRCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIHJlcXVlc3RlZCBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXh0cmEgZm9ybWF0IHR5cGVzXG4gICAgICAgIGlmICh0aGlzLmlzV2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9zUkdCJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgbWV0aG9kIGFsaWFzZXMgdXNpbmcgZXh0ZW5zaW9uIChXZWJHTDEpIG9yIG5hdGl2ZSBpZiBhdmFpbGFibGUgKFdlYkdMMilcbiAgICAgICAgdGhpcy52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAndmVydGV4QXR0cmliRGl2aXNvcicsICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3QXJyYXlzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0FycmF5c0luc3RhbmNlZCcsICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICdkcmF3RWxlbWVudHNJbnN0YW5jZWQnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdjcmVhdGVWZXJ0ZXhBcnJheScsICdjcmVhdGVWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmJpbmRWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdiaW5kVmVydGV4QXJyYXknLCAnYmluZFZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZGVsZXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnZGVsZXRlVmVydGV4QXJyYXknLCAnZGVsZXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5kcmF3QnVmZmVycyA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnNXRUJHTCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIGRldmljZSBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VGV4dHVyZVVuaXRzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICAgICAgICAgICA/IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5nbC5jYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMuZHByO1xuICAgICAgICB0aGlzLmdsLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLmRwcjtcblxuICAgICAgICBpZiAoIXRoaXMuZ2wuY2FudmFzLnN0eWxlKSByZXR1cm47XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbC5jYW52YXMuc3R5bGUsIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICdweCcsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICdweCcsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFZpZXdwb3J0KHdpZHRoLCBoZWlnaHQsIHggPSAwLCB5ID0gMCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9PT0gd2lkdGggJiYgdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQgPT09IGhlaWdodCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnggPSB4O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnkgPSB5O1xuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHNldFNjaXNzb3Iod2lkdGgsIGhlaWdodCwgeCA9IDAsIHkgPSAwKSB7XG4gICAgICAgIHRoaXMuZ2wuc2Npc3Nvcih4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBlbmFibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKGlkKTtcbiAgICAgICAgdGhpcy5zdGF0ZVtpZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGRpc2FibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmRpc2FibGUoaWQpO1xuICAgICAgICB0aGlzLnN0YXRlW2lkXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYyA9PT0gc3JjICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3QgPT09IGRzdCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPT09IHNyY0FscGhhICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3RBbHBoYSA9PT0gZHN0QWxwaGFcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdCA9IGRzdDtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPSBzcmNBbHBoYTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGEgPSBkc3RBbHBoYTtcbiAgICAgICAgaWYgKHNyY0FscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEZ1bmMoc3JjLCBkc3QpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRXF1YXRpb24obW9kZVJHQiwgbW9kZUFscGhhKSB7XG4gICAgICAgIG1vZGVSR0IgPSBtb2RlUkdCIHx8IHRoaXMuZ2wuRlVOQ19BREQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9PT0gbW9kZVJHQiAmJiB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID09PSBtb2RlQWxwaGEpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPSBtb2RlUkdCO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID0gbW9kZUFscGhhO1xuICAgICAgICBpZiAobW9kZUFscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKG1vZGVSR0IsIG1vZGVBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEVxdWF0aW9uKG1vZGVSR0IpO1xuICAgIH1cblxuICAgIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmN1bGxGYWNlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmN1bGxGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuY3VsbEZhY2UodmFsdWUpO1xuICAgIH1cblxuICAgIHNldEZyb250RmFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcm9udEZhY2UgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aE1hc2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGVwdGhNYXNrID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmRlcHRoTWFzayh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RGVwdGhGdW5jKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlcHRoRnVuYyA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5kZXB0aEZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIGFjdGl2ZVRleHR1cmUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTAgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgYmluZEZyYW1lYnVmZmVyKHsgdGFyZ2V0ID0gdGhpcy5nbC5GUkFNRUJVRkZFUiwgYnVmZmVyID0gbnVsbCB9ID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPT09IGJ1ZmZlcikgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmZyYW1lYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZ2V0RXh0ZW5zaW9uKGV4dGVuc2lvbiwgd2ViZ2wyRnVuYywgZXh0RnVuYykge1xuICAgICAgICAvLyBpZiB3ZWJnbDIgZnVuY3Rpb24gc3VwcG9ydGVkLCByZXR1cm4gZnVuYyBib3VuZCB0byBnbCBjb250ZXh0XG4gICAgICAgIGlmICh3ZWJnbDJGdW5jICYmIHRoaXMuZ2xbd2ViZ2wyRnVuY10pIHJldHVybiB0aGlzLmdsW3dlYmdsMkZ1bmNdLmJpbmQodGhpcy5nbCk7XG5cbiAgICAgICAgLy8gZmV0Y2ggZXh0ZW5zaW9uIG9uY2Ugb25seVxuICAgICAgICBpZiAoIXRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKSB7XG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKGV4dGVuc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gZXh0ZW5zaW9uIGlmIG5vIGZ1bmN0aW9uIHJlcXVlc3RlZFxuICAgICAgICBpZiAoIXdlYmdsMkZ1bmMpIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXTtcblxuICAgICAgICAvLyBSZXR1cm4gbnVsbCBpZiBleHRlbnNpb24gbm90IHN1cHBvcnRlZFxuICAgICAgICBpZiAoIXRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAvLyByZXR1cm4gZXh0ZW5zaW9uIGZ1bmN0aW9uLCBib3VuZCB0byBleHRlbnNpb25cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dW2V4dEZ1bmNdLmJpbmQodGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pO1xuICAgIH1cblxuICAgIHNvcnRPcGFxdWUoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGEucHJvZ3JhbS5pZCAhPT0gYi5wcm9ncmFtLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuICAgICAgICB9IGVsc2UgaWYgKGEuekRlcHRoICE9PSBiLnpEZXB0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGEuekRlcHRoIC0gYi56RGVwdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0VHJhbnNwYXJlbnQoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLnpEZXB0aCAhPT0gYi56RGVwdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBiLnpEZXB0aCAtIGEuekRlcHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc29ydFVJKGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChhLnByb2dyYW0uaWQgIT09IGIucHJvZ3JhbS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJvZ3JhbS5pZCAtIGIucHJvZ3JhbS5pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFJlbmRlckxpc3QoeyBzY2VuZSwgY2FtZXJhLCBmcnVzdHVtQ3VsbCwgc29ydCB9KSB7XG4gICAgICAgIGxldCByZW5kZXJMaXN0ID0gW107XG5cbiAgICAgICAgaWYgKGNhbWVyYSAmJiBmcnVzdHVtQ3VsbCkgY2FtZXJhLnVwZGF0ZUZydXN0dW0oKTtcblxuICAgICAgICAvLyBHZXQgdmlzaWJsZVxuICAgICAgICBzY2VuZS50cmF2ZXJzZSgobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFub2RlLnZpc2libGUpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKCFub2RlLmRyYXcpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGZydXN0dW1DdWxsICYmIG5vZGUuZnJ1c3R1bUN1bGxlZCAmJiBjYW1lcmEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbWVyYS5mcnVzdHVtSW50ZXJzZWN0c01lc2gobm9kZSkpIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyTGlzdC5wdXNoKG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc29ydCkge1xuICAgICAgICAgICAgY29uc3Qgb3BhcXVlID0gW107XG4gICAgICAgICAgICBjb25zdCB0cmFuc3BhcmVudCA9IFtdOyAvLyBkZXB0aFRlc3QgdHJ1ZVxuICAgICAgICAgICAgY29uc3QgdWkgPSBbXTsgLy8gZGVwdGhUZXN0IGZhbHNlXG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGludG8gdGhlIDMgcmVuZGVyIGdyb3Vwc1xuICAgICAgICAgICAgICAgIGlmICghbm9kZS5wcm9ncmFtLnRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYXF1ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5wcm9ncmFtLmRlcHRoVGVzdCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVpLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm9kZS56RGVwdGggPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBjYWxjdWxhdGUgei1kZXB0aCBpZiByZW5kZXJPcmRlciB1bnNldCBhbmQgZGVwdGhUZXN0IGlzIHRydWVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5yZW5kZXJPcmRlciAhPT0gMCB8fCAhbm9kZS5wcm9ncmFtLmRlcHRoVGVzdCB8fCAhY2FtZXJhKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgei1kZXB0aFxuICAgICAgICAgICAgICAgIG5vZGUud29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24odGVtcFZlYzMpO1xuICAgICAgICAgICAgICAgIHRlbXBWZWMzLmFwcGx5TWF0cml4NChjYW1lcmEucHJvamVjdGlvblZpZXdNYXRyaXgpO1xuICAgICAgICAgICAgICAgIG5vZGUuekRlcHRoID0gdGVtcFZlYzMuejtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvcGFxdWUuc29ydCh0aGlzLnNvcnRPcGFxdWUpO1xuICAgICAgICAgICAgdHJhbnNwYXJlbnQuc29ydCh0aGlzLnNvcnRUcmFuc3BhcmVudCk7XG4gICAgICAgICAgICB1aS5zb3J0KHRoaXMuc29ydFVJKTtcblxuICAgICAgICAgICAgcmVuZGVyTGlzdCA9IG9wYXF1ZS5jb25jYXQodHJhbnNwYXJlbnQsIHVpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJMaXN0O1xuICAgIH1cblxuICAgIHJlbmRlcih7IHNjZW5lLCBjYW1lcmEsIHRhcmdldCA9IG51bGwsIHVwZGF0ZSA9IHRydWUsIHNvcnQgPSB0cnVlLCBmcnVzdHVtQ3VsbCA9IHRydWUsIGNsZWFyIH0pIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIG5vIHJlbmRlciB0YXJnZXQgYm91bmQgc28gZHJhd3MgdG8gY2FudmFzXG4gICAgICAgICAgICB0aGlzLmJpbmRGcmFtZWJ1ZmZlcigpO1xuICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCh0aGlzLndpZHRoICogdGhpcy5kcHIsIHRoaXMuaGVpZ2h0ICogdGhpcy5kcHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYmluZCBzdXBwbGllZCByZW5kZXIgdGFyZ2V0IGFuZCB1cGRhdGUgdmlld3BvcnRcbiAgICAgICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyKHRhcmdldCk7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KHRhcmdldC53aWR0aCwgdGFyZ2V0LmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xlYXIgfHwgKHRoaXMuYXV0b0NsZWFyICYmIGNsZWFyICE9PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkXG4gICAgICAgICAgICBpZiAodGhpcy5kZXB0aCAmJiAoIXRhcmdldCB8fCB0YXJnZXQuZGVwdGgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERlcHRoTWFzayh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2wuY2xlYXIoXG4gICAgICAgICAgICAgICAgKHRoaXMuY29sb3IgPyB0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRlcHRoID8gdGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5zdGVuY2lsID8gdGhpcy5nbC5TVEVOQ0lMX0JVRkZFUl9CSVQgOiAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZXMgYWxsIHNjZW5lIGdyYXBoIG1hdHJpY2VzXG4gICAgICAgIGlmICh1cGRhdGUpIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGNhbWVyYSBzZXBhcmF0ZWx5LCBpbiBjYXNlIG5vdCBpbiBzY2VuZSBncmFwaFxuICAgICAgICBpZiAoY2FtZXJhKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyBHZXQgcmVuZGVyIGxpc3QgLSBlbnRhaWxzIGN1bGxpbmcgYW5kIHNvcnRpbmdcbiAgICAgICAgY29uc3QgcmVuZGVyTGlzdCA9IHRoaXMuZ2V0UmVuZGVyTGlzdCh7IHNjZW5lLCBjYW1lcmEsIGZydXN0dW1DdWxsLCBzb3J0IH0pO1xuXG4gICAgICAgIHJlbmRlckxpc3QuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS5kcmF3KHsgY2FtZXJhIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBUT0RPOiBkZWxldGUgdGV4dHVyZVxuLy8gVE9ETzogdXNlIHRleFN1YkltYWdlMkQgZm9yIHVwZGF0ZXMgKHZpZGVvIG9yIHdoZW4gbG9hZGVkKVxuLy8gVE9ETzogbmVlZD8gZW5jb2RpbmcgPSBsaW5lYXJFbmNvZGluZ1xuLy8gVE9ETzogc3VwcG9ydCBub24tY29tcHJlc3NlZCBtaXBtYXBzIHVwbG9hZHNcblxuY29uc3QgZW1wdHlQaXhlbCA9IG5ldyBVaW50OEFycmF5KDQpO1xuXG5mdW5jdGlvbiBpc1Bvd2VyT2YyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmICh2YWx1ZSAtIDEpKSA9PT0gMDtcbn1cblxubGV0IElEID0gMTtcblxuZXhwb3J0IGNsYXNzIFRleHR1cmUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnbCxcbiAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICB0YXJnZXQgPSBnbC5URVhUVVJFXzJELFxuICAgICAgICAgICAgdHlwZSA9IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgICBmb3JtYXQgPSBnbC5SR0JBLFxuICAgICAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBmb3JtYXQsXG4gICAgICAgICAgICB3cmFwUyA9IGdsLkNMQU1QX1RPX0VER0UsXG4gICAgICAgICAgICB3cmFwVCA9IGdsLkNMQU1QX1RPX0VER0UsXG4gICAgICAgICAgICB3cmFwUiA9IGdsLkNMQU1QX1RPX0VER0UsXG4gICAgICAgICAgICBnZW5lcmF0ZU1pcG1hcHMgPSB0YXJnZXQgPT09IChnbC5URVhUVVJFXzJEIHx8IGdsLlRFWFRVUkVfQ1VCRV9NQVApLFxuICAgICAgICAgICAgbWluRmlsdGVyID0gZ2VuZXJhdGVNaXBtYXBzID8gZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSIDogZ2wuTElORUFSLFxuICAgICAgICAgICAgbWFnRmlsdGVyID0gZ2wuTElORUFSLFxuICAgICAgICAgICAgcHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlLFxuICAgICAgICAgICAgdW5wYWNrQWxpZ25tZW50ID0gNCxcbiAgICAgICAgICAgIGZsaXBZID0gdGFyZ2V0ID09IChnbC5URVhUVVJFXzJEIHx8IGdsLlRFWFRVUkVfM0QpID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgYW5pc290cm9weSA9IDAsXG4gICAgICAgICAgICBsZXZlbCA9IDAsXG4gICAgICAgICAgICB3aWR0aCwgLy8gdXNlZCBmb3IgUmVuZGVyVGFyZ2V0cyBvciBEYXRhIFRleHR1cmVzXG4gICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCxcbiAgICAgICAgICAgIGxlbmd0aCA9IDEsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLmludGVybmFsRm9ybWF0ID0gaW50ZXJuYWxGb3JtYXQ7XG4gICAgICAgIHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyO1xuICAgICAgICB0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlcjtcbiAgICAgICAgdGhpcy53cmFwUyA9IHdyYXBTO1xuICAgICAgICB0aGlzLndyYXBUID0gd3JhcFQ7XG4gICAgICAgIHRoaXMud3JhcFIgPSB3cmFwUjtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7XG4gICAgICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgIHRoaXMudW5wYWNrQWxpZ25tZW50ID0gdW5wYWNrQWxpZ25tZW50O1xuICAgICAgICB0aGlzLmZsaXBZID0gZmxpcFk7XG4gICAgICAgIHRoaXMuYW5pc290cm9weSA9IE1hdGgubWluKGFuaXNvdHJvcHksIHRoaXMuZ2wucmVuZGVyZXIucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5KTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgdGhpcy5zdG9yZSA9IHtcbiAgICAgICAgICAgIGltYWdlOiBudWxsLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIFN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgcGVyLXRleHR1cmUgc3RhdGVcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRlLm1pbkZpbHRlciA9IHRoaXMuZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSO1xuICAgICAgICB0aGlzLnN0YXRlLm1hZ0ZpbHRlciA9IHRoaXMuZ2wuTElORUFSO1xuICAgICAgICB0aGlzLnN0YXRlLndyYXBTID0gdGhpcy5nbC5SRVBFQVQ7XG4gICAgICAgIHRoaXMuc3RhdGUud3JhcFQgPSB0aGlzLmdsLlJFUEVBVDtcbiAgICAgICAgdGhpcy5zdGF0ZS5hbmlzb3Ryb3B5ID0gMDtcbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICAvLyBBbHJlYWR5IGJvdW5kIHRvIGFjdGl2ZSB0ZXh0dXJlIHVuaXRcbiAgICAgICAgaWYgKHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGhpcy5nbFN0YXRlLmFjdGl2ZVRleHR1cmVVbml0XSA9PT0gdGhpcy5pZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMudGFyZ2V0LCB0aGlzLnRleHR1cmUpO1xuICAgICAgICB0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RoaXMuZ2xTdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdF0gPSB0aGlzLmlkO1xuICAgIH1cblxuICAgIHVwZGF0ZSh0ZXh0dXJlVW5pdCA9IDApIHtcbiAgICAgICAgY29uc3QgbmVlZHNVcGRhdGUgPSAhKHRoaXMuaW1hZ2UgPT09IHRoaXMuc3RvcmUuaW1hZ2UgJiYgIXRoaXMubmVlZHNVcGRhdGUpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRleHR1cmUgaXMgYm91bmQgdG8gaXRzIHRleHR1cmUgdW5pdFxuICAgICAgICBpZiAobmVlZHNVcGRhdGUgfHwgdGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0ZXh0dXJlVW5pdF0gIT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgIC8vIHNldCBhY3RpdmUgdGV4dHVyZSB1bml0IHRvIHBlcmZvcm0gdGV4dHVyZSBmdW5jdGlvbnNcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmVlZHNVcGRhdGUpIHJldHVybjtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmZsaXBZICE9PSB0aGlzLmdsU3RhdGUuZmxpcFkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0aGlzLmZsaXBZKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5mbGlwWSA9IHRoaXMuZmxpcFk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcmVtdWx0aXBseUFscGhhICE9PSB0aGlzLmdsU3RhdGUucHJlbXVsdGlwbHlBbHBoYSkge1xuICAgICAgICAgICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGhpcy5wcmVtdWx0aXBseUFscGhhKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudW5wYWNrQWxpZ25tZW50ICE9PSB0aGlzLmdsU3RhdGUudW5wYWNrQWxpZ25tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGhpcy51bnBhY2tBbGlnbm1lbnQpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLnVucGFja0FsaWdubWVudCA9IHRoaXMudW5wYWNrQWxpZ25tZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWluRmlsdGVyICE9PSB0aGlzLnN0YXRlLm1pbkZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5taW5GaWx0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5taW5GaWx0ZXIgPSB0aGlzLm1pbkZpbHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hZ0ZpbHRlciAhPT0gdGhpcy5zdGF0ZS5tYWdGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMubWFnRmlsdGVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubWFnRmlsdGVyID0gdGhpcy5tYWdGaWx0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53cmFwUyAhPT0gdGhpcy5zdGF0ZS53cmFwUykge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLndyYXBTKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUud3JhcFMgPSB0aGlzLndyYXBTO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcFQgIT09IHRoaXMuc3RhdGUud3JhcFQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy53cmFwVCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLndyYXBUID0gdGhpcy53cmFwVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndyYXBSICE9PSB0aGlzLnN0YXRlLndyYXBSKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1IsIHRoaXMud3JhcFIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS53cmFwUiA9IHRoaXMud3JhcFI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hbmlzb3Ryb3B5ICYmIHRoaXMuYW5pc290cm9weSAhPT0gdGhpcy5zdGF0ZS5hbmlzb3Ryb3B5KSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmYodGhpcy50YXJnZXQsIHRoaXMuZ2wucmVuZGVyZXIuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgdGhpcy5hbmlzb3Ryb3B5KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYW5pc290cm9weSA9IHRoaXMuYW5pc290cm9weTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmltYWdlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbWFnZS53aWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGN1YmUgbWFwc1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2VbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuaW1hZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gRGF0YSB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfMkQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgdGhpcy5pbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEX0FSUkFZIHx8IHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfM0QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTNEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZW5ndGgsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWFnZS5pc0NvbXByZXNzZWRUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29tcHJlc3NlZCB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRoaXMuaW1hZ2UubGVuZ3RoOyBsZXZlbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuY29tcHJlc3NlZFRleEltYWdlMkQodGhpcy50YXJnZXQsIGxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLmltYWdlW2xldmVsXS53aWR0aCwgdGhpcy5pbWFnZVtsZXZlbF0uaGVpZ2h0LCAwLCB0aGlzLmltYWdlW2xldmVsXS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlZ3VsYXIgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgdGhpcy5pbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTNEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZW5ndGgsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVNaXBtYXBzKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIFdlYkdMMSwgaWYgbm90IGEgcG93ZXIgb2YgMiwgdHVybiBvZmYgbWlwcywgc2V0IHdyYXBwaW5nIHRvIGNsYW1wIHRvIGVkZ2UgYW5kIG1pbkZpbHRlciB0byBsaW5lYXJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2wucmVuZGVyZXIuaXNXZWJnbDIgJiYgKCFpc1Bvd2VyT2YyKHRoaXMuaW1hZ2Uud2lkdGgpIHx8ICFpc1Bvd2VyT2YyKHRoaXMuaW1hZ2UuaGVpZ2h0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwUyA9IHRoaXMud3JhcFQgPSB0aGlzLmdsLkNMQU1QX1RPX0VER0U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluRmlsdGVyID0gdGhpcy5nbC5MSU5FQVI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5nZW5lcmF0ZU1pcG1hcCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsYmFjayBmb3Igd2hlbiBkYXRhIGlzIHB1c2hlZCB0byBHUFVcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUgJiYgdGhpcy5vblVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVApIHtcbiAgICAgICAgICAgICAgICAvLyBVcGxvYWQgZW1wdHkgcGl4ZWwgZm9yIGVhY2ggc2lkZSB3aGlsZSBubyBpbWFnZSB0byBhdm9pZCBlcnJvcnMgd2hpbGUgaW1hZ2Ugb3IgdmlkZW8gbG9hZGluZ1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIHRoaXMuZ2wuUkdCQSwgMSwgMSwgMCwgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsIGVtcHR5UGl4ZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy53aWR0aCkge1xuICAgICAgICAgICAgICAgIC8vIGltYWdlIGludGVudGlvbmFsbHkgbGVmdCBudWxsIGZvciBSZW5kZXJUYXJnZXRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV8yRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlM0QodGhpcy50YXJnZXQsIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmxlbmd0aCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBVcGxvYWQgZW1wdHkgcGl4ZWwgaWYgbm8gaW1hZ2UgdG8gYXZvaWQgZXJyb3JzIHdoaWxlIGltYWdlIG9yIHZpZGVvIGxvYWRpbmdcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIDAsIHRoaXMuZ2wuUkdCQSwgMSwgMSwgMCwgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsIGVtcHR5UGl4ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmUuaW1hZ2UgPSB0aGlzLmltYWdlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuLi9tYXRoL1F1YXQuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbiA9IG5ldyBRdWF0KCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5cbiAgICAgICAgdGhpcy5yb3RhdGlvbi5fdGFyZ2V0Lm9uQ2hhbmdlID0gKCkgPT4gdGhpcy5xdWF0ZXJuaW9uLmZyb21FdWxlcih0aGlzLnJvdGF0aW9uLCB0cnVlKTtcbiAgICAgICAgdGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQub25DaGFuZ2UgPSAoKSA9PiB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbiwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQocGFyZW50LCBub3RpZnlQYXJlbnQgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMucGFyZW50KSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm90aWZ5UGFyZW50ICYmIHBhcmVudCkgcGFyZW50LmFkZENoaWxkKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCAxKTtcbiAgICAgICAgaWYgKG5vdGlmeUNoaWxkKSBjaGlsZC5zZXRQYXJlbnQobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUpIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIGlmICh0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkgdGhpcy53b3JsZE1hdHJpeC5jb3B5KHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy53b3JsZE1hdHJpeC5tdWx0aXBseSh0aGlzLnBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnF1YXRlcm5pb24sIHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIGluIGNhbGxiYWNrIHRvIHN0b3AgdHJhdmVyc2luZyBjaGlsZHJlblxuICAgICAgICBpZiAoY2FsbGJhY2sodGhpcykpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS50cmF2ZXJzZShjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNvbXBvc2UoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmRlY29tcG9zZSh0aGlzLnF1YXRlcm5pb24uX3RhcmdldCwgdGhpcy5wb3NpdGlvbiwgdGhpcy5zY2FsZSk7XG4gICAgICAgIHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICBsb29rQXQodGFyZ2V0LCBpbnZlcnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoaW52ZXJ0KSB0aGlzLm1hdHJpeC5sb29rQXQodGhpcy5wb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwKTtcbiAgICAgICAgZWxzZSB0aGlzLm1hdHJpeC5sb29rQXQodGFyZ2V0LCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwKTtcbiAgICAgICAgdGhpcy5tYXRyaXguZ2V0Um90YXRpb24odGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIFBsYW5lIGV4dGVuZHMgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgYXR0cmlidXRlcyA9IHt9IH0gPSB7fSkge1xuICAgICAgICBjb25zdCB3U2VncyA9IHdpZHRoU2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGhTZWdzID0gaGVpZ2h0U2VnbWVudHM7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGxlbmd0aCBvZiBhcnJheXNcbiAgICAgICAgY29uc3QgbnVtID0gKHdTZWdzICsgMSkgKiAoaFNlZ3MgKyAxKTtcbiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IHdTZWdzICogaFNlZ3MgKiA2O1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGVtcHR5IGFycmF5cyBvbmNlXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3QgdXYgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDIpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG51bUluZGljZXMgPiA2NTUzNiA/IG5ldyBVaW50MzJBcnJheShudW1JbmRpY2VzKSA6IG5ldyBVaW50MTZBcnJheShudW1JbmRpY2VzKTtcblxuICAgICAgICBQbGFuZS5idWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgMCwgd1NlZ3MsIGhTZWdzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHNpemU6IDMsIGRhdGE6IHBvc2l0aW9uIH0sXG4gICAgICAgICAgICBub3JtYWw6IHsgc2l6ZTogMywgZGF0YTogbm9ybWFsIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiB1diB9LFxuICAgICAgICAgICAgaW5kZXg6IHsgZGF0YTogaW5kZXggfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdTZWdzLCBoU2VncywgdSA9IDAsIHYgPSAxLCB3ID0gMiwgdURpciA9IDEsIHZEaXIgPSAtMSwgaSA9IDAsIGlpID0gMCkge1xuICAgICAgICBjb25zdCBpbyA9IGk7XG4gICAgICAgIGNvbnN0IHNlZ1cgPSB3aWR0aCAvIHdTZWdzO1xuICAgICAgICBjb25zdCBzZWdIID0gaGVpZ2h0IC8gaFNlZ3M7XG5cbiAgICAgICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8PSBoU2VnczsgaXkrKykge1xuICAgICAgICAgICAgbGV0IHkgPSBpeSAqIHNlZ0ggLSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8PSB3U2VnczsgaXgrKywgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBpeCAqIHNlZ1cgLSB3aWR0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHVdID0geCAqIHVEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB2XSA9IHkgKiB2RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgd10gPSBkZXB0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB1XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdl0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHddID0gZGVwdGggPj0gMCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgIHV2W2kgKiAyXSA9IGl4IC8gd1NlZ3M7XG4gICAgICAgICAgICAgICAgdXZbaSAqIDIgKyAxXSA9IDEgLSBpeSAvIGhTZWdzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl5ID09PSBoU2VncyB8fCBpeCA9PT0gd1NlZ3MpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxldCBhID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgZCA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpICsgMTtcblxuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNl0gPSBhO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDFdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAyXSA9IGQ7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgM10gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDRdID0gYztcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA1XSA9IGQ7XG4gICAgICAgICAgICAgICAgaWkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIEV1bGVyRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcyc7XG5cbmNvbnN0IHRtcE1hdDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hdDQoKTtcblxuZXhwb3J0IGNsYXNzIEV1bGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgsIG9yZGVyID0gJ1lYWicpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIHByb3h5IHRhcmdldCB0byBhdm9pZCB0cmlnZ2VyaW5nIG9uQ2hhbmdlIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyBSZXR1cm4gYSBwcm94eSB0byB0cmlnZ2VyIG9uQ2hhbmdlIHdoZW4gYXJyYXkgZWxlbWVudHMgYXJlIGVkaXRlZCBkaXJlY3RseVxuICAgICAgICBjb25zdCB0cmlnZ2VyUHJvcHMgPSBbJzAnLCAnMScsICcyJ107XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gUmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2VzcyAmJiB0cmlnZ2VyUHJvcHMuaW5jbHVkZXMocHJvcGVydHkpKSB0YXJnZXQub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB4O1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB5O1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB6O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2WzFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2WzJdO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlb3JkZXIob3JkZXIpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0Lm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMuX3RhcmdldCwgbSwgb3JkZXIpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEsIG9yZGVyID0gdGhpcy5vcmRlciwgaXNJbnRlcm5hbCkge1xuICAgICAgICB0bXBNYXQ0LmZyb21RdWF0ZXJuaW9uKHEpO1xuICAgICAgICB0aGlzLl90YXJnZXQuZnJvbVJvdGF0aW9uTWF0cml4KHRtcE1hdDQsIG9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gYVtvXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0NEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvTWF0NEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgTWF0NCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgbTAwID0gMSxcbiAgICAgICAgbTAxID0gMCxcbiAgICAgICAgbTAyID0gMCxcbiAgICAgICAgbTAzID0gMCxcbiAgICAgICAgbTEwID0gMCxcbiAgICAgICAgbTExID0gMSxcbiAgICAgICAgbTEyID0gMCxcbiAgICAgICAgbTEzID0gMCxcbiAgICAgICAgbTIwID0gMCxcbiAgICAgICAgbTIxID0gMCxcbiAgICAgICAgbTIyID0gMSxcbiAgICAgICAgbTIzID0gMCxcbiAgICAgICAgbTMwID0gMCxcbiAgICAgICAgbTMxID0gMCxcbiAgICAgICAgbTMyID0gMCxcbiAgICAgICAgbTMzID0gMVxuICAgICkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTJdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxM107XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzE0XTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTVdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1sxMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxM10gPSB2O1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpc1sxNF0gPSB2O1xuICAgIH1cblxuICAgIHNldCB3KHYpIHtcbiAgICAgICAgdGhpc1sxNV0gPSB2O1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0NEZ1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy50cmFuc2xhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZSh2LCBheGlzLCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5yb3RhdGUodGhpcywgbSwgdiwgYXhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnNjYWxlKHRoaXMsIG0sIHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IFt2LCB2LCB2XSA6IHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikgTWF0NEZ1bmMuYWRkKHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuYWRkKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIE1hdDRGdW5jLnN1YnRyYWN0KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuc3VidHJhY3QodGhpcywgdGhpcywgbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShtYSwgbWIpIHtcbiAgICAgICAgaWYgKCFtYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5U2NhbGFyKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYikge1xuICAgICAgICAgICAgTWF0NEZ1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0NEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQ0RnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUGVyc3BlY3RpdmUoeyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyIH0gPSB7fSkge1xuICAgICAgICBNYXQ0RnVuYy5wZXJzcGVjdGl2ZSh0aGlzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KSB7XG4gICAgICAgIE1hdDRGdW5jLm9ydGhvKHRoaXMsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odikge1xuICAgICAgICB0aGlzLnggPSB2WzBdO1xuICAgICAgICB0aGlzLnkgPSB2WzFdO1xuICAgICAgICB0aGlzLnogPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmNvbXBvc2UodGhpcywgcSwgcG9zLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRlY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmRlY29tcG9zZSh0aGlzLCBxLCBwb3MsIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Um90YXRpb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5nZXRSb3RhdGlvbihxLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VHJhbnNsYXRpb24ocG9zKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFRyYW5zbGF0aW9uKHBvcywgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFNjYWxpbmcoc2NhbGUpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0U2NhbGluZyhzY2FsZSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE1heFNjYWxlT25BeGlzKCkge1xuICAgICAgICByZXR1cm4gTWF0NEZ1bmMuZ2V0TWF4U2NhbGVPbkF4aXModGhpcyk7XG4gICAgfVxuXG4gICAgbG9va0F0KGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBNYXQ0RnVuYy50YXJnZXRUbyh0aGlzLCBleWUsIHRhcmdldCwgdXApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkZXRlcm1pbmFudCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdDRGdW5jLmRldGVybWluYW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHRoaXNbM10gPSBhW28gKyAzXTtcbiAgICAgICAgdGhpc1s0XSA9IGFbbyArIDRdO1xuICAgICAgICB0aGlzWzVdID0gYVtvICsgNV07XG4gICAgICAgIHRoaXNbNl0gPSBhW28gKyA2XTtcbiAgICAgICAgdGhpc1s3XSA9IGFbbyArIDddO1xuICAgICAgICB0aGlzWzhdID0gYVtvICsgOF07XG4gICAgICAgIHRoaXNbOV0gPSBhW28gKyA5XTtcbiAgICAgICAgdGhpc1sxMF0gPSBhW28gKyAxMF07XG4gICAgICAgIHRoaXNbMTFdID0gYVtvICsgMTFdO1xuICAgICAgICB0aGlzWzEyXSA9IGFbbyArIDEyXTtcbiAgICAgICAgdGhpc1sxM10gPSBhW28gKyAxM107XG4gICAgICAgIHRoaXNbMTRdID0gYVtvICsgMTRdO1xuICAgICAgICB0aGlzWzE1XSA9IGFbbyArIDE1XTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICBhW28gKyA0XSA9IHRoaXNbNF07XG4gICAgICAgIGFbbyArIDVdID0gdGhpc1s1XTtcbiAgICAgICAgYVtvICsgNl0gPSB0aGlzWzZdO1xuICAgICAgICBhW28gKyA3XSA9IHRoaXNbN107XG4gICAgICAgIGFbbyArIDhdID0gdGhpc1s4XTtcbiAgICAgICAgYVtvICsgOV0gPSB0aGlzWzldO1xuICAgICAgICBhW28gKyAxMF0gPSB0aGlzWzEwXTtcbiAgICAgICAgYVtvICsgMTFdID0gdGhpc1sxMV07XG4gICAgICAgIGFbbyArIDEyXSA9IHRoaXNbMTJdO1xuICAgICAgICBhW28gKyAxM10gPSB0aGlzWzEzXTtcbiAgICAgICAgYVtvICsgMTRdID0gdGhpc1sxNF07XG4gICAgICAgIGFbbyArIDE1XSA9IHRoaXNbMTVdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBRdWF0RnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9RdWF0RnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBRdWF0IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHosIHcpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gKCkgPT4ge307XG5cbiAgICAgICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gcHJveHkgdGFyZ2V0IHRvIGF2b2lkIHRyaWdnZXJpbmcgb25DaGFuZ2UgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLl90YXJnZXQgPSB0aGlzO1xuXG4gICAgICAgIC8vIFJldHVybiBhIHByb3h5IHRvIHRyaWdnZXIgb25DaGFuZ2Ugd2hlbiBhcnJheSBlbGVtZW50cyBhcmUgZWRpdGVkIGRpcmVjdGx5XG4gICAgICAgIGNvbnN0IHRyaWdnZXJQcm9wcyA9IFsnMCcsICcxJywgJzInLCAnMyddO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHJpZ2dlclByb3BzLmluY2x1ZGVzKHByb3BlcnR5KSkgdGFyZ2V0Lm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbM107XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbM10gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIFF1YXRGdW5jLmlkZW50aXR5KHRoaXMuX3RhcmdldCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBRdWF0RnVuYy5zZXQodGhpcy5fdGFyZ2V0LCB4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWShhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVkodGhpcy5fdGFyZ2V0LCB0aGlzLl90YXJnZXQsIGEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZVooYSkge1xuICAgICAgICBRdWF0RnVuYy5yb3RhdGVaKHRoaXMuX3RhcmdldCwgdGhpcy5fdGFyZ2V0LCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuaW52ZXJ0KHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uanVnYXRlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29uanVnYXRlKHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weShxKSB7XG4gICAgICAgIFF1YXRGdW5jLmNvcHkodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBub3JtYWxpemUocSA9IHRoaXMuX3RhcmdldCkge1xuICAgICAgICBRdWF0RnVuYy5ub3JtYWxpemUodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShxQSwgcUIpIHtcbiAgICAgICAgaWYgKHFCKSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHFBLCBxQik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcUEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZG90KHYpIHtcbiAgICAgICAgcmV0dXJuIFF1YXRGdW5jLmRvdCh0aGlzLl90YXJnZXQsIHYpO1xuICAgIH1cblxuICAgIGZyb21NYXRyaXgzKG1hdHJpeDMpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbU1hdDModGhpcy5fdGFyZ2V0LCBtYXRyaXgzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tRXVsZXIoZXVsZXIsIGlzSW50ZXJuYWwpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbUV1bGVyKHRoaXMuX3RhcmdldCwgZXVsZXIsIGV1bGVyLm9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXhpc0FuZ2xlKGF4aXMsIGEpIHtcbiAgICAgICAgUXVhdEZ1bmMuc2V0QXhpc0FuZ2xlKHRoaXMuX3RhcmdldCwgYXhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2xlcnAocSwgdCkge1xuICAgICAgICBRdWF0RnVuYy5zbGVycCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcSwgdCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IGFbb107XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBWZWMzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBWZWMzRnVuYy5zZXQodGhpcywgeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICBWZWMzRnVuYy5jb3B5KHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQodmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuYWRkKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuYWRkKHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc3VidHJhY3QodGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgdik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpdmlkZSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMuZGl2aWRlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIDEgLyB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5pbnZlcnNlKHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDYW4ndCB1c2UgJ2xlbmd0aCcgYXMgQXJyYXkucHJvdG90eXBlIHVzZXMgaXRcbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2Uodikge1xuICAgICAgICBpZiAodikgcmV0dXJuIFZlYzNGdW5jLmRpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZExlbigpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZERpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkRGlzdGFuY2UodGhpcywgdik7XG4gICAgICAgIGVsc2UgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgbmVnYXRlKHYgPSB0aGlzKSB7XG4gICAgICAgIFZlYzNGdW5jLm5lZ2F0ZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3Jvc3ModmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdmEsIHZiKTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5jcm9zcyh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgVmVjM0Z1bmMubm9ybWFsaXplKHRoaXMsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGVxdWFscyh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5leGFjdEVxdWFscyh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDMobWF0Mykge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQzKHRoaXMsIHRoaXMsIG1hdDMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZVJvdGF0ZU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy5zY2FsZVJvdGF0ZU1hdDQodGhpcywgdGhpcywgbWF0NCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFwcGx5UXVhdGVybmlvbihxKSB7XG4gICAgICAgIFZlYzNGdW5jLnRyYW5zZm9ybVF1YXQodGhpcywgdGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZ2xlKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmFuZ2xlKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGxlcnAodiwgdCkge1xuICAgICAgICBWZWMzRnVuYy5sZXJwKHRoaXMsIHRoaXMsIHYsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzbW9vdGhMZXJwKHYsIGRlY2F5LCBkdCkge1xuICAgICAgICBWZWMzRnVuYy5zbW9vdGhMZXJwKHRoaXMsIHRoaXMsIHYsIGRlY2F5LCBkdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlYzModGhpc1swXSwgdGhpc1sxXSwgdGhpc1syXSk7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXNbMF0gPSBhW29dO1xuICAgICAgICB0aGlzWzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXNbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtRGlyZWN0aW9uKG1hdDQpIHtcbiAgICAgICAgY29uc3QgeCA9IHRoaXNbMF07XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzWzFdO1xuICAgICAgICBjb25zdCB6ID0gdGhpc1syXTtcblxuICAgICAgICB0aGlzWzBdID0gbWF0NFswXSAqIHggKyBtYXQ0WzRdICogeSArIG1hdDRbOF0gKiB6O1xuICAgICAgICB0aGlzWzFdID0gbWF0NFsxXSAqIHggKyBtYXQ0WzVdICogeSArIG1hdDRbOV0gKiB6O1xuICAgICAgICB0aGlzWzJdID0gbWF0NFsyXSAqIHggKyBtYXQ0WzZdICogeSArIG1hdDRbMTBdICogejtcblxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9XG59XG4iLCIvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbk1hdHJpeChvdXQsIG0sIG9yZGVyID0gJ1lYWicpIHtcbiAgICBpZiAob3JkZXIgPT09ICdYWVonKSB7XG4gICAgICAgIG91dFsxXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzhdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bOF0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzJdID0gMDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWFonKSB7XG4gICAgICAgIG91dFswXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVs5XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzldKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gMDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICAgIG91dFswXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzZdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bNl0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzBdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWVgnKSB7XG4gICAgICAgIG91dFsxXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVsyXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzJdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IDA7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzVdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWlgnKSB7XG4gICAgICAgIG91dFsyXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzFdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bMV0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IDA7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICAgIG91dFsyXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVs0XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzRdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIDN4MyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSAgIHRoZSBzb3VyY2UgNHg0IG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVs0XTtcbiAgICBvdXRbNF0gPSBhWzVdO1xuICAgIG91dFs1XSA9IGFbNl07XG4gICAgb3V0WzZdID0gYVs4XTtcbiAgICBvdXRbN10gPSBhWzldO1xuICAgIG91dFs4XSA9IGFbMTBdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzNdID0geXggLSB3ejtcbiAgICBvdXRbNl0gPSB6eCArIHd5O1xuXG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbNF0gPSAxIC0geHggLSB6ejtcbiAgICBvdXRbN10gPSB6eSAtIHd4O1xuXG4gICAgb3V0WzJdID0genggLSB3eTtcbiAgICBvdXRbNV0gPSB6eSArIHd4O1xuICAgIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgb3V0WzBdID0gbTAwO1xuICAgIG91dFsxXSA9IG0wMTtcbiAgICBvdXRbMl0gPSBtMDI7XG4gICAgb3V0WzNdID0gbTEwO1xuICAgIG91dFs0XSA9IG0xMTtcbiAgICBvdXRbNV0gPSBtMTI7XG4gICAgb3V0WzZdID0gbTIwO1xuICAgIG91dFs3XSA9IG0yMTtcbiAgICBvdXRbOF0gPSBtMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgYSBtYXQzIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAxO1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGlmIChvdXQgPT09IGEpIHtcbiAgICAgICAgbGV0IGEwMSA9IGFbMV0sXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICAgICAgYTEyID0gYVs1XTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYTAxO1xuICAgICAgICBvdXRbNV0gPSBhWzddO1xuICAgICAgICBvdXRbNl0gPSBhMDI7XG4gICAgICAgIG91dFs3XSA9IGExMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICBvdXRbMV0gPSBhWzNdO1xuICAgICAgICBvdXRbMl0gPSBhWzZdO1xuICAgICAgICBvdXRbM10gPSBhWzFdO1xuICAgICAgICBvdXRbNF0gPSBhWzRdO1xuICAgICAgICBvdXRbNV0gPSBhWzddO1xuICAgICAgICBvdXRbNl0gPSBhWzJdO1xuICAgICAgICBvdXRbN10gPSBhWzVdO1xuICAgICAgICBvdXRbOF0gPSBhWzhdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgbGV0IGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgbGV0IGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF07XG5cbiAgICBsZXQgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxO1xuICAgIGxldCBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwO1xuICAgIGxldCBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMTtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSBiMDEgKiBkZXQ7XG4gICAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogZGV0O1xuICAgIG91dFszXSA9IGIxMSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgICBvdXRbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBkZXQ7XG4gICAgb3V0WzZdID0gYjIxICogZGV0O1xuICAgIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGRldDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgbGV0IGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgbGV0IGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF07XG5cbiAgICBsZXQgYjAwID0gYlswXSxcbiAgICAgICAgYjAxID0gYlsxXSxcbiAgICAgICAgYjAyID0gYlsyXTtcbiAgICBsZXQgYjEwID0gYlszXSxcbiAgICAgICAgYjExID0gYls0XSxcbiAgICAgICAgYjEyID0gYls1XTtcbiAgICBsZXQgYjIwID0gYls2XSxcbiAgICAgICAgYjIxID0gYls3XSxcbiAgICAgICAgYjIyID0gYls4XTtcblxuICAgIG91dFswXSA9IGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMDtcbiAgICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gICAgb3V0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xuXG4gICAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICAgIG91dFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcbiAgICBvdXRbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XG5cbiAgICBvdXRbNl0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjA7XG4gICAgb3V0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xuICAgIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIG1hdDMgYnkgdGhlIGdpdmVuIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IGEwMDtcbiAgICBvdXRbMV0gPSBhMDE7XG4gICAgb3V0WzJdID0gYTAyO1xuXG4gICAgb3V0WzNdID0gYTEwO1xuICAgIG91dFs0XSA9IGExMTtcbiAgICBvdXRbNV0gPSBhMTI7XG5cbiAgICBvdXRbNl0gPSB4ICogYTAwICsgeSAqIGExMCArIGEyMDtcbiAgICBvdXRbN10gPSB4ICogYTAxICsgeSAqIGExMSArIGEyMTtcbiAgICBvdXRbOF0gPSB4ICogYTAyICsgeSAqIGExMiArIGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XSxcbiAgICAgICAgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XSxcbiAgICAgICAgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYyAqIGEwMCArIHMgKiBhMTA7XG4gICAgb3V0WzFdID0gYyAqIGEwMSArIHMgKiBhMTE7XG4gICAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG5cbiAgICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcbiAgICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcbiAgICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcblxuICAgIG91dFs2XSA9IGEyMDtcbiAgICBvdXRbN10gPSBhMjE7XG4gICAgb3V0WzhdID0gYTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQzIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdO1xuXG4gICAgb3V0WzBdID0geCAqIGFbMF07XG4gICAgb3V0WzFdID0geCAqIGFbMV07XG4gICAgb3V0WzJdID0geCAqIGFbMl07XG5cbiAgICBvdXRbM10gPSB5ICogYVszXTtcbiAgICBvdXRbNF0gPSB5ICogYVs0XTtcbiAgICBvdXRbNV0gPSB5ICogYVs1XTtcblxuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBub3JtYWwgbWF0cml4ICh0cmFuc3Bvc2UgaW52ZXJzZSkgZnJvbSB0aGUgNHg0IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7bWF0NH0gYSBNYXQ0IHRvIGRlcml2ZSB0aGUgbm9ybWFsIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsRnJvbU1hdDQob3V0LCBhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICBsZXQgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gICAgaWYgKCFkZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICAgIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzNdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG5cbiAgICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgMkQgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHlvdXIgZ2wgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbihvdXQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBvdXRbMF0gPSAyIC8gd2lkdGg7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gLTIgLyBoZWlnaHQ7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAtMTtcbiAgICBvdXRbN10gPSAxO1xuICAgIG91dFs4XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICBvdXRbM10gPSBhWzNdICogYjtcbiAgICBvdXRbNF0gPSBhWzRdICogYjtcbiAgICBvdXRbNV0gPSBhWzVdICogYjtcbiAgICBvdXRbNl0gPSBhWzZdICogYjtcbiAgICBvdXRbN10gPSBhWzddICogYjtcbiAgICBvdXRbOF0gPSBhWzhdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuIiwiaW1wb3J0ICogYXMgdmVjMyBmcm9tICcuL1ZlYzNGdW5jLmpzJztcblxuY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQ0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIG91dFs5XSA9IGFbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgb3V0WzBdID0gbTAwO1xuICAgIG91dFsxXSA9IG0wMTtcbiAgICBvdXRbMl0gPSBtMDI7XG4gICAgb3V0WzNdID0gbTAzO1xuICAgIG91dFs0XSA9IG0xMDtcbiAgICBvdXRbNV0gPSBtMTE7XG4gICAgb3V0WzZdID0gbTEyO1xuICAgIG91dFs3XSA9IG0xMztcbiAgICBvdXRbOF0gPSBtMjA7XG4gICAgb3V0WzldID0gbTIxO1xuICAgIG91dFsxMF0gPSBtMjI7XG4gICAgb3V0WzExXSA9IG0yMztcbiAgICBvdXRbMTJdID0gbTMwO1xuICAgIG91dFsxM10gPSBtMzE7XG4gICAgb3V0WzE0XSA9IG0zMjtcbiAgICBvdXRbMTVdID0gbTMzO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAxO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDE7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGlmIChvdXQgPT09IGEpIHtcbiAgICAgICAgbGV0IGEwMSA9IGFbMV0sXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICAgICAgYTAzID0gYVszXTtcbiAgICAgICAgbGV0IGExMiA9IGFbNl0sXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xuICAgICAgICBsZXQgYTIzID0gYVsxMV07XG5cbiAgICAgICAgb3V0WzFdID0gYVs0XTtcbiAgICAgICAgb3V0WzJdID0gYVs4XTtcbiAgICAgICAgb3V0WzNdID0gYVsxMl07XG4gICAgICAgIG91dFs0XSA9IGEwMTtcbiAgICAgICAgb3V0WzZdID0gYVs5XTtcbiAgICAgICAgb3V0WzddID0gYVsxM107XG4gICAgICAgIG91dFs4XSA9IGEwMjtcbiAgICAgICAgb3V0WzldID0gYTEyO1xuICAgICAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgICAgIG91dFsxMl0gPSBhMDM7XG4gICAgICAgIG91dFsxM10gPSBhMTM7XG4gICAgICAgIG91dFsxNF0gPSBhMjM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVs0XTtcbiAgICAgICAgb3V0WzJdID0gYVs4XTtcbiAgICAgICAgb3V0WzNdID0gYVsxMl07XG4gICAgICAgIG91dFs0XSA9IGFbMV07XG4gICAgICAgIG91dFs1XSA9IGFbNV07XG4gICAgICAgIG91dFs2XSA9IGFbOV07XG4gICAgICAgIG91dFs3XSA9IGFbMTNdO1xuICAgICAgICBvdXRbOF0gPSBhWzJdO1xuICAgICAgICBvdXRbOV0gPSBhWzZdO1xuICAgICAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzEyXSA9IGFbM107XG4gICAgICAgIG91dFsxM10gPSBhWzddO1xuICAgICAgICBvdXRbMTRdID0gYVsxMV07XG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgICBvdXRbM10gPSAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgICBvdXRbNl0gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgICBvdXRbOV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcbiAgICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gICAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMl0gPSAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAqIGRldDtcbiAgICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xuICAgIG91dFsxNV0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcbiAgICBsZXQgYjAgPSBiWzBdLFxuICAgICAgICBiMSA9IGJbMV0sXG4gICAgICAgIGIyID0gYlsyXSxcbiAgICAgICAgYjMgPSBiWzNdO1xuICAgIG91dFswXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFsxXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFszXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuXG4gICAgYjAgPSBiWzRdO1xuICAgIGIxID0gYls1XTtcbiAgICBiMiA9IGJbNl07XG4gICAgYjMgPSBiWzddO1xuICAgIG91dFs0XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFs1XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFs3XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuXG4gICAgYjAgPSBiWzhdO1xuICAgIGIxID0gYls5XTtcbiAgICBiMiA9IGJbMTBdO1xuICAgIGIzID0gYlsxMV07XG4gICAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gICAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYlsxMl07XG4gICAgYjEgPSBiWzEzXTtcbiAgICBiMiA9IGJbMTRdO1xuICAgIGIzID0gYlsxNV07XG4gICAgb3V0WzEyXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFsxM10gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gICAgb3V0WzE1XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdLFxuICAgICAgICB6ID0gdlsyXTtcbiAgICBsZXQgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICAgIGxldCBhMTAsIGExMSwgYTEyLCBhMTM7XG4gICAgbGV0IGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICAgIGlmIChhID09PSBvdXQpIHtcbiAgICAgICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYTAwID0gYVswXTtcbiAgICAgICAgYTAxID0gYVsxXTtcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICAgICAgYTEwID0gYVs0XTtcbiAgICAgICAgYTExID0gYVs1XTtcbiAgICAgICAgYTEyID0gYVs2XTtcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICAgICAgYTIwID0gYVs4XTtcbiAgICAgICAgYTIxID0gYVs5XTtcbiAgICAgICAgYTIyID0gYVsxMF07XG4gICAgICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIG91dFswXSA9IGEwMDtcbiAgICAgICAgb3V0WzFdID0gYTAxO1xuICAgICAgICBvdXRbMl0gPSBhMDI7XG4gICAgICAgIG91dFszXSA9IGEwMztcbiAgICAgICAgb3V0WzRdID0gYTEwO1xuICAgICAgICBvdXRbNV0gPSBhMTE7XG4gICAgICAgIG91dFs2XSA9IGExMjtcbiAgICAgICAgb3V0WzddID0gYTEzO1xuICAgICAgICBvdXRbOF0gPSBhMjA7XG4gICAgICAgIG91dFs5XSA9IGEyMTtcbiAgICAgICAgb3V0WzEwXSA9IGEyMjtcbiAgICAgICAgb3V0WzExXSA9IGEyMztcblxuICAgICAgICBvdXRbMTJdID0gYTAwICogeCArIGExMCAqIHkgKyBhMjAgKiB6ICsgYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYTAzICogeCArIGExMyAqIHkgKyBhMjMgKiB6ICsgYVsxNV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7dmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXSxcbiAgICAgICAgeiA9IHZbMl07XG5cbiAgICBvdXRbMF0gPSBhWzBdICogeDtcbiAgICBvdXRbMV0gPSBhWzFdICogeDtcbiAgICBvdXRbMl0gPSBhWzJdICogeDtcbiAgICBvdXRbM10gPSBhWzNdICogeDtcbiAgICBvdXRbNF0gPSBhWzRdICogeTtcbiAgICBvdXRbNV0gPSBhWzVdICogeTtcbiAgICBvdXRbNl0gPSBhWzZdICogeTtcbiAgICBvdXRbN10gPSBhWzddICogeTtcbiAgICBvdXRbOF0gPSBhWzhdICogejtcbiAgICBvdXRbOV0gPSBhWzldICogejtcbiAgICBvdXRbMTBdID0gYVsxMF0gKiB6O1xuICAgIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gICAgbGV0IHggPSBheGlzWzBdLFxuICAgICAgICB5ID0gYXhpc1sxXSxcbiAgICAgICAgeiA9IGF4aXNbMl07XG4gICAgbGV0IGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XG4gICAgbGV0IHMsIGMsIHQ7XG4gICAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgICBsZXQgYTEwLCBhMTEsIGExMiwgYTEzO1xuICAgIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG4gICAgbGV0IGIwMCwgYjAxLCBiMDI7XG4gICAgbGV0IGIxMCwgYjExLCBiMTI7XG4gICAgbGV0IGIyMCwgYjIxLCBiMjI7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IEVQU0lMT04pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB4ICo9IGxlbjtcbiAgICB5ICo9IGxlbjtcbiAgICB6ICo9IGxlbjtcblxuICAgIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgIHQgPSAxIC0gYztcblxuICAgIGEwMCA9IGFbMF07XG4gICAgYTAxID0gYVsxXTtcbiAgICBhMDIgPSBhWzJdO1xuICAgIGEwMyA9IGFbM107XG4gICAgYTEwID0gYVs0XTtcbiAgICBhMTEgPSBhWzVdO1xuICAgIGExMiA9IGFbNl07XG4gICAgYTEzID0gYVs3XTtcbiAgICBhMjAgPSBhWzhdO1xuICAgIGEyMSA9IGFbOV07XG4gICAgYTIyID0gYVsxMF07XG4gICAgYTIzID0gYVsxMV07XG5cbiAgICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcbiAgICBiMDAgPSB4ICogeCAqIHQgKyBjO1xuICAgIGIwMSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICAgIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO1xuICAgIGIxMSA9IHkgKiB5ICogdCArIGM7XG4gICAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gICAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7XG4gICAgYjIxID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgYjIyID0geiAqIHogKiB0ICsgYztcblxuICAgIC8vIFBlcmZvcm0gcm90YXRpb24tc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAgb3V0WzBdID0gYTAwICogYjAwICsgYTEwICogYjAxICsgYTIwICogYjAyO1xuICAgIG91dFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgICBvdXRbMl0gPSBhMDIgKiBiMDAgKyBhMTIgKiBiMDEgKyBhMjIgKiBiMDI7XG4gICAgb3V0WzNdID0gYTAzICogYjAwICsgYTEzICogYjAxICsgYTIzICogYjAyO1xuICAgIG91dFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgICBvdXRbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gICAgb3V0WzZdID0gYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyO1xuICAgIG91dFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgICBvdXRbOF0gPSBhMDAgKiBiMjAgKyBhMTAgKiBiMjEgKyBhMjAgKiBiMjI7XG4gICAgb3V0WzldID0gYTAxICogYjIwICsgYTExICogYjIxICsgYTIxICogYjIyO1xuICAgIG91dFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gICAgb3V0WzExXSA9IGEwMyAqIGIyMCArIGExMyAqIGIyMSArIGEyMyAqIGIyMjtcblxuICAgIGlmIChhICE9PSBvdXQpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvbixcbiAqICB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgdHJhbnNsYXRpb24gY29tcG9uZW50XG4gKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICAgIG91dFswXSA9IG1hdFsxMl07XG4gICAgb3V0WzFdID0gbWF0WzEzXTtcbiAgICBvdXRbMl0gPSBtYXRbMTRdO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcbiAqIEBwYXJhbSAge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxpbmcob3V0LCBtYXQpIHtcbiAgICBsZXQgbTExID0gbWF0WzBdO1xuICAgIGxldCBtMTIgPSBtYXRbMV07XG4gICAgbGV0IG0xMyA9IG1hdFsyXTtcbiAgICBsZXQgbTIxID0gbWF0WzRdO1xuICAgIGxldCBtMjIgPSBtYXRbNV07XG4gICAgbGV0IG0yMyA9IG1hdFs2XTtcbiAgICBsZXQgbTMxID0gbWF0WzhdO1xuICAgIGxldCBtMzIgPSBtYXRbOV07XG4gICAgbGV0IG0zMyA9IG1hdFsxMF07XG5cbiAgICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICAgIG91dFsxXSA9IE1hdGguaHlwb3QobTIxLCBtMjIsIG0yMyk7XG4gICAgb3V0WzJdID0gTWF0aC5oeXBvdChtMzEsIG0zMiwgbTMzKTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXhTY2FsZU9uQXhpcyhtYXQpIHtcbiAgICBsZXQgbTExID0gbWF0WzBdO1xuICAgIGxldCBtMTIgPSBtYXRbMV07XG4gICAgbGV0IG0xMyA9IG1hdFsyXTtcbiAgICBsZXQgbTIxID0gbWF0WzRdO1xuICAgIGxldCBtMjIgPSBtYXRbNV07XG4gICAgbGV0IG0yMyA9IG1hdFs2XTtcbiAgICBsZXQgbTMxID0gbWF0WzhdO1xuICAgIGxldCBtMzIgPSBtYXRbOV07XG4gICAgbGV0IG0zMyA9IG1hdFsxMF07XG5cbiAgICBjb25zdCB4ID0gbTExICogbTExICsgbTEyICogbTEyICsgbTEzICogbTEzO1xuICAgIGNvbnN0IHkgPSBtMjEgKiBtMjEgKyBtMjIgKiBtMjIgKyBtMjMgKiBtMjM7XG4gICAgY29uc3QgeiA9IG0zMSAqIG0zMSArIG0zMiAqIG0zMiArIG0zMyAqIG0zMztcblxuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoeCwgeSwgeikpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb25hbCBjb21wb25lbnRcbiAqICBvZiBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aFxuICogIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLCB0aGUgcmV0dXJuZWQgcXVhdGVybmlvbiB3aWxsIGJlIHRoZVxuICogIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSB7cXVhdH0gb3V0IFF1YXRlcm5pb24gdG8gcmVjZWl2ZSB0aGUgcm90YXRpb24gY29tcG9uZW50XG4gKiBAcGFyYW0ge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFJvdGF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0ZW1wID0gWzEsIDEsIDFdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIG1hdCkge1xuICAgICAgICBsZXQgc2NhbGluZyA9IHRlbXA7XG4gICAgICAgIGdldFNjYWxpbmcoc2NhbGluZywgbWF0KTtcblxuICAgICAgICBsZXQgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gICAgICAgIGxldCBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgICAgICAgbGV0IGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuXG4gICAgICAgIGxldCBzbTExID0gbWF0WzBdICogaXMxO1xuICAgICAgICBsZXQgc20xMiA9IG1hdFsxXSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMTMgPSBtYXRbMl0gKiBpczM7XG4gICAgICAgIGxldCBzbTIxID0gbWF0WzRdICogaXMxO1xuICAgICAgICBsZXQgc20yMiA9IG1hdFs1XSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMjMgPSBtYXRbNl0gKiBpczM7XG4gICAgICAgIGxldCBzbTMxID0gbWF0WzhdICogaXMxO1xuICAgICAgICBsZXQgc20zMiA9IG1hdFs5XSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMzMgPSBtYXRbMTBdICogaXMzO1xuXG4gICAgICAgIGxldCB0cmFjZSA9IHNtMTEgKyBzbTIyICsgc20zMztcbiAgICAgICAgbGV0IFMgPSAwO1xuXG4gICAgICAgIGlmICh0cmFjZSA+IDApIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzBdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTEyIC0gc20yMSkgLyBTO1xuICAgICAgICB9IGVsc2UgaWYgKHNtMTEgPiBzbTIyICYmIHNtMTEgPiBzbTMzKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMTEgLSBzbTIyIC0gc20zMykgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgICAgIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20yMiAtIHNtMTEgLSBzbTMzKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20yMyArIHNtMzIpIC8gUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAwLjI1ICogUztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogRnJvbSBnbFRGLVRyYW5zZm9ybVxuICogaHR0cHM6Ly9naXRodWIuY29tL2Rvbm1jY3VyZHkvZ2xURi1UcmFuc2Zvcm0vYmxvYi9tYWluL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWxzL21hdGgtdXRpbHMudHNcbiAqXG4gKiBEZWNvbXBvc2UgYSBtYXQ0IHRvIFRSUyBwcm9wZXJ0aWVzLlxuICpcbiAqIEVxdWl2YWxlbnQgdG8gdGhlIE1hdHJpeDQgZGVjb21wb3NlKCkgbWV0aG9kIGluIHRocmVlLmpzLCBhbmQgaW50ZW50aW9uYWxseSBub3QgdXNpbmcgdGhlXG4gKiBnbC1tYXRyaXggdmVyc2lvbi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdG9qaS9nbC1tYXRyaXgvaXNzdWVzLzQwOFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gc3JjTWF0IE1hdHJpeCBlbGVtZW50LCB0byBiZSBkZWNvbXBvc2VkIHRvIFRSUyBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtxdWF0NH0gZHN0Um90YXRpb24gUm90YXRpb24gZWxlbWVudCwgdG8gYmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3ZlYzN9IGRzdFRyYW5zbGF0aW9uIFRyYW5zbGF0aW9uIGVsZW1lbnQsIHRvIGJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHt2ZWMzfSBkc3RTY2FsZSBTY2FsZSBlbGVtZW50LCB0byBiZSBvdmVyd3JpdHRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlKHNyY01hdCwgZHN0Um90YXRpb24sIGRzdFRyYW5zbGF0aW9uLCBkc3RTY2FsZSkge1xuICAgIGxldCBzeCA9IHZlYzMubGVuZ3RoKFtzcmNNYXRbMF0sIHNyY01hdFsxXSwgc3JjTWF0WzJdXSk7XG4gICAgY29uc3Qgc3kgPSB2ZWMzLmxlbmd0aChbc3JjTWF0WzRdLCBzcmNNYXRbNV0sIHNyY01hdFs2XV0pO1xuICAgIGNvbnN0IHN6ID0gdmVjMy5sZW5ndGgoW3NyY01hdFs4XSwgc3JjTWF0WzldLCBzcmNNYXRbMTBdXSk7XG5cbiAgICAvLyBpZiBkZXRlcm1pbmUgaXMgbmVnYXRpdmUsIHdlIG5lZWQgdG8gaW52ZXJ0IG9uZSBzY2FsZVxuICAgIGNvbnN0IGRldCA9IGRldGVybWluYW50KHNyY01hdCk7XG4gICAgaWYgKGRldCA8IDApIHN4ID0gLXN4O1xuXG4gICAgZHN0VHJhbnNsYXRpb25bMF0gPSBzcmNNYXRbMTJdO1xuICAgIGRzdFRyYW5zbGF0aW9uWzFdID0gc3JjTWF0WzEzXTtcbiAgICBkc3RUcmFuc2xhdGlvblsyXSA9IHNyY01hdFsxNF07XG5cbiAgICAvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuICAgIGNvbnN0IF9tMSA9IHNyY01hdC5zbGljZSgpO1xuXG4gICAgY29uc3QgaW52U1ggPSAxIC8gc3g7XG4gICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XG4gICAgY29uc3QgaW52U1ogPSAxIC8gc3o7XG5cbiAgICBfbTFbMF0gKj0gaW52U1g7XG4gICAgX20xWzFdICo9IGludlNYO1xuICAgIF9tMVsyXSAqPSBpbnZTWDtcblxuICAgIF9tMVs0XSAqPSBpbnZTWTtcbiAgICBfbTFbNV0gKj0gaW52U1k7XG4gICAgX20xWzZdICo9IGludlNZO1xuXG4gICAgX20xWzhdICo9IGludlNaO1xuICAgIF9tMVs5XSAqPSBpbnZTWjtcbiAgICBfbTFbMTBdICo9IGludlNaO1xuXG4gICAgZ2V0Um90YXRpb24oZHN0Um90YXRpb24sIF9tMSk7XG5cbiAgICBkc3RTY2FsZVswXSA9IHN4O1xuICAgIGRzdFNjYWxlWzFdID0gc3k7XG4gICAgZHN0U2NhbGVbMl0gPSBzejtcbn1cblxuLyoqXG4gKiBGcm9tIGdsVEYtVHJhbnNmb3JtXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZG9ubWNjdXJkeS9nbFRGLVRyYW5zZm9ybS9ibG9iL21haW4vcGFja2FnZXMvY29yZS9zcmMvdXRpbHMvbWF0aC11dGlscy50c1xuICpcbiAqIENvbXBvc2UgVFJTIHByb3BlcnRpZXMgdG8gYSBtYXQ0LlxuICpcbiAqIEVxdWl2YWxlbnQgdG8gdGhlIE1hdHJpeDQgY29tcG9zZSgpIG1ldGhvZCBpbiB0aHJlZS5qcywgYW5kIGludGVudGlvbmFsbHkgbm90IHVzaW5nIHRoZVxuICogZ2wtbWF0cml4IHZlcnNpb24uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L2lzc3Vlcy80MDhcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGRzdE1hdCBNYXRyaXggZWxlbWVudCwgdG8gYmUgbW9kaWZpZWQgYW5kIHJldHVybmVkLlxuICogQHBhcmFtIHtxdWF0NH0gc3JjUm90YXRpb24gUm90YXRpb24gZWxlbWVudCBvZiBtYXRyaXguXG4gKiBAcGFyYW0ge3ZlYzN9IHNyY1RyYW5zbGF0aW9uIFRyYW5zbGF0aW9uIGVsZW1lbnQgb2YgbWF0cml4LlxuICogQHBhcmFtIHt2ZWMzfSBzcmNTY2FsZSBTY2FsZSBlbGVtZW50IG9mIG1hdHJpeC5cbiAqIEByZXR1cm5zIHttYXQ0fSBkc3RNYXQsIG92ZXJ3cml0dGVuIHRvIG1hdDQgZXF1aXZhbGVudCBvZiBnaXZlbiBUUlMgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2UoZHN0TWF0LCBzcmNSb3RhdGlvbiwgc3JjVHJhbnNsYXRpb24sIHNyY1NjYWxlKSB7XG4gICAgY29uc3QgdGUgPSBkc3RNYXQ7XG5cbiAgICBjb25zdCB4ID0gc3JjUm90YXRpb25bMF0sXG4gICAgICAgIHkgPSBzcmNSb3RhdGlvblsxXSxcbiAgICAgICAgeiA9IHNyY1JvdGF0aW9uWzJdLFxuICAgICAgICB3ID0gc3JjUm90YXRpb25bM107XG4gICAgY29uc3QgeDIgPSB4ICsgeCxcbiAgICAgICAgeTIgPSB5ICsgeSxcbiAgICAgICAgejIgPSB6ICsgejtcbiAgICBjb25zdCB4eCA9IHggKiB4MixcbiAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgIHh6ID0geCAqIHoyO1xuICAgIGNvbnN0IHl5ID0geSAqIHkyLFxuICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgenogPSB6ICogejI7XG4gICAgY29uc3Qgd3ggPSB3ICogeDIsXG4gICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgIGNvbnN0IHN4ID0gc3JjU2NhbGVbMF0sXG4gICAgICAgIHN5ID0gc3JjU2NhbGVbMV0sXG4gICAgICAgIHN6ID0gc3JjU2NhbGVbMl07XG5cbiAgICB0ZVswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICAgIHRlWzFdID0gKHh5ICsgd3opICogc3g7XG4gICAgdGVbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICB0ZVszXSA9IDA7XG5cbiAgICB0ZVs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgIHRlWzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gICAgdGVbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICB0ZVs3XSA9IDA7XG5cbiAgICB0ZVs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgIHRlWzldID0gKHl6IC0gd3gpICogc3o7XG4gICAgdGVbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gICAgdGVbMTFdID0gMDtcblxuICAgIHRlWzEyXSA9IHNyY1RyYW5zbGF0aW9uWzBdO1xuICAgIHRlWzEzXSA9IHNyY1RyYW5zbGF0aW9uWzFdO1xuICAgIHRlWzE0XSA9IHNyY1RyYW5zbGF0aW9uWzJdO1xuICAgIHRlWzE1XSA9IDE7XG5cbiAgICByZXR1cm4gdGU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUob3V0LCBxLCB2LCBzKSB7XG4gICAgLy8gUXVhdGVybmlvbiBtYXRoXG4gICAgbGV0IHggPSBxWzBdLFxuICAgICAgICB5ID0gcVsxXSxcbiAgICAgICAgeiA9IHFbMl0sXG4gICAgICAgIHcgPSBxWzNdO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB4eSA9IHggKiB5MjtcbiAgICBsZXQgeHogPSB4ICogejI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB5eiA9IHkgKiB6MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG4gICAgbGV0IHN4ID0gc1swXTtcbiAgICBsZXQgc3kgPSBzWzFdO1xuICAgIGxldCBzeiA9IHNbMl07XG5cbiAgICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICAgIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gICAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gICAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSB2WzBdO1xuICAgIG91dFsxM10gPSB2WzFdO1xuICAgIG91dFsxNF0gPSB2WzJdO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgNHg0IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gICAgbGV0IHggPSBxWzBdLFxuICAgICAgICB5ID0gcVsxXSxcbiAgICAgICAgeiA9IHFbMl0sXG4gICAgICAgIHcgPSBxWzNdO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB5eCA9IHkgKiB4MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHp4ID0geiAqIHgyO1xuICAgIGxldCB6eSA9IHogKiB5MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG5cbiAgICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvdXRbMV0gPSB5eCArIHd6O1xuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzNdID0gMDtcblxuICAgIG91dFs0XSA9IHl4IC0gd3o7XG4gICAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzZdID0genkgKyB3eDtcbiAgICBvdXRbN10gPSAwO1xuXG4gICAgb3V0WzhdID0genggKyB3eTtcbiAgICBvdXRbOV0gPSB6eSAtIHd4O1xuICAgIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgICBvdXRbMTFdID0gMDtcblxuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpO1xuICAgIGxldCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzBdID0gZiAvIGFzcGVjdDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IGY7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzExXSA9IC0xO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICAgIG91dFsxNV0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgICBsZXQgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gICAgbGV0IGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xuICAgIGxldCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzBdID0gLTIgKiBscjtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IC0yICogYnQ7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTBdID0gMiAqIG5mO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICAgIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICAgIG91dFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgICBvdXRbMTVdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1hdHJpeCB0aGF0IG1ha2VzIHNvbWV0aGluZyBsb29rIGF0IHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7dmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7dmVjM30gdGFyZ2V0IFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgIGxldCBleWV4ID0gZXllWzBdLFxuICAgICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgICB1cHggPSB1cFswXSxcbiAgICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICAgIHVweiA9IHVwWzJdO1xuXG4gICAgbGV0IHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgICAgejEgPSBleWV5IC0gdGFyZ2V0WzFdLFxuICAgICAgICB6MiA9IGV5ZXogLSB0YXJnZXRbMl07XG5cbiAgICBsZXQgbGVuID0gejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgLy8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG4gICAgICAgIHoyID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgICAgIHowICo9IGxlbjtcbiAgICAgICAgejEgKj0gbGVuO1xuICAgICAgICB6MiAqPSBsZW47XG4gICAgfVxuXG4gICAgbGV0IHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcbiAgICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyLFxuICAgICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG5cbiAgICBsZW4gPSB4MCAqIHgwICsgeDEgKiB4MSArIHgyICogeDI7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcbiAgICAgICAgaWYgKHVweikge1xuICAgICAgICAgICAgdXB4ICs9IDFlLTY7XG4gICAgICAgIH0gZWxzZSBpZiAodXB5KSB7XG4gICAgICAgICAgICB1cHogKz0gMWUtNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVweSArPSAxZS02O1xuICAgICAgICB9XG4gICAgICAgICh4MCA9IHVweSAqIHoyIC0gdXB6ICogejEpLCAoeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyKSwgKHgyID0gdXB4ICogejEgLSB1cHkgKiB6MCk7XG5cbiAgICAgICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuICAgIH1cblxuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcblxuICAgIG91dFswXSA9IHgwO1xuICAgIG91dFsxXSA9IHgxO1xuICAgIG91dFsyXSA9IHgyO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gejEgKiB4MiAtIHoyICogeDE7XG4gICAgb3V0WzVdID0gejIgKiB4MCAtIHowICogeDI7XG4gICAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSB6MDtcbiAgICBvdXRbOV0gPSB6MTtcbiAgICBvdXRbMTBdID0gejI7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IGV5ZXg7XG4gICAgb3V0WzEzXSA9IGV5ZXk7XG4gICAgb3V0WzE0XSA9IGV5ZXo7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgb3V0WzldID0gYVs5XSArIGJbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICAgIG91dFs5XSA9IGFbOV0gLSBiWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXSAtIGJbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXSAtIGJbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXSAtIGJbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XSAtIGJbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICBvdXRbM10gPSBhWzNdICogYjtcbiAgICBvdXRbNF0gPSBhWzRdICogYjtcbiAgICBvdXRbNV0gPSBhWzVdICogYjtcbiAgICBvdXRbNl0gPSBhWzZdICogYjtcbiAgICBvdXRbN10gPSBhWzddICogYjtcbiAgICBvdXRbOF0gPSBhWzhdICogYjtcbiAgICBvdXRbOV0gPSBhWzldICogYjtcbiAgICBvdXRbMTBdID0gYVsxMF0gKiBiO1xuICAgIG91dFsxMV0gPSBhWzExXSAqIGI7XG4gICAgb3V0WzEyXSA9IGFbMTJdICogYjtcbiAgICBvdXRbMTNdID0gYVsxM10gKiBiO1xuICAgIG91dFsxNF0gPSBhWzE0XSAqIGI7XG4gICAgb3V0WzE1XSA9IGFbMTVdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuIiwiaW1wb3J0ICogYXMgdmVjNCBmcm9tICcuL1ZlYzRGdW5jLmpzJztcblxuLyoqXG4gKiBTZXQgYSBxdWF0IHRvIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0cyBhIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXG4gKiB0aGVuIHJldHVybnMgaXQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEF4aXNBbmdsZShvdXQsIGF4aXMsIHJhZCkge1xuICAgIHJhZCA9IHJhZCAqIDAuNTtcbiAgICBsZXQgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgb3V0WzBdID0gcyAqIGF4aXNbMF07XG4gICAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gICAgb3V0WzJdID0gcyAqIGF4aXNbMl07XG4gICAgb3V0WzNdID0gTWF0aC5jb3MocmFkKTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXRzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl0sXG4gICAgICAgIGJ3ID0gYlszXTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYng7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gICAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYng7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ5ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF5ICogYnk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ6ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gICAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIC8vIGJlbmNobWFya3M6XG4gICAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBsZXQgb21lZ2EsIGNvc29tLCBzaW5vbSwgc2NhbGUwLCBzY2FsZTE7XG5cbiAgICAvLyBjYWxjIGNvc2luZVxuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgICAgY29zb20gPSAtY29zb207XG4gICAgICAgIGJ4ID0gLWJ4O1xuICAgICAgICBieSA9IC1ieTtcbiAgICAgICAgYnogPSAtYno7XG4gICAgICAgIGJ3ID0gLWJ3O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgY29lZmZpY2llbnRzXG4gICAgaWYgKDEuMCAtIGNvc29tID4gMC4wMDAwMDEpIHtcbiAgICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgICAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICAgIHNjYWxlMSA9IHQ7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcbiAgICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XG4gICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAgPSBhWzBdLFxuICAgICAgICBhMSA9IGFbMV0sXG4gICAgICAgIGEyID0gYVsyXSxcbiAgICAgICAgYTMgPSBhWzNdO1xuICAgIGxldCBkb3QgPSBhMCAqIGEwICsgYTEgKiBhMSArIGEyICogYTIgKyBhMyAqIGEzO1xuICAgIGxldCBpbnZEb3QgPSBkb3QgPyAxLjAgLyBkb3QgOiAwO1xuXG4gICAgLy8gVE9ETzogV291bGQgYmUgZmFzdGVyIHRvIHJldHVybiBbMCwwLDAsMF0gaW1tZWRpYXRlbHkgaWYgZG90ID09IDBcblxuICAgIG91dFswXSA9IC1hMCAqIGludkRvdDtcbiAgICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gICAgb3V0WzJdID0gLWEyICogaW52RG90O1xuICAgIG91dFszXSA9IGEzICogaW52RG90O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29uanVnYXRlIG9mIGEgcXVhdFxuICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmp1Z2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cbiAqXG4gKiBOT1RFOiBUaGUgcmVzdWx0YW50IHF1YXRlcm5pb24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIHlvdSBzaG91bGQgYmUgc3VyZVxuICogdG8gcmVub3JtYWxpemUgdGhlIHF1YXRlcm5pb24geW91cnNlbGYgd2hlcmUgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHttYXQzfSBtIHJvdGF0aW9uIG1hdHJpeFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHtcbiAgICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAgIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICAgIGxldCBmVHJhY2UgPSBtWzBdICsgbVs0XSArIG1bOF07XG4gICAgbGV0IGZSb290O1xuXG4gICAgaWYgKGZUcmFjZSA+IDAuMCkge1xuICAgICAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XG4gICAgICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290OyAvLyAxLyg0dylcbiAgICAgICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xuICAgICAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XG4gICAgICAgIG91dFsyXSA9IChtWzFdIC0gbVszXSkgKiBmUm9vdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB8d3wgPD0gMS8yXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcbiAgICAgICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xuICAgICAgICBsZXQgaiA9IChpICsgMSkgJSAzO1xuICAgICAgICBsZXQgayA9IChpICsgMikgJSAzO1xuXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KG1baSAqIDMgKyBpXSAtIG1baiAqIDMgKyBqXSAtIG1bayAqIDMgKyBrXSArIDEuMCk7XG4gICAgICAgIG91dFtpXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290O1xuICAgICAgICBvdXRbM10gPSAobVtqICogMyArIGtdIC0gbVtrICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRbal0gPSAobVtqICogMyArIGldICsgbVtpICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRba10gPSAobVtrICogMyArIGldICsgbVtpICogMyArIGtdKSAqIGZSb290O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gZXVsZXIgYW5nbGUgeCwgeSwgei5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gZXVsZXIgQW5nbGVzIHRvIHJvdGF0ZSBhcm91bmQgZWFjaCBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge1N0cmluZ30gb3JkZXIgZGV0YWlsaW5nIG9yZGVyIG9mIG9wZXJhdGlvbnMuIERlZmF1bHQgJ1hZWicuXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIGV1bGVyLCBvcmRlciA9ICdZWFonKSB7XG4gICAgbGV0IHN4ID0gTWF0aC5zaW4oZXVsZXJbMF0gKiAwLjUpO1xuICAgIGxldCBjeCA9IE1hdGguY29zKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgc3kgPSBNYXRoLnNpbihldWxlclsxXSAqIDAuNSk7XG4gICAgbGV0IGN5ID0gTWF0aC5jb3MoZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBzeiA9IE1hdGguc2luKGV1bGVyWzJdICogMC41KTtcbiAgICBsZXQgY3ogPSBNYXRoLmNvcyhldWxlclsyXSAqIDAuNSk7XG5cbiAgICBpZiAob3JkZXIgPT09ICdYWVonKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiArIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWVgnKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5ID0gdmVjNC5jb3B5O1xuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gdmVjNC5zZXQ7XG5cbi8qKlxuICogQWRkcyB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYWRkID0gdmVjNC5hZGQ7XG5cbi8qKlxuICogU2NhbGVzIGEgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNjYWxlID0gdmVjNC5zY2FsZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGRvdCA9IHZlYzQuZG90O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbGVycCA9IHZlYzQubGVycDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gdmVjNC5sZW5ndGg7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZSA9IHZlYzQubm9ybWFsaXplO1xuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMzIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgICBsZXQgeSA9IGJbMV0gLSBhWzFdO1xuICAgIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gICAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgICBsZXQgeSA9IGJbMV0gLSBhWzFdO1xuICAgIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cblxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICAgIG91dFswXSA9IC1hWzBdO1xuICAgIG91dFsxXSA9IC1hWzFdO1xuICAgIG91dFsyXSA9IC1hWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICAgIG91dFsyXSA9IDEuMCAvIGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgfVxuICAgIG91dFswXSA9IGFbMF0gKiBsZW47XG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgICBvdXRbMl0gPSBhWzJdICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXTtcblxuICAgIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF6ICogYnggLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmcmFtZSByYXRlIGluZGVwZW5kYW50LCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gZGVjYXkgZGVjYXkgY29uc3RhbnQgZm9yIGludGVycG9sYXRpb24uIHVzZWZ1bCByYW5nZSBiZXR3ZWVuIDEgYW5kIDI1LCBmcm9tIHNsb3cgdG8gZmFzdC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdCBkZWx0YSB0aW1lXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhMZXJwKG91dCwgYSwgYiwgZGVjYXksIGR0KSB7XG4gICAgY29uc3QgZXhwID0gTWF0aC5leHAoLWRlY2F5ICogZHQpO1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuXG4gICAgb3V0WzBdID0gYlswXSArIChheCAtIGJbMF0pICogZXhwO1xuICAgIG91dFsxXSA9IGJbMV0gKyAoYXkgLSBiWzFdKSAqIGV4cDtcbiAgICBvdXRbMl0gPSBiWzJdICsgKGF6IC0gYlsyXSkgKiBleHA7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0pIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGFib3ZlIGJ1dCBkb2Vzbid0IGFwcGx5IHRyYW5zbGF0aW9uLlxuICogVXNlZnVsIGZvciByYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVSb3RhdGVNYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6KSAvIHc7XG4gICAgb3V0WzFdID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeikgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6KSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQzLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgICBsZXQgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gICAgb3V0WzFdID0geCAqIG1bMV0gKyB5ICogbVs0XSArIHogKiBtWzddO1xuICAgIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcblxuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCBxeCA9IHFbMF0sXG4gICAgICAgIHF5ID0gcVsxXSxcbiAgICAgICAgcXogPSBxWzJdLFxuICAgICAgICBxdyA9IHFbM107XG5cbiAgICBsZXQgdXZ4ID0gcXkgKiB6IC0gcXogKiB5O1xuICAgIGxldCB1dnkgPSBxeiAqIHggLSBxeCAqIHo7XG4gICAgbGV0IHV2eiA9IHF4ICogeSAtIHF5ICogeDtcblxuICAgIGxldCB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eTtcbiAgICBsZXQgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dno7XG4gICAgbGV0IHV1dnogPSBxeCAqIHV2eSAtIHF5ICogdXZ4O1xuXG4gICAgbGV0IHcyID0gcXcgKiAyO1xuICAgIHV2eCAqPSB3MjtcbiAgICB1dnkgKj0gdzI7XG4gICAgdXZ6ICo9IHcyO1xuXG4gICAgdXV2eCAqPSAyO1xuICAgIHV1dnkgKj0gMjtcbiAgICB1dXZ6ICo9IDI7XG5cbiAgICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgICBvdXRbMl0gPSB6ICsgdXZ6ICsgdXV2ejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICovXG5leHBvcnQgY29uc3QgYW5nbGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRlbXBBID0gWzAsIDAsIDBdO1xuICAgIGNvbnN0IHRlbXBCID0gWzAsIDAsIDBdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGNvcHkodGVtcEEsIGEpO1xuICAgICAgICBjb3B5KHRlbXBCLCBiKTtcblxuICAgICAgICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTtcbiAgICAgICAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XG5cbiAgICAgICAgbGV0IGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xuXG4gICAgICAgIGlmIChjb3NpbmUgPiAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLlBJO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhjb3NpbmUpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIG91dFszXSA9IHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBhWzNdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xuICAgIG91dFsyXSA9IHogKiBsZW47XG4gICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBsZXQgYXcgPSBhWzNdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICAgIHJldHVybiBvdXQ7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdG1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTtcblx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIHVuZGVmaW5lZDtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCIpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjI2OTMyM2FlOWU1NjNlNjcwYTIzXCIpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcyA9IDA7XG52YXIgYmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCwgZmV0Y2hQcmlvcml0eSkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCwgZmV0Y2hQcmlvcml0eSkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIF9tYWluID0gY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZDtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfYWNjZXB0ZWRFcnJvckhhbmRsZXJzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBfbWFpbixcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbihmdW5jdGlvbiAoKSB7fSk7XG59XG5cbmZ1bmN0aW9uIHVuYmxvY2soKSB7XG5cdGlmICgtLWJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0XHRcdHZhciBsaXN0ID0gYmxvY2tpbmdQcm9taXNlc1dhaXRpbmc7XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGxpc3RbaV0oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdC8qIGZhbGx0aHJvdWdoICovXG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMrKztcblx0XHRcdHByb21pc2UudGhlbih1bmJsb2NrLCB1bmJsb2NrKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nLnB1c2goZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVzb2x2ZShmbigpKTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0cmV0dXJuIHNldFN0YXR1cyhcImNoZWNrXCIpXG5cdFx0LnRoZW4oX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKS50aGVuKFxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInByZXBhcmVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdGtleVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHRcdFx0fSwgW10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXMgKHN0YXRlOiBcIiArXG5cdFx0XHRcdFx0Y3VycmVudFN0YXR1cyArXG5cdFx0XHRcdFx0XCIpXCJcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiYWJvcnRcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0dmFyIGRpc3Bvc2VQcm9taXNlID0gc2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHR2YXIgYXBwbHlQcm9taXNlID0gc2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwoW2Rpc3Bvc2VQcm9taXNlLCBhcHBseVByb21pc2VdKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcImZhaWxcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gbGlzdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJpZGxlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbnZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCBvbGRUYWcsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRsaW5rVGFnLm5vbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uYztcblx0fVxuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIGV2ZW50LnR5cGU7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIGVycm9yVHlwZSArIFwiOiBcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLm5hbWUgPSBcIkNodW5rTG9hZEVycm9yXCI7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRpZiAobGlua1RhZy5wYXJlbnROb2RlKSBsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXG5cdGlmIChvbGRUYWcpIHtcblx0XHRvbGRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGlua1RhZywgb2xkVGFnLm5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHR9XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG51bGwsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdHZhciBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn1cblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkIiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0ID0gdXBkYXRlZE1vZHVsZXNMaXN0O1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZWNocm9taWNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSBmYWxzZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdCFjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPTAuMC4wLjAmcG9ydD04MDgwJnBhdGhuYW1lPSUyRndzJmxvZ2dpbmc9aW5mbyZvdmVybGF5PXRydWUmcmVjb25uZWN0PTEwJmhvdD10cnVlJmxpdmUtcmVsb2FkPXRydWVcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qc1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL2FwcC9pbmRleC5qc1wiKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3R5bGVzL2luZGV4LnNjc3NcIik7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwibW9kdWxlIiwiZXhwb3J0cyIsImFuc2lIVE1MIiwiX3JlZ0FOU0kiLCJfZGVmQ29sb3JzIiwicmVzZXQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwibGlnaHRncmV5IiwiZGFya2dyZXkiLCJfc3R5bGVzIiwiX29wZW5UYWdzIiwiX2Nsb3NlVGFncyIsInRleHQiLCJ0ZXN0IiwiYW5zaUNvZGVzIiwicmV0IiwicmVwbGFjZSIsIm1hdGNoIiwic2VxIiwib3QiLCJpbmRleE9mIiwicG9wIiwicHVzaCIsImN0IiwibCIsImxlbmd0aCIsIkFycmF5Iiwiam9pbiIsIl9zZXRUYWdzIiwiY29sb3JzIiwiY29kZSIsIm9yaUNvbG9yIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsImZvckVhY2giLCJuIiwic2V0Q29sb3JzIiwiRXJyb3IiLCJfZmluYWxDb2xvcnMiLCJrZXkiLCJoZXgiLCJoYXNPd25Qcm9wZXJ0eSIsImlzQXJyYXkiLCJzb21lIiwiaCIsImRlZkhleENvbG9yIiwic2xpY2UiLCJ0YWdzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJvcGVuIiwiY2xvc2UiLCJIaWdobGlnaHQiLCJBbmltYXRpb24iLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJlbGVtZW50cyIsInN1cGVyIiwiYW5pbWF0ZUluIiwiZ3NhcCIsImZyb21UbyIsInRoaXMiLCJhdXRvQWxwaGEiLCJkZWxheSIsImR1cmF0aW9uIiwiYW5pbWF0ZU91dCIsInNldCIsIm9uUmVzaXplIiwiTGFiZWwiLCJQYXJhZ3JhcGgiLCJUaXRsZSIsIkNvbXBvbmVudCIsImNyZWF0ZU9ic2VydmVyIiwib2JzZXJ2ZXIiLCJ3aW5kb3ciLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZSIsIkFzeW5jTG9hZCIsInNyYyIsImNsYXNzTGlzdCIsImFkZCIsImdldEF0dHJpYnV0ZSIsIm9ubG9hZCIsIkJ1dHRvbiIsInBhdGgiLCJxdWVyeVNlbGVjdG9yIiwicGF0aExlbmd0aCIsImdldFRvdGFsTGVuZ3RoIiwidGltZWxpbmUiLCJwYXVzZWQiLCJlYXNlIiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZURhc2hhcnJheSIsIm9uTW91c2VFbnRlciIsInBsYXkiLCJvbk1vdXNlTGVhdmUiLCJyZXZlcnNlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbk1vdXNlRW50ZXJFdmVudCIsImJpbmQiLCJvbk1vdXNlTGVhdmVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJDb2xvck1hbmFnZXIiLCJjaGFuZ2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInRvIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJFdmVudEVtaXR0ZXIiLCJzZWxlY3RvciIsInNlbGVjdG9yQ2hpbGRyZW4iLCJjcmVhdGUiLCJIVE1MRWxlbWVudCIsImVhY2giLCJOb2RlTGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJQYWdlIiwiaWQiLCJhbmltYXRpb25zVGl0bGVzIiwiYW5pbWF0aW9uc0xhYmVscyIsImFuaW1hdGlvbnNQYXJhZ3JhcGhzIiwiYW5pbWF0aW9uc0hpZ2hsaWdodHMiLCJwcmVsb2FkZXJzIiwib25Nb3VzZVdoZWVsRXZlbnQiLCJvbldoZWVsIiwidHJhbnNmb3JtUHJlZml4IiwiUHJlZml4Iiwic2Nyb2xsIiwiY3VycmVudCIsInRhcmdldCIsImxhc3QiLCJsaW1pdCIsImNyZWF0ZUFuaW1hdGlvbnMiLCJjcmVhdGVQcmVsb2FkZXJzIiwiYW5pbWF0aW9ucyIsIm1hcCIsInNob3ciLCJhbmltYXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhbGwiLCJfIiwiaGlkZSIsImRlc3Ryb3kiLCJvbkNvbXBsZXRlIiwicGl4ZWxZIiwid3JhcHBlciIsImNsaWVudEhlaWdodCIsImlubmVySGVpZ2h0IiwidXBkYXRlIiwidXRpbHMiLCJjbGFtcCIsImludGVycG9sYXRlIiwic3R5bGUiLCJHYWxsZXJ5IiwiaW5kZXgiLCJnZW9tZXRyeSIsImdsIiwic2NlbmUiLCJzaXplcyIsImVsZW1lbnRXcmFwcGVyIiwiZ3JvdXAiLCJUcmFuc2Zvcm0iLCJzdGFydCIsImxlcnAiLCJ2ZWxvY2l0eSIsImV4dHJhIiwieCIsInkiLCJjcmVhdGVNZWRpYXMiLCJzZXRQYXJlbnQiLCJtZWRpYXNFbGVtZW50cyIsIm1lZGlhcyIsIk1lZGlhIiwibWVkaWEiLCJldmVudCIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdhbGxlcnlXaWR0aCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsIm9uVG91Y2hEb3duIiwib25Ub3VjaE1vdmUiLCJkaXN0YW5jZSIsImVuZCIsIm9uVG91Y2hVcCIsImRpcmVjdGlvbiIsIm1lc2hTY2FsZVgiLCJtZXNoIiwic2NhbGUiLCJwb3NpdGlvbiIsImhlaWdodCIsInJlbW92ZUNoaWxkIiwiY3JlYXRlVGV4dHVyZSIsImNyZWF0ZVByb2dyYW0iLCJjcmVhdGVNZXNoIiwiY3JlYXRlQm91bmRzIiwiZWxlbWVudEltYWdlIiwidGV4dHVyZSIsIlRFWFRVUkVTIiwicHJvZ3JhbSIsIlByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsInVuaWZvcm1zIiwidUFscGhhIiwidmFsdWUiLCJ0TWFwIiwidVNwZWVkIiwidVRpbWUiLCJNZXNoIiwidXBkYXRlU2NhbGUiLCJ1cGRhdGVYIiwidXBkYXRlWSIsInVwZGF0ZVJvdGF0aW9uIiwicm90YXRpb24iLCJ6IiwibWFwUmFuZ2UiLCJNYXRoIiwiUEkiLCJsZWZ0IiwidG9wIiwiY29zIiwiQWJvdXQiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZUdhbGxlcmllcyIsIlBsYW5lIiwiZ2FsbGVyaWVzRWxlbWVudHMiLCJnYWxsZXJpZXMiLCJnYWxsZXJ5IiwicGl4ZWxYIiwib3BhY2l0eSIsIm11bHRpcGxpZXIiLCJzaW4iLCJDb2xsZWN0aW9ucyIsInRyYW5zaXRpb24iLCJnYWxsZXJ5RWxlbWVudCIsImdhbGxlcnlXcmFwcGVyRWxlbWVudCIsImNvbGxlY3Rpb25BcnRpY2xlcyIsImNvbGxlY3Rpb25UaXRsZXMiLCJjb2xsZWN0aW9uQXJ0aWNsZXNBY3RpdmUiLCJtZWRpYUVsZW1lbnRzIiwiY3JlYXRlR2FsbGVyeSIsImltYWdlIiwic2VsZWN0ZWRNZWRpYSIsImZpbmQiLCJhbmltYXRlIiwiY2xpZW50V2lkdGgiLCJvbkNoYW5nZUN1cnJlbnQiLCJzZWxlY3RlZENvbGxlY3Rpb24iLCJyZW1vdmUiLCJjdXJyZW50SW5kZXgiLCJmbG9vciIsImFicyIsIkRldGFpbCIsImVsZW1lbnRJbWFnZVNyYyIsInVWaWV3cG9ydFNpemVzIiwicmFuZG9tIiwic3BlZWQiLCJIb21lIiwic2Nyb2xsQ3VycmVudCIsImhlaWdodFNlZ21lbnRzIiwid2lkdGhTZWdtZW50cyIsImdhbGxlcnlCb3VuZHMiLCJnYWxsZXJ5U2l6ZXMiLCJ4RGlzdGFuY2UiLCJ5RGlzdGFuY2UiLCJhIiwiYiIsInNxcnQiLCJvZmZzZXRYIiwibWVzaFNjYWxlWSIsIm9mZnNldFkiLCJUcmFuc2l0aW9uIiwiY29sbGVjdGlvbnMiLCJkZXRhaWxzIiwidXJsIiwic2V0RWxlbWVudCIsIkNhbnZhcyIsInRlbXBsYXRlIiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVTY2VuZSIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJhbHBoYSIsImFudGlhbGlhcyIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNhbWVyYSIsIkNhbWVyYSIsImNyZWF0ZUhvbWUiLCJob21lIiwiZGVzdHJveUhvbWUiLCJjcmVhdGVBYm91dCIsImFib3V0IiwiZGVzdHJveUFib3V0IiwiY3JlYXRlQ29sbGVjdGlvbnMiLCJkZXN0cm95Q29sbGVjdGlvbnMiLCJjcmVhdGVEZXRhaWwiLCJkZXRhaWwiLCJkZXN0cm95RGV0YWlsIiwib25QcmVsb2FkZWQiLCJvbkNoYW5nZUVuZCIsIm9uQ2hhbmdlU3RhcnQiLCJpc0Zyb21Db2xsZWN0aW9uc3RUb0RldGFpbCIsImlzRnJvbURldGFpbFRvQ29sbGVjdGlvbnMiLCJzZXRTaXplIiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJmb3YiLCJ0YW4iLCJpc0Rvd24iLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbmRlciIsIk5hdmlnYXRpb24iLCJpdGVtcyIsImxpbmtzIiwib25DaGFuZ2UiLCJDT0xPUl9CUklHSFRfR1JBWSIsIkNPTE9SX1FVQVJURVJfU1BBTklTSF9XSElURSIsIlByZWxvYWRlciIsInRpdGxlIiwibnVtYmVyIiwibnVtYmVyVGV4dCIsInNwbGl0IiwiZXhwcmVzc2lvbiIsInRpdGxlU3BhbnMiLCJjcmVhdGVMb2FkZXIiLCJBU1NFVFMiLCJUZXh0dXJlIiwiZ2VuZXJhdGVNaXBtYXBzIiwibmV3SW1hZ2UiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25Bc3NldExvYWRlZCIsInBlcmNlbnQiLCJpbm5lckhUTUwiLCJyb3VuZCIsIm9uTG9hZGVkIiwiZW1pdCIsInN0YWdnZXIiLCJwYXJlbnROb2RlIiwib29fY20iLCJldmFsIiwiZSIsImNyZWF0ZUNvbnRlbnQiLCJjcmVhdGVDYW52YXMiLCJjcmVhdGVQcmVsb2FkZXIiLCJjcmVhdGVOYXZpZ2F0aW9uIiwiY3JlYXRlUGFnZXMiLCJhZGRMaW5rTGlzdGVuZXJzIiwibmF2aWdhdGlvbiIsInByZWxvYWRlciIsIm9uY2UiLCJjb250ZW50IiwicGFnZXMiLCJwYWdlIiwib25Qb3BTdGF0ZSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJyZXF1ZXN0IiwiZmV0Y2giLCJzdGF0dXMiLCJodG1sIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkaXZDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiY29uc29sZSIsImxvZyIsImkiLCJ2IiwiY29uc29sZUxvZyIsIm9vX29vIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibm9ybWFsaXplZFdoZWVsIiwibm9ybWFsaXplV2hlZWwiLCJmcmFtZSIsImxpbmsiLCJvbmNsaWNrIiwicHJldmVudERlZmF1bHQiLCJocmVmIiwiYnV0dG9uIiwiYXBwZW5kIiwid29yZHMiLCJzcGxpdHMiLCJpdGVtIiwiY29uY2F0IiwiaXNMaW5rIiwid29yZCIsImluY2x1ZGVzIiwic3BsaXRUZXh0IiwidHJpbSIsImxpbmUiLCJsaW5lcyIsInBhcnNlTGluZSIsInNwYW5zIiwic3BhbiIsImlzU2luZ2xlTGV0dGVyIiwidGV4dENvbnRlbnQiLCJpc05vdEVtcHR5IiwiaXNOb3RBbXBlcnNhbmQiLCJpc05vdERhc2hDaGFyYWN0ZXIiLCJjYWxjdWxhdGUiLCJvZmZzZXRUb3AiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsImluaXQiLCJlbWl0dGVyIiwibmFtZSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiYXJndW1lbnRzIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJ1bmRlZmluZWQiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIlR5cGVFcnJvciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwidHlwZSIsInByZXBlbmQiLCJtIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsIlN0cmluZyIsImNvdW50Iiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsIndyYXBMaXN0ZW5lciIsImFyZyIsImVudW1lcmFibGUiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3JldmVydGluZyIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsIl9yZW5kZXJDU1NQcm9wIiwicmF0aW8iLCJkYXRhIiwidCIsInAiLCJzIiwiYyIsInUiLCJfcmVuZGVyUHJvcFdpdGhFbmQiLCJfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmciLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwiX3RoaXMiLCJ0Zm0iLCJ0cmFuc2Zvcm0iLCJfZ2V0Iiwiek9yaWdpbiIsInByb3BzIiwic3ZnIiwic3ZnbyIsIl9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMiLCJ0cmFuc2xhdGUiLCJyZW1vdmVQcm9wZXJ0eSIsIl9yZXZlcnRTdHlsZSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiaXNTdGFydCIsInVuY2FjaGUiLCJfZ2V0U3R5bGVTYXZlciIsInByb3BlcnRpZXMiLCJzYXZlciIsInJldmVydCIsInNhdmUiLCJjb3JlIiwiZ2V0Q2FjaGUiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsInByZWZlclByZWZpeCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiX2luaXRDb3JlIiwiY3NzVGV4dCIsInJldmVydGluZyIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImRpc3BsYXkiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiaW5zZXJ0QmVmb3JlIiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsImhhc0F0dHJpYnV0ZSIsIl9nZXRCQm94IiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwiZmlyc3QyQ2hhcnMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYWRkTm9uVHdlZW5pbmdQVCIsInBsdWdpbiIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsInB0IiwiUHJvcFR3ZWVuIiwiX3B0IiwiX3Byb3BzIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX25vblN0YW5kYXJkTGF5b3V0cyIsImdyaWQiLCJmbGV4IiwiX2NvbnZlcnRUb1VuaXQiLCJ1bml0IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsImN1clZhbHVlIiwicGFyc2VGbG9hdCIsImN1clVuaXQiLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsImFtb3VudCIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwiX3JvdW5kIiwidGltZSIsIl90aWNrZXIiLCJfZ2V0Q2FjaGUiLCJfcGFyc2VUcmFuc2Zvcm0iLCJvcmlnaW4iLCJfZmlyc3RUd29Pbmx5IiwiX3NwZWNpYWxQcm9wcyIsIl9nZXRQcm9wZXJ0eSIsIl90d2VlbkNvbXBsZXhDU1NTdHJpbmciLCJwcm9wIiwicmVzdWx0Iiwic3RhcnRWYWx1ZXMiLCJzdGFydE51bSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImVuZE51bSIsImNodW5rIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwibWF0Y2hJbmRleCIsIl9jb2xvclN0cmluZ0ZpbHRlciIsIl9udW1XaXRoVW5pdEV4cCIsImV4ZWMiLCJzdWJzdHJpbmciLCJfcGFyc2VSZWxhdGl2ZSIsImxhc3RJbmRleCIsIl9jb25maWciLCJ1bml0cyIsIl9uZXh0IiwiciIsIl9yZWxFeHAiLCJfa2V5d29yZFRvUGVyY2VudCIsImJvdHRvbSIsInJpZ2h0IiwiY2VudGVyIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfbnVtRXhwIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJ0ZW1wIiwiYWRkZWRUb0RPTSIsIm1hdHJpeCIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImQiLCJmIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwiR1NDYWNoZSIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJhbmdsZSIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwicm90YXRlIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJvZmZzZXRIZWlnaHQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsImZvcmNlM0QiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsImdldFVuaXQiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJfcmVmIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwiX3JlZjIiLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImNhcCIsImlzU3RyaW5nIiwiX2lzU3RyaW5nIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwiX2ZvckVhY2hOYW1lIiwic2lkZSIsInZhcnMiLCJwb3NpdGlvbkFuZFNjYWxlIiwiYWxsIiwiQ1NTUGx1Z2luIiwicmVnaXN0ZXIiLCJ0YXJnZXRUZXN0Iiwibm9kZVR5cGUiLCJ0YXJnZXRzIiwic3BlY2lhbFByb3AiLCJyZWxhdGl2ZSIsImlzVHJhbnNmb3JtUmVsYXRlZCIsInRyYW5zZm9ybVByb3BUd2VlbiIsImhhc1ByaW9yaXR5IiwiaW5saW5lUHJvcHMiLCJzdGFydEF0Iiwic3R5bGVzIiwiX3BsdWdpbnMiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsIl9jb2xvckV4cCIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJfaXNVbmRlZmluZWQiLCJfZ2V0U2V0dGVyIiwiY2hlY2tQcmVmaXgiLCJnZXRTdHlsZVNhdmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2NvbnRleHQiLCJfZ2xvYmFsVGltZWxpbmUiLCJfY29yZUluaXR0ZWQiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibjEiLCJuMiIsIm4zIiwiZWFzZU91dCIsImF1dG9TbGVlcCIsIm51bGxUYXJnZXRXYXJuIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsIm92ZXJ3cml0ZSIsIl9iaWdOdW0iLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfd2luZG93RXhpc3RzIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJfd2FybiIsInN1cHByZXNzIiwiX2FkZEdsb2JhbCIsIm9iaiIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwia2lsbCIsIl9yZXZlcnRDb25maWdOb0tpbGwiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwiaGFybmVzc1BsdWdpbiIsImhhcm5lc3MiLCJzcGxpY2UiLCJ0b0FycmF5IiwibmFtZXMiLCJmdW5jIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJmb3JjZSIsIl9pbml0dGVkIiwiX3N0YXJ0QXQiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfcGFzc1Rocm91Z2giLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiX2luaGVyaXREZWZhdWx0cyIsImV4Y2x1ZGVEdXJhdGlvbiIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwicHJldiIsIl9wcmV2IiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwibmV4dCIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwidG90YWxEdXJhdGlvbiIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJyYXdUaW1lIiwiX2NsYW1wIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJza2lwQ2hlY2tzIiwiX3BhcnNlUG9zaXRpb24iLCJfZGVsYXkiLCJ0aW1lU2NhbGUiLCJfc29ydCIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJTY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwibGF6eSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfbG9jayIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJvZmZzZXQiLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJfY3JlYXRlVHdlZW5UeXBlIiwicGFyYW1zIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJydW5CYWNrd2FyZHMiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsIm1pbiIsIm1heCIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX3dha2UiLCJlbCIsIm5hdGl2ZUVsZW1lbnQiLCJzaHVmZmxlIiwic29ydCIsImRpc3RyaWJ1dGUiLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJlZGdlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiaiIsIndyYXBBdCIsImRpc3RhbmNlcyIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImR4IiwiZHkiLCJjbG9zZXN0Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJfd3JhcEFycmF5Iiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwicHJvZ3Jlc3MiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJtYXN0ZXIiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJsYWJlbCIsIl9jYWxsYmFjayIsImV4ZWN1dGVMYXp5Rmlyc3QiLCJjYWxsYmFjayIsInByZXZDb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsIl9yZWdpc3RlclBsdWdpblF1ZXVlIiwiX2NyZWF0ZVBsdWdpbiIsImNvbmZpZyIsImhlYWRsZXNzIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsIm1hcm9vbiIsInRlYWwiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJwaW5rIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJnIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJSZWdFeHAiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJfaWQiLCJfcmVxIiwiX3JhZiIsIl9zZWxmIiwiX2RlbHRhIiwiX2kiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl90aWNrIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwiZWxhcHNlZCIsIm1hbnVhbCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsInZlcnNpb24iLCJHcmVlblNvY2tHbG9iYWxzIiwic2xlZXAiLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJsYWdTbW9vdGhpbmciLCJ0aHJlc2hvbGQiLCJhZGp1c3RlZExhZyIsIkluZmluaXR5IiwiX2ZwcyIsInByaW9yaXRpemUiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwidmFsIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJfZmlyc3QiLCJ5b3lvRWFzZSIsIl95b3lvIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsIm5lc3RlZCIsIl9DRSIsIl9jb25maWdFYXNlRnJvbVN0cmluZyIsIl9pbnNlcnRFYXNlIiwiZWFzZUluIiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsIl9lYXNlSW5PdXRGcm9tT3V0IiwiX2NvbmZpZ0VsYXN0aWMiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJwMSIsInAyIiwicDMiLCJhc2luIiwiX2NvbmZpZ0JhY2siLCJvdmVyc2hvb3QiLCJwb3dlciIsIkxpbmVhciIsImVhc2VOb25lIiwibm9uZSIsIlN0ZXBwZWRFYXNlIiwic3RlcHMiLCJpbW1lZGlhdGVTdGFydCIsInJlcGVhdERlbGF5IiwieW95byIsIl9wcm90byIsInN0YXJ0VGltZSIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJpdGVyYXRpb24iLCJfcHMiLCJfcmVjYWNoZUFuY2VzdG9ycyIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicmV2ZXJzZWQiLCJwYXVzZSIsImF0VGltZSIsInJlc3VtZSIsImludmFsaWRhdGUiLCJpc0FjdGl2ZSIsImV2ZW50Q2FsbGJhY2siLCJfb25VcGRhdGUiLCJ0aGVuIiwib25GdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIl90aGVuIiwiX3Byb20iLCJfQW5pbWF0aW9uIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsImZyb21WYXJzIiwidG9WYXJzIiwiZGVsYXllZENhbGwiLCJzdGFnZ2VyVG8iLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGVQYXJhbXMiLCJzdGFnZ2VyRnJvbSIsInN0YWdnZXJGcm9tVG8iLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInByZXZJdGVyYXRpb24iLCJwcmV2VGltZSIsInREdXIiLCJjcm9zc2luZ1N0YXJ0IiwicmV3aW5kaW5nIiwiZG9lc1dyYXAiLCJyZXBlYXRSZWZyZXNoIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIl9sYXN0IiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsIm9uVXBkYXRlIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJnZXRCeUlkIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsImNoaWxkcmVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsIl90YXJnZXRzIiwidHdlZW5UbyIsImluaXR0ZWQiLCJ0bCIsIl92YXJzIiwiX29uU3RhcnQiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsInNvZnQiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiaGFzUmFuZG9tIiwiZnAiLCJvcHRpb25hbCIsImN1cnJlbnRWYWx1ZSIsInBhcnNlZFN0YXJ0IiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9zZXR0ZXJQbGFpbiIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwicHRMb29rdXAiLCJfcGFyc2VGdW5jT3JTdHJpbmciLCJfcHJvY2Vzc1ZhcnMiLCJwcmlvcml0eSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX29uSW5pdCIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJyZXNldFRvIiwic3RhcnRJc1JlbGF0aXZlIiwic2tpcFJlY3Vyc2lvbiIsInJvb3RQVCIsImxvb2t1cCIsInB0Q2FjaGUiLCJfdXBkYXRlUHJvcFR3ZWVucyIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsImExIiwiYTIiLCJfYXJyYXlzTWF0Y2giLCJwcm9wZXJ0eUFsaWFzZXMiLCJfYWRkQWxpYXNlc1RvVmFycyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9jb250ZXh0SUQiLCJfZGlzcGF0Y2giLCJfb25NZWRpYUNoYW5nZSIsIm1hdGNoZXMiLCJhbnlNYXRjaCIsInRvZ2dsZWQiLCJxdWVyaWVzIiwiY29uZGl0aW9ucyIsIm1hdGNoTWVkaWEiLCJvbk1hdGNoIiwiQ29udGV4dCIsIl9yIiwiaXNSZXZlcnRlZCIsIl9wcm90bzUiLCJwcmV2U2VsZWN0b3IiLCJpZ25vcmUiLCJnZXRUd2VlbnMiLCJfdGhpczQiLCJvIiwiTWF0Y2hNZWRpYSIsImNvbnRleHRzIiwiX3Byb3RvNiIsIm1xIiwiYWN0aXZlIiwiY29uZCIsIl9sZW4yIiwiX2tleTIiLCJnZXRQcm9wZXJ0eSIsImdldHRlciIsImZvcm1hdCIsInF1aWNrU2V0dGVyIiwic2V0dGVycyIsInF1aWNrVG8iLCJfbWVyZ2UyIiwiaXNUd2VlbmluZyIsInJlZ2lzdGVyRWZmZWN0IiwiX3JlZjMiLCJlZmZlY3QiLCJwbHVnaW5zIiwiZXh0ZW5kVGltZWxpbmUiLCJwbHVnaW5OYW1lIiwicmVnaXN0ZXJFYXNlIiwicGFyc2VFYXNlIiwiZXhwb3J0Um9vdCIsImluY2x1ZGVEZWxheWVkQ2FsbHMiLCJtYXRjaE1lZGlhUmVmcmVzaCIsImZvdW5kIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImdsb2JhbHMiLCJ0b0FkZCIsInN1cHByZXNzT3ZlcndyaXRlcyIsIl9nZXRQbHVnaW5Qcm9wVHdlZW4iLCJfYnVpbGRNb2RpZmllclBsdWdpbiIsIm1vZGlmaWVycyIsIl9hZGRNb2RpZmllcnMiLCJQb3dlcjAiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJRdWFkIiwiQ3ViaWMiLCJRdWFydCIsIlF1aW50IiwiU3Ryb25nIiwiRWxhc3RpYyIsIkJhY2siLCJCb3VuY2UiLCJTaW5lIiwiRXhwbyIsIkNpcmMiLCJnc2FwV2l0aENTUyIsIlR3ZWVuTWF4V2l0aENTUyIsIl9fYXNzaWduIiwiYXNzaWduIiwibmFtZWRfcmVmZXJlbmNlc18xIiwibnVtZXJpY191bmljb2RlX21hcF8xIiwic3Vycm9nYXRlX3BhaXJzXzEiLCJhbGxOYW1lZFJlZmVyZW5jZXMiLCJuYW1lZFJlZmVyZW5jZXMiLCJodG1sNSIsInJlcGxhY2VVc2luZ1JlZ0V4cCIsIm1hY3JvVGV4dCIsIm1hY3JvUmVnRXhwIiwibWFjcm9SZXBsYWNlciIsInJlcGxhY2VSZXN1bHQiLCJyZXBsYWNlTWF0Y2giLCJyZXBsYWNlTGFzdEluZGV4IiwicmVwbGFjZUlucHV0IiwiZW5jb2RlUmVnRXhwcyIsInNwZWNpYWxDaGFycyIsIm5vbkFzY2lpIiwibm9uQXNjaWlQcmludGFibGUiLCJub25Bc2NpaVByaW50YWJsZU9ubHkiLCJleHRlbnNpdmUiLCJkZWZhdWx0RW5jb2RlT3B0aW9ucyIsIm1vZGUiLCJsZXZlbCIsIm51bWVyaWMiLCJlbmNvZGUiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiZW5jb2RlUmVnRXhwIiwicmVmZXJlbmNlcyIsImNoYXJhY3RlcnMiLCJpc0hleCIsImlucHV0IiwiZ2V0Q29kZVBvaW50IiwiY2hhckNvZGVBdCIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwic3RyaWN0IiwiYXR0cmlidXRlIiwiYmFzZURlY29kZVJlZ0V4cHMiLCJ4bWwiLCJib2R5UmVnRXhwcyIsImh0bWw0IiwiZGVjb2RlUmVnRXhwcyIsImZyb21DaGFyQ29kZSIsIm91dE9mQm91bmRzQ2hhciIsImRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIiwiZ2V0RGVjb2RlZEVudGl0eSIsImVudGl0eSIsImlzQXR0cmlidXRlIiwiaXNTdHJpY3QiLCJkZWNvZGVSZXN1bHQiLCJkZWNvZGVFbnRpdHlMYXN0Q2hhciIsImRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlIiwiZGVjb2RlU2Vjb25kQ2hhciIsImRlY29kZUNvZGUiLCJmcm9tQ29kZVBvaW50IiwibnVtZXJpY1VuaWNvZGVNYXAiLCJkZWNvZGVFbnRpdHkiLCJlbnRpdGllcyIsImRlY29kZSIsImRlY29kZVJlZ0V4cCIsIiQiLCJmaiIsImFzdHJhbENvZGVQb2ludCIsImNvZGVQb2ludEF0IiwiaGlnaFN1cnJvZ2F0ZUZyb20iLCJoaWdoU3Vycm9nYXRlVG8iLCJEYXRhVmlldyIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiaGFzIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJNYXAiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsIlNldCIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJzdGFja0hhcyIsInN0YWNrU2V0IiwiU3RhY2siLCJzaXplIiwiU3ltYm9sIiwiVWludDhBcnJheSIsIldlYWtNYXAiLCJhcnJheSIsIml0ZXJhdGVlIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJiYXNlVGltZXMiLCJpc0FyZ3VtZW50cyIsImlzQnVmZmVyIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImVxIiwiYmFzZUZvck93biIsImJhc2VFYWNoIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsIm9iamVjdCIsImNhc3RQYXRoIiwidG9LZXkiLCJhcnJheVB1c2giLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiYXJnc1RhZyIsImFycmF5VGFnIiwib2JqZWN0VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJpc0Z1bmN0aW9uIiwiaXNNYXNrZWQiLCJpc09iamVjdCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiaXNMZW5ndGgiLCJ0eXBlZEFycmF5VGFncyIsImJhc2VNYXRjaGVzIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlkZW50aXR5IiwiaXNQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiaXNBcnJheUxpa2UiLCJjb2xsZWN0aW9uIiwiYmFzZUlzTWF0Y2giLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJiYXNlR2V0IiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJzdHJpbmdUb1BhdGgiLCJjb3JlSnNEYXRhIiwiZWFjaEZ1bmMiLCJmcm9tUmlnaHQiLCJpdGVyYWJsZSIsImFycmF5U29tZSIsImNhY2hlSGFzIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwiYXJyU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwidGFnIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJjb252ZXJ0Iiwic3RhY2tlZCIsImdldEFsbEtleXMiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJza2lwQ3RvciIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZnJlZUdsb2JhbCIsImJhc2VHZXRBbGxLZXlzIiwiZ2V0U3ltYm9scyIsImlzS2V5YWJsZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJzeW1ib2wiLCJtYXBUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiQ3RvciIsImN0b3JTdHJpbmciLCJoYXNGdW5jIiwibmF0aXZlQ3JlYXRlIiwicmVJc1VpbnQiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwidWlkIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwiYXNzb2NJbmRleE9mIiwiZ2V0TWFwRGF0YSIsIm1lbW9pemUiLCJvdmVyQXJnIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwiZnJlZVNlbGYiLCJyb290IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmciLCJxdW90ZSIsInN1YlN0cmluZyIsImFycmF5RWFjaCIsImNhc3RGdW5jdGlvbiIsImRlZmF1bHRWYWx1ZSIsImJhc2VIYXNJbiIsImhhc1BhdGgiLCJiYXNlSXNBcmd1bWVudHMiLCJzdHViRmFsc2UiLCJCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXAiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJub0RvY3VtZW50Iiwibm9vcCIsInVwZGF0ZUNzcyIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicmVsb2FkU3R5bGUiLCJsb2FkZWQiLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRBbGwiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJmbiIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvY2FscyIsInVybFN0cmluZyIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJsb2NhbHNKc29uU3RyaW5nIiwiY3NzUmVsb2FkIiwiaG90IiwiYWNjZXB0IiwiZGlzcG9zZSIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJfaWUiLCJfZmlyZWZveCIsIl9vcGVyYSIsIl93ZWJraXQiLCJfY2hyb21lIiwiX2llX3JlYWxfdmVyc2lvbiIsIl9vc3giLCJfd2luZG93cyIsIl9saW51eCIsIl9hbmRyb2lkIiwiX3dpbjY0IiwiX2lwaG9uZSIsIl9pcGFkIiwiX25hdGl2ZSIsIl9tb2JpbGUiLCJfcG9wdWxhdGVkIiwiX3BvcHVsYXRlIiwidWFzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYWdlbnQiLCJvcyIsIk5hTiIsImRvY3VtZW50TW9kZSIsInRyaWRlbnQiLCJ2ZXIiLCJVc2VyQWdlbnRfREVQUkVDQVRFRCIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJtb2JpbGUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsInVzZUhhc0ZlYXR1cmUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJldmVudE5hbWVTdWZmaXgiLCJjYXB0dXJlIiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJpc0V2ZW50U3VwcG9ydGVkIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJnZXRFdmVudFR5cGUiLCJwcmVmaXhlcyIsInVwcGVyIiwibWVtbyIsInByZWZpeCIsImNoYXIiLCJLZXkiLCJkYXNoIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwicmVzIiwiX3RvUHJpbWl0aXZlIiwiV2ViU29ja2V0Q2xpZW50IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImNsaWVudCIsIldlYlNvY2tldCIsIm9uZXJyb3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJvbm9wZW4iLCJvbmNsb3NlIiwib25tZXNzYWdlIiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2RlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJkZWNvZGVPdmVybGF5T3B0aW9ucyIsIm92ZXJsYXlPcHRpb25zIiwib3ZlcmxheUZpbHRlckZ1bmN0aW9uU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwib3ZlcmxheUZpbHRlckZ1bmN0aW9uIiwiaXNVbmxvYWRpbmciLCJjdXJyZW50SGFzaCIsImxpdmVSZWxvYWQiLCJvdmVybGF5IiwicGFyc2VkUmVzb3VyY2VRdWVyeSIsImVuYWJsZWRGZWF0dXJlcyIsIlByb2dyZXNzIiwiT3ZlcmxheSIsIkpTT04iLCJwYXJzZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFNwcmVhZCIsImVycm9ycyIsIndhcm5pbmdzIiwicnVudGltZUVycm9ycyIsInNldEFsbExvZ0xldmVsIiwic2V0TG9nTGV2ZWwiLCJsb2dnaW5nIiwicmVjb25uZWN0IiwibG9nRW5hYmxlZEZlYXR1cmVzIiwiY3JlYXRlT3ZlcmxheSIsInRydXN0ZWRUeXBlc1BvbGljeU5hbWUiLCJjYXRjaFJ1bnRpbWVFcnJvciIsInNlbmQiLCJvblNvY2tldE1lc3NhZ2UiLCJpbnZhbGlkIiwiaW5mbyIsImhhc2giLCJfaGFzaCIsInByZXZpb3VzSGFzaCIsIm1zZyIsIm9rIiwiZmlsZSIsInJlbG9hZCIsIl93YXJuaW5ncyIsInByaW50YWJsZVdhcm5pbmdzIiwiX2Zvcm1hdFByb2JsZW0iLCJmb3JtYXRQcm9ibGVtIiwiaGVhZGVyIiwib3ZlcmxheVdhcm5pbmdzU2V0dGluZyIsIm1lc3NhZ2VzIiwicHJldmVudFJlbG9hZGluZyIsIl9lcnJvcnMiLCJwcmludGFibGVFcnJvcnMiLCJfZm9ybWF0UHJvYmxlbTIiLCJvdmVybGF5RXJyb3JzU2V0dGluZ3MiLCJfZXJyb3IiLCJzb2NrZXRVUkwiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX191bnVzZWRfd2VicGFja19tb2R1bGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJpdGVyYXRvciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJhcnIyIiwiTG9nVHlwZSIsImZyZWV6ZSIsImRlYnVnIiwidHJhY2UiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicHJvZmlsZSIsInByb2ZpbGVFbmQiLCJMT0dfU1lNQk9MIiwiVElNRVJTX1NZTUJPTCIsIlRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCIsIldlYnBhY2tMb2dnZXIiLCJnZXRDaGlsZExvZ2dlciIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiX2xlbjUiLCJfa2V5NSIsImFzc2VydGlvbiIsIl9sZW42IiwiX2tleTYiLCJfbGVuNyIsIl9rZXk3IiwiX2xlbjgiLCJfa2V5OCIsIl9sZW45IiwiX2tleTkiLCJfbGVuMTAiLCJfa2V5MTAiLCJocnRpbWUiLCJkZWxldGUiLCJMb2dnZXIiLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJmaWx0ZXJUb0Z1bmN0aW9uIiwicmVnRXhwIiwiaWRlbnQiLCJMb2dMZXZlbCIsImZhbHNlIiwidHJ1ZSIsInZlcmJvc2UiLCJfcmVmJGxldmVsIiwiX3JlZiRkZWJ1ZyIsImRlYnVnRmlsdGVycyIsImxvZ2xldmVsIiwibGFiZWxlZEFyZ3MiLCJtcyIsImxvZ1RpbWUiLCJfZXh0ZW5kcyIsIlN5bmNCYWlsSG9vayIsImNyZWF0ZUNvbnNvbGVMb2dnZXIiLCJjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMiLCJjdXJyZW50RGVmYXVsdExvZ2dlciIsImdldExvZ2dlciIsImhvb2tzIiwiY2hpbGROYW1lIiwiY29uZmlndXJlRGVmYXVsdExvZ2dlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsImRlZmluaXRpb24iLCJ3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9fd2VicGFja19leHBvcnRfdGFyZ2V0X18iLCJfX2VzTW9kdWxlIiwibW9kdWxlTmFtZSIsImxvYyIsImlmcmFtZUNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwiaGVhZGVyRWxlbWVudCIsIm92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kiLCJvbkxvYWRRdWV1ZSIsImFwcGx5U3R5bGUiLCJlbnN1cmVPdmVybGF5RXhpc3RzIiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsImlmcmFtZVN0eWxlIiwiY29udGVudEVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJjb250YWluZXJTdHlsZSIsImlubmVyVGV4dCIsImhlYWRlclN0eWxlIiwiY2xvc2VCdXR0b25FbGVtZW50IiwiZGlzbWlzc0J1dHRvblN0eWxlIiwiYXJpYUxhYmVsIiwib3ZlcmxheVNlcnZpY2UiLCJvbkxvYWQiLCJjcmVhdGVDb250YWluZXIiLCJzaG93T3ZlcmxheSIsIm1lc3NhZ2VTb3VyY2UiLCJlbnRyeUVsZW1lbnQiLCJtc2dTdHlsZXMiLCJwYWRkaW5nIiwidHlwZUVsZW1lbnQiLCJtc2dUeXBlU3R5bGUiLCJtb2R1bGVJZGVudGlmaWVyIiwiY3Vyc29yIiwibWVzc2FnZVRleHROb2RlIiwibXNnVGV4dFN0eWxlIiwiaGlkZU92ZXJsYXkiLCJoYW5kbGVFcnJvciIsImZhbGxiYWNrTWVzc2FnZSIsImVycm9yT2JqZWN0IiwicGFyc2VFcnJvclRvU3RhY2tzIiwibGlzdGVuVG9SdW50aW1lRXJyb3IiLCJlcnJvckV2ZW50IiwibGlzdGVuVG9VbmhhbmRsZWRSZWplY3Rpb24iLCJwcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJyZWFzb24iLCJzdGF0ZXMiLCJpbml0aWFsIiwiYWN0aW9ucyIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRDb250ZXh0IiwiY3VycmVudFN0YXRlT24iLCJ0cmFuc2l0aW9uQ29uZmlnIiwiYWN0TmFtZSIsImFjdGlvbkltcGwiLCJuZXh0Q29udGV4dFZhbHVlIiwiaGlkZGVuIiwiQlVJTERfRVJST1IiLCJSVU5USU1FX0VSUk9SIiwiZGlzcGxheUJ1aWxkRXJyb3IiLCJESVNNSVNTIiwiZGlzcGxheVJ1bnRpbWVFcnJvciIsImRpc21pc3NNZXNzYWdlcyIsImFwcGVuZE1lc3NhZ2VzIiwic2V0TWVzc2FnZXMiLCJib3JkZXIiLCJib3hTaXppbmciLCJmb250U2l6ZSIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsImZvbnRGYW1pbHkiLCJtYXJnaW4iLCJtYXhIZWlnaHQiLCJtYXJnaW5Cb3R0b20iLCJDbGllbnQiLCJfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyIsImRlZmF1bHQiLCJyZXRyaWVzIiwibWF4UmV0cmllcyIsInNvY2tldCIsImhhbmRsZXJzIiwib25PcGVuIiwib25DbG9zZSIsInJldHJ5SW5NcyIsIm9uTWVzc2FnZSIsInBhcnNlZFVSTCIsImhvc3RuYW1lIiwiaXNJbkFkZHJBbnkiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0IiwicG9ydCIsInNvY2tldFVSTFBhdGhuYW1lIiwiZnJvbUN1cnJlbnRTY3JpcHQiLCJvYmpVUkwiLCJhdXRoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2xhc2hlcyIsInNlYXJjaCIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwiZmVhdHVyZXMiLCJsb2dTdHJpbmciLCJyZXNvdXJjZVF1ZXJ5Iiwic2VhcmNoUGFyYW1zIiwicGFpciIsInNjcmlwdFNvdXJjZVVSTCIsInNjcmlwdFNvdXJjZSIsIlVSTCIsImFsbG93VG9Ib3QiLCJhbGxvd1RvTGl2ZVJlbG9hZCIsInBvc3RNZXNzYWdlIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImFwcGx5UmVsb2FkIiwiY2xlYXJJbnRlcnZhbCIsIldvcmtlckdsb2JhbFNjb3BlIiwiYW5zaVJlZ2V4IiwibGFzdEhhc2giLCJ1cFRvRGF0ZSIsImNoZWNrIiwidXBkYXRlZE1vZHVsZXMiLCJjYXRjaCIsImZvcm1hdEVycm9yIiwicmVuZXdlZE1vZHVsZXMiLCJ1bmFjY2VwdGVkTW9kdWxlcyIsInBhcnRzIiwiZXZlcnkiLCJsb2dMZXZlbCIsImR1bW15Iiwic2hvdWxkTG9nIiwibG9nR3JvdXAiLCJsb2dGbiIsInRlbXBNYXQ0IiwiTWF0NCIsInRlbXBWZWMzYSIsIlZlYzMiLCJ0ZW1wVmVjM2IiLCJuZWFyIiwiZmFyIiwiem9vbSIsInByb2plY3Rpb25NYXRyaXgiLCJ2aWV3TWF0cml4IiwicHJvamVjdGlvblZpZXdNYXRyaXgiLCJ3b3JsZFBvc2l0aW9uIiwib3J0aG9ncmFwaGljIiwiZnJvbVBlcnNwZWN0aXZlIiwiZnJvbU9ydGhvZ29uYWwiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImludmVyc2UiLCJ3b3JsZE1hdHJpeCIsImdldFRyYW5zbGF0aW9uIiwibXVsdGlwbHkiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwibG9va0F0IiwicHJvamVjdCIsImFwcGx5TWF0cml4NCIsInVucHJvamVjdCIsInVwZGF0ZUZydXN0dW0iLCJmcnVzdHVtIiwiY29uc3RhbnQiLCJpbnZMZW4iLCJmcnVzdHVtSW50ZXJzZWN0c01lc2giLCJub2RlIiwiYXR0cmlidXRlcyIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsImdldE1heFNjYWxlT25BeGlzIiwiZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUiLCJub3JtYWwiLCJwbGFuZSIsImRvdCIsInRlbXBWZWMzIiwiSUQiLCJBVFRSX0lEIiwiaXNCb3VuZHNXYXJuZWQiLCJHZW9tZXRyeSIsIlZBT3MiLCJkcmF3UmFuZ2UiLCJpbnN0YW5jZWRDb3VudCIsImJpbmRWZXJ0ZXhBcnJheSIsImN1cnJlbnRHZW9tZXRyeSIsImdsU3RhdGUiLCJhZGRBdHRyaWJ1dGUiLCJhdHRyIiwiRmxvYXQzMkFycmF5IiwiRkxPQVQiLCJVaW50MTZBcnJheSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJBUlJBWV9CVUZGRVIiLCJub3JtYWxpemVkIiwic3RyaWRlIiwiZGl2aXNvciIsImluc3RhbmNlZCIsIm5lZWRzVXBkYXRlIiwidXNhZ2UiLCJTVEFUSUNfRFJBVyIsInVwZGF0ZUF0dHJpYnV0ZSIsImlzSW5zdGFuY2VkIiwiaXNOZXdCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJib3VuZEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYnVmZmVyU3ViRGF0YSIsInNldEluZGV4Iiwic2V0RHJhd1JhbmdlIiwic2V0SW5zdGFuY2VkQ291bnQiLCJjcmVhdGVWQU8iLCJhdHRyaWJ1dGVPcmRlciIsImNyZWF0ZVZlcnRleEFycmF5IiwiYmluZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJudW1Mb2MiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwiZHJhdyIsIlRSSUFOR0xFUyIsImluZGV4Qnl0ZXNQZXJFbGVtZW50IiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImRyYXdFbGVtZW50cyIsImRyYXdBcnJheXMiLCJnZXRQb3NpdGlvbiIsImNvbXB1dGVCb3VuZGluZ0JveCIsInN1YiIsImRpdmlkZSIsIm1heFJhZGl1c1NxIiwiZnJvbUFycmF5Iiwic3F1YXJlZERpc3RhbmNlIiwiZGVsZXRlVmVydGV4QXJyYXkiLCJkZWxldGVCdWZmZXIiLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJtb2RlbFZpZXdNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJNYXQzIiwiYmVmb3JlUmVuZGVyQ2FsbGJhY2tzIiwiYWZ0ZXJSZW5kZXJDYWxsYmFja3MiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJtb2RlbE1hdHJpeCIsImNhbWVyYVBvc2l0aW9uIiwiZ2V0Tm9ybWFsTWF0cml4IiwiZmxpcEZhY2VzIiwiY3VsbEZhY2UiLCJ1c2UiLCJhcnJheUNhY2hlRjMyIiwiQkFDSyIsImZyb250RmFjZSIsIkNDVyIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJibGVuZEZ1bmMiLCJibGVuZEVxdWF0aW9uIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0QmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsInNldFNoYWRlcnMiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFkZExpbmVOdW1iZXJzIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsInVuaWZvcm1Mb2NhdGlvbnMiLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsInVJbmRleCIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybU5hbWUiLCJuYW1lQ29tcG9uZW50cyIsImxvY2F0aW9ucyIsIm51bUF0dHJpYnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImFJbmRleCIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZHN0Iiwic3JjQWxwaGEiLCJkc3RBbHBoYSIsInNldEJsZW5kRXF1YXRpb24iLCJtb2RlUkdCIiwibW9kZUFscGhhIiwiYXBwbHlTdGF0ZSIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkaXNhYmxlIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsInNldERlcHRoTWFzayIsInNldERlcHRoRnVuYyIsInRleHR1cmVVbml0IiwiY3VycmVudFByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWN0aXZlVW5pZm9ybSIsImNvbXBvbmVudCIsInNldFVuaWZvcm0iLCJ0ZXh0dXJlVW5pdHMiLCJDVyIsImRlbGV0ZVByb2dyYW0iLCJhcnJheUxlbiIsInZhbHVlTGVuIiwiZmxhdHRlbiIsInNldFZhbHVlIiwiYXJyYXlzRXF1YWwiLCJzZXRBcnJheSIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWl2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwid2FybkNvdW50IiwiZHByIiwiZGVwdGgiLCJzdGVuY2lsIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicG93ZXJQcmVmZXJlbmNlIiwiYXV0b0NsZWFyIiwid2ViZ2wiLCJnZXRDb250ZXh0IiwiaXNXZWJnbDIiLCJaRVJPIiwiRlVOQ19BREQiLCJkZXB0aE1hc2siLCJwcmVtdWx0aXBseUFscGhhIiwiZmxpcFkiLCJ1bnBhY2tBbGlnbm1lbnQiLCJmcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiYWN0aXZlVGV4dHVyZVVuaXQiLCJleHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiZHJhd0J1ZmZlcnMiLCJwYXJhbWV0ZXJzIiwibWF4VGV4dHVyZVVuaXRzIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJtYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwic2V0Vmlld3BvcnQiLCJzZXRTY2lzc29yIiwic2Npc3NvciIsImJsZW5kRnVuY1NlcGFyYXRlIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJleHRlbnNpb24iLCJ3ZWJnbDJGdW5jIiwiZXh0RnVuYyIsInNvcnRPcGFxdWUiLCJ6RGVwdGgiLCJzb3J0VHJhbnNwYXJlbnQiLCJzb3J0VUkiLCJnZXRSZW5kZXJMaXN0IiwiZnJ1c3R1bUN1bGwiLCJyZW5kZXJMaXN0IiwidHJhdmVyc2UiLCJ2aXNpYmxlIiwib3BhcXVlIiwidWkiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsIlNURU5DSUxfQlVGRkVSX0JJVCIsImVtcHR5UGl4ZWwiLCJpc1Bvd2VyT2YyIiwiVEVYVFVSRV8yRCIsIlVOU0lHTkVEX0JZVEUiLCJSR0JBIiwiaW50ZXJuYWxGb3JtYXQiLCJ3cmFwUyIsIkNMQU1QX1RPX0VER0UiLCJ3cmFwVCIsIndyYXBSIiwiVEVYVFVSRV9DVUJFX01BUCIsIm1pbkZpbHRlciIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsIm1hZ0ZpbHRlciIsIlRFWFRVUkVfM0QiLCJhbmlzb3Ryb3B5Iiwic3RvcmUiLCJSRVBFQVQiLCJiaW5kVGV4dHVyZSIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsIlVOUEFDS19BTElHTk1FTlQiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfV1JBUF9SIiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwidGV4SW1hZ2UyRCIsIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCIsIlRFWFRVUkVfMkRfQVJSQVkiLCJ0ZXhJbWFnZTNEIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwiZ2VuZXJhdGVNaXBtYXAiLCJtYXRyaXhBdXRvVXBkYXRlIiwid29ybGRNYXRyaXhOZWVkc1VwZGF0ZSIsInF1YXRlcm5pb24iLCJRdWF0IiwiRXVsZXIiLCJ1cCIsIl90YXJnZXQiLCJmcm9tRXVsZXIiLCJmcm9tUXVhdGVybmlvbiIsIm5vdGlmeVBhcmVudCIsImFkZENoaWxkIiwibm90aWZ5Q2hpbGQiLCJ1cGRhdGVNYXRyaXgiLCJjb21wb3NlIiwiZGVjb21wb3NlIiwiaW52ZXJ0IiwiZ2V0Um90YXRpb24iLCJ3U2VncyIsImhTZWdzIiwibnVtIiwibnVtSW5kaWNlcyIsInV2IiwiVWludDMyQXJyYXkiLCJidWlsZFBsYW5lIiwidURpciIsInZEaXIiLCJpaSIsImlvIiwic2VnVyIsInNlZ0giLCJpeSIsIml4IiwidG1wTWF0NCIsIm9yZGVyIiwidHJpZ2dlclByb3BzIiwiUHJveHkiLCJzdWNjZXNzIiwicmVvcmRlciIsImZyb21Sb3RhdGlvbk1hdHJpeCIsInEiLCJpc0ludGVybmFsIiwibTAwIiwibTAxIiwibTAyIiwibTEwIiwibTExIiwibTEyIiwibTIwIiwibTIxIiwibTIyIiwibWEiLCJtYiIsImZyb21NYXRyaXg0IiwiZnJvbUJhc2lzIiwidmVjM2EiLCJ2ZWMzYiIsInZlYzNjIiwibTAzIiwibTEzIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwic2V0UG9zaXRpb24iLCJwb3MiLCJnZXRTY2FsaW5nIiwiZXllIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwiY29uanVnYXRlIiwicUEiLCJxQiIsImZyb21NYXRyaXgzIiwibWF0cml4MyIsImV1bGVyIiwiZnJvbUF4aXNBbmdsZSIsInNsZXJwIiwidmEiLCJ2YiIsInNxdWFyZWRMZW4iLCJuZWdhdGUiLCJjcm9zcyIsImVxdWFscyIsImFwcGx5TWF0cml4MyIsIm1hdDMiLCJtYXQ0Iiwic2NhbGVSb3RhdGVNYXRyaXg0IiwiYXBwbHlRdWF0ZXJuaW9uIiwic21vb3RoTGVycCIsImRlY2F5IiwiZHQiLCJjbG9uZSIsInRyYW5zZm9ybURpcmVjdGlvbiIsIm91dCIsImZyb21NYXQ0IiwiZnJvbVF1YXQiLCJ4MiIsInkyIiwiejIiLCJ4eCIsInl4IiwieXkiLCJ6eCIsInp5IiwienoiLCJ3eCIsInd5Iiwid3oiLCJ0cmFuc3Bvc2UiLCJhMDEiLCJhMDIiLCJhMDAiLCJhMTAiLCJhMjAiLCJiMDEiLCJiMTEiLCJiMjEiLCJkZXQiLCJiMDAiLCJiMDIiLCJiMTAiLCJiMTIiLCJiMjAiLCJiMjIiLCJub3JtYWxGcm9tTWF0NCIsImEwMyIsImEzMCIsImEzMSIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsInByb2plY3Rpb24iLCJzdWJ0cmFjdCIsIm11bHRpcGx5U2NhbGFyIiwiRVBTSUxPTiIsImIwIiwiYjEiLCJiMiIsImIzIiwiaHlwb3QiLCJtYXQiLCJzY2FsaW5nIiwiaXMxIiwiaXMyIiwiaXMzIiwic20xMSIsInNtMTIiLCJzbTEzIiwic20yMSIsInNtMjIiLCJzbTIzIiwic20zMSIsInNtMzIiLCJzbTMzIiwiUyIsInNyY01hdCIsImRzdFJvdGF0aW9uIiwiZHN0VHJhbnNsYXRpb24iLCJkc3RTY2FsZSIsInN4Iiwic3kiLCJzeiIsIl9tMSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsImRzdE1hdCIsInNyY1JvdGF0aW9uIiwic3JjVHJhbnNsYXRpb24iLCJzcmNTY2FsZSIsInRlIiwieHkiLCJ4eiIsInl6IiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsImZvdnkiLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsInRhcmdldFRvIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiejAiLCJ6MSIsIngwIiwieDEiLCJzZXRBeGlzQW5nbGUiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImEwIiwiYTMiLCJpbnZEb3QiLCJmcm9tTWF0MyIsImZSb290IiwiZlRyYWNlIiwiayIsImN4IiwiY3kiLCJjeiIsInNxdWFyZWRMZW5ndGgiLCJleHAiLCJ0cmFuc2Zvcm1NYXQ0Iiwic2NhbGVSb3RhdGVNYXQ0IiwidHJhbnNmb3JtTWF0MyIsInRyYW5zZm9ybVF1YXQiLCJxeCIsInF5IiwicXoiLCJ1dngiLCJ1dnkiLCJ1dnoiLCJ1dXZ4IiwidXV2eSIsInV1dnoiLCJ3MiIsInRlbXBBIiwidGVtcEIiLCJjb3NpbmUiLCJleGFjdEVxdWFscyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJodSIsImNodW5rSWQiLCJtaW5pQ3NzRiIsImhtckYiLCJnbG9iYWxUaGlzIiwiZG9uZSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJjaGFyc2V0IiwibmMiLCJvblNjcmlwdENvbXBsZXRlIiwiZG9uZUZucyIsImhlYWQiLCJubWQiLCJwYXRocyIsImN1cnJlbnRDaGlsZE1vZHVsZSIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwiYmxvY2tpbmdQcm9taXNlcyIsImJsb2NraW5nUHJvbWlzZXNXYWl0aW5nIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwicmVzdWx0cyIsInVuYmxvY2siLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwiaG1yQyIsInByb21pc2VzIiwiaW50ZXJuYWxBcHBseSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJCb29sZWFuIiwiZGlzcG9zZVByb21pc2UiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJwYXJlbnRzIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZmV0Y2hQcmlvcml0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3JlYXRlU3R5bGVzaGVldCIsImZ1bGxocmVmIiwib2xkVGFnIiwibGlua1RhZyIsInJlbCIsIm5vbmNlIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJmaW5kU3R5bGVzaGVldCIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFncyIsIm5ld1RhZ3MiLCJhcHBseUhhbmRsZXIiLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0IiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJqc29uIl0sInNvdXJjZVJvb3QiOiIifQ==