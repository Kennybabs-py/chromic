/*! For license information please see main.aaf48a1012e7db126004.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatechromic("main",{"./app/components/Canvas/Home/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/lodash/map.js"),r=s.n(i),h=s("./node_modules/ogl/src/core/Transform.js"),l=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./node_modules/gsap/index.js"),n=(s("./node_modules/normalize-wheel/index.js"),s("./app/components/Canvas/Home/Media.js"));class a{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.group=new h.Transform,this.sizes=s,this.galleryElement=document.querySelector(".home__gallery"),this.mediaElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1,direction:null},this.y={current:0,target:0,lerp:.1,direction:null},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new l.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=r()(this.mediaElements,((t,e)=>new n.default({element:t,index:e,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){r()(this.medias,(t=>{t.show()}))}hide(){r()(this.medias,(t=>{t.hide()}))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},r()(this.medias,(e=>{e.onResize(t,this.scroll)}))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){}onWheel({pixelY:t,pixelX:e}){this.x.target+=e,this.y.target+=t}update(){const t=this.x.target-this.x.current,e=this.y.target-this.y.current;this.speed.target=.001*Math.sqrt(t*t+e*e),this.speed.current=o.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=o.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=o.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,r()(this.medias,((t,e)=>{const s=t.mesh.scale.x/2,i=.6*this.sizes.width;if("left"===this.x.direction){t.mesh.position.x+s<-i&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-s>i&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}const r=t.mesh.scale.y/2,h=.6*this.sizes.height;if("top"===this.y.direction){t.mesh.position.y+r<-h&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y-r>h&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}}},(function(t){t.h=()=>"cd2bef7d87de06b5eda4"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,